
Debug/mcu_mdriver.elf:     file format elf32-littlearm
Debug/mcu_mdriver.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080024a9

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000054ec memsz 0x000054ec flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x080054ec align 2**16
         filesz 0x000000c4 memsz 0x00000d18 flags rw-
    LOAD off    0x00000d18 vaddr 0x20000d18 paddr 0x080055b0 align 2**16
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e4  080054e4  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  080054e4  080054e4  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054e4  080054e4  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080054ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  200000c4  080055b0  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d18  080055b0  00020d18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be41  00000000  00000000  000200f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006755  00000000  00000000  0003bf33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000927  00000000  00000000  00042688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  00042fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000260  00000000  00000000  00043ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a102  00000000  00000000  00043d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002fed  00000000  00000000  0004de4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  00050e37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001750  00000000  00000000  00050e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004362  00000000  00000000  000525c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000069b  00000000  00000000  00056926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ac  00000000  00000000  00056fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .stab         000000cc  00000000  00000000  00057070  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000001b9  00000000  00000000  0005713c  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08004714 l    d  .rodata	00000000 .rodata
080054e4 l    d  .ARM.extab	00000000 .ARM.extab
080054e4 l    d  .ARM	00000000 .ARM
080054e4 l    d  .preinit_array	00000000 .preinit_array
080054e4 l    d  .init_array	00000000 .init_array
080054e8 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200000c4 l    d  .bss	00000000 .bss
20000d18 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32f411xe.o
080024bc l       .text	00000000 LoopCopyDataInit
080024b6 l       .text	00000000 CopyDataInit
080024ce l       .text	00000000 LoopFillZerobss
080024ca l       .text	00000000 FillZerobss
080024f8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 crtstuff.c
080046fc l     O .text	00000000 __EH_FRAME_BEGIN__
08000a3c l     F .text	00000000 __do_global_dtors_aux
200000c4 l     O .bss	00000000 completed.1
080054e8 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000a60 l     F .text	00000000 frame_dummy
200000c8 l     O .bss	00000000 object.0
080054e4 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_mdriver.c
200000e4 l     O .bss	00000004 errors
20000000 l     O .data	0000005a tracestr
08000a7c l     F .text	00000032 stack_test
08000aae l     F .text	0000001a heap_test
08000ef0 l     F .text	00000424 read_trace
08001348 l     F .text	00000210 eval_mm_valid
08001558 l     F .text	000001d4 eval_mm_util
08001314 l     F .text	00000032 free_trace
0800172c l     F .text	00000268 printresults
08000d14 l     F .text	00000160 add_range
080019fc l     F .text	00000048 malloc_error
080019c0 l     F .text	0000003c unix_error
08004c44 l     O .rodata	0000000a __func__.0
08000e74 l     F .text	0000004a remove_range
08000ebe l     F .text	00000032 clear_ranges
08001994 l     F .text	0000002c app_error
00000000 l    df *ABS*	00000000 mcu_mlib.c
200000e8 l     O .bss	00000004 mem_start_brk
200000ec l     O .bss	00000004 mem_brk
00000000 l    df *ABS*	00000000 mcu_mm.c
08001b54 l     F .text	0000003c extend_heap
08004c50 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 mcu_timer.c
08001d74 l     F .text	00000034 __NVIC_EnableIRQ
08001da8 l     F .text	00000050 __NVIC_SetPriority
200000f0 l     O .bss	00000004 systime
00000000 l    df *ABS*	00000000 mcu.c
00000000 l    df *ABS*	00000000 mcu_request.c
08001f08 l     F .text	0000001c send
08001f24 l     F .text	0000001c receive
00000000 l    df *ABS*	00000000 uart.c
08001f80 l     F .text	00000054 uart_pin_setup
08002060 l     F .text	00000054 uart_enable
00000000 l    df *ABS*	00000000 uart_dma.c
080020c8 l     F .text	00000034 __NVIC_EnableIRQ
080020fc l     F .text	00000050 __NVIC_SetPriority
20000cfc l     O .bss	00000004 receiving
20000d00 l     O .bss	00000004 transmitting
0800214c l     F .text	00000058 uart_tx_setup
080021a4 l     F .text	00000068 uart_rx_setup
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
080025dc l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08002704 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003250 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strtol.c
080043a4 l     F .text	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 strtoul.c
080044ac l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20000d14 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000064 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
080054ec l       .fini_array	00000000 __fini_array_end
080054e8 l       .fini_array	00000000 __fini_array_start
080054e8 l       .init_array	00000000 __init_array_end
080054e4 l       .preinit_array	00000000 __preinit_array_end
080054e4 l       .init_array	00000000 __init_array_start
080054e4 l       .preinit_array	00000000 __preinit_array_start
080024f8  w    F .text	00000002 RTC_Alarm_IRQHandler
0800464c g     F .text	00000010 _malloc_usable_size_r
080024f8  w    F .text	00000002 EXTI2_IRQHandler
08003fe8 g     F .text	000000b4 _scanf_chars
08002278 g     F .text	00000058 uart_rx_start
0800462c g     F .text	00000020 _isatty_r
0800467c g     F .text	00000010 _getpid
08003440 g     F .text	00000024 _lseek_r
080024f8  w    F .text	00000002 DebugMon_Handler
080024f8  w    F .text	00000002 SPI4_IRQHandler
0800056c g     F .text	0000005a .hidden __floatdidf
0800437c g     F .text	00000024 _kill_r
080024f8  w    F .text	00000002 TIM1_CC_IRQHandler
08002aca g     F .text	00000024 __sseek
08003300 g     F .text	00000070 __sinit
080024f8  w    F .text	00000002 DMA2_Stream5_IRQHandler
08001f40 g     F .text	00000012 mem_req_setup
08002ef8 g     F .text	000000a4 __swbuf_r
080024f8  w    F .text	00000002 HardFault_Handler
080032a4 g     F .text	0000002c __sfmoreglue
080022e4 g     F .text	0000003c DMA1_Stream5_IRQHandler
08003570 g     F .text	0000000c __malloc_unlock
08002264 g     F .text	00000014 uart_tx_wait
00000400 g       *ABS*	00000000 _Min_Stack_Size
20000cf4 g     O .bss	00000004 output_offset
08002ee0 g     F .text	00000014 strerror
080024f8  w    F .text	00000002 SysTick_Handler
080024f8  w    F .text	00000002 PVD_IRQHandler
080024f8  w    F .text	00000002 SDIO_IRQHandler
08003530 g     F .text	00000034 memmove
080024f8  w    F .text	00000002 TAMP_STAMP_IRQHandler
080054ec g       *ABS*	00000000 _sidata
080024f8  w    F .text	00000002 PendSV_Handler
080024f8  w    F .text	00000002 NMI_Handler
080054e4 g       .ARM	00000000 __exidx_end
08001d14 g     F .text	0000002a mm_realloc
080024f8  w    F .text	00000002 EXTI3_IRQHandler
08002538 g     F .text	0000000c __errno
080024f8  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08004608 g     F .text	00000024 _fstat_r
20000d10 g     O .bss	00000004 errno
0800409c g     F .text	000001e8 _scanf_i
08002a8e g     F .text	00000004 __seofread
08004714 g       .text	00000000 _etext
200000c4 g       .bss	00000000 _sbss
080024f8  w    F .text	00000002 I2C3_ER_IRQHandler
08001ec8 g     F .text	0000000c loop
08001e60 g     F .text	0000000c get_time
080025b0 g     F .text	0000001c memcpy
080022d0 g     F .text	00000014 uart_rx_wait
200000e0 g     O .bss	00000004 verbose
08001c04 g     F .text	000000d8 mm_malloc
08003298 g     F .text	0000000c _cleanup_r
08003728 g     F .text	000001fc _svfprintf_r
080004f4 g     F .text	00000022 .hidden __floatsidf
080024f8  w    F .text	00000002 EXTI0_IRQHandler
080024f8  w    F .text	00000002 I2C2_EV_IRQHandler
080024f8  w    F .text	00000002 DMA1_Stream2_IRQHandler
080024f8  w    F .text	00000002 FPU_IRQHandler
08002b14 g     F .text	000003cc _strerror_r
2000005c g     O .data	00000004 SystemCoreClock
0800431a g     F .text	00000050 _raise_r
0800466c g     F .text	00000010 _fstat
080024fc g     F .text	0000003c __assert_func
080024f8  w    F .text	00000002 UsageFault_Handler
080024f8  w    F .text	00000002 DMA2_Stream2_IRQHandler
0800399e g     F .text	0000003a __ssrefill_r
080043a0 g     F .text	00000004 _getpid_r
200000c4 g       .bss	00000000 __bss_start__
080004d4 g     F .text	0000001e .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
080024f8  w    F .text	00000002 SPI1_IRQHandler
08000250 g     F .text	00000000 .hidden __aeabi_drsub
080029b4 g     F .text	00000020 _sbrk_r
08001f68 g     F .text	00000016 req_receive
08004284 g     F .text	00000024 _read_r
20000cf8 g     O .bss	00000004 cur_id
200008f4 g     O .bss	00000400 msg
080024f8  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08000518 g     F .text	00000042 .hidden __extendsfdf2
080039d8 g     F .text	000002f0 __ssvfscanf_r
0800081c g     F .text	000001d0 .hidden __aeabi_ddiv
0800025c g     F .text	00000276 .hidden __adddf3
080054e4 g       .ARM	00000000 __exidx_start
080024f8  w    F .text	00000002 DMA2_Stream3_IRQHandler
080005c8 g     F .text	00000254 .hidden __aeabi_dmul
0800468c g     F .text	00000010 _isatty
20000d0e g     O .bss	00000001 __lock___sinit_recursive_mutex
08004c98 g     O .rodata	00000004 _global_impure_ptr
08003614 g     F .text	0000005e _realloc_r
08002568 g     F .text	00000048 __libc_init_array
0800309c g     F .text	0000000e abort
080004d4 g     F .text	0000001e .hidden __floatunsidf
080046cc g     F .text	0000001c _sbrk
080024f8  w    F .text	00000002 USART6_IRQHandler
080046fc g     F .text	00000000 _init
08001d40 g     F .text	00000034 mm_finish
0800220c g     F .text	00000058 uart_tx_start
08001ed4 g     F .text	00000034 var_print
20000d18 g       .bss	00000000 _ebss
080024a8  w    F .text	00000038 Reset_Handler
080009ec g     F .text	0000004e .hidden __fixdfsi
08001a9c g     F .text	00000084 mem_sbrk
08001a44 g     F .text	00000058 mem_init
08001f52 g     F .text	00000016 req_send
20000d0c g     O .bss	00000001 __lock___malloc_recursive_mutex
080024f8  w    F .text	00000002 DMA2_Stream0_IRQHandler
08001e6c g     F .text	0000005c timer_init
08001fd4 g     F .text	00000028 led_on
08002544 g     F .text	00000024 fprintf
080024f8  w    F .text	00000002 TIM4_IRQHandler
0800025c g     F .text	00000276 .hidden __aeabi_dadd
08002af6 g     F .text	0000001e strcat
0800055c g     F .text	0000006a .hidden __aeabi_ul2d
08005344 g     O .rodata	00000020 __sf_fake_stderr
20000d18 g       ._user_heap_stack	00000000 end
080024f8  w    F .text	00000002 I2C1_EV_IRQHandler
0800343e g     F .text	00000002 __retarget_lock_release_recursive
08002320 g     F .text	0000002c DMA1_Stream6_IRQHandler
08003672 g     F .text	000000b4 __ssputs_r
080024f8  w    F .text	00000002 DMA1_Stream1_IRQHandler
08002732 g     F .text	00000024 __sfputs_r
080020b4 g     F .text	00000012 uart_init
080032d0 g     F .text	0000000c __sfp_lock_acquire
080001b0 g     F .text	00000000 memchr
20000d18 g       .bss	00000000 __bss_end__
08001b2c g     F .text	00000010 mem_heap_hi
0800357c g     F .text	00000098 _free_r
080024f8  w    F .text	00000002 TIM3_IRQHandler
080024f8  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
08003924 g     F .text	0000007a _sungetc_r
08000258 g     F .text	0000027a .hidden __aeabi_dsub
080024f8 g       .text	00000002 Default_Handler
08002ef4 g     F .text	00000004 _user_strerror
0800055c g     F .text	0000006a .hidden __floatundidf
080046ac g     F .text	00000010 _lseek
080024f8  w    F .text	00000002 EXTI15_10_IRQHandler
080024f8  w    F .text	00000002 ADC_IRQHandler
080024f8  w    F .text	00000002 DMA1_Stream7_IRQHandler
080024f8  w    F .text	00000002 SPI5_IRQHandler
08004590 g     F .text	00000004 _strtoul_r
080030ac g     F .text	00000020 _close_r
080004f4 g     F .text	00000022 .hidden __aeabi_i2d
080024f8  w    F .text	00000002 TIM5_IRQHandler
080024f8  w    F .text	00000002 DMA2_Stream7_IRQHandler
080024f8  w    F .text	00000002 I2C3_EV_IRQHandler
08002a14 g     F .text	00000058 sscanf
08002fc0 g     F .text	000000dc __swsetup_r
080024f8  w    F .text	00000002 EXTI9_5_IRQHandler
0800081c g     F .text	000001d0 .hidden __divdf3
08003370 g     F .text	0000008c __sfp
080024f8  w    F .text	00000002 RTC_WKUP_IRQHandler
080032f4 g     F .text	0000000c __sinit_lock_release
080005c8 g     F .text	00000254 .hidden __muldf3
08002a6c g     F .text	00000022 __sread
0800234c g     F .text	0000003c uart_dma_init
08001b90 g     F .text	00000074 mm_init
08003564 g     F .text	0000000c __malloc_lock
080031d8 g     F .text	00000078 _fflush_r
08001b3c g     F .text	00000018 mem_heapsize
08001cdc g     F .text	00000038 mm_free
080024f8  w    F .text	00000002 SPI2_IRQHandler
08005364 g     O .rodata	00000020 __sf_fake_stdin
0800343c g     F .text	00000002 __retarget_lock_acquire_recursive
080025cc g     F .text	00000010 memset
080024f8  w    F .text	00000002 MemManage_Handler
08000ac8 g     F .text	0000024c main
080024f8  w    F .text	00000002 DMA1_Stream0_IRQHandler
0800343a g     F .text	00000002 __retarget_lock_init_recursive
080024f8  w    F .text	00000002 SVC_Handler
08002aee g     F .text	00000008 __sclose
080044a8 g     F .text	00000004 _strtol_r
200000f4 g     O .bss	00000800 output_str
0800261c g     F .text	000000e8 _malloc_r
0800056c g     F .text	0000005a .hidden __aeabi_l2d
08004594 g     F .text	00000074 __submore
080024f8  w    F .text	00000002 EXTI4_IRQHandler
08002a14 g     F .text	00000058 siscanf
08002388 g     F .text	0000005c SystemInit
08004708 g     F .text	00000000 _fini
080029d4 g     F .text	00000040 sprintf
08002f9c g     F .text	00000024 _write_r
08001ffc g     F .text	00000028 led_off
08003cc8 g     F .text	000000da _printf_common
20000060 g     O .data	00000004 _impure_ptr
080030cc g     F .text	0000010c __sflush_r
08003728 g     F .text	000001fc _svfiprintf_r
080024f8  w    F .text	00000002 WWDG_IRQHandler
08001df8 g     F .text	00000068 TIM2_IRQHandler
08002024 g     F .text	0000003c led_init
080023e4 g     F .text	000000c4 set_sysclk_to_100
080024f8  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
080024f8  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
080039d8 g     F .text	000002f0 __ssvfiscanf_r
08003464 g     F .text	0000004c __swhatbuf_r
20020000 g       .isr_vector	00000000 _estack
080024f8  w    F .text	00000002 EXTI1_IRQHandler
080046e8 g     F .text	00000010 _write
200000c4 g       .data	00000000 _edata
08001b20 g     F .text	0000000c mem_heap_lo
080024f8  w    F .text	00000002 USART2_IRQHandler
08002a92 g     F .text	00000038 __swrite
08002544 g     F .text	00000024 fiprintf
08002758 g     F .text	0000025c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080033fc g     F .text	0000003e _fwalk_reent
080009ec g     F .text	0000004e .hidden __aeabi_d2iz
0800469c g     F .text	00000010 _kill
080024f8  w    F .text	00000002 I2C2_ER_IRQHandler
080032dc g     F .text	0000000c __sfp_lock_release
08005384 g     O .rodata	00000020 __sf_fake_stdout
080029d4 g     F .text	00000040 siprintf
080042a8 g     F .text	00000072 __sccl
080024f8  w    F .text	00000002 DMA2_Stream1_IRQHandler
080053e1 g     O .rodata	00000101 _ctype_
080046bc g     F .text	00000010 _read
080024f8  w    F .text	00000002 FLASH_IRQHandler
080046f8 g     F .text	00000002 _exit
080024f8  w    F .text	00000002 DMA2_Stream4_IRQHandler
080024f8  w    F .text	00000002 BusFault_Handler
080024f8  w    F .text	00000002 USART1_IRQHandler
080034b0 g     F .text	00000080 __smakebuf_r
080001a0 g     F .text	00000010 strlen
080024f8  w    F .text	00000002 OTG_FS_IRQHandler
08003da4 g     F .text	00000244 _printf_i
080024f8  w    F .text	00000002 SPI3_IRQHandler
080024f8  w    F .text	00000002 DMA1_Stream4_IRQHandler
20000d08 g     O .bss	00000004 __malloc_sbrk_start
080024f8  w    F .text	00000002 I2C1_ER_IRQHandler
08000518 g     F .text	00000042 .hidden __aeabi_f2d
20000d04 g     O .bss	00000004 __malloc_free_list
08000258 g     F .text	0000027a .hidden __subdf3
08002758 g     F .text	0000025c _vfprintf_r
080024f8  w    F .text	00000002 DMA2_Stream6_IRQHandler
080024f8  w    F .text	00000002 DMA1_Stream3_IRQHandler
20000d0d g     O .bss	00000001 __lock___sfp_recursive_mutex
0800465c g     F .text	00000010 _close
0800436c g     F .text	00000010 raise
080032e8 g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2iz>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f4:	d215      	bcs.n	8000a22 <__aeabi_d2iz+0x36>
 80009f6:	d511      	bpl.n	8000a1c <__aeabi_d2iz+0x30>
 80009f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d912      	bls.n	8000a28 <__aeabi_d2iz+0x3c>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a12:	fa23 f002 	lsr.w	r0, r3, r2
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d105      	bne.n	8000a34 <__aeabi_d2iz+0x48>
 8000a28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	bf08      	it	eq
 8000a2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__do_global_dtors_aux>:
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	4c05      	ldr	r4, [pc, #20]	; (8000a54 <__do_global_dtors_aux+0x18>)
 8000a40:	7823      	ldrb	r3, [r4, #0]
 8000a42:	b933      	cbnz	r3, 8000a52 <__do_global_dtors_aux+0x16>
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__do_global_dtors_aux+0x1c>)
 8000a46:	b113      	cbz	r3, 8000a4e <__do_global_dtors_aux+0x12>
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <__do_global_dtors_aux+0x20>)
 8000a4a:	f3af 8000 	nop.w
 8000a4e:	2301      	movs	r3, #1
 8000a50:	7023      	strb	r3, [r4, #0]
 8000a52:	bd10      	pop	{r4, pc}
 8000a54:	200000c4 	.word	0x200000c4
 8000a58:	00000000 	.word	0x00000000
 8000a5c:	080046fc 	.word	0x080046fc

08000a60 <frame_dummy>:
 8000a60:	b508      	push	{r3, lr}
 8000a62:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <frame_dummy+0x10>)
 8000a64:	b11b      	cbz	r3, 8000a6e <frame_dummy+0xe>
 8000a66:	4903      	ldr	r1, [pc, #12]	; (8000a74 <frame_dummy+0x14>)
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <frame_dummy+0x18>)
 8000a6a:	f3af 8000 	nop.w
 8000a6e:	bd08      	pop	{r3, pc}
 8000a70:	00000000 	.word	0x00000000
 8000a74:	200000c8 	.word	0x200000c8
 8000a78:	080046fc 	.word	0x080046fc

08000a7c <stack_test>:

// Test file string
static char tracestr[] = TESTSTRING;

// Test for stack overflow
static void stack_test(void) {
 8000a7c:	b500      	push	{lr}
 8000a7e:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8000a82:	b081      	sub	sp, #4
	char buffer_array[10*KB] = {0};
 8000a84:	f50d 6300 	add.w	r3, sp, #2048	; 0x800
 8000a88:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	3304      	adds	r3, #4
 8000a92:	f242 72fc 	movw	r2, #10236	; 0x27fc
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fd97 	bl	80025cc <memset>
	stack_test();
 8000a9e:	f7ff ffed 	bl	8000a7c <stack_test>
}
 8000aa2:	bf00      	nop
 8000aa4:	f50d 5d20 	add.w	sp, sp, #10240	; 0x2800
 8000aa8:	b001      	add	sp, #4
 8000aaa:	f85d fb04 	ldr.w	pc, [sp], #4

08000aae <heap_test>:

// Test for stack overflow
static void heap_test(void) {
 8000aae:	b508      	push	{r3, lr}
	while(1) {
		if(!mm_malloc(10*KB)){
 8000ab0:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8000ab4:	f001 f8a6 	bl	8001c04 <mm_malloc>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f8      	bne.n	8000ab0 <heap_test+0x2>
			mm_finish();
 8000abe:	f001 f93f 	bl	8001d40 <mm_finish>
			loop();
 8000ac2:	f001 fa01 	bl	8001ec8 <loop>
		if(!mm_malloc(10*KB)){
 8000ac6:	e7f3      	b.n	8000ab0 <heap_test+0x2>

08000ac8 <main>:

/**************
 * Main routine
 **************/
int main(void)
{
 8000ac8:	b500      	push	{lr}
 8000aca:	b0a3      	sub	sp, #140	; 0x8c
    int i=0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	9320      	str	r3, [sp, #128]	; 0x80
    int num_tracefiles = 0;    /* the number of traces in that array */
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	931f      	str	r3, [sp, #124]	; 0x7c
    trace_t *trace = NULL;     /* stores a single trace file in memory */
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	931e      	str	r3, [sp, #120]	; 0x78
    range_t *ranges = NULL;    /* keeps track of block extents for one trace */
 8000ad8:	2300      	movs	r3, #0
 8000ada:	9308      	str	r3, [sp, #32]
    //speed_t speed_params;      /* input parameters to the xx_speed routines */ 
	
	// Test start and end time
	size_t start_time, end_time;

    int autograder = 0;  /* If set, emit summary info for autograder (-g) */
 8000adc:	2300      	movs	r3, #0
 8000ade:	931d      	str	r3, [sp, #116]	; 0x74
	int p1_int;
	int p2_int;
	int perfindex_int;

    /* Initialize the simulated memory system in memlib.c */
	mm_init();
 8000ae0:	f001 f856 	bl	8001b90 <mm_init>
	timer_init();
 8000ae4:	f001 f9c2 	bl	8001e6c <timer_init>
	start_time = get_time();
 8000ae8:	f001 f9ba 	bl	8001e60 <get_time>
 8000aec:	901c      	str	r0, [sp, #112]	; 0x70

    /* Evaluate student's mm malloc package using the K-best scheme */
	trace = read_trace();
 8000aee:	f000 f9ff 	bl	8000ef0 <read_trace>
 8000af2:	901e      	str	r0, [sp, #120]	; 0x78
	mm_stats.ops = trace->num_ops;
 8000af4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fcfb 	bl	80004f4 <__aeabi_i2d>
 8000afe:	4602      	mov	r2, r0
 8000b00:	460b      	mov	r3, r1
 8000b02:	e9cd 2300 	strd	r2, r3, [sp]
	if (verbose > 1) {
 8000b06:	4b75      	ldr	r3, [pc, #468]	; (8000cdc <main+0x214>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	dd06      	ble.n	8000b1c <main+0x54>
	    sprintf(msg, "Checking mm_malloc for correctness, ");
 8000b0e:	4974      	ldr	r1, [pc, #464]	; (8000ce0 <main+0x218>)
 8000b10:	4874      	ldr	r0, [pc, #464]	; (8000ce4 <main+0x21c>)
 8000b12:	f001 ff5f 	bl	80029d4 <siprintf>
		var_print(msg);
 8000b16:	4873      	ldr	r0, [pc, #460]	; (8000ce4 <main+0x21c>)
 8000b18:	f001 f9dc 	bl	8001ed4 <var_print>
	}
	mm_stats.valid = eval_mm_valid(trace, i, &ranges);
 8000b1c:	ab08      	add	r3, sp, #32
 8000b1e:	461a      	mov	r2, r3
 8000b20:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b22:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b24:	f000 fc10 	bl	8001348 <eval_mm_valid>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	9302      	str	r3, [sp, #8]
	if (mm_stats.valid) {
 8000b2c:	9b02      	ldr	r3, [sp, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d035      	beq.n	8000b9e <main+0xd6>
	    if (verbose > 1) {
 8000b32:	4b6a      	ldr	r3, [pc, #424]	; (8000cdc <main+0x214>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	dd06      	ble.n	8000b48 <main+0x80>
			sprintf(msg, "efficiency, ");
 8000b3a:	496b      	ldr	r1, [pc, #428]	; (8000ce8 <main+0x220>)
 8000b3c:	4869      	ldr	r0, [pc, #420]	; (8000ce4 <main+0x21c>)
 8000b3e:	f001 ff49 	bl	80029d4 <siprintf>
			var_print(msg);
 8000b42:	4868      	ldr	r0, [pc, #416]	; (8000ce4 <main+0x21c>)
 8000b44:	f001 f9c6 	bl	8001ed4 <var_print>
		}
	    mm_stats.util = eval_mm_util(trace, i, &ranges);
 8000b48:	ab08      	add	r3, sp, #32
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b4e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b50:	f000 fd02 	bl	8001558 <eval_mm_util>
 8000b54:	4602      	mov	r2, r0
 8000b56:	460b      	mov	r3, r1
 8000b58:	e9cd 2306 	strd	r2, r3, [sp, #24]
	    if (verbose > 1) {
 8000b5c:	4b5f      	ldr	r3, [pc, #380]	; (8000cdc <main+0x214>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	dd06      	ble.n	8000b72 <main+0xaa>
			sprintf(msg, "and performance.\n");
 8000b64:	4961      	ldr	r1, [pc, #388]	; (8000cec <main+0x224>)
 8000b66:	485f      	ldr	r0, [pc, #380]	; (8000ce4 <main+0x21c>)
 8000b68:	f001 ff34 	bl	80029d4 <siprintf>
			var_print(msg);
 8000b6c:	485d      	ldr	r0, [pc, #372]	; (8000ce4 <main+0x21c>)
 8000b6e:	f001 f9b1 	bl	8001ed4 <var_print>
		}
	    //mm_stats.secs = fsecs(eval_mm_speed, &speed_params);
		end_time = get_time();
 8000b72:	f001 f975 	bl	8001e60 <get_time>
 8000b76:	901b      	str	r0, [sp, #108]	; 0x6c
		mm_stats.secs = (end_time-start_time)/1000.0f;
 8000b78:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000b7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	ee07 3a90 	vmov	s15, r3
 8000b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b86:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000cf0 <main+0x228>
 8000b8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b8e:	ee16 0a90 	vmov	r0, s13
 8000b92:	f7ff fcc1 	bl	8000518 <__aeabi_f2d>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
	}
	free_trace(trace);
 8000b9e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000ba0:	f000 fbb8 	bl	8001314 <free_trace>

    /* Display the mm results in a compact table */
    if (verbose) {
 8000ba4:	4b4d      	ldr	r3, [pc, #308]	; (8000cdc <main+0x214>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d012      	beq.n	8000bd2 <main+0x10a>
		sprintf(msg, "\nResults for mm malloc:\n");
 8000bac:	4951      	ldr	r1, [pc, #324]	; (8000cf4 <main+0x22c>)
 8000bae:	484d      	ldr	r0, [pc, #308]	; (8000ce4 <main+0x21c>)
 8000bb0:	f001 ff10 	bl	80029d4 <siprintf>
		var_print(msg);
 8000bb4:	484b      	ldr	r0, [pc, #300]	; (8000ce4 <main+0x21c>)
 8000bb6:	f001 f98d 	bl	8001ed4 <var_print>
		printresults(num_tracefiles, &mm_stats);
 8000bba:	466b      	mov	r3, sp
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8000bc0:	f000 fdb4 	bl	800172c <printresults>
		sprintf(msg, "\n");
 8000bc4:	494c      	ldr	r1, [pc, #304]	; (8000cf8 <main+0x230>)
 8000bc6:	4847      	ldr	r0, [pc, #284]	; (8000ce4 <main+0x21c>)
 8000bc8:	f001 ff04 	bl	80029d4 <siprintf>
		var_print(msg);
 8000bcc:	4845      	ldr	r0, [pc, #276]	; (8000ce4 <main+0x21c>)
 8000bce:	f001 f981 	bl	8001ed4 <var_print>
    }

    /* 
     * Accumulate the aggregate statistics for the student's mm package 
     */
    secs = 0;
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	f04f 0300 	mov.w	r3, #0
 8000bda:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    ops = 0;
 8000bde:	f04f 0200 	mov.w	r2, #0
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    util = 0;
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    numcorrect = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9321      	str	r3, [sp, #132]	; 0x84
	secs = mm_stats.secs;
 8000bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000bfe:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	ops = mm_stats.ops;
 8000c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000c06:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	util = mm_stats.util;
 8000c0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000c0e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	if (mm_stats.valid)
 8000c12:	9b02      	ldr	r3, [sp, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <main+0x156>
	    numcorrect++;
 8000c18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	9321      	str	r3, [sp, #132]	; 0x84
    avg_mm_util = util;
 8000c1e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8000c22:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48

    /* 
     * Compute and print the performance index 
     */
    if (errors == 0) {
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <main+0x234>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d130      	bne.n	8000c90 <main+0x1c8>
	avg_mm_throughput = ops/secs;
 8000c2e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8000c32:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8000c36:	f7ff fdf1 	bl	800081c <__aeabi_ddiv>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40

	p1 = avg_mm_util;
 8000c42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000c46:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	p2 = avg_mm_throughput;
 8000c4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000c4e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30

	p1_int = p1*100;
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <main+0x238>)
 8000c58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000c5c:	f7ff fcb4 	bl	80005c8 <__aeabi_dmul>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4610      	mov	r0, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	f7ff fec0 	bl	80009ec <__aeabi_d2iz>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	930b      	str	r3, [sp, #44]	; 0x2c
	p2_int = (int)p2;
 8000c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000c74:	f7ff feba 	bl	80009ec <__aeabi_d2iz>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	930a      	str	r3, [sp, #40]	; 0x28

	sprintf(msg, "Utilization: %d%%. Throughput: %d\n",
 8000c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000c80:	4920      	ldr	r1, [pc, #128]	; (8000d04 <main+0x23c>)
 8000c82:	4818      	ldr	r0, [pc, #96]	; (8000ce4 <main+0x21c>)
 8000c84:	f001 fea6 	bl	80029d4 <siprintf>
	       p1_int, 
	       p2_int);
	
	var_print(msg);
 8000c88:	4816      	ldr	r0, [pc, #88]	; (8000ce4 <main+0x21c>)
 8000c8a:	f001 f923 	bl	8001ed4 <var_print>
 8000c8e:	e009      	b.n	8000ca4 <main+0x1dc>
    }
    else { /* There were errors */
	sprintf(msg, "Terminated with %d errors\n", errors);
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <main+0x234>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	491c      	ldr	r1, [pc, #112]	; (8000d08 <main+0x240>)
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <main+0x21c>)
 8000c9a:	f001 fe9b 	bl	80029d4 <siprintf>
	var_print(msg);
 8000c9e:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <main+0x21c>)
 8000ca0:	f001 f918 	bl	8001ed4 <var_print>
    }

    if (autograder) {
 8000ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00f      	beq.n	8000cca <main+0x202>
	sprintf(msg, "correct:%d\n", numcorrect);
 8000caa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8000cac:	4917      	ldr	r1, [pc, #92]	; (8000d0c <main+0x244>)
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <main+0x21c>)
 8000cb0:	f001 fe90 	bl	80029d4 <siprintf>
	var_print(msg);
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <main+0x21c>)
 8000cb6:	f001 f90d 	bl	8001ed4 <var_print>
	sprintf(msg, "perfidx:%d\n", perfindex_int);
 8000cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cbc:	4914      	ldr	r1, [pc, #80]	; (8000d10 <main+0x248>)
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <main+0x21c>)
 8000cc0:	f001 fe88 	bl	80029d4 <siprintf>
	var_print(msg);
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <main+0x21c>)
 8000cc6:	f001 f905 	bl	8001ed4 <var_print>
    }

	mm_finish();
 8000cca:	f001 f839 	bl	8001d40 <mm_finish>

	loop();
 8000cce:	f001 f8fb 	bl	8001ec8 <loop>
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	b023      	add	sp, #140	; 0x8c
 8000cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cdc:	200000e0 	.word	0x200000e0
 8000ce0:	08004714 	.word	0x08004714
 8000ce4:	200008f4 	.word	0x200008f4
 8000ce8:	0800473c 	.word	0x0800473c
 8000cec:	0800474c 	.word	0x0800474c
 8000cf0:	447a0000 	.word	0x447a0000
 8000cf4:	08004760 	.word	0x08004760
 8000cf8:	0800477c 	.word	0x0800477c
 8000cfc:	200000e4 	.word	0x200000e4
 8000d00:	40590000 	.word	0x40590000
 8000d04:	08004780 	.word	0x08004780
 8000d08:	080047a4 	.word	0x080047a4
 8000d0c:	080047c0 	.word	0x080047c0
 8000d10:	080047cc 	.word	0x080047cc

08000d14 <add_range>:
 *     size bytes at addr lo. After checking the block for correctness,
 *     we create a range struct for this block and add it to the range list. 
 */
static int add_range(range_t **ranges, char *lo, int size, 
		     int tracenum, int opnum)
{
 8000d14:	b510      	push	{r4, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	9005      	str	r0, [sp, #20]
 8000d1a:	9104      	str	r1, [sp, #16]
 8000d1c:	9203      	str	r2, [sp, #12]
 8000d1e:	9302      	str	r3, [sp, #8]
    char *hi = lo + size - 1;
 8000d20:	9b03      	ldr	r3, [sp, #12]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	9a04      	ldr	r2, [sp, #16]
 8000d26:	4413      	add	r3, r2
 8000d28:	9306      	str	r3, [sp, #24]
    range_t *p;

    assert(size > 0);
 8000d2a:	9b03      	ldr	r3, [sp, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dc06      	bgt.n	8000d3e <add_range+0x2a>
 8000d30:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <add_range+0x140>)
 8000d32:	4a49      	ldr	r2, [pc, #292]	; (8000e58 <add_range+0x144>)
 8000d34:	f240 1119 	movw	r1, #281	; 0x119
 8000d38:	4848      	ldr	r0, [pc, #288]	; (8000e5c <add_range+0x148>)
 8000d3a:	f001 fbdf 	bl	80024fc <__assert_func>

    /* Payload addresses must be ALIGNMENT-byte aligned */
    if (!IS_ALIGNED(lo)) {
 8000d3e:	9b04      	ldr	r3, [sp, #16]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00c      	beq.n	8000d62 <add_range+0x4e>
	sprintf(msg, "Payload address (%p) not aligned to %d bytes", 
 8000d48:	2308      	movs	r3, #8
 8000d4a:	9a04      	ldr	r2, [sp, #16]
 8000d4c:	4944      	ldr	r1, [pc, #272]	; (8000e60 <add_range+0x14c>)
 8000d4e:	4845      	ldr	r0, [pc, #276]	; (8000e64 <add_range+0x150>)
 8000d50:	f001 fe40 	bl	80029d4 <siprintf>
		lo, ALIGNMENT);
        malloc_error(tracenum, opnum, msg);
 8000d54:	4a43      	ldr	r2, [pc, #268]	; (8000e64 <add_range+0x150>)
 8000d56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d58:	9802      	ldr	r0, [sp, #8]
 8000d5a:	f000 fe4f 	bl	80019fc <malloc_error>
        return 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e075      	b.n	8000e4e <add_range+0x13a>
    }

    /* The payload must lie within the extent of the heap */
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d62:	f000 fedd 	bl	8001b20 <mem_heap_lo>
 8000d66:	4602      	mov	r2, r0
 8000d68:	9b04      	ldr	r3, [sp, #16]
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d311      	bcc.n	8000d92 <add_range+0x7e>
 8000d6e:	f000 fedd 	bl	8001b2c <mem_heap_hi>
 8000d72:	4602      	mov	r2, r0
 8000d74:	9b04      	ldr	r3, [sp, #16]
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d80b      	bhi.n	8000d92 <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d7a:	f000 fed1 	bl	8001b20 <mem_heap_lo>
 8000d7e:	4602      	mov	r2, r0
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d80:	9b06      	ldr	r3, [sp, #24]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d305      	bcc.n	8000d92 <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d86:	f000 fed1 	bl	8001b2c <mem_heap_hi>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	9b06      	ldr	r3, [sp, #24]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d914      	bls.n	8000dbc <add_range+0xa8>
	sprintf(msg, "Payload (%p:%p) lies outside heap (%p:%p)",
 8000d92:	f000 fec5 	bl	8001b20 <mem_heap_lo>
 8000d96:	4604      	mov	r4, r0
 8000d98:	f000 fec8 	bl	8001b2c <mem_heap_hi>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	9400      	str	r4, [sp, #0]
 8000da2:	9b06      	ldr	r3, [sp, #24]
 8000da4:	9a04      	ldr	r2, [sp, #16]
 8000da6:	4930      	ldr	r1, [pc, #192]	; (8000e68 <add_range+0x154>)
 8000da8:	482e      	ldr	r0, [pc, #184]	; (8000e64 <add_range+0x150>)
 8000daa:	f001 fe13 	bl	80029d4 <siprintf>
		lo, hi, mem_heap_lo(), mem_heap_hi());
	malloc_error(tracenum, opnum, msg);
 8000dae:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <add_range+0x150>)
 8000db0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000db2:	9802      	ldr	r0, [sp, #8]
 8000db4:	f000 fe22 	bl	80019fc <malloc_error>
        return 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	e048      	b.n	8000e4e <add_range+0x13a>
    }

    /* The payload must not overlap any other payloads */
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000dbc:	9b05      	ldr	r3, [sp, #20]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	9307      	str	r3, [sp, #28]
 8000dc2:	e029      	b.n	8000e18 <add_range+0x104>
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000dc4:	9b07      	ldr	r3, [sp, #28]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	9a04      	ldr	r2, [sp, #16]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d304      	bcc.n	8000dd8 <add_range+0xc4>
 8000dce:	9b07      	ldr	r3, [sp, #28]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	9a04      	ldr	r2, [sp, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d909      	bls.n	8000dec <add_range+0xd8>
            (hi >= p->lo && hi <= p->hi)) {
 8000dd8:	9b07      	ldr	r3, [sp, #28]
 8000dda:	681b      	ldr	r3, [r3, #0]
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000ddc:	9a06      	ldr	r2, [sp, #24]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d317      	bcc.n	8000e12 <add_range+0xfe>
            (hi >= p->lo && hi <= p->hi)) {
 8000de2:	9b07      	ldr	r3, [sp, #28]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	9a06      	ldr	r2, [sp, #24]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d812      	bhi.n	8000e12 <add_range+0xfe>
	    sprintf(msg, "Payload (%p:%p) overlaps another payload (%p:%p)\n",
 8000dec:	9b07      	ldr	r3, [sp, #28]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	9a07      	ldr	r2, [sp, #28]
 8000df2:	6852      	ldr	r2, [r2, #4]
 8000df4:	9201      	str	r2, [sp, #4]
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	9b06      	ldr	r3, [sp, #24]
 8000dfa:	9a04      	ldr	r2, [sp, #16]
 8000dfc:	491b      	ldr	r1, [pc, #108]	; (8000e6c <add_range+0x158>)
 8000dfe:	4819      	ldr	r0, [pc, #100]	; (8000e64 <add_range+0x150>)
 8000e00:	f001 fde8 	bl	80029d4 <siprintf>
		    lo, hi, p->lo, p->hi);
	    malloc_error(tracenum, opnum, msg);
 8000e04:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <add_range+0x150>)
 8000e06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000e08:	9802      	ldr	r0, [sp, #8]
 8000e0a:	f000 fdf7 	bl	80019fc <malloc_error>
	    return 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e01d      	b.n	8000e4e <add_range+0x13a>
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000e12:	9b07      	ldr	r3, [sp, #28]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	9307      	str	r3, [sp, #28]
 8000e18:	9b07      	ldr	r3, [sp, #28]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1d2      	bne.n	8000dc4 <add_range+0xb0>

    /* 
     * Everything looks OK, so remember the extent of this block 
     * by creating a range struct and adding it the range list.
     */
    if ((p = (range_t *)mm_malloc(sizeof(range_t))) == NULL)
 8000e1e:	200c      	movs	r0, #12
 8000e20:	f000 fef0 	bl	8001c04 <mm_malloc>
 8000e24:	9007      	str	r0, [sp, #28]
 8000e26:	9b07      	ldr	r3, [sp, #28]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <add_range+0x11e>
	unix_error("malloc error in add_range");
 8000e2c:	4810      	ldr	r0, [pc, #64]	; (8000e70 <add_range+0x15c>)
 8000e2e:	f000 fdc7 	bl	80019c0 <unix_error>
    p->next = *ranges;
 8000e32:	9b05      	ldr	r3, [sp, #20]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	9b07      	ldr	r3, [sp, #28]
 8000e38:	609a      	str	r2, [r3, #8]
    p->lo = lo;
 8000e3a:	9b07      	ldr	r3, [sp, #28]
 8000e3c:	9a04      	ldr	r2, [sp, #16]
 8000e3e:	601a      	str	r2, [r3, #0]
    p->hi = hi;
 8000e40:	9b07      	ldr	r3, [sp, #28]
 8000e42:	9a06      	ldr	r2, [sp, #24]
 8000e44:	605a      	str	r2, [r3, #4]
    *ranges = p;
 8000e46:	9b05      	ldr	r3, [sp, #20]
 8000e48:	9a07      	ldr	r2, [sp, #28]
 8000e4a:	601a      	str	r2, [r3, #0]
    return 1;
 8000e4c:	2301      	movs	r3, #1
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	b008      	add	sp, #32
 8000e52:	bd10      	pop	{r4, pc}
 8000e54:	080047d8 	.word	0x080047d8
 8000e58:	08004c44 	.word	0x08004c44
 8000e5c:	080047e4 	.word	0x080047e4
 8000e60:	080047fc 	.word	0x080047fc
 8000e64:	200008f4 	.word	0x200008f4
 8000e68:	0800482c 	.word	0x0800482c
 8000e6c:	08004858 	.word	0x08004858
 8000e70:	0800488c 	.word	0x0800488c

08000e74 <remove_range>:

/* 
 * remove_range - Free the range record of block whose payload starts at lo 
 */
static void remove_range(range_t **ranges, char *lo)
{
 8000e74:	b500      	push	{lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	9001      	str	r0, [sp, #4]
 8000e7a:	9100      	str	r1, [sp, #0]
    range_t *p;
    range_t **prevpp = ranges;
 8000e7c:	9b01      	ldr	r3, [sp, #4]
 8000e7e:	9302      	str	r3, [sp, #8]

    for (p = *ranges;  p != NULL; p = p->next) {
 8000e80:	9b01      	ldr	r3, [sp, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	9303      	str	r3, [sp, #12]
 8000e86:	e012      	b.n	8000eae <remove_range+0x3a>
        if (p->lo == lo) {
 8000e88:	9b03      	ldr	r3, [sp, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	9a00      	ldr	r2, [sp, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d107      	bne.n	8000ea2 <remove_range+0x2e>
	    *prevpp = p->next;
 8000e92:	9b03      	ldr	r3, [sp, #12]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	9b02      	ldr	r3, [sp, #8]
 8000e98:	601a      	str	r2, [r3, #0]
            mm_free(p);
 8000e9a:	9803      	ldr	r0, [sp, #12]
 8000e9c:	f000 ff1e 	bl	8001cdc <mm_free>
            break;
 8000ea0:	e009      	b.n	8000eb6 <remove_range+0x42>
        }
        prevpp = &(p->next);
 8000ea2:	9b03      	ldr	r3, [sp, #12]
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	9302      	str	r3, [sp, #8]
    for (p = *ranges;  p != NULL; p = p->next) {
 8000ea8:	9b03      	ldr	r3, [sp, #12]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	9303      	str	r3, [sp, #12]
 8000eae:	9b03      	ldr	r3, [sp, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e9      	bne.n	8000e88 <remove_range+0x14>
    }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	b005      	add	sp, #20
 8000eba:	f85d fb04 	ldr.w	pc, [sp], #4

08000ebe <clear_ranges>:

/*
 * clear_ranges - free all of the range records for a trace 
 */
static void clear_ranges(range_t **ranges)
{
 8000ebe:	b500      	push	{lr}
 8000ec0:	b085      	sub	sp, #20
 8000ec2:	9001      	str	r0, [sp, #4]
    range_t *p;
    range_t *pnext;

    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ec4:	9b01      	ldr	r3, [sp, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	e007      	b.n	8000edc <clear_ranges+0x1e>
        pnext = p->next;
 8000ecc:	9b03      	ldr	r3, [sp, #12]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	9302      	str	r3, [sp, #8]
        mm_free(p);
 8000ed2:	9803      	ldr	r0, [sp, #12]
 8000ed4:	f000 ff02 	bl	8001cdc <mm_free>
    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ed8:	9b02      	ldr	r3, [sp, #8]
 8000eda:	9303      	str	r3, [sp, #12]
 8000edc:	9b03      	ldr	r3, [sp, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f4      	bne.n	8000ecc <clear_ranges+0xe>
    }
    *ranges = NULL;
 8000ee2:	9b01      	ldr	r3, [sp, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	b005      	add	sp, #20
 8000eec:	f85d fb04 	ldr.w	pc, [sp], #4

08000ef0 <read_trace>:

/*
 * read_trace - read a trace file and store it in memory
 */
static trace_t *read_trace()
{
 8000ef0:	b500      	push	{lr}
 8000ef2:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
    trace_t *trace;
    char type[MAXLINE];
    char path[MAXLINE];
    unsigned index, size;
    unsigned max_index = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
    unsigned op_index;
	char * scanptr = tracestr;
 8000efc:	4bc4      	ldr	r3, [pc, #784]	; (8001210 <read_trace+0x320>)
 8000efe:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
	int bytes_scanned = 0;
 8000f02:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f06:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]

    /* Allocate the trace record */
    if ((trace = (trace_t *) mm_malloc(sizeof(trace_t))) == NULL)
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f000 fe78 	bl	8001c04 <mm_malloc>
 8000f14:	f8cd 0818 	str.w	r0, [sp, #2072]	; 0x818
 8000f18:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <read_trace+0x36>
	unix_error("malloc 1 failed in read_trance");
 8000f20:	48bc      	ldr	r0, [pc, #752]	; (8001214 <read_trace+0x324>)
 8000f22:	f000 fd4d 	bl	80019c0 <unix_error>
    /* Read the trace file header */
    //if ((tracefile = fmemopen(tracestr, strlen(tracestr), "r")) == NULL) {
	//sprintf(msg, "Could not open %s in read_trace", path);
	//unix_error(msg);
    //}
    sscanf(scanptr, "%d%n", &(trace->sugg_heapsize), &bytes_scanned); /* not used */
 8000f26:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
 8000f2a:	ab03      	add	r3, sp, #12
 8000f2c:	49ba      	ldr	r1, [pc, #744]	; (8001218 <read_trace+0x328>)
 8000f2e:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f32:	f001 fd6f 	bl	8002a14 <siscanf>
	scanptr += bytes_scanned;
 8000f36:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f3a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f46:	4413      	add	r3, r2
 8000f48:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ids), &bytes_scanned);     
 8000f4c:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f50:	1d1a      	adds	r2, r3, #4
 8000f52:	ab03      	add	r3, sp, #12
 8000f54:	49b0      	ldr	r1, [pc, #704]	; (8001218 <read_trace+0x328>)
 8000f56:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f5a:	f001 fd5b 	bl	8002a14 <siscanf>
	scanptr += bytes_scanned;
 8000f5e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f62:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f6e:	4413      	add	r3, r2
 8000f70:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ops), &bytes_scanned);     
 8000f74:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f78:	f103 0208 	add.w	r2, r3, #8
 8000f7c:	ab03      	add	r3, sp, #12
 8000f7e:	49a6      	ldr	r1, [pc, #664]	; (8001218 <read_trace+0x328>)
 8000f80:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f84:	f001 fd46 	bl	8002a14 <siscanf>
	scanptr += bytes_scanned;
 8000f88:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f8c:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f98:	4413      	add	r3, r2
 8000f9a:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->weight), &bytes_scanned);        /* not used */
 8000f9e:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fa2:	f103 020c 	add.w	r2, r3, #12
 8000fa6:	ab03      	add	r3, sp, #12
 8000fa8:	499b      	ldr	r1, [pc, #620]	; (8001218 <read_trace+0x328>)
 8000faa:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000fae:	f001 fd31 	bl	8002a14 <siscanf>
	scanptr += bytes_scanned;
 8000fb2:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000fb6:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    
    /* We'll store each request line in the trace in this array */
    if ((trace->ops = 
	 (traceop_t *)mm_malloc(trace->num_ops * sizeof(traceop_t))) == NULL)
 8000fc8:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fe13 	bl	8001c04 <mm_malloc>
 8000fde:	4602      	mov	r2, r0
    if ((trace->ops = 
 8000fe0:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <read_trace+0x106>
	unix_error("malloc 2 failed in read_trace");
 8000ff0:	488a      	ldr	r0, [pc, #552]	; (800121c <read_trace+0x32c>)
 8000ff2:	f000 fce5 	bl	80019c0 <unix_error>

    /* We'll keep an array of pointers to the allocated blocks here... */
    if ((trace->blocks = 
	 (char **)mm_malloc(trace->num_ids * sizeof(char *))) == NULL)
 8000ff6:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fe00 	bl	8001c04 <mm_malloc>
 8001004:	4602      	mov	r2, r0
    if ((trace->blocks = 
 8001006:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <read_trace+0x12c>
	unix_error("malloc 3 failed in read_trace");
 8001016:	4882      	ldr	r0, [pc, #520]	; (8001220 <read_trace+0x330>)
 8001018:	f000 fcd2 	bl	80019c0 <unix_error>

    /* ... along with the corresponding byte sizes of each block */
    if ((trace->block_sizes = 
	 (size_t *)mm_malloc(trace->num_ids * sizeof(size_t))) == NULL)
 800101c:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fded 	bl	8001c04 <mm_malloc>
 800102a:	4602      	mov	r2, r0
    if ((trace->block_sizes = 
 800102c:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001030:	619a      	str	r2, [r3, #24]
 8001032:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <read_trace+0x152>
	unix_error("malloc 4 failed in read_trace");
 800103c:	4879      	ldr	r0, [pc, #484]	; (8001224 <read_trace+0x334>)
 800103e:	f000 fcbf 	bl	80019c0 <unix_error>
    
    /* read every request line in the trace file */
    index = 0;
 8001042:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001046:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
    op_index = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 8001054:	e141      	b.n	80012da <read_trace+0x3ea>
		scanptr += bytes_scanned;
 8001056:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800105a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8001066:	4413      	add	r3, r2
 8001068:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
		switch(type[0]) {
 800106c:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001070:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3b61      	subs	r3, #97	; 0x61
 8001078:	2b12      	cmp	r3, #18
 800107a:	f200 810d 	bhi.w	8001298 <read_trace+0x3a8>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <read_trace+0x194>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	080010d1 	.word	0x080010d1
 8001088:	08001299 	.word	0x08001299
 800108c:	08001299 	.word	0x08001299
 8001090:	08001299 	.word	0x08001299
 8001094:	08001299 	.word	0x08001299
 8001098:	0800122d 	.word	0x0800122d
 800109c:	08001299 	.word	0x08001299
 80010a0:	08001293 	.word	0x08001293
 80010a4:	08001299 	.word	0x08001299
 80010a8:	08001299 	.word	0x08001299
 80010ac:	08001299 	.word	0x08001299
 80010b0:	08001299 	.word	0x08001299
 80010b4:	08001299 	.word	0x08001299
 80010b8:	08001299 	.word	0x08001299
 80010bc:	08001299 	.word	0x08001299
 80010c0:	08001299 	.word	0x08001299
 80010c4:	08001299 	.word	0x08001299
 80010c8:	08001171 	.word	0x08001171
 80010cc:	0800128d 	.word	0x0800128d
		case 'a':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 80010d0:	a904      	add	r1, sp, #16
 80010d2:	aa05      	add	r2, sp, #20
 80010d4:	ab03      	add	r3, sp, #12
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	460b      	mov	r3, r1
 80010da:	4953      	ldr	r1, [pc, #332]	; (8001228 <read_trace+0x338>)
 80010dc:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 80010e0:	f001 fc98 	bl	8002a14 <siscanf>
			scanptr += bytes_scanned;
 80010e4:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010e8:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80010f4:	4413      	add	r3, r2
 80010f6:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = ALLOC;
 80010fa:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80010fe:	6919      	ldr	r1, [r3, #16]
 8001100:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 8001112:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001116:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001120:	6919      	ldr	r1, [r3, #16]
 8001122:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	4602      	mov	r2, r0
 8001132:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 8001134:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001138:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001142:	6919      	ldr	r1, [r3, #16]
 8001144:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	4602      	mov	r2, r0
 8001154:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 8001156:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800115a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 8001164:	4293      	cmp	r3, r2
 8001166:	bf38      	it	cc
 8001168:	4613      	movcc	r3, r2
 800116a:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 800116e:	e0af      	b.n	80012d0 <read_trace+0x3e0>
		case 'r':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 8001170:	a904      	add	r1, sp, #16
 8001172:	aa05      	add	r2, sp, #20
 8001174:	ab03      	add	r3, sp, #12
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	460b      	mov	r3, r1
 800117a:	492b      	ldr	r1, [pc, #172]	; (8001228 <read_trace+0x338>)
 800117c:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001180:	f001 fc48 	bl	8002a14 <siscanf>
			scanptr += bytes_scanned;
 8001184:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001188:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8001194:	4413      	add	r3, r2
 8001196:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = REALLOC;
 800119a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800119e:	6919      	ldr	r1, [r3, #16]
 80011a0:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	2202      	movs	r2, #2
 80011b0:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 80011b2:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011b6:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80011c0:	6919      	ldr	r1, [r3, #16]
 80011c2:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	4602      	mov	r2, r0
 80011d2:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 80011d4:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011d8:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80011e2:	6919      	ldr	r1, [r3, #16]
 80011e4:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	4602      	mov	r2, r0
 80011f4:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 80011f6:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011fa:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 8001204:	4293      	cmp	r3, r2
 8001206:	bf38      	it	cc
 8001208:	4613      	movcc	r3, r2
 800120a:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 800120e:	e05f      	b.n	80012d0 <read_trace+0x3e0>
 8001210:	20000000 	.word	0x20000000
 8001214:	080048a8 	.word	0x080048a8
 8001218:	080048c8 	.word	0x080048c8
 800121c:	080048d0 	.word	0x080048d0
 8001220:	080048f0 	.word	0x080048f0
 8001224:	08004910 	.word	0x08004910
 8001228:	08004930 	.word	0x08004930
		case 'f':
			sscanf(scanptr, "%u%n", &index, &bytes_scanned);
 800122c:	ab03      	add	r3, sp, #12
 800122e:	aa05      	add	r2, sp, #20
 8001230:	4934      	ldr	r1, [pc, #208]	; (8001304 <read_trace+0x414>)
 8001232:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001236:	f001 fbed 	bl	8002a14 <siscanf>
			scanptr += bytes_scanned;
 800123a:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800123e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 800124a:	4413      	add	r3, r2
 800124c:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = FREE;
 8001250:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001254:	6919      	ldr	r1, [r3, #16]
 8001256:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 8001268:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800126c:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001276:	6919      	ldr	r1, [r3, #16]
 8001278:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	4602      	mov	r2, r0
 8001288:	605a      	str	r2, [r3, #4]
			break;
 800128a:	e021      	b.n	80012d0 <read_trace+0x3e0>
		case 's':
			stack_test();
 800128c:	f7ff fbf6 	bl	8000a7c <stack_test>
			break;
 8001290:	e01e      	b.n	80012d0 <read_trace+0x3e0>
		case 'h':
			heap_test();
 8001292:	f7ff fc0c 	bl	8000aae <heap_test>
			break;
 8001296:	e01b      	b.n	80012d0 <read_trace+0x3e0>
		default:
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
			   type[0], scanptr-bytes_scanned, path);
 8001298:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800129c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80012a0:	781b      	ldrb	r3, [r3, #0]
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 80012a2:	4619      	mov	r1, r3
			   type[0], scanptr-bytes_scanned, path);
 80012a4:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012a8:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	425b      	negs	r3, r3
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 80012b0:	f8dd 281c 	ldr.w	r2, [sp, #2076]	; 0x81c
 80012b4:	441a      	add	r2, r3
 80012b6:	ab06      	add	r3, sp, #24
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4613      	mov	r3, r2
 80012bc:	460a      	mov	r2, r1
 80012be:	4912      	ldr	r1, [pc, #72]	; (8001308 <read_trace+0x418>)
 80012c0:	4812      	ldr	r0, [pc, #72]	; (800130c <read_trace+0x41c>)
 80012c2:	f001 fb87 	bl	80029d4 <siprintf>
			var_print(msg);
 80012c6:	4811      	ldr	r0, [pc, #68]	; (800130c <read_trace+0x41c>)
 80012c8:	f000 fe04 	bl	8001ed4 <var_print>
			loop();
 80012cc:	f000 fdfc 	bl	8001ec8 <loop>
		}
		op_index++;
 80012d0:	f8dd 3820 	ldr.w	r3, [sp, #2080]	; 0x820
 80012d4:	3301      	adds	r3, #1
 80012d6:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 80012da:	ab03      	add	r3, sp, #12
 80012dc:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 80012e0:	490b      	ldr	r1, [pc, #44]	; (8001310 <read_trace+0x420>)
 80012e2:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 80012e6:	f001 fb95 	bl	8002a14 <siscanf>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	f47f aeb1 	bne.w	8001056 <read_trace+0x166>
    }
	// Removed to allow shortened trace files
    //assert(max_index == trace->num_ids - 1);
    //assert(trace->num_ops == op_index);
    
    return trace;
 80012f4:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	f60d 0d2c 	addw	sp, sp, #2092	; 0x82c
 80012fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001302:	bf00      	nop
 8001304:	08004938 	.word	0x08004938
 8001308:	08004940 	.word	0x08004940
 800130c:	200008f4 	.word	0x200008f4
 8001310:	0800497c 	.word	0x0800497c

08001314 <free_trace>:
/*
 * free_trace - Free the trace record and the three arrays it points
 *              to, all of which were allocated in read_trace().
 */
void free_trace(trace_t *trace)
{
 8001314:	b500      	push	{lr}
 8001316:	b083      	sub	sp, #12
 8001318:	9001      	str	r0, [sp, #4]
    mm_free(trace->ops);         /* free the three arrays... */
 800131a:	9b01      	ldr	r3, [sp, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fcdc 	bl	8001cdc <mm_free>
    mm_free(trace->blocks);      
 8001324:	9b01      	ldr	r3, [sp, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fcd7 	bl	8001cdc <mm_free>
    mm_free(trace->block_sizes);
 800132e:	9b01      	ldr	r3, [sp, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fcd2 	bl	8001cdc <mm_free>
    mm_free(trace);              /* and the trace record itself... */
 8001338:	9801      	ldr	r0, [sp, #4]
 800133a:	f000 fccf 	bl	8001cdc <mm_free>
}
 800133e:	bf00      	nop
 8001340:	b003      	add	sp, #12
 8001342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001348 <eval_mm_valid>:

/*
 * eval_mm_valid - Check the mm malloc package for correctness
 */
static int eval_mm_valid(trace_t *trace, int tracenum, range_t **ranges) 
{
 8001348:	b500      	push	{lr}
 800134a:	b08f      	sub	sp, #60	; 0x3c
 800134c:	9005      	str	r0, [sp, #20]
 800134e:	9104      	str	r1, [sp, #16]
 8001350:	9203      	str	r2, [sp, #12]
    char *newp;
    char *oldp;
    char *p;
    
    /* Reset the heap and free any records in the range list */
    clear_ranges(ranges);
 8001352:	9803      	ldr	r0, [sp, #12]
 8001354:	f7ff fdb3 	bl	8000ebe <clear_ranges>
	return 0;
    }
	*/

    /* Interpret each operation in the trace in order */
    for (i = 0;  i < trace->num_ops;  i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	930d      	str	r3, [sp, #52]	; 0x34
 800135c:	e0e4      	b.n	8001528 <eval_mm_valid+0x1e0>
	index = trace->ops[i].index;
 800135e:	9b05      	ldr	r3, [sp, #20]
 8001360:	6919      	ldr	r1, [r3, #16]
 8001362:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	930a      	str	r3, [sp, #40]	; 0x28
	size = trace->ops[i].size;
 8001372:	9b05      	ldr	r3, [sp, #20]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	9309      	str	r3, [sp, #36]	; 0x24

        switch (trace->ops[i].type) {
 8001386:	9b05      	ldr	r3, [sp, #20]
 8001388:	6919      	ldr	r1, [r3, #16]
 800138a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d03a      	beq.n	8001412 <eval_mm_valid+0xca>
 800139c:	2b02      	cmp	r3, #2
 800139e:	f300 80ac 	bgt.w	80014fa <eval_mm_valid+0x1b2>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <eval_mm_valid+0x66>
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	f000 8098 	beq.w	80014dc <eval_mm_valid+0x194>
 80013ac:	e0a5      	b.n	80014fa <eval_mm_valid+0x1b2>

        case ALLOC: /* mm_malloc */

	    /* Call the student's malloc */
	    if ((p = mm_malloc(size)) == NULL) {
 80013ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fc27 	bl	8001c04 <mm_malloc>
 80013b6:	9006      	str	r0, [sp, #24]
 80013b8:	9b06      	ldr	r3, [sp, #24]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <eval_mm_valid+0x84>
		malloc_error(tracenum, i, "mm_malloc failed.");
 80013be:	4a60      	ldr	r2, [pc, #384]	; (8001540 <eval_mm_valid+0x1f8>)
 80013c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80013c2:	9804      	ldr	r0, [sp, #16]
 80013c4:	f000 fb1a 	bl	80019fc <malloc_error>
		return 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e0b4      	b.n	8001536 <eval_mm_valid+0x1ee>
	    /* 
	     * Test the range of the new block for correctness and add it 
	     * to the range list if OK. The block must be  be aligned properly,
	     * and must not overlap any currently allocated block. 
	     */ 
	    if (add_range(ranges, p, size, tracenum, i) == 0)
 80013cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	9b04      	ldr	r3, [sp, #16]
 80013d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013d4:	9906      	ldr	r1, [sp, #24]
 80013d6:	9803      	ldr	r0, [sp, #12]
 80013d8:	f7ff fc9c 	bl	8000d14 <add_range>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <eval_mm_valid+0x9e>
		return 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e0a7      	b.n	8001536 <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * fill range with low byte of index.  This will be used later
	     * if we realloc the block and wish to make sure that the old
	     * data was copied to the new block
	     */
	    memset(p, index & 0xFF, size);
 80013e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	9806      	ldr	r0, [sp, #24]
 80013f0:	f001 f8ec 	bl	80025cc <memset>

	    /* Remember region */
	    trace->blocks[index] = p;
 80013f4:	9b05      	ldr	r3, [sp, #20]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	9a06      	ldr	r2, [sp, #24]
 8001400:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001402:	9b05      	ldr	r3, [sp, #20]
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800140e:	601a      	str	r2, [r3, #0]
	    break;
 8001410:	e087      	b.n	8001522 <eval_mm_valid+0x1da>

        case REALLOC: /* mm_realloc */
	    
	    /* Call the student's realloc */
	    oldp = trace->blocks[index];
 8001412:	9b05      	ldr	r3, [sp, #20]
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	9308      	str	r3, [sp, #32]
	    if ((newp = mm_realloc(oldp, size)) == NULL) {
 8001420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	9808      	ldr	r0, [sp, #32]
 8001426:	f000 fc75 	bl	8001d14 <mm_realloc>
 800142a:	9007      	str	r0, [sp, #28]
 800142c:	9b07      	ldr	r3, [sp, #28]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <eval_mm_valid+0xf8>
		malloc_error(tracenum, i, "mm_realloc failed.");
 8001432:	4a44      	ldr	r2, [pc, #272]	; (8001544 <eval_mm_valid+0x1fc>)
 8001434:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001436:	9804      	ldr	r0, [sp, #16]
 8001438:	f000 fae0 	bl	80019fc <malloc_error>
		return 0;
 800143c:	2300      	movs	r3, #0
 800143e:	e07a      	b.n	8001536 <eval_mm_valid+0x1ee>
	    }
	    
	    /* Remove the old region from the range list */
	    remove_range(ranges, oldp);
 8001440:	9908      	ldr	r1, [sp, #32]
 8001442:	9803      	ldr	r0, [sp, #12]
 8001444:	f7ff fd16 	bl	8000e74 <remove_range>
	    
	    /* Check new block for correctness and add it to range list */
	    if (add_range(ranges, newp, size, tracenum, i) == 0)
 8001448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	9b04      	ldr	r3, [sp, #16]
 800144e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001450:	9907      	ldr	r1, [sp, #28]
 8001452:	9803      	ldr	r0, [sp, #12]
 8001454:	f7ff fc5e 	bl	8000d14 <add_range>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <eval_mm_valid+0x11a>
		return 0;
 800145e:	2300      	movs	r3, #0
 8001460:	e069      	b.n	8001536 <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * Make sure that the new block contains the data from the old 
	     * block and then fill in the new block with the low order byte
	     * of the new index
	     */
	    oldsize = trace->block_sizes[index];
 8001462:	9b05      	ldr	r3, [sp, #20]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	930b      	str	r3, [sp, #44]	; 0x2c
	    if (size < oldsize) oldsize = size;
 8001470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001474:	429a      	cmp	r2, r3
 8001476:	da01      	bge.n	800147c <eval_mm_valid+0x134>
 8001478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800147a:	930b      	str	r3, [sp, #44]	; 0x2c
	    for (j = 0; j < oldsize; j++) {
 800147c:	2300      	movs	r3, #0
 800147e:	930c      	str	r3, [sp, #48]	; 0x30
 8001480:	e012      	b.n	80014a8 <eval_mm_valid+0x160>
	      if (newp[j] != (index & 0xFF)) {
 8001482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001484:	9a07      	ldr	r2, [sp, #28]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800148e:	b2db      	uxtb	r3, r3
 8001490:	429a      	cmp	r2, r3
 8001492:	d006      	beq.n	80014a2 <eval_mm_valid+0x15a>
		malloc_error(tracenum, i, "mm_realloc did not preserve the "
 8001494:	4a2c      	ldr	r2, [pc, #176]	; (8001548 <eval_mm_valid+0x200>)
 8001496:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001498:	9804      	ldr	r0, [sp, #16]
 800149a:	f000 faaf 	bl	80019fc <malloc_error>
			     "data from old block");
		return 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	e049      	b.n	8001536 <eval_mm_valid+0x1ee>
	    for (j = 0; j < oldsize; j++) {
 80014a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014a4:	3301      	adds	r3, #1
 80014a6:	930c      	str	r3, [sp, #48]	; 0x30
 80014a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80014aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbe8      	blt.n	8001482 <eval_mm_valid+0x13a>
	      }
	    }
	    memset(newp, index & 0xFF, size);
 80014b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	9807      	ldr	r0, [sp, #28]
 80014ba:	f001 f887 	bl	80025cc <memset>

	    /* Remember region */
	    trace->blocks[index] = newp;
 80014be:	9b05      	ldr	r3, [sp, #20]
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	9a07      	ldr	r2, [sp, #28]
 80014ca:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 80014cc:	9b05      	ldr	r3, [sp, #20]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014d8:	601a      	str	r2, [r3, #0]
	    break;
 80014da:	e022      	b.n	8001522 <eval_mm_valid+0x1da>

        case FREE: /* mm_free */
	    
	    /* Remove region from list and call student's free function */
	    p = trace->blocks[index];
 80014dc:	9b05      	ldr	r3, [sp, #20]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	9306      	str	r3, [sp, #24]
	    remove_range(ranges, p);
 80014ea:	9906      	ldr	r1, [sp, #24]
 80014ec:	9803      	ldr	r0, [sp, #12]
 80014ee:	f7ff fcc1 	bl	8000e74 <remove_range>
	    mm_free(p);
 80014f2:	9806      	ldr	r0, [sp, #24]
 80014f4:	f000 fbf2 	bl	8001cdc <mm_free>
	    break;
 80014f8:	e013      	b.n	8001522 <eval_mm_valid+0x1da>

	default:
		sprintf(msg, "Type %d", trace->ops[i].type);
 80014fa:	9b05      	ldr	r3, [sp, #20]
 80014fc:	6919      	ldr	r1, [r3, #16]
 80014fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	490f      	ldr	r1, [pc, #60]	; (800154c <eval_mm_valid+0x204>)
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <eval_mm_valid+0x208>)
 8001512:	f001 fa5f 	bl	80029d4 <siprintf>
		var_print(msg);
 8001516:	480e      	ldr	r0, [pc, #56]	; (8001550 <eval_mm_valid+0x208>)
 8001518:	f000 fcdc 	bl	8001ed4 <var_print>
	    app_error("Nonexistent request type in eval_mm_valid");
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <eval_mm_valid+0x20c>)
 800151e:	f000 fa39 	bl	8001994 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 8001522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001524:	3301      	adds	r3, #1
 8001526:	930d      	str	r3, [sp, #52]	; 0x34
 8001528:	9b05      	ldr	r3, [sp, #20]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800152e:	429a      	cmp	r2, r3
 8001530:	f6ff af15 	blt.w	800135e <eval_mm_valid+0x16>
        }

    }

    /* As far as we know, this is a valid malloc package */
    return 1;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	b00f      	add	sp, #60	; 0x3c
 800153a:	f85d fb04 	ldr.w	pc, [sp], #4
 800153e:	bf00      	nop
 8001540:	08004984 	.word	0x08004984
 8001544:	08004998 	.word	0x08004998
 8001548:	080049ac 	.word	0x080049ac
 800154c:	080049e0 	.word	0x080049e0
 8001550:	200008f4 	.word	0x200008f4
 8001554:	080049e8 	.word	0x080049e8

08001558 <eval_mm_util>:
 *   doesn't allow the students to decrement the brk pointer, so brk
 *   is always the high water mark of the heap. 
 *   
 */
static double eval_mm_util(trace_t *trace, int tracenum, range_t **ranges)
{   
 8001558:	b530      	push	{r4, r5, lr}
 800155a:	b08f      	sub	sp, #60	; 0x3c
 800155c:	9003      	str	r0, [sp, #12]
 800155e:	9102      	str	r1, [sp, #8]
 8001560:	9201      	str	r2, [sp, #4]
    int i;
    int index;
    int size, newsize, oldsize;
    int max_total_size = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	930c      	str	r3, [sp, #48]	; 0x30
    int total_size = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	930b      	str	r3, [sp, #44]	; 0x2c
    /* initialize the heap and the mm malloc package */
    //mem_reset_brk();
    //if (mm_init() < 0)
	//app_error("mm_init failed in eval_mm_util");

    for (i = 0;  i < trace->num_ops;  i++) {
 800156a:	2300      	movs	r3, #0
 800156c:	930d      	str	r3, [sp, #52]	; 0x34
 800156e:	e0ba      	b.n	80016e6 <eval_mm_util+0x18e>
        switch (trace->ops[i].type) {
 8001570:	9b03      	ldr	r3, [sp, #12]
 8001572:	6919      	ldr	r1, [r3, #16]
 8001574:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d040      	beq.n	8001608 <eval_mm_util+0xb0>
 8001586:	2b02      	cmp	r3, #2
 8001588:	f300 80a7 	bgt.w	80016da <eval_mm_util+0x182>
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <eval_mm_util+0x40>
 8001590:	2b01      	cmp	r3, #1
 8001592:	f000 8082 	beq.w	800169a <eval_mm_util+0x142>
 8001596:	e0a0      	b.n	80016da <eval_mm_util+0x182>

        case ALLOC: /* mm_alloc */
	    index = trace->ops[i].index;
 8001598:	9b03      	ldr	r3, [sp, #12]
 800159a:	6919      	ldr	r1, [r3, #16]
 800159c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->ops[i].size;
 80015ac:	9b03      	ldr	r3, [sp, #12]
 80015ae:	6919      	ldr	r1, [r3, #16]
 80015b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	9305      	str	r3, [sp, #20]

	    if ((p = mm_malloc(size)) == NULL) 
 80015c0:	9b05      	ldr	r3, [sp, #20]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fb1e 	bl	8001c04 <mm_malloc>
 80015c8:	9004      	str	r0, [sp, #16]
 80015ca:	9b04      	ldr	r3, [sp, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <eval_mm_util+0x7e>
		app_error("mm_malloc failed in eval_mm_util");
 80015d0:	4853      	ldr	r0, [pc, #332]	; (8001720 <eval_mm_util+0x1c8>)
 80015d2:	f000 f9df 	bl	8001994 <app_error>
	    
	    /* Remember region and size */
	    trace->blocks[index] = p;
 80015d6:	9b03      	ldr	r3, [sp, #12]
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	9a04      	ldr	r2, [sp, #16]
 80015e2:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 80015e4:	9b03      	ldr	r3, [sp, #12]
 80015e6:	699a      	ldr	r2, [r3, #24]
 80015e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	9a05      	ldr	r2, [sp, #20]
 80015f0:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += size;
 80015f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80015f4:	9b05      	ldr	r3, [sp, #20]
 80015f6:	4413      	add	r3, r2
 80015f8:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 80015fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80015fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015fe:	4293      	cmp	r3, r2
 8001600:	bfb8      	it	lt
 8001602:	4613      	movlt	r3, r2
 8001604:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 8001606:	e06b      	b.n	80016e0 <eval_mm_util+0x188>

	case REALLOC: /* mm_realloc */
	    index = trace->ops[i].index;
 8001608:	9b03      	ldr	r3, [sp, #12]
 800160a:	6919      	ldr	r1, [r3, #16]
 800160c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	930a      	str	r3, [sp, #40]	; 0x28
	    newsize = trace->ops[i].size;
 800161c:	9b03      	ldr	r3, [sp, #12]
 800161e:	6919      	ldr	r1, [r3, #16]
 8001620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	9309      	str	r3, [sp, #36]	; 0x24
	    oldsize = trace->block_sizes[index];
 8001630:	9b03      	ldr	r3, [sp, #12]
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	9308      	str	r3, [sp, #32]

	    oldp = trace->blocks[index];
 800163e:	9b03      	ldr	r3, [sp, #12]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	9307      	str	r3, [sp, #28]
	    if ((newp = mm_realloc(oldp,newsize)) == NULL)
 800164c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	9807      	ldr	r0, [sp, #28]
 8001652:	f000 fb5f 	bl	8001d14 <mm_realloc>
 8001656:	9006      	str	r0, [sp, #24]
 8001658:	9b06      	ldr	r3, [sp, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <eval_mm_util+0x10c>
		app_error("mm_realloc failed in eval_mm_util");
 800165e:	4831      	ldr	r0, [pc, #196]	; (8001724 <eval_mm_util+0x1cc>)
 8001660:	f000 f998 	bl	8001994 <app_error>

	    /* Remember region and size */
	    trace->blocks[index] = newp;
 8001664:	9b03      	ldr	r3, [sp, #12]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	9a06      	ldr	r2, [sp, #24]
 8001670:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = newsize;
 8001672:	9b03      	ldr	r3, [sp, #12]
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800167e:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += (newsize - oldsize);
 8001680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001682:	9b08      	ldr	r3, [sp, #32]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001688:	4413      	add	r3, r2
 800168a:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 800168c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800168e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001690:	4293      	cmp	r3, r2
 8001692:	bfb8      	it	lt
 8001694:	4613      	movlt	r3, r2
 8001696:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 8001698:	e022      	b.n	80016e0 <eval_mm_util+0x188>

        case FREE: /* mm_free */
	    index = trace->ops[i].index;
 800169a:	9b03      	ldr	r3, [sp, #12]
 800169c:	6919      	ldr	r1, [r3, #16]
 800169e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->block_sizes[index];
 80016ae:	9b03      	ldr	r3, [sp, #12]
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	9305      	str	r3, [sp, #20]
	    p = trace->blocks[index];
 80016bc:	9b03      	ldr	r3, [sp, #12]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	9304      	str	r3, [sp, #16]
	    
	    mm_free(p);
 80016ca:	9804      	ldr	r0, [sp, #16]
 80016cc:	f000 fb06 	bl	8001cdc <mm_free>
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size -= size;
 80016d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80016d2:	9b05      	ldr	r3, [sp, #20]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    break;
 80016d8:	e002      	b.n	80016e0 <eval_mm_util+0x188>

	default:
	    app_error("Nonexistent request type in eval_mm_util");
 80016da:	4813      	ldr	r0, [pc, #76]	; (8001728 <eval_mm_util+0x1d0>)
 80016dc:	f000 f95a 	bl	8001994 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 80016e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80016e2:	3301      	adds	r3, #1
 80016e4:	930d      	str	r3, [sp, #52]	; 0x34
 80016e6:	9b03      	ldr	r3, [sp, #12]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f6ff af3f 	blt.w	8001570 <eval_mm_util+0x18>

        }
    }

    return ((double)max_total_size / (double)mem_heapsize());
 80016f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016f4:	f7fe fefe 	bl	80004f4 <__aeabi_i2d>
 80016f8:	4604      	mov	r4, r0
 80016fa:	460d      	mov	r5, r1
 80016fc:	f000 fa1e 	bl	8001b3c <mem_heapsize>
 8001700:	4603      	mov	r3, r0
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fee6 	bl	80004d4 <__aeabi_ui2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7ff f884 	bl	800081c <__aeabi_ddiv>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
}
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	b00f      	add	sp, #60	; 0x3c
 800171e:	bd30      	pop	{r4, r5, pc}
 8001720:	08004a14 	.word	0x08004a14
 8001724:	08004a38 	.word	0x08004a38
 8001728:	08004a5c 	.word	0x08004a5c

0800172c <printresults>:

/*
 * printresults - prints a performance summary for some malloc package
 */
static void printresults(int n, stats_t *stats) 
{
 800172c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001730:	b093      	sub	sp, #76	; 0x4c
 8001732:	9009      	str	r0, [sp, #36]	; 0x24
 8001734:	9108      	str	r1, [sp, #32]
    int i;
    double secs = 0;
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    double ops = 0;
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    double util = 0;
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

    /* Print the individual results for each trace */
    sprintf(msg, "%5s%7s %5s%8s%10s%6s\n", 
 800175a:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <printresults+0x21c>)
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	4b7b      	ldr	r3, [pc, #492]	; (800194c <printresults+0x220>)
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <printresults+0x224>)
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	4b7b      	ldr	r3, [pc, #492]	; (8001954 <printresults+0x228>)
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <printresults+0x22c>)
 800176c:	4a7b      	ldr	r2, [pc, #492]	; (800195c <printresults+0x230>)
 800176e:	497c      	ldr	r1, [pc, #496]	; (8001960 <printresults+0x234>)
 8001770:	487c      	ldr	r0, [pc, #496]	; (8001964 <printresults+0x238>)
 8001772:	f001 f92f 	bl	80029d4 <siprintf>
	   "trace", " valid", "util", "ops", "secs", "Kops");
	var_print(msg);
 8001776:	487b      	ldr	r0, [pc, #492]	; (8001964 <printresults+0x238>)
 8001778:	f000 fbac 	bl	8001ed4 <var_print>
    for (i=0; i < n; i++) {
 800177c:	2300      	movs	r3, #0
 800177e:	9311      	str	r3, [sp, #68]	; 0x44
 8001780:	e08a      	b.n	8001898 <printresults+0x16c>
	if (stats[i].valid) {
 8001782:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001784:	015b      	lsls	r3, r3, #5
 8001786:	9a08      	ldr	r2, [sp, #32]
 8001788:	4413      	add	r3, r2
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d06f      	beq.n	8001870 <printresults+0x144>
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
		   i,
		   "yes",
		   stats[i].util*100.0,
 8001790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001792:	015b      	lsls	r3, r3, #5
 8001794:	9a08      	ldr	r2, [sp, #32]
 8001796:	4413      	add	r3, r2
 8001798:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	4b71      	ldr	r3, [pc, #452]	; (8001968 <printresults+0x23c>)
 80017a2:	f7fe ff11 	bl	80005c8 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4690      	mov	r8, r2
 80017ac:	4699      	mov	r9, r3
		   stats[i].ops,
 80017ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017b0:	015b      	lsls	r3, r3, #5
 80017b2:	9a08      	ldr	r2, [sp, #32]
 80017b4:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80017b6:	e9d3 4500 	ldrd	r4, r5, [r3]
		   stats[i].secs,
 80017ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	9a08      	ldr	r2, [sp, #32]
 80017c0:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80017c2:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
		   (stats[i].ops/1e3)/stats[i].secs);
 80017c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	9a08      	ldr	r2, [sp, #32]
 80017cc:	4413      	add	r3, r2
 80017ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <printresults+0x240>)
 80017d8:	f7ff f820 	bl	800081c <__aeabi_ddiv>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017e6:	015b      	lsls	r3, r3, #5
 80017e8:	9a08      	ldr	r2, [sp, #32]
 80017ea:	4413      	add	r3, r2
 80017ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80017f0:	f7ff f814 	bl	800081c <__aeabi_ddiv>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80017fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001800:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001804:	e9cd 8900 	strd	r8, r9, [sp]
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <printresults+0x244>)
 800180a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800180c:	4959      	ldr	r1, [pc, #356]	; (8001974 <printresults+0x248>)
 800180e:	4855      	ldr	r0, [pc, #340]	; (8001964 <printresults+0x238>)
 8001810:	f001 f8e0 	bl	80029d4 <siprintf>
		var_print(msg);
 8001814:	4853      	ldr	r0, [pc, #332]	; (8001964 <printresults+0x238>)
 8001816:	f000 fb5d 	bl	8001ed4 <var_print>
	    secs += stats[i].secs;
 800181a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	9a08      	ldr	r2, [sp, #32]
 8001820:	4413      	add	r3, r2
 8001822:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001826:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800182a:	f7fe fd17 	bl	800025c <__adddf3>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	    ops += stats[i].ops;
 8001836:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001838:	015b      	lsls	r3, r3, #5
 800183a:	9a08      	ldr	r2, [sp, #32]
 800183c:	4413      	add	r3, r2
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001846:	f7fe fd09 	bl	800025c <__adddf3>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	    util += stats[i].util;
 8001852:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001854:	015b      	lsls	r3, r3, #5
 8001856:	9a08      	ldr	r2, [sp, #32]
 8001858:	4413      	add	r3, r2
 800185a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800185e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001862:	f7fe fcfb 	bl	800025c <__adddf3>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800186e:	e010      	b.n	8001892 <printresults+0x166>
	}
	else {
	    sprintf(msg,"%2d%10s%6s%8s%10s%6s\n", 
 8001870:	4b41      	ldr	r3, [pc, #260]	; (8001978 <printresults+0x24c>)
 8001872:	9303      	str	r3, [sp, #12]
 8001874:	4b40      	ldr	r3, [pc, #256]	; (8001978 <printresults+0x24c>)
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <printresults+0x24c>)
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <printresults+0x24c>)
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4b3e      	ldr	r3, [pc, #248]	; (800197c <printresults+0x250>)
 8001882:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001884:	493e      	ldr	r1, [pc, #248]	; (8001980 <printresults+0x254>)
 8001886:	4837      	ldr	r0, [pc, #220]	; (8001964 <printresults+0x238>)
 8001888:	f001 f8a4 	bl	80029d4 <siprintf>
		   "no",
		   "-",
		   "-",
		   "-",
		   "-");
		var_print(msg);
 800188c:	4835      	ldr	r0, [pc, #212]	; (8001964 <printresults+0x238>)
 800188e:	f000 fb21 	bl	8001ed4 <var_print>
    for (i=0; i < n; i++) {
 8001892:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001894:	3301      	adds	r3, #1
 8001896:	9311      	str	r3, [sp, #68]	; 0x44
 8001898:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800189a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800189c:	429a      	cmp	r2, r3
 800189e:	f6ff af70 	blt.w	8001782 <printresults+0x56>
	}
    }

    /* Print the aggregate results for the set of traces */
    if (errors == 0) {
 80018a2:	4b38      	ldr	r3, [pc, #224]	; (8001984 <printresults+0x258>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d13b      	bne.n	8001922 <printresults+0x1f6>
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
	       "Total       ",
	       (util/n)*100.0,
 80018aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018ac:	f7fe fe22 	bl	80004f4 <__aeabi_i2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80018b8:	f7fe ffb0 	bl	800081c <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <printresults+0x23c>)
 80018ca:	f7fe fe7d 	bl	80005c8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
	       ops, 
	       secs,
	       (ops/1e3)/secs);
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <printresults+0x240>)
 80018dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80018e0:	f7fe ff9c 	bl	800081c <__aeabi_ddiv>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80018ec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80018f0:	f7fe ff94 	bl	800081c <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001900:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001904:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800190c:	e9cd 4500 	strd	r4, r5, [sp]
 8001910:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <printresults+0x25c>)
 8001912:	491e      	ldr	r1, [pc, #120]	; (800198c <printresults+0x260>)
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <printresults+0x238>)
 8001916:	f001 f85d 	bl	80029d4 <siprintf>
	var_print(msg);
 800191a:	4812      	ldr	r0, [pc, #72]	; (8001964 <printresults+0x238>)
 800191c:	f000 fada 	bl	8001ed4 <var_print>
	       "-", 
	       "-");
	var_print(msg);
    }

}
 8001920:	e00e      	b.n	8001940 <printresults+0x214>
	sprintf(msg, "%12s%6s%8s%10s%6s\n", 
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <printresults+0x24c>)
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <printresults+0x24c>)
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <printresults+0x24c>)
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <printresults+0x24c>)
 8001930:	4a15      	ldr	r2, [pc, #84]	; (8001988 <printresults+0x25c>)
 8001932:	4917      	ldr	r1, [pc, #92]	; (8001990 <printresults+0x264>)
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <printresults+0x238>)
 8001936:	f001 f84d 	bl	80029d4 <siprintf>
	var_print(msg);
 800193a:	480a      	ldr	r0, [pc, #40]	; (8001964 <printresults+0x238>)
 800193c:	f000 faca 	bl	8001ed4 <var_print>
}
 8001940:	bf00      	nop
 8001942:	b013      	add	sp, #76	; 0x4c
 8001944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001948:	08004ab0 	.word	0x08004ab0
 800194c:	08004ab8 	.word	0x08004ab8
 8001950:	08004ac0 	.word	0x08004ac0
 8001954:	08004ac4 	.word	0x08004ac4
 8001958:	08004a88 	.word	0x08004a88
 800195c:	08004a90 	.word	0x08004a90
 8001960:	08004a98 	.word	0x08004a98
 8001964:	200008f4 	.word	0x200008f4
 8001968:	40590000 	.word	0x40590000
 800196c:	408f4000 	.word	0x408f4000
 8001970:	08004acc 	.word	0x08004acc
 8001974:	08004ad0 	.word	0x08004ad0
 8001978:	08004b0c 	.word	0x08004b0c
 800197c:	08004af0 	.word	0x08004af0
 8001980:	08004af4 	.word	0x08004af4
 8001984:	200000e4 	.word	0x200000e4
 8001988:	08004b10 	.word	0x08004b10
 800198c:	08004b20 	.word	0x08004b20
 8001990:	08004b40 	.word	0x08004b40

08001994 <app_error>:

/* 
 * app_error - Report an arbitrary application error
 */
void app_error(char * err_msg) 
{
 8001994:	b500      	push	{lr}
 8001996:	b083      	sub	sp, #12
 8001998:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s\n", err_msg);
 800199a:	9a01      	ldr	r2, [sp, #4]
 800199c:	4906      	ldr	r1, [pc, #24]	; (80019b8 <app_error+0x24>)
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <app_error+0x28>)
 80019a0:	f001 f818 	bl	80029d4 <siprintf>
	var_print(msg);
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <app_error+0x28>)
 80019a6:	f000 fa95 	bl	8001ed4 <var_print>
	loop();
 80019aa:	f000 fa8d 	bl	8001ec8 <loop>
}
 80019ae:	bf00      	nop
 80019b0:	b003      	add	sp, #12
 80019b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019b6:	bf00      	nop
 80019b8:	08004b54 	.word	0x08004b54
 80019bc:	200008f4 	.word	0x200008f4

080019c0 <unix_error>:

/* 
 * unix_error - Report a Unix-style error
 */
void unix_error(char * err_msg) 
{
 80019c0:	b500      	push	{lr}
 80019c2:	b083      	sub	sp, #12
 80019c4:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s: %s\n", err_msg, strerror(errno));
 80019c6:	f000 fdb7 	bl	8002538 <__errno>
 80019ca:	4603      	mov	r3, r0
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 fa86 	bl	8002ee0 <strerror>
 80019d4:	4603      	mov	r3, r0
 80019d6:	9a01      	ldr	r2, [sp, #4]
 80019d8:	4906      	ldr	r1, [pc, #24]	; (80019f4 <unix_error+0x34>)
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <unix_error+0x38>)
 80019dc:	f000 fffa 	bl	80029d4 <siprintf>
	var_print(msg);
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <unix_error+0x38>)
 80019e2:	f000 fa77 	bl	8001ed4 <var_print>
	loop();
 80019e6:	f000 fa6f 	bl	8001ec8 <loop>
}
 80019ea:	bf00      	nop
 80019ec:	b003      	add	sp, #12
 80019ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80019f2:	bf00      	nop
 80019f4:	08004b58 	.word	0x08004b58
 80019f8:	200008f4 	.word	0x200008f4

080019fc <malloc_error>:

/*
 * malloc_error - Report an error returned by the mm_malloc package
 */
void malloc_error(int tracenum, int opnum, char *err_msg)
{
 80019fc:	b500      	push	{lr}
 80019fe:	b087      	sub	sp, #28
 8001a00:	9005      	str	r0, [sp, #20]
 8001a02:	9104      	str	r1, [sp, #16]
 8001a04:	9203      	str	r2, [sp, #12]
    errors++;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <malloc_error+0x3c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <malloc_error+0x3c>)
 8001a0e:	6013      	str	r3, [r2, #0]
    sprintf(msg, "ERROR [trace %d, line %d]: %s\n", tracenum, LINENUM(opnum), err_msg);
 8001a10:	9b04      	ldr	r3, [sp, #16]
 8001a12:	1d5a      	adds	r2, r3, #5
 8001a14:	9b03      	ldr	r3, [sp, #12]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	9a05      	ldr	r2, [sp, #20]
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <malloc_error+0x40>)
 8001a1e:	4808      	ldr	r0, [pc, #32]	; (8001a40 <malloc_error+0x44>)
 8001a20:	f000 ffd8 	bl	80029d4 <siprintf>
	var_print(msg);
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <malloc_error+0x44>)
 8001a26:	f000 fa55 	bl	8001ed4 <var_print>
	loop();
 8001a2a:	f000 fa4d 	bl	8001ec8 <loop>
}
 8001a2e:	bf00      	nop
 8001a30:	b007      	add	sp, #28
 8001a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a36:	bf00      	nop
 8001a38:	200000e4 	.word	0x200000e4
 8001a3c:	08004b60 	.word	0x08004b60
 8001a40:	200008f4 	.word	0x200008f4

08001a44 <mem_init>:

/* 
 * mem_init - initialize the memory system model
 */
void mem_init(void)
{
 8001a44:	b500      	push	{lr}
 8001a46:	b089      	sub	sp, #36	; 0x24
	mem_request req;
	mem_start_brk = (char *)ALIGN((size_t)(&__malloc_sbrk_start));
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <mem_init+0x48>)
 8001a4a:	3307      	adds	r3, #7
 8001a4c:	f023 0307 	bic.w	r3, r3, #7
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <mem_init+0x4c>)
 8001a54:	601a      	str	r2, [r3, #0]
    mem_brk = mem_start_brk;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <mem_init+0x4c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <mem_init+0x50>)
 8001a5c:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, size=1 for sbrk move
	req = (mem_request){.request=SBRK, .req_id = (++cur_id), .size=0, .ptr=mem_brk};
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <mem_init+0x54>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <mem_init+0x54>)
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <mem_init+0x54>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <mem_init+0x50>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2103      	movs	r1, #3
 8001a72:	9104      	str	r1, [sp, #16]
 8001a74:	9205      	str	r2, [sp, #20]
 8001a76:	2200      	movs	r2, #0
 8001a78:	9206      	str	r2, [sp, #24]
 8001a7a:	9307      	str	r3, [sp, #28]
	req_send(&req);
 8001a7c:	ab04      	add	r3, sp, #16
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fa67 	bl	8001f52 <req_send>
}
 8001a84:	bf00      	nop
 8001a86:	b009      	add	sp, #36	; 0x24
 8001a88:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a8c:	20000d08 	.word	0x20000d08
 8001a90:	200000e8 	.word	0x200000e8
 8001a94:	200000ec 	.word	0x200000ec
 8001a98:	20000cf8 	.word	0x20000cf8

08001a9c <mem_sbrk>:
 * mem_sbrk - simple model of the sbrk function. Extends the heap 
 *    by incr bytes and returns the start address of the new area. In
 *    this model, the heap cannot be shrunk.
 */
void *mem_sbrk(unsigned int incr) 
{
 8001a9c:	b530      	push	{r4, r5, lr}
 8001a9e:	b099      	sub	sp, #100	; 0x64
 8001aa0:	9001      	str	r0, [sp, #4]
    char *old_brk = mem_brk;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <mem_sbrk+0x78>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	9317      	str	r3, [sp, #92]	; 0x5c
	register size_t * stack_top asm("sp");
	mem_request req;

	// Check if there is enough memory
    if ( (incr < 0) || ((mem_brk + incr) > (char *)(stack_top))) {
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <mem_sbrk+0x78>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	466a      	mov	r2, sp
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d911      	bls.n	8001ada <mem_sbrk+0x3e>
		char output_str[] = "ERROR: mem_sbrk failed. Ran out of memory...\n";
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <mem_sbrk+0x7c>)
 8001ab8:	ac03      	add	r4, sp, #12
 8001aba:	461d      	mov	r5, r3
 8001abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ac8:	c407      	stmia	r4!, {r0, r1, r2}
 8001aca:	8023      	strh	r3, [r4, #0]
		var_print(output_str);
 8001acc:	ab03      	add	r3, sp, #12
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fa00 	bl	8001ed4 <var_print>
		return (void *)-1;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ad8:	e018      	b.n	8001b0c <mem_sbrk+0x70>
    }
    mem_brk += incr;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <mem_sbrk+0x78>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	9b01      	ldr	r3, [sp, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <mem_sbrk+0x78>)
 8001ae4:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, size=1 for sbrk move
	req = (mem_request){.request = SBRK, .req_id = (++cur_id), .size=incr, .ptr=0};
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <mem_sbrk+0x80>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <mem_sbrk+0x80>)
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <mem_sbrk+0x80>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2203      	movs	r2, #3
 8001af6:	9213      	str	r2, [sp, #76]	; 0x4c
 8001af8:	9314      	str	r3, [sp, #80]	; 0x50
 8001afa:	9b01      	ldr	r3, [sp, #4]
 8001afc:	9315      	str	r3, [sp, #84]	; 0x54
 8001afe:	2300      	movs	r3, #0
 8001b00:	9316      	str	r3, [sp, #88]	; 0x58
	req_send(&req);
 8001b02:	ab13      	add	r3, sp, #76	; 0x4c
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fa24 	bl	8001f52 <req_send>
    return (void *)old_brk;
 8001b0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	b019      	add	sp, #100	; 0x64
 8001b10:	bd30      	pop	{r4, r5, pc}
 8001b12:	bf00      	nop
 8001b14:	200000ec 	.word	0x200000ec
 8001b18:	08004b80 	.word	0x08004b80
 8001b1c:	20000cf8 	.word	0x20000cf8

08001b20 <mem_heap_lo>:
/*
 * mem_heap_lo - return address of the first heap byte
 */
void *mem_heap_lo()
{
    return (void *)mem_start_brk;
 8001b20:	4b01      	ldr	r3, [pc, #4]	; (8001b28 <mem_heap_lo+0x8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	4770      	bx	lr
 8001b28:	200000e8 	.word	0x200000e8

08001b2c <mem_heap_hi>:
/* 
 * mem_heap_hi - return address of last heap byte
 */
void *mem_heap_hi()
{
    return (void *)(mem_brk - 1);
 8001b2c:	4b02      	ldr	r3, [pc, #8]	; (8001b38 <mem_heap_hi+0xc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3b01      	subs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	200000ec 	.word	0x200000ec

08001b3c <mem_heapsize>:
/*
 * mem_heapsize() - returns the heap size in bytes
 */
size_t mem_heapsize() 
{
    return (size_t)(mem_brk - mem_start_brk);
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <mem_heapsize+0x10>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <mem_heapsize+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1ad3      	subs	r3, r2, r3
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200000ec 	.word	0x200000ec
 8001b50:	200000e8 	.word	0x200000e8

08001b54 <extend_heap>:
#define CHUNKSIZE (1<<12) // Heap request chunk

#define MAX(x,y) ((x) > (y) ? (x) : (y))

// Extend heap by words * WSIZE with alignment, return 1 on success 0 on fail
static int extend_heap(size_t words) {
 8001b54:	b500      	push	{lr}
 8001b56:	b085      	sub	sp, #20
 8001b58:	9001      	str	r0, [sp, #4]
	char * bp;
	size_t size;

	size = (words % 2) ? (words+1) * WSIZE : words * WSIZE; // Maintain double word alignment
 8001b5a:	9b01      	ldr	r3, [sp, #4]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <extend_heap+0x18>
 8001b64:	9b01      	ldr	r3, [sp, #4]
 8001b66:	3301      	adds	r3, #1
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	e001      	b.n	8001b70 <extend_heap+0x1c>
 8001b6c:	9b01      	ldr	r3, [sp, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	9303      	str	r3, [sp, #12]
	if ((long)(bp = mem_sbrk(size)) == -1) {
 8001b72:	9803      	ldr	r0, [sp, #12]
 8001b74:	f7ff ff92 	bl	8001a9c <mem_sbrk>
 8001b78:	9002      	str	r0, [sp, #8]
 8001b7a:	9b02      	ldr	r3, [sp, #8]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b80:	d101      	bne.n	8001b86 <extend_heap+0x32>
		return 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <extend_heap+0x34>
	} else {
		return 1;
 8001b86:	2301      	movs	r3, #1
	}
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	b005      	add	sp, #20
 8001b8c:	f85d fb04 	ldr.w	pc, [sp], #4

08001b90 <mm_init>:

// Initialize memory request communication
int mm_init(void)
{
 8001b90:	b500      	push	{lr}
 8001b92:	b085      	sub	sp, #20
	mem_request req = {0};
 8001b94:	466b      	mov	r3, sp
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]

	mem_req_setup();
 8001ba0:	f000 f9ce 	bl	8001f40 <mem_req_setup>

	// Receive starting singal of 1 in every field
	led_on(BLUE);
 8001ba4:	200f      	movs	r0, #15
 8001ba6:	f000 fa15 	bl	8001fd4 <led_on>
	req_receive(&req);
 8001baa:	466b      	mov	r3, sp
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f9db 	bl	8001f68 <req_receive>
	if (req.ptr==(void *)1&&req.req_id==1&&req.request==1&&req.size==1) {
 8001bb2:	9b03      	ldr	r3, [sp, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d113      	bne.n	8001be0 <mm_init+0x50>
 8001bb8:	9b01      	ldr	r3, [sp, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d110      	bne.n	8001be0 <mm_init+0x50>
 8001bbe:	9b00      	ldr	r3, [sp, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d10d      	bne.n	8001be0 <mm_init+0x50>
 8001bc4:	9b02      	ldr	r3, [sp, #8]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d10a      	bne.n	8001be0 <mm_init+0x50>
		led_off(BLUE);
 8001bca:	200f      	movs	r0, #15
 8001bcc:	f000 fa16 	bl	8001ffc <led_off>
		mem_init();
 8001bd0:	f7ff ff38 	bl	8001a44 <mem_init>
		extend_heap(4096/WSIZE);
 8001bd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bd8:	f7ff ffbc 	bl	8001b54 <extend_heap>
		return 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e00b      	b.n	8001bf8 <mm_init+0x68>
	} else {
		led_off(BLUE);
 8001be0:	200f      	movs	r0, #15
 8001be2:	f000 fa0b 	bl	8001ffc <led_off>
		led_on(RED);
 8001be6:	200e      	movs	r0, #14
 8001be8:	f000 f9f4 	bl	8001fd4 <led_on>
		var_print("Start signal incorrect");
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <mm_init+0x70>)
 8001bee:	f000 f971 	bl	8001ed4 <var_print>
		loop();
 8001bf2:	f000 f969 	bl	8001ec8 <loop>
		return 1;
 8001bf6:	2301      	movs	r3, #1
	}
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	b005      	add	sp, #20
 8001bfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c00:	08004be4 	.word	0x08004be4

08001c04 <mm_malloc>:


void *mm_malloc(size_t size)
{
 8001c04:	b500      	push	{lr}
 8001c06:	b095      	sub	sp, #84	; 0x54
 8001c08:	9001      	str	r0, [sp, #4]
	size_t asize, extendsize;	
	mem_request req;	
	mem_request response;

	// Ignore 0 size
	if (size == 0) {
 8001c0a:	9b01      	ldr	r3, [sp, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <mm_malloc+0x10>
		return NULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e056      	b.n	8001cc2 <mm_malloc+0xbe>
	}

	// Send malloc request to server
	req = (mem_request){.request = MALLOC, .req_id=(++cur_id), .size = size, .ptr=NULL};
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <mm_malloc+0xc8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a2c      	ldr	r2, [pc, #176]	; (8001ccc <mm_malloc+0xc8>)
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <mm_malloc+0xc8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	920e      	str	r2, [sp, #56]	; 0x38
 8001c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c28:	9b01      	ldr	r3, [sp, #4]
 8001c2a:	9310      	str	r3, [sp, #64]	; 0x40
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9311      	str	r3, [sp, #68]	; 0x44
	req_send(&req);
 8001c30:	ab0e      	add	r3, sp, #56	; 0x38
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f98d 	bl	8001f52 <req_send>
	req_receive(&response);
 8001c38:	ab0a      	add	r3, sp, #40	; 0x28
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f994 	bl	8001f68 <req_receive>

	if (response.ptr) {
 8001c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <mm_malloc+0x46>
		return response.ptr;
 8001c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c48:	e03b      	b.n	8001cc2 <mm_malloc+0xbe>
	} else {
		// Need to extend heap
		// Add overhead and alignment to block size
		if (size <= DSIZE) {
 8001c4a:	9b01      	ldr	r3, [sp, #4]
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d802      	bhi.n	8001c56 <mm_malloc+0x52>
			asize = 2*DSIZE;
 8001c50:	2310      	movs	r3, #16
 8001c52:	9313      	str	r3, [sp, #76]	; 0x4c
 8001c54:	e004      	b.n	8001c60 <mm_malloc+0x5c>
		} else {
			asize = DSIZE * ((size + (DSIZE) + (DSIZE-1))/DSIZE); // Add overhead and make rounding floor
 8001c56:	9b01      	ldr	r3, [sp, #4]
 8001c58:	330f      	adds	r3, #15
 8001c5a:	f023 0307 	bic.w	r3, r3, #7
 8001c5e:	9313      	str	r3, [sp, #76]	; 0x4c
		}
		extendsize = MAX(asize, CHUNKSIZE);
 8001c60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c66:	bf38      	it	cc
 8001c68:	f44f 5380 	movcc.w	r3, #4096	; 0x1000
 8001c6c:	9312      	str	r3, [sp, #72]	; 0x48

		if (extend_heap(extendsize/WSIZE)) {
 8001c6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff6e 	bl	8001b54 <extend_heap>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d020      	beq.n	8001cc0 <mm_malloc+0xbc>
			// Resend malloc request
			// Send malloc request to server
			req = (mem_request){.request = MALLOC, .req_id=(++cur_id), .size = size, .ptr=NULL};
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <mm_malloc+0xc8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <mm_malloc+0xc8>)
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <mm_malloc+0xc8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	920e      	str	r2, [sp, #56]	; 0x38
 8001c90:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c92:	9b01      	ldr	r3, [sp, #4]
 8001c94:	9310      	str	r3, [sp, #64]	; 0x40
 8001c96:	2300      	movs	r3, #0
 8001c98:	9311      	str	r3, [sp, #68]	; 0x44
			req_send(&req);
 8001c9a:	ab0e      	add	r3, sp, #56	; 0x38
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f958 	bl	8001f52 <req_send>
			req_receive(&response);
 8001ca2:	ab0a      	add	r3, sp, #40	; 0x28
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 f95f 	bl	8001f68 <req_receive>
			
			assert(response.ptr); // Should have valid response now
 8001caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <mm_malloc+0xb8>
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <mm_malloc+0xcc>)
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <mm_malloc+0xd0>)
 8001cb4:	2168      	movs	r1, #104	; 0x68
 8001cb6:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <mm_malloc+0xd4>)
 8001cb8:	f000 fc20 	bl	80024fc <__assert_func>

			return(response.ptr);
 8001cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001cbe:	e000      	b.n	8001cc2 <mm_malloc+0xbe>
		} else {
			// Not enough memory
			return NULL;
 8001cc0:	2300      	movs	r3, #0
		}
	}
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	b015      	add	sp, #84	; 0x54
 8001cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cca:	bf00      	nop
 8001ccc:	20000cf8 	.word	0x20000cf8
 8001cd0:	08004bfc 	.word	0x08004bfc
 8001cd4:	08004c50 	.word	0x08004c50
 8001cd8:	08004c0c 	.word	0x08004c0c

08001cdc <mm_free>:

void mm_free(void *ptr)
{
 8001cdc:	b500      	push	{lr}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	9001      	str	r0, [sp, #4]
	mem_request req = {.request=FREE, .req_id=(++cur_id), .size=0, .ptr=ptr};
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <mm_free+0x34>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <mm_free+0x34>)
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <mm_free+0x34>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	9303      	str	r3, [sp, #12]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9304      	str	r3, [sp, #16]
 8001cfa:	9b01      	ldr	r3, [sp, #4]
 8001cfc:	9305      	str	r3, [sp, #20]
	req_send(&req);
 8001cfe:	ab02      	add	r3, sp, #8
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f926 	bl	8001f52 <req_send>
}
 8001d06:	bf00      	nop
 8001d08:	b007      	add	sp, #28
 8001d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d0e:	bf00      	nop
 8001d10:	20000cf8 	.word	0x20000cf8

08001d14 <mm_realloc>:

void *mm_realloc(void *ptr, size_t size)
{
 8001d14:	b500      	push	{lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	9001      	str	r0, [sp, #4]
 8001d1a:	9100      	str	r1, [sp, #0]
	void * new_ptr = mm_malloc(size);
 8001d1c:	9800      	ldr	r0, [sp, #0]
 8001d1e:	f7ff ff71 	bl	8001c04 <mm_malloc>
 8001d22:	9003      	str	r0, [sp, #12]
	memcpy(new_ptr, ptr, size);
 8001d24:	9a00      	ldr	r2, [sp, #0]
 8001d26:	9901      	ldr	r1, [sp, #4]
 8001d28:	9803      	ldr	r0, [sp, #12]
 8001d2a:	f000 fc41 	bl	80025b0 <memcpy>
	mm_free(ptr);
 8001d2e:	9801      	ldr	r0, [sp, #4]
 8001d30:	f7ff ffd4 	bl	8001cdc <mm_free>
	return new_ptr;
 8001d34:	9b03      	ldr	r3, [sp, #12]
		memcpy(response.ptr, oldptr, size);
		mm_free(oldptr);
		return response.ptr;
	}
	*/
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	b005      	add	sp, #20
 8001d3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001d40 <mm_finish>:

// Tell server to end session
void mm_finish(void) {
 8001d40:	b500      	push	{lr}
 8001d42:	b085      	sub	sp, #20
	mem_request req = {.request=END, .req_id=(++cur_id), .size=0, .ptr=NULL};
 8001d44:	2304      	movs	r3, #4
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <mm_finish+0x30>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <mm_finish+0x30>)
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <mm_finish+0x30>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9303      	str	r3, [sp, #12]
	req_send(&req);
 8001d60:	466b      	mov	r3, sp
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f8f5 	bl	8001f52 <req_send>
}
 8001d68:	bf00      	nop
 8001d6a:	b005      	add	sp, #20
 8001d6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d70:	20000cf8 	.word	0x20000cf8

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b082      	sub	sp, #8
 8001d76:	4603      	mov	r3, r0
 8001d78:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0c      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4905      	ldr	r1, [pc, #20]	; (8001da4 <__NVIC_EnableIRQ+0x30>)
 8001d8e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9e:	bf00      	nop
 8001da0:	b002      	add	sp, #8
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b082      	sub	sp, #8
 8001daa:	4603      	mov	r3, r0
 8001dac:	9100      	str	r1, [sp, #0]
 8001dae:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0a      	blt.n	8001dd0 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	9b00      	ldr	r3, [sp, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x48>)
 8001dc0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dce:	e00b      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	9b00      	ldr	r3, [sp, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4907      	ldr	r1, [pc, #28]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	b002      	add	sp, #8
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <TIM2_IRQHandler>:

/*************************************************
* timer 2 interrupt handler
*************************************************/
void TIM2_IRQHandler(void)
{
 8001df8:	b508      	push	{r3, lr}
	systime++;
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <TIM2_IRQHandler+0x5c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <TIM2_IRQHandler+0x5c>)
 8001e02:	6013      	str	r3, [r2, #0]
	register size_t * stack_top asm("sp");

	// Stall if stack is overflowing to heap
	if (mem_heap_hi() > (void *)(stack_top)) {
 8001e04:	f7ff fe92 	bl	8001b2c <mem_heap_hi>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	466b      	mov	r3, sp
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d908      	bls.n	8001e22 <TIM2_IRQHandler+0x2a>
		sprintf(msg, "Stack overflow detected");
 8001e10:	4911      	ldr	r1, [pc, #68]	; (8001e58 <TIM2_IRQHandler+0x60>)
 8001e12:	4812      	ldr	r0, [pc, #72]	; (8001e5c <TIM2_IRQHandler+0x64>)
 8001e14:	f000 fdde 	bl	80029d4 <siprintf>
		var_print(msg);
 8001e18:	4810      	ldr	r0, [pc, #64]	; (8001e5c <TIM2_IRQHandler+0x64>)
 8001e1a:	f000 f85b 	bl	8001ed4 <var_print>
		loop();
 8001e1e:	f000 f853 	bl	8001ec8 <loop>
	}

    // clear interrupt status
    if (TIM2->DIER & 0x01) {
 8001e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00e      	beq.n	8001e4e <TIM2_IRQHandler+0x56>
        if (TIM2->SR & 0x01) {
 8001e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <TIM2_IRQHandler+0x56>
            TIM2->SR &= ~(1U << 0);
 8001e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6113      	str	r3, [r2, #16]
        }
    }
}
 8001e4e:	bf00      	nop
 8001e50:	bd08      	pop	{r3, pc}
 8001e52:	bf00      	nop
 8001e54:	200000f0 	.word	0x200000f0
 8001e58:	08004c20 	.word	0x08004c20
 8001e5c:	200008f4 	.word	0x200008f4

08001e60 <get_time>:

// Returns system time in ms
size_t get_time(void) {
	return systime;
 8001e60:	4b01      	ldr	r3, [pc, #4]	; (8001e68 <get_time+0x8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	4770      	bx	lr
 8001e68:	200000f0 	.word	0x200000f0

08001e6c <timer_init>:

/*************************************************
* main code starts from here
*************************************************/
void timer_init(void)
{
 8001e6c:	b508      	push	{r3, lr}
    /* set system clock to 100 Mhz */
    set_sysclk_to_100();
 8001e6e:	f000 fab9 	bl	80023e4 <set_sysclk_to_100>

    // enable TIM2 clock (bit0)
    RCC->APB1ENR |= (1 << 0);
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <timer_init+0x58>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <timer_init+0x58>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40

	// For STM32F411: 100M/4*2 = 50M, 50M/4999+1 = 10 khz clock speed
    TIM2->PSC = 4999;
 8001e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e82:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28

	// Set auto reload value to 100 to give 1 ms timer interrupts
    TIM2->ARR = 10;
 8001e88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c

    // Update Interrupt Enable
    TIM2->DIER |= (1 << 0);
 8001e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM2_IRQn, 2); // Priority level 2
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	201c      	movs	r0, #28
 8001ea4:	f7ff ff80 	bl	8001da8 <__NVIC_SetPriority>
    // enable TIM2 IRQ from NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8001ea8:	201c      	movs	r0, #28
 8001eaa:	f7ff ff63 	bl	8001d74 <__NVIC_EnableIRQ>

    // Enable Timer 2 module (CEN, bit0)
    TIM2->CR1 |= (1 << 0);
 8001eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	bd08      	pop	{r3, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <loop>:

char output_str[MAXLINE*2];
char msg[MAXLINE];
size_t output_offset=0;

void loop() {
 8001ec8:	b508      	push	{r3, lr}
	led_on(ORANGE);
 8001eca:	200d      	movs	r0, #13
 8001ecc:	f000 f882 	bl	8001fd4 <led_on>
	while(1) {}
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <loop+0x8>

08001ed4 <var_print>:
}

// Append printed output to output_str
void var_print(char * str) {
 8001ed4:	b500      	push	{lr}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	9001      	str	r0, [sp, #4]
	if (output_offset + strlen(str) <= MAXLINE*2) {
 8001eda:	9801      	ldr	r0, [sp, #4]
 8001edc:	f7fe f960 	bl	80001a0 <strlen>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <var_print+0x2c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eec:	d804      	bhi.n	8001ef8 <var_print+0x24>
		strcat(output_str, str);
 8001eee:	9901      	ldr	r1, [sp, #4]
 8001ef0:	4804      	ldr	r0, [pc, #16]	; (8001f04 <var_print+0x30>)
 8001ef2:	f000 fe00 	bl	8002af6 <strcat>
	} else {
		while(1){}
	}
}
 8001ef6:	e000      	b.n	8001efa <var_print+0x26>
		while(1){}
 8001ef8:	e7fe      	b.n	8001ef8 <var_print+0x24>
}
 8001efa:	b003      	add	sp, #12
 8001efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f00:	20000cf4 	.word	0x20000cf4
 8001f04:	200000f4 	.word	0x200000f4

08001f08 <send>:
	}
	return msg;
}

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 8001f08:	b500      	push	{lr}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	9001      	str	r0, [sp, #4]
 8001f0e:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_start(data, size);
 8001f10:	9900      	ldr	r1, [sp, #0]
 8001f12:	9801      	ldr	r0, [sp, #4]
 8001f14:	f000 f97a 	bl	800220c <uart_tx_start>
		uart_tx_wait();
 8001f18:	f000 f9a4 	bl	8002264 <uart_tx_wait>
	} else {
		uart_send(data, size);
	}
}
 8001f1c:	bf00      	nop
 8001f1e:	b003      	add	sp, #12
 8001f20:	f85d fb04 	ldr.w	pc, [sp], #4

08001f24 <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 8001f24:	b500      	push	{lr}
 8001f26:	b083      	sub	sp, #12
 8001f28:	9001      	str	r0, [sp, #4]
 8001f2a:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_rx_start(buffer, size);
 8001f2c:	9900      	ldr	r1, [sp, #0]
 8001f2e:	9801      	ldr	r0, [sp, #4]
 8001f30:	f000 f9a2 	bl	8002278 <uart_rx_start>
		uart_rx_wait();
 8001f34:	f000 f9cc 	bl	80022d0 <uart_rx_wait>
	} else {
		uart_receive(buffer, size);
	}
}
 8001f38:	bf00      	nop
 8001f3a:	b003      	add	sp, #12
 8001f3c:	f85d fb04 	ldr.w	pc, [sp], #4

08001f40 <mem_req_setup>:

// Initialize request communication
void mem_req_setup(void) {
 8001f40:	b508      	push	{r3, lr}
	uart_init();
 8001f42:	f000 f8b7 	bl	80020b4 <uart_init>
	led_init();
 8001f46:	f000 f86d 	bl	8002024 <led_init>
	uart_dma_init();
 8001f4a:	f000 f9ff 	bl	800234c <uart_dma_init>
}
 8001f4e:	bf00      	nop
 8001f50:	bd08      	pop	{r3, pc}

08001f52 <req_send>:

// Send request
void req_send(mem_request * buffer) {
 8001f52:	b500      	push	{lr}
 8001f54:	b083      	sub	sp, #12
 8001f56:	9001      	str	r0, [sp, #4]
	send(buffer, sizeof(mem_request));
 8001f58:	2110      	movs	r1, #16
 8001f5a:	9801      	ldr	r0, [sp, #4]
 8001f5c:	f7ff ffd4 	bl	8001f08 <send>
}
 8001f60:	bf00      	nop
 8001f62:	b003      	add	sp, #12
 8001f64:	f85d fb04 	ldr.w	pc, [sp], #4

08001f68 <req_receive>:

// Wait for response
void req_receive(mem_request * buffer) {
 8001f68:	b500      	push	{lr}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	9001      	str	r0, [sp, #4]
	receive(buffer, sizeof(mem_request));
 8001f6e:	2110      	movs	r1, #16
 8001f70:	9801      	ldr	r0, [sp, #4]
 8001f72:	f7ff ffd7 	bl	8001f24 <receive>
}
 8001f76:	bf00      	nop
 8001f78:	b003      	add	sp, #12
 8001f7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001f80 <uart_pin_setup>:
}

// Setup GPIO A2 and A3 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOA clock, bit 0 on AHB1ENR
    RCC->AHB1ENR |= (1 << 0);
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <uart_pin_setup+0x4c>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <uart_pin_setup+0x4c>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6313      	str	r3, [r2, #48]	; 0x30

    // Set pin modes as alternate mode 7 (pins 2 and 3)
    // USART2 TX and RX pins are PA2 and PA3 respectively
    GPIOA->MODER &= ~(0xFU << 4); // Reset bits 4:5 for PA2 and 6:7 for PA3
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <uart_pin_setup+0x50>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <uart_pin_setup+0x50>)
 8001f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f96:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAU << 4); // Set   bits 4:5 for PA2 and 6:7 for PA3 to alternate mode (10)
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <uart_pin_setup+0x50>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <uart_pin_setup+0x50>)
 8001f9e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001fa2:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOA->OSPEEDR |= 0x000000A0; // Set pin 2/3 to high speed mode (0b10)
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <uart_pin_setup+0x50>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <uart_pin_setup+0x50>)
 8001faa:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001fae:	6093      	str	r3, [r2, #8]

    // Choose AF7 for USART2 in Alternate Function registers
    GPIOA->AFR[0] |= (0x7 << 8); // for pin A2
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <uart_pin_setup+0x50>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <uart_pin_setup+0x50>)
 8001fb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fba:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x7 << 12); // for pin A3
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <uart_pin_setup+0x50>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a03      	ldr	r2, [pc, #12]	; (8001fd0 <uart_pin_setup+0x50>)
 8001fc2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001fc6:	6213      	str	r3, [r2, #32]
}
 8001fc8:	bf00      	nop
 8001fca:	4770      	bx	lr
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <led_on>:

// Turn on LED
void led_on(led l) {
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR |= (1U<<l);
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <led_on+0x24>)
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	4903      	ldr	r1, [pc, #12]	; (8001ff8 <led_on+0x24>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	614b      	str	r3, [r1, #20]
}
 8001ff0:	bf00      	nop
 8001ff2:	b002      	add	sp, #8
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40020c00 	.word	0x40020c00

08001ffc <led_off>:

// Turn off LED
void led_off(led l) {
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	4603      	mov	r3, r0
 8002000:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR &= ~(1U<<l);
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <led_off+0x24>)
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	4902      	ldr	r1, [pc, #8]	; (8002020 <led_off+0x24>)
 8002016:	4013      	ands	r3, r2
 8002018:	614b      	str	r3, [r1, #20]
}
 800201a:	bf00      	nop
 800201c:	b002      	add	sp, #8
 800201e:	4770      	bx	lr
 8002020:	40020c00 	.word	0x40020c00

08002024 <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOD clock
	RCC->AHB1ENR |= 0x00000008;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <led_init+0x34>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <led_init+0x34>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	6313      	str	r3, [r2, #48]	; 0x30

	// Turn on output mode
	GPIOD->MODER &= 0x00FFFFFF;
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <led_init+0x38>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a09      	ldr	r2, [pc, #36]	; (800205c <led_init+0x38>)
 8002036:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800203a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0x55000000;
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <led_init+0x38>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <led_init+0x38>)
 8002042:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8002046:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOD->ODR &= 0x0FFF;
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <led_init+0x38>)
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <led_init+0x38>)
 800204e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002052:	6153      	str	r3, [r2, #20]
}
 8002054:	bf00      	nop
 8002056:	4770      	bx	lr
 8002058:	40023800 	.word	0x40023800
 800205c:	40020c00 	.word	0x40020c00

08002060 <uart_enable>:

// Initialize UART 2
static void uart_enable(void) {
    // enable USART2 clock, bit 17 on APB1ENR
    RCC->APB1ENR |= (1 << 17);
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <uart_enable+0x4c>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	4a11      	ldr	r2, [pc, #68]	; (80020ac <uart_enable+0x4c>)
 8002066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206a:	6413      	str	r3, [r2, #64]	; 0x40

    // USART2 parity control, bit 9
    // USART2->CR1 |= (0 << 9); // 0 - no parity

    // USART2 RX enable, RE bit 2
    USART2->CR1 |= (1 << 2);
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <uart_enable+0x50>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <uart_enable+0x50>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	60d3      	str	r3, [r2, #12]
    // USART2 TX enable, TE bit 3
    USART2->CR1 |= (1 << 3);
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <uart_enable+0x50>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <uart_enable+0x50>)
 800207e:	f043 0308 	orr.w	r3, r3, #8
 8002082:	60d3      	str	r3, [r2, #12]

    // Enable usart2 - UE, bit 13
    USART2->CR1 |= (1 << 13);
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <uart_enable+0x50>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <uart_enable+0x50>)
 800208a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800208e:	60d3      	str	r3, [r2, #12]
	// For STM32F411: fCK = 25 Mhz (Sysclk/4), Baudrate = 115200, OVER8 = 0
	// USARTDIV = fCK / baud / 8 * (2-OVER8)
	// USARTDIV = 25Mhz / 115200 / 16 = 13.5633
	// Fraction: 0.5633*16 = 9
	// Mantissa: 13
    USART2->BRR |= (13 << 4); // Mantissa
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <uart_enable+0x50>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a06      	ldr	r2, [pc, #24]	; (80020b0 <uart_enable+0x50>)
 8002096:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800209a:	6093      	str	r3, [r2, #8]
    USART2->BRR |= 9; // Fraction
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <uart_enable+0x50>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <uart_enable+0x50>)
 80020a2:	f043 0309 	orr.w	r3, r3, #9
 80020a6:	6093      	str	r3, [r2, #8]
}	
 80020a8:	bf00      	nop
 80020aa:	4770      	bx	lr
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40004400 	.word	0x40004400

080020b4 <uart_init>:

void uart_init(void)
{
 80020b4:	b508      	push	{r3, lr}
    /* set system clock to 100 Mhz */
    set_sysclk_to_100();
 80020b6:	f000 f995 	bl	80023e4 <set_sysclk_to_100>

	uart_pin_setup();
 80020ba:	f7ff ff61 	bl	8001f80 <uart_pin_setup>
	uart_enable();
 80020be:	f7ff ffcf 	bl	8002060 <uart_enable>
}
 80020c2:	bf00      	nop
 80020c4:	bd08      	pop	{r3, pc}
	...

080020c8 <__NVIC_EnableIRQ>:
{
 80020c8:	b082      	sub	sp, #8
 80020ca:	4603      	mov	r3, r0
 80020cc:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0c      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4905      	ldr	r1, [pc, #20]	; (80020f8 <__NVIC_EnableIRQ+0x30>)
 80020e2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020f2:	bf00      	nop
 80020f4:	b002      	add	sp, #8
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
{
 80020fc:	b082      	sub	sp, #8
 80020fe:	4603      	mov	r3, r0
 8002100:	9100      	str	r1, [sp, #0]
 8002102:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0a      	blt.n	8002124 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	9b00      	ldr	r3, [sp, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	490c      	ldr	r1, [pc, #48]	; (8002144 <__NVIC_SetPriority+0x48>)
 8002114:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002122:	e00b      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	9b00      	ldr	r3, [sp, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <__NVIC_SetPriority+0x4c>)
 800212a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	b002      	add	sp, #8
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <uart_tx_setup>:
static int transmitting=0;

// Setup uart transmission
static void uart_tx_setup(void) {
	// Clear control register
	DMA1_Stream6->CR = 0;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <uart_tx_setup+0x54>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
	// Wait for DMA to disable
	while(DMA1_Stream6->CR & (1<<0));
 8002152:	bf00      	nop
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <uart_tx_setup+0x54>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f9      	bne.n	8002154 <uart_tx_setup+0x8>
	// Select channel 4 for usart2_tx
	DMA1_Stream6->CR |= (0x4<<25);
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <uart_tx_setup+0x54>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <uart_tx_setup+0x54>)
 8002166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800216a:	6013      	str	r3, [r2, #0]
	// Enable tx complete interrupt
	DMA1_Stream6->CR |= DMA_SxCR_TCIE;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <uart_tx_setup+0x54>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <uart_tx_setup+0x54>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	6013      	str	r3, [r2, #0]
	// Enable memory increment mode
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <uart_tx_setup+0x54>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <uart_tx_setup+0x54>)
 800217e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002182:	6013      	str	r3, [r2, #0]
	// Priority level high
	DMA1_Stream6->CR |= (0x2<<16);
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <uart_tx_setup+0x54>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <uart_tx_setup+0x54>)
 800218a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218e:	6013      	str	r3, [r2, #0]
	// DIR bit set to 01: source SxM0AR, dest SxPAR
	DMA1_Stream6->CR |= (0x1 << 6);
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <uart_tx_setup+0x54>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a02      	ldr	r2, [pc, #8]	; (80021a0 <uart_tx_setup+0x54>)
 8002196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	4770      	bx	lr
 80021a0:	400260a0 	.word	0x400260a0

080021a4 <uart_rx_setup>:

// Setup uart reception
static void uart_rx_setup(void) {
	// Enable receive DMA
	USART2->CR3 |= USART_CR3_DMAR;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <uart_rx_setup+0x60>)
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	4a16      	ldr	r2, [pc, #88]	; (8002204 <uart_rx_setup+0x60>)
 80021aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ae:	6153      	str	r3, [r2, #20]
	// Clear control register
	DMA1_Stream5->CR = 0;
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <uart_rx_setup+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
	// Wait for DMA to disable
	while(DMA1_Stream5->CR & (1<<0));
 80021b6:	bf00      	nop
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <uart_rx_setup+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <uart_rx_setup+0x14>
	// Select channel 4 for usart2_rx
	DMA1_Stream5->CR |= (0x4<<25);
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <uart_rx_setup+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <uart_rx_setup+0x64>)
 80021ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021ce:	6013      	str	r3, [r2, #0]
	// Enable rx complete interrupt
	DMA1_Stream5->CR |= DMA_SxCR_TCIE;
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <uart_rx_setup+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <uart_rx_setup+0x64>)
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	6013      	str	r3, [r2, #0]
	// Enable memory increment mode
	DMA1_Stream5->CR |= DMA_SxCR_MINC;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <uart_rx_setup+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a09      	ldr	r2, [pc, #36]	; (8002208 <uart_rx_setup+0x64>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e6:	6013      	str	r3, [r2, #0]
	// Priority level high
	DMA1_Stream5->CR |= (0x2<<16);
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <uart_rx_setup+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <uart_rx_setup+0x64>)
 80021ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f2:	6013      	str	r3, [r2, #0]
	// DIR bit set to 00: source SxPAR, dest SxM0AR
	DMA1_Stream5->CR &= ~(0xC << 6);
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <uart_rx_setup+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a03      	ldr	r2, [pc, #12]	; (8002208 <uart_rx_setup+0x64>)
 80021fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	4770      	bx	lr
 8002204:	40004400 	.word	0x40004400
 8002208:	40026088 	.word	0x40026088

0800220c <uart_tx_start>:

// Start uart transmission of size bytes of data
void uart_tx_start(void * data, size_t size) {
 800220c:	b500      	push	{lr}
 800220e:	b083      	sub	sp, #12
 8002210:	9001      	str	r0, [sp, #4]
 8002212:	9100      	str	r1, [sp, #0]
	uart_tx_wait();
 8002214:	f000 f826 	bl	8002264 <uart_tx_wait>
	uart_tx_setup();
 8002218:	f7ff ff98 	bl	800214c <uart_tx_setup>

	// Source memory address
	DMA1_Stream6->M0AR = (uint32_t)data;
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <uart_tx_start+0x4c>)
 800221e:	9b01      	ldr	r3, [sp, #4]
 8002220:	60d3      	str	r3, [r2, #12]
	// Destination memory address
	DMA1_Stream6->PAR = (uint32_t)&(USART2->DR);
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <uart_tx_start+0x4c>)
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <uart_tx_start+0x50>)
 8002226:	609a      	str	r2, [r3, #8]
	// Transfer size
	DMA1_Stream6->NDTR = size;
 8002228:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <uart_tx_start+0x4c>)
 800222a:	9b00      	ldr	r3, [sp, #0]
 800222c:	6053      	str	r3, [r2, #4]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA1_Stream6_IRQn, 3);
 800222e:	2103      	movs	r1, #3
 8002230:	2011      	movs	r0, #17
 8002232:	f7ff ff63 	bl	80020fc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002236:	2011      	movs	r0, #17
 8002238:	f7ff ff46 	bl	80020c8 <__NVIC_EnableIRQ>

	// Enable DMA
	DMA1_Stream6->CR |= DMA_SxCR_EN;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <uart_tx_start+0x4c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <uart_tx_start+0x4c>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6013      	str	r3, [r2, #0]

	transmitting=1;
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <uart_tx_start+0x54>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	b003      	add	sp, #12
 8002252:	f85d fb04 	ldr.w	pc, [sp], #4
 8002256:	bf00      	nop
 8002258:	400260a0 	.word	0x400260a0
 800225c:	40004404 	.word	0x40004404
 8002260:	20000d00 	.word	0x20000d00

08002264 <uart_tx_wait>:

// Wait for uart transmission to finish
void uart_tx_wait(void) {
	while (transmitting);
 8002264:	bf00      	nop
 8002266:	4b03      	ldr	r3, [pc, #12]	; (8002274 <uart_tx_wait+0x10>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1fb      	bne.n	8002266 <uart_tx_wait+0x2>
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	4770      	bx	lr
 8002274:	20000d00 	.word	0x20000d00

08002278 <uart_rx_start>:

// Start uart reception of size bytes of data into buffer
void uart_rx_start(void * buffer, size_t size) {
 8002278:	b500      	push	{lr}
 800227a:	b083      	sub	sp, #12
 800227c:	9001      	str	r0, [sp, #4]
 800227e:	9100      	str	r1, [sp, #0]
	uart_rx_wait();
 8002280:	f000 f826 	bl	80022d0 <uart_rx_wait>
	uart_rx_setup();
 8002284:	f7ff ff8e 	bl	80021a4 <uart_rx_setup>

	// Source memory address
	DMA1_Stream5->PAR = (uint32_t)&(USART2->DR);
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <uart_rx_start+0x4c>)
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <uart_rx_start+0x50>)
 800228c:	609a      	str	r2, [r3, #8]
	// Destination memory address
	DMA1_Stream5->M0AR = (uint32_t)buffer;
 800228e:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <uart_rx_start+0x4c>)
 8002290:	9b01      	ldr	r3, [sp, #4]
 8002292:	60d3      	str	r3, [r2, #12]
	// Transfer size
	DMA1_Stream5->NDTR = size;
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <uart_rx_start+0x4c>)
 8002296:	9b00      	ldr	r3, [sp, #0]
 8002298:	6053      	str	r3, [r2, #4]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA1_Stream5_IRQn, 3);
 800229a:	2103      	movs	r1, #3
 800229c:	2010      	movs	r0, #16
 800229e:	f7ff ff2d 	bl	80020fc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80022a2:	2010      	movs	r0, #16
 80022a4:	f7ff ff10 	bl	80020c8 <__NVIC_EnableIRQ>

	// Enable DMA
	DMA1_Stream5->CR |= DMA_SxCR_EN;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <uart_rx_start+0x4c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <uart_rx_start+0x4c>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6013      	str	r3, [r2, #0]

	receiving=1;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <uart_rx_start+0x54>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	b003      	add	sp, #12
 80022be:	f85d fb04 	ldr.w	pc, [sp], #4
 80022c2:	bf00      	nop
 80022c4:	40026088 	.word	0x40026088
 80022c8:	40004404 	.word	0x40004404
 80022cc:	20000cfc 	.word	0x20000cfc

080022d0 <uart_rx_wait>:

// Wait for uart reception to finish
void uart_rx_wait(void) {
	while (receiving);
 80022d0:	bf00      	nop
 80022d2:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <uart_rx_wait+0x10>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1fb      	bne.n	80022d2 <uart_rx_wait+0x2>
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	4770      	bx	lr
 80022e0:	20000cfc 	.word	0x20000cfc

080022e4 <DMA1_Stream5_IRQHandler>:

// UART reception finish interrupt
void DMA1_Stream5_IRQHandler(void)
{
    // clear stream receive complete interrupt - bit11 for stream 5
    if (DMA1->HISR & DMA_HISR_TCIF5) {
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <DMA1_Stream5_IRQHandler+0x30>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00e      	beq.n	800230e <DMA1_Stream5_IRQHandler+0x2a>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF5;
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <DMA1_Stream5_IRQHandler+0x30>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <DMA1_Stream5_IRQHandler+0x30>)
 80022f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022fa:	60d3      	str	r3, [r2, #12]
		receiving = 0;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <DMA1_Stream5_IRQHandler+0x34>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
		// Disable receive DMA
		USART2->CR3 &= ~USART_CR3_DMAR;
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <DMA1_Stream5_IRQHandler+0x38>)
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <DMA1_Stream5_IRQHandler+0x38>)
 8002308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800230c:	6153      	str	r3, [r2, #20]
    }
}
 800230e:	bf00      	nop
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40026000 	.word	0x40026000
 8002318:	20000cfc 	.word	0x20000cfc
 800231c:	40004400 	.word	0x40004400

08002320 <DMA1_Stream6_IRQHandler>:

// UART transmission finish interrupt
void DMA1_Stream6_IRQHandler(void)
{
    // clear stream transfer complete interrupt - bit21 for stream 6
    if (DMA1->HISR & DMA_HISR_TCIF6) {
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <DMA1_Stream6_IRQHandler+0x24>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <DMA1_Stream6_IRQHandler+0x1e>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF6;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <DMA1_Stream6_IRQHandler+0x24>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <DMA1_Stream6_IRQHandler+0x24>)
 8002332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002336:	60d3      	str	r3, [r2, #12]
		transmitting = 0;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <DMA1_Stream6_IRQHandler+0x28>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
    }
}
 800233e:	bf00      	nop
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40026000 	.word	0x40026000
 8002348:	20000d00 	.word	0x20000d00

0800234c <uart_dma_init>:

// Setup UART DMA
void uart_dma_init(void) {
	// Enable transmit DMA
	USART2->CR3 |= USART_CR3_DMAT;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <uart_dma_init+0x34>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <uart_dma_init+0x34>)
 8002352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002356:	6153      	str	r3, [r2, #20]
	// Enable receive DMA
	USART2->CR3 |= USART_CR3_DMAR;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <uart_dma_init+0x34>)
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4a08      	ldr	r2, [pc, #32]	; (8002380 <uart_dma_init+0x34>)
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	6153      	str	r3, [r2, #20]
	// Clear TC bit
	USART2->SR &= ~USART_SR_TC;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <uart_dma_init+0x34>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a05      	ldr	r2, [pc, #20]	; (8002380 <uart_dma_init+0x34>)
 800236a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800236e:	6013      	str	r3, [r2, #0]
	// Enable DMA1 clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <uart_dma_init+0x38>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a03      	ldr	r2, [pc, #12]	; (8002384 <uart_dma_init+0x38>)
 8002376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800237c:	bf00      	nop
 800237e:	4770      	bx	lr
 8002380:	40004400 	.word	0x40004400
 8002384:	40023800 	.word	0x40023800

08002388 <SystemInit>:
*************************************************/
void SystemInit(void)
{
	/* FPU settings, can be enabled from project makefile */
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <SystemInit+0x50>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <SystemInit+0x50>)
 8002390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <SystemInit+0x54>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <SystemInit+0x54>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <SystemInit+0x54>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <SystemInit+0x54>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <SystemInit+0x54>)
 80023b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <SystemInit+0x54>)
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <SystemInit+0x58>)
 80023be:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <SystemInit+0x54>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a05      	ldr	r2, [pc, #20]	; (80023dc <SystemInit+0x54>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ca:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <SystemInit+0x54>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
}
 80023d2:	bf00      	nop
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00
 80023dc:	40023800 	.word	0x40023800
 80023e0:	24003010 	.word	0x24003010

080023e4 <set_sysclk_to_100>:
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_100(void)
{
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <set_sysclk_to_100+0xac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a29      	ldr	r2, [pc, #164]	; (8002490 <set_sysclk_to_100+0xac>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 80023f0:	bf00      	nop
 80023f2:	4b27      	ldr	r3, [pc, #156]	; (8002490 <set_sysclk_to_100+0xac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f9      	beq.n	80023f2 <set_sysclk_to_100+0xe>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <set_sysclk_to_100+0xac>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a23      	ldr	r2, [pc, #140]	; (8002490 <set_sysclk_to_100+0xac>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <set_sysclk_to_100+0xb0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a21      	ldr	r2, [pc, #132]	; (8002494 <set_sysclk_to_100+0xb0>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <set_sysclk_to_100+0xac>)
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <set_sysclk_to_100+0xac>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <set_sysclk_to_100+0xac>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <set_sysclk_to_100+0xac>)
 8002424:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002428:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /2 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (4 << 13);
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <set_sysclk_to_100+0xac>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <set_sysclk_to_100+0xac>)
 8002430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002434:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <set_sysclk_to_100+0xac>)
 8002438:	4a17      	ldr	r2, [pc, #92]	; (8002498 <set_sysclk_to_100+0xb4>)
 800243a:	605a      	str	r2, [r3, #4]
	               (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <set_sysclk_to_100+0xac>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a13      	ldr	r2, [pc, #76]	; (8002490 <set_sysclk_to_100+0xac>)
 8002442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002446:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 8002448:	bf00      	nop
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <set_sysclk_to_100+0xac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f9      	beq.n	800244a <set_sysclk_to_100+0x66>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <set_sysclk_to_100+0xb8>)
 8002458:	f240 7205 	movw	r2, #1797	; 0x705
 800245c:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <set_sysclk_to_100+0xac>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <set_sysclk_to_100+0xac>)
 8002464:	f023 0303 	bic.w	r3, r3, #3
 8002468:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <set_sysclk_to_100+0xac>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <set_sysclk_to_100+0xac>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 8002476:	bf00      	nop
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <set_sysclk_to_100+0xac>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f9      	beq.n	8002478 <set_sysclk_to_100+0x94>

	// update SystemCoreClock variable
	SystemCoreClock = 100000000;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <set_sysclk_to_100+0xbc>)
 8002486:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <set_sysclk_to_100+0xc0>)
 8002488:	601a      	str	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000
 8002498:	08416008 	.word	0x08416008
 800249c:	40023c00 	.word	0x40023c00
 80024a0:	2000005c 	.word	0x2000005c
 80024a4:	05f5e100 	.word	0x05f5e100

080024a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024ac:	480d      	ldr	r0, [pc, #52]	; (80024e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ae:	490e      	ldr	r1, [pc, #56]	; (80024e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024b0:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024c4:	4c0b      	ldr	r4, [pc, #44]	; (80024f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024d2:	f7ff ff59 	bl	8002388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024d6:	f000 f847 	bl	8002568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024da:	f7fe faf5 	bl	8000ac8 <main>
  bx  lr    
 80024de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80024ec:	080054ec 	.word	0x080054ec
  ldr r2, =_sbss
 80024f0:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80024f4:	20000d18 	.word	0x20000d18

080024f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <ADC_IRQHandler>
	...

080024fc <__assert_func>:
 80024fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024fe:	4614      	mov	r4, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <__assert_func+0x2c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4605      	mov	r5, r0
 8002508:	68d8      	ldr	r0, [r3, #12]
 800250a:	b14c      	cbz	r4, 8002520 <__assert_func+0x24>
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <__assert_func+0x30>)
 800250e:	9100      	str	r1, [sp, #0]
 8002510:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002514:	4906      	ldr	r1, [pc, #24]	; (8002530 <__assert_func+0x34>)
 8002516:	462b      	mov	r3, r5
 8002518:	f000 f814 	bl	8002544 <fiprintf>
 800251c:	f000 fdbe 	bl	800309c <abort>
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <__assert_func+0x38>)
 8002522:	461c      	mov	r4, r3
 8002524:	e7f3      	b.n	800250e <__assert_func+0x12>
 8002526:	bf00      	nop
 8002528:	20000060 	.word	0x20000060
 800252c:	08004c5a 	.word	0x08004c5a
 8002530:	08004c67 	.word	0x08004c67
 8002534:	08004c95 	.word	0x08004c95

08002538 <__errno>:
 8002538:	4b01      	ldr	r3, [pc, #4]	; (8002540 <__errno+0x8>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000060 	.word	0x20000060

08002544 <fiprintf>:
 8002544:	b40e      	push	{r1, r2, r3}
 8002546:	b503      	push	{r0, r1, lr}
 8002548:	4601      	mov	r1, r0
 800254a:	ab03      	add	r3, sp, #12
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <fiprintf+0x20>)
 800254e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002552:	6800      	ldr	r0, [r0, #0]
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	f000 f8ff 	bl	8002758 <_vfiprintf_r>
 800255a:	b002      	add	sp, #8
 800255c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002560:	b003      	add	sp, #12
 8002562:	4770      	bx	lr
 8002564:	20000060 	.word	0x20000060

08002568 <__libc_init_array>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	4d0d      	ldr	r5, [pc, #52]	; (80025a0 <__libc_init_array+0x38>)
 800256c:	4c0d      	ldr	r4, [pc, #52]	; (80025a4 <__libc_init_array+0x3c>)
 800256e:	1b64      	subs	r4, r4, r5
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	2600      	movs	r6, #0
 8002574:	42a6      	cmp	r6, r4
 8002576:	d109      	bne.n	800258c <__libc_init_array+0x24>
 8002578:	4d0b      	ldr	r5, [pc, #44]	; (80025a8 <__libc_init_array+0x40>)
 800257a:	4c0c      	ldr	r4, [pc, #48]	; (80025ac <__libc_init_array+0x44>)
 800257c:	f002 f8be 	bl	80046fc <_init>
 8002580:	1b64      	subs	r4, r4, r5
 8002582:	10a4      	asrs	r4, r4, #2
 8002584:	2600      	movs	r6, #0
 8002586:	42a6      	cmp	r6, r4
 8002588:	d105      	bne.n	8002596 <__libc_init_array+0x2e>
 800258a:	bd70      	pop	{r4, r5, r6, pc}
 800258c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002590:	4798      	blx	r3
 8002592:	3601      	adds	r6, #1
 8002594:	e7ee      	b.n	8002574 <__libc_init_array+0xc>
 8002596:	f855 3b04 	ldr.w	r3, [r5], #4
 800259a:	4798      	blx	r3
 800259c:	3601      	adds	r6, #1
 800259e:	e7f2      	b.n	8002586 <__libc_init_array+0x1e>
 80025a0:	080054e4 	.word	0x080054e4
 80025a4:	080054e4 	.word	0x080054e4
 80025a8:	080054e4 	.word	0x080054e4
 80025ac:	080054e8 	.word	0x080054e8

080025b0 <memcpy>:
 80025b0:	440a      	add	r2, r1
 80025b2:	4291      	cmp	r1, r2
 80025b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80025b8:	d100      	bne.n	80025bc <memcpy+0xc>
 80025ba:	4770      	bx	lr
 80025bc:	b510      	push	{r4, lr}
 80025be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025c6:	4291      	cmp	r1, r2
 80025c8:	d1f9      	bne.n	80025be <memcpy+0xe>
 80025ca:	bd10      	pop	{r4, pc}

080025cc <memset>:
 80025cc:	4402      	add	r2, r0
 80025ce:	4603      	mov	r3, r0
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d100      	bne.n	80025d6 <memset+0xa>
 80025d4:	4770      	bx	lr
 80025d6:	f803 1b01 	strb.w	r1, [r3], #1
 80025da:	e7f9      	b.n	80025d0 <memset+0x4>

080025dc <sbrk_aligned>:
 80025dc:	b570      	push	{r4, r5, r6, lr}
 80025de:	4e0e      	ldr	r6, [pc, #56]	; (8002618 <sbrk_aligned+0x3c>)
 80025e0:	460c      	mov	r4, r1
 80025e2:	6831      	ldr	r1, [r6, #0]
 80025e4:	4605      	mov	r5, r0
 80025e6:	b911      	cbnz	r1, 80025ee <sbrk_aligned+0x12>
 80025e8:	f000 f9e4 	bl	80029b4 <_sbrk_r>
 80025ec:	6030      	str	r0, [r6, #0]
 80025ee:	4621      	mov	r1, r4
 80025f0:	4628      	mov	r0, r5
 80025f2:	f000 f9df 	bl	80029b4 <_sbrk_r>
 80025f6:	1c43      	adds	r3, r0, #1
 80025f8:	d00a      	beq.n	8002610 <sbrk_aligned+0x34>
 80025fa:	1cc4      	adds	r4, r0, #3
 80025fc:	f024 0403 	bic.w	r4, r4, #3
 8002600:	42a0      	cmp	r0, r4
 8002602:	d007      	beq.n	8002614 <sbrk_aligned+0x38>
 8002604:	1a21      	subs	r1, r4, r0
 8002606:	4628      	mov	r0, r5
 8002608:	f000 f9d4 	bl	80029b4 <_sbrk_r>
 800260c:	3001      	adds	r0, #1
 800260e:	d101      	bne.n	8002614 <sbrk_aligned+0x38>
 8002610:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002614:	4620      	mov	r0, r4
 8002616:	bd70      	pop	{r4, r5, r6, pc}
 8002618:	20000d08 	.word	0x20000d08

0800261c <_malloc_r>:
 800261c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002620:	1ccd      	adds	r5, r1, #3
 8002622:	f025 0503 	bic.w	r5, r5, #3
 8002626:	3508      	adds	r5, #8
 8002628:	2d0c      	cmp	r5, #12
 800262a:	bf38      	it	cc
 800262c:	250c      	movcc	r5, #12
 800262e:	2d00      	cmp	r5, #0
 8002630:	4607      	mov	r7, r0
 8002632:	db01      	blt.n	8002638 <_malloc_r+0x1c>
 8002634:	42a9      	cmp	r1, r5
 8002636:	d905      	bls.n	8002644 <_malloc_r+0x28>
 8002638:	230c      	movs	r3, #12
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	2600      	movs	r6, #0
 800263e:	4630      	mov	r0, r6
 8002640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002644:	4e2e      	ldr	r6, [pc, #184]	; (8002700 <_malloc_r+0xe4>)
 8002646:	f000 ff8d 	bl	8003564 <__malloc_lock>
 800264a:	6833      	ldr	r3, [r6, #0]
 800264c:	461c      	mov	r4, r3
 800264e:	bb34      	cbnz	r4, 800269e <_malloc_r+0x82>
 8002650:	4629      	mov	r1, r5
 8002652:	4638      	mov	r0, r7
 8002654:	f7ff ffc2 	bl	80025dc <sbrk_aligned>
 8002658:	1c43      	adds	r3, r0, #1
 800265a:	4604      	mov	r4, r0
 800265c:	d14d      	bne.n	80026fa <_malloc_r+0xde>
 800265e:	6834      	ldr	r4, [r6, #0]
 8002660:	4626      	mov	r6, r4
 8002662:	2e00      	cmp	r6, #0
 8002664:	d140      	bne.n	80026e8 <_malloc_r+0xcc>
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	4631      	mov	r1, r6
 800266a:	4638      	mov	r0, r7
 800266c:	eb04 0803 	add.w	r8, r4, r3
 8002670:	f000 f9a0 	bl	80029b4 <_sbrk_r>
 8002674:	4580      	cmp	r8, r0
 8002676:	d13a      	bne.n	80026ee <_malloc_r+0xd2>
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	3503      	adds	r5, #3
 800267c:	1aed      	subs	r5, r5, r3
 800267e:	f025 0503 	bic.w	r5, r5, #3
 8002682:	3508      	adds	r5, #8
 8002684:	2d0c      	cmp	r5, #12
 8002686:	bf38      	it	cc
 8002688:	250c      	movcc	r5, #12
 800268a:	4629      	mov	r1, r5
 800268c:	4638      	mov	r0, r7
 800268e:	f7ff ffa5 	bl	80025dc <sbrk_aligned>
 8002692:	3001      	adds	r0, #1
 8002694:	d02b      	beq.n	80026ee <_malloc_r+0xd2>
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	442b      	add	r3, r5
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	e00e      	b.n	80026bc <_malloc_r+0xa0>
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	1b52      	subs	r2, r2, r5
 80026a2:	d41e      	bmi.n	80026e2 <_malloc_r+0xc6>
 80026a4:	2a0b      	cmp	r2, #11
 80026a6:	d916      	bls.n	80026d6 <_malloc_r+0xba>
 80026a8:	1961      	adds	r1, r4, r5
 80026aa:	42a3      	cmp	r3, r4
 80026ac:	6025      	str	r5, [r4, #0]
 80026ae:	bf18      	it	ne
 80026b0:	6059      	strne	r1, [r3, #4]
 80026b2:	6863      	ldr	r3, [r4, #4]
 80026b4:	bf08      	it	eq
 80026b6:	6031      	streq	r1, [r6, #0]
 80026b8:	5162      	str	r2, [r4, r5]
 80026ba:	604b      	str	r3, [r1, #4]
 80026bc:	4638      	mov	r0, r7
 80026be:	f104 060b 	add.w	r6, r4, #11
 80026c2:	f000 ff55 	bl	8003570 <__malloc_unlock>
 80026c6:	f026 0607 	bic.w	r6, r6, #7
 80026ca:	1d23      	adds	r3, r4, #4
 80026cc:	1af2      	subs	r2, r6, r3
 80026ce:	d0b6      	beq.n	800263e <_malloc_r+0x22>
 80026d0:	1b9b      	subs	r3, r3, r6
 80026d2:	50a3      	str	r3, [r4, r2]
 80026d4:	e7b3      	b.n	800263e <_malloc_r+0x22>
 80026d6:	6862      	ldr	r2, [r4, #4]
 80026d8:	42a3      	cmp	r3, r4
 80026da:	bf0c      	ite	eq
 80026dc:	6032      	streq	r2, [r6, #0]
 80026de:	605a      	strne	r2, [r3, #4]
 80026e0:	e7ec      	b.n	80026bc <_malloc_r+0xa0>
 80026e2:	4623      	mov	r3, r4
 80026e4:	6864      	ldr	r4, [r4, #4]
 80026e6:	e7b2      	b.n	800264e <_malloc_r+0x32>
 80026e8:	4634      	mov	r4, r6
 80026ea:	6876      	ldr	r6, [r6, #4]
 80026ec:	e7b9      	b.n	8002662 <_malloc_r+0x46>
 80026ee:	230c      	movs	r3, #12
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	4638      	mov	r0, r7
 80026f4:	f000 ff3c 	bl	8003570 <__malloc_unlock>
 80026f8:	e7a1      	b.n	800263e <_malloc_r+0x22>
 80026fa:	6025      	str	r5, [r4, #0]
 80026fc:	e7de      	b.n	80026bc <_malloc_r+0xa0>
 80026fe:	bf00      	nop
 8002700:	20000d04 	.word	0x20000d04

08002704 <__sfputc_r>:
 8002704:	6893      	ldr	r3, [r2, #8]
 8002706:	3b01      	subs	r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	b410      	push	{r4}
 800270c:	6093      	str	r3, [r2, #8]
 800270e:	da08      	bge.n	8002722 <__sfputc_r+0x1e>
 8002710:	6994      	ldr	r4, [r2, #24]
 8002712:	42a3      	cmp	r3, r4
 8002714:	db01      	blt.n	800271a <__sfputc_r+0x16>
 8002716:	290a      	cmp	r1, #10
 8002718:	d103      	bne.n	8002722 <__sfputc_r+0x1e>
 800271a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800271e:	f000 bbeb 	b.w	8002ef8 <__swbuf_r>
 8002722:	6813      	ldr	r3, [r2, #0]
 8002724:	1c58      	adds	r0, r3, #1
 8002726:	6010      	str	r0, [r2, #0]
 8002728:	7019      	strb	r1, [r3, #0]
 800272a:	4608      	mov	r0, r1
 800272c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002730:	4770      	bx	lr

08002732 <__sfputs_r>:
 8002732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002734:	4606      	mov	r6, r0
 8002736:	460f      	mov	r7, r1
 8002738:	4614      	mov	r4, r2
 800273a:	18d5      	adds	r5, r2, r3
 800273c:	42ac      	cmp	r4, r5
 800273e:	d101      	bne.n	8002744 <__sfputs_r+0x12>
 8002740:	2000      	movs	r0, #0
 8002742:	e007      	b.n	8002754 <__sfputs_r+0x22>
 8002744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002748:	463a      	mov	r2, r7
 800274a:	4630      	mov	r0, r6
 800274c:	f7ff ffda 	bl	8002704 <__sfputc_r>
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	d1f3      	bne.n	800273c <__sfputs_r+0xa>
 8002754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002758 <_vfiprintf_r>:
 8002758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800275c:	460d      	mov	r5, r1
 800275e:	b09d      	sub	sp, #116	; 0x74
 8002760:	4614      	mov	r4, r2
 8002762:	4698      	mov	r8, r3
 8002764:	4606      	mov	r6, r0
 8002766:	b118      	cbz	r0, 8002770 <_vfiprintf_r+0x18>
 8002768:	6983      	ldr	r3, [r0, #24]
 800276a:	b90b      	cbnz	r3, 8002770 <_vfiprintf_r+0x18>
 800276c:	f000 fdc8 	bl	8003300 <__sinit>
 8002770:	4b88      	ldr	r3, [pc, #544]	; (8002994 <_vfiprintf_r+0x23c>)
 8002772:	429d      	cmp	r5, r3
 8002774:	d11b      	bne.n	80027ae <_vfiprintf_r+0x56>
 8002776:	6875      	ldr	r5, [r6, #4]
 8002778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800277a:	07d9      	lsls	r1, r3, #31
 800277c:	d405      	bmi.n	800278a <_vfiprintf_r+0x32>
 800277e:	89ab      	ldrh	r3, [r5, #12]
 8002780:	059a      	lsls	r2, r3, #22
 8002782:	d402      	bmi.n	800278a <_vfiprintf_r+0x32>
 8002784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002786:	f000 fe59 	bl	800343c <__retarget_lock_acquire_recursive>
 800278a:	89ab      	ldrh	r3, [r5, #12]
 800278c:	071b      	lsls	r3, r3, #28
 800278e:	d501      	bpl.n	8002794 <_vfiprintf_r+0x3c>
 8002790:	692b      	ldr	r3, [r5, #16]
 8002792:	b9eb      	cbnz	r3, 80027d0 <_vfiprintf_r+0x78>
 8002794:	4629      	mov	r1, r5
 8002796:	4630      	mov	r0, r6
 8002798:	f000 fc12 	bl	8002fc0 <__swsetup_r>
 800279c:	b1c0      	cbz	r0, 80027d0 <_vfiprintf_r+0x78>
 800279e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027a0:	07dc      	lsls	r4, r3, #31
 80027a2:	d50e      	bpl.n	80027c2 <_vfiprintf_r+0x6a>
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a8:	b01d      	add	sp, #116	; 0x74
 80027aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ae:	4b7a      	ldr	r3, [pc, #488]	; (8002998 <_vfiprintf_r+0x240>)
 80027b0:	429d      	cmp	r5, r3
 80027b2:	d101      	bne.n	80027b8 <_vfiprintf_r+0x60>
 80027b4:	68b5      	ldr	r5, [r6, #8]
 80027b6:	e7df      	b.n	8002778 <_vfiprintf_r+0x20>
 80027b8:	4b78      	ldr	r3, [pc, #480]	; (800299c <_vfiprintf_r+0x244>)
 80027ba:	429d      	cmp	r5, r3
 80027bc:	bf08      	it	eq
 80027be:	68f5      	ldreq	r5, [r6, #12]
 80027c0:	e7da      	b.n	8002778 <_vfiprintf_r+0x20>
 80027c2:	89ab      	ldrh	r3, [r5, #12]
 80027c4:	0598      	lsls	r0, r3, #22
 80027c6:	d4ed      	bmi.n	80027a4 <_vfiprintf_r+0x4c>
 80027c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027ca:	f000 fe38 	bl	800343e <__retarget_lock_release_recursive>
 80027ce:	e7e9      	b.n	80027a4 <_vfiprintf_r+0x4c>
 80027d0:	2300      	movs	r3, #0
 80027d2:	9309      	str	r3, [sp, #36]	; 0x24
 80027d4:	2320      	movs	r3, #32
 80027d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027da:	f8cd 800c 	str.w	r8, [sp, #12]
 80027de:	2330      	movs	r3, #48	; 0x30
 80027e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80029a0 <_vfiprintf_r+0x248>
 80027e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027e8:	f04f 0901 	mov.w	r9, #1
 80027ec:	4623      	mov	r3, r4
 80027ee:	469a      	mov	sl, r3
 80027f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027f4:	b10a      	cbz	r2, 80027fa <_vfiprintf_r+0xa2>
 80027f6:	2a25      	cmp	r2, #37	; 0x25
 80027f8:	d1f9      	bne.n	80027ee <_vfiprintf_r+0x96>
 80027fa:	ebba 0b04 	subs.w	fp, sl, r4
 80027fe:	d00b      	beq.n	8002818 <_vfiprintf_r+0xc0>
 8002800:	465b      	mov	r3, fp
 8002802:	4622      	mov	r2, r4
 8002804:	4629      	mov	r1, r5
 8002806:	4630      	mov	r0, r6
 8002808:	f7ff ff93 	bl	8002732 <__sfputs_r>
 800280c:	3001      	adds	r0, #1
 800280e:	f000 80a9 	beq.w	8002964 <_vfiprintf_r+0x20c>
 8002812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002814:	445a      	add	r2, fp
 8002816:	9209      	str	r2, [sp, #36]	; 0x24
 8002818:	f89a 3000 	ldrb.w	r3, [sl]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a1 	beq.w	8002964 <_vfiprintf_r+0x20c>
 8002822:	2300      	movs	r3, #0
 8002824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800282c:	f10a 0a01 	add.w	sl, sl, #1
 8002830:	9304      	str	r3, [sp, #16]
 8002832:	9307      	str	r3, [sp, #28]
 8002834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002838:	931a      	str	r3, [sp, #104]	; 0x68
 800283a:	4654      	mov	r4, sl
 800283c:	2205      	movs	r2, #5
 800283e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002842:	4857      	ldr	r0, [pc, #348]	; (80029a0 <_vfiprintf_r+0x248>)
 8002844:	f7fd fcb4 	bl	80001b0 <memchr>
 8002848:	9a04      	ldr	r2, [sp, #16]
 800284a:	b9d8      	cbnz	r0, 8002884 <_vfiprintf_r+0x12c>
 800284c:	06d1      	lsls	r1, r2, #27
 800284e:	bf44      	itt	mi
 8002850:	2320      	movmi	r3, #32
 8002852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002856:	0713      	lsls	r3, r2, #28
 8002858:	bf44      	itt	mi
 800285a:	232b      	movmi	r3, #43	; 0x2b
 800285c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002860:	f89a 3000 	ldrb.w	r3, [sl]
 8002864:	2b2a      	cmp	r3, #42	; 0x2a
 8002866:	d015      	beq.n	8002894 <_vfiprintf_r+0x13c>
 8002868:	9a07      	ldr	r2, [sp, #28]
 800286a:	4654      	mov	r4, sl
 800286c:	2000      	movs	r0, #0
 800286e:	f04f 0c0a 	mov.w	ip, #10
 8002872:	4621      	mov	r1, r4
 8002874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002878:	3b30      	subs	r3, #48	; 0x30
 800287a:	2b09      	cmp	r3, #9
 800287c:	d94d      	bls.n	800291a <_vfiprintf_r+0x1c2>
 800287e:	b1b0      	cbz	r0, 80028ae <_vfiprintf_r+0x156>
 8002880:	9207      	str	r2, [sp, #28]
 8002882:	e014      	b.n	80028ae <_vfiprintf_r+0x156>
 8002884:	eba0 0308 	sub.w	r3, r0, r8
 8002888:	fa09 f303 	lsl.w	r3, r9, r3
 800288c:	4313      	orrs	r3, r2
 800288e:	9304      	str	r3, [sp, #16]
 8002890:	46a2      	mov	sl, r4
 8002892:	e7d2      	b.n	800283a <_vfiprintf_r+0xe2>
 8002894:	9b03      	ldr	r3, [sp, #12]
 8002896:	1d19      	adds	r1, r3, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	9103      	str	r1, [sp, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	bfbb      	ittet	lt
 80028a0:	425b      	neglt	r3, r3
 80028a2:	f042 0202 	orrlt.w	r2, r2, #2
 80028a6:	9307      	strge	r3, [sp, #28]
 80028a8:	9307      	strlt	r3, [sp, #28]
 80028aa:	bfb8      	it	lt
 80028ac:	9204      	strlt	r2, [sp, #16]
 80028ae:	7823      	ldrb	r3, [r4, #0]
 80028b0:	2b2e      	cmp	r3, #46	; 0x2e
 80028b2:	d10c      	bne.n	80028ce <_vfiprintf_r+0x176>
 80028b4:	7863      	ldrb	r3, [r4, #1]
 80028b6:	2b2a      	cmp	r3, #42	; 0x2a
 80028b8:	d134      	bne.n	8002924 <_vfiprintf_r+0x1cc>
 80028ba:	9b03      	ldr	r3, [sp, #12]
 80028bc:	1d1a      	adds	r2, r3, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	9203      	str	r2, [sp, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bfb8      	it	lt
 80028c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80028ca:	3402      	adds	r4, #2
 80028cc:	9305      	str	r3, [sp, #20]
 80028ce:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80029b0 <_vfiprintf_r+0x258>
 80028d2:	7821      	ldrb	r1, [r4, #0]
 80028d4:	2203      	movs	r2, #3
 80028d6:	4650      	mov	r0, sl
 80028d8:	f7fd fc6a 	bl	80001b0 <memchr>
 80028dc:	b138      	cbz	r0, 80028ee <_vfiprintf_r+0x196>
 80028de:	9b04      	ldr	r3, [sp, #16]
 80028e0:	eba0 000a 	sub.w	r0, r0, sl
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	4082      	lsls	r2, r0
 80028e8:	4313      	orrs	r3, r2
 80028ea:	3401      	adds	r4, #1
 80028ec:	9304      	str	r3, [sp, #16]
 80028ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f2:	482c      	ldr	r0, [pc, #176]	; (80029a4 <_vfiprintf_r+0x24c>)
 80028f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028f8:	2206      	movs	r2, #6
 80028fa:	f7fd fc59 	bl	80001b0 <memchr>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d03f      	beq.n	8002982 <_vfiprintf_r+0x22a>
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <_vfiprintf_r+0x250>)
 8002904:	bb1b      	cbnz	r3, 800294e <_vfiprintf_r+0x1f6>
 8002906:	9b03      	ldr	r3, [sp, #12]
 8002908:	3307      	adds	r3, #7
 800290a:	f023 0307 	bic.w	r3, r3, #7
 800290e:	3308      	adds	r3, #8
 8002910:	9303      	str	r3, [sp, #12]
 8002912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002914:	443b      	add	r3, r7
 8002916:	9309      	str	r3, [sp, #36]	; 0x24
 8002918:	e768      	b.n	80027ec <_vfiprintf_r+0x94>
 800291a:	fb0c 3202 	mla	r2, ip, r2, r3
 800291e:	460c      	mov	r4, r1
 8002920:	2001      	movs	r0, #1
 8002922:	e7a6      	b.n	8002872 <_vfiprintf_r+0x11a>
 8002924:	2300      	movs	r3, #0
 8002926:	3401      	adds	r4, #1
 8002928:	9305      	str	r3, [sp, #20]
 800292a:	4619      	mov	r1, r3
 800292c:	f04f 0c0a 	mov.w	ip, #10
 8002930:	4620      	mov	r0, r4
 8002932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002936:	3a30      	subs	r2, #48	; 0x30
 8002938:	2a09      	cmp	r2, #9
 800293a:	d903      	bls.n	8002944 <_vfiprintf_r+0x1ec>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0c6      	beq.n	80028ce <_vfiprintf_r+0x176>
 8002940:	9105      	str	r1, [sp, #20]
 8002942:	e7c4      	b.n	80028ce <_vfiprintf_r+0x176>
 8002944:	fb0c 2101 	mla	r1, ip, r1, r2
 8002948:	4604      	mov	r4, r0
 800294a:	2301      	movs	r3, #1
 800294c:	e7f0      	b.n	8002930 <_vfiprintf_r+0x1d8>
 800294e:	ab03      	add	r3, sp, #12
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	462a      	mov	r2, r5
 8002954:	4b15      	ldr	r3, [pc, #84]	; (80029ac <_vfiprintf_r+0x254>)
 8002956:	a904      	add	r1, sp, #16
 8002958:	4630      	mov	r0, r6
 800295a:	f3af 8000 	nop.w
 800295e:	4607      	mov	r7, r0
 8002960:	1c78      	adds	r0, r7, #1
 8002962:	d1d6      	bne.n	8002912 <_vfiprintf_r+0x1ba>
 8002964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002966:	07d9      	lsls	r1, r3, #31
 8002968:	d405      	bmi.n	8002976 <_vfiprintf_r+0x21e>
 800296a:	89ab      	ldrh	r3, [r5, #12]
 800296c:	059a      	lsls	r2, r3, #22
 800296e:	d402      	bmi.n	8002976 <_vfiprintf_r+0x21e>
 8002970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002972:	f000 fd64 	bl	800343e <__retarget_lock_release_recursive>
 8002976:	89ab      	ldrh	r3, [r5, #12]
 8002978:	065b      	lsls	r3, r3, #25
 800297a:	f53f af13 	bmi.w	80027a4 <_vfiprintf_r+0x4c>
 800297e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002980:	e712      	b.n	80027a8 <_vfiprintf_r+0x50>
 8002982:	ab03      	add	r3, sp, #12
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	462a      	mov	r2, r5
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <_vfiprintf_r+0x254>)
 800298a:	a904      	add	r1, sp, #16
 800298c:	4630      	mov	r0, r6
 800298e:	f001 fa09 	bl	8003da4 <_printf_i>
 8002992:	e7e4      	b.n	800295e <_vfiprintf_r+0x206>
 8002994:	08005364 	.word	0x08005364
 8002998:	08005384 	.word	0x08005384
 800299c:	08005344 	.word	0x08005344
 80029a0:	08004c9c 	.word	0x08004c9c
 80029a4:	08004ca6 	.word	0x08004ca6
 80029a8:	00000000 	.word	0x00000000
 80029ac:	08002733 	.word	0x08002733
 80029b0:	08004ca2 	.word	0x08004ca2

080029b4 <_sbrk_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	4d06      	ldr	r5, [pc, #24]	; (80029d0 <_sbrk_r+0x1c>)
 80029b8:	2300      	movs	r3, #0
 80029ba:	4604      	mov	r4, r0
 80029bc:	4608      	mov	r0, r1
 80029be:	602b      	str	r3, [r5, #0]
 80029c0:	f001 fe84 	bl	80046cc <_sbrk>
 80029c4:	1c43      	adds	r3, r0, #1
 80029c6:	d102      	bne.n	80029ce <_sbrk_r+0x1a>
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	b103      	cbz	r3, 80029ce <_sbrk_r+0x1a>
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	bd38      	pop	{r3, r4, r5, pc}
 80029d0:	20000d10 	.word	0x20000d10

080029d4 <siprintf>:
 80029d4:	b40e      	push	{r1, r2, r3}
 80029d6:	b500      	push	{lr}
 80029d8:	b09c      	sub	sp, #112	; 0x70
 80029da:	ab1d      	add	r3, sp, #116	; 0x74
 80029dc:	9002      	str	r0, [sp, #8]
 80029de:	9006      	str	r0, [sp, #24]
 80029e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029e4:	4809      	ldr	r0, [pc, #36]	; (8002a0c <siprintf+0x38>)
 80029e6:	9107      	str	r1, [sp, #28]
 80029e8:	9104      	str	r1, [sp, #16]
 80029ea:	4909      	ldr	r1, [pc, #36]	; (8002a10 <siprintf+0x3c>)
 80029ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80029f0:	9105      	str	r1, [sp, #20]
 80029f2:	6800      	ldr	r0, [r0, #0]
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	a902      	add	r1, sp, #8
 80029f8:	f000 fe96 	bl	8003728 <_svfiprintf_r>
 80029fc:	9b02      	ldr	r3, [sp, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	b01c      	add	sp, #112	; 0x70
 8002a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a08:	b003      	add	sp, #12
 8002a0a:	4770      	bx	lr
 8002a0c:	20000060 	.word	0x20000060
 8002a10:	ffff0208 	.word	0xffff0208

08002a14 <siscanf>:
 8002a14:	b40e      	push	{r1, r2, r3}
 8002a16:	b510      	push	{r4, lr}
 8002a18:	b09f      	sub	sp, #124	; 0x7c
 8002a1a:	ac21      	add	r4, sp, #132	; 0x84
 8002a1c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002a20:	f854 2b04 	ldr.w	r2, [r4], #4
 8002a24:	9201      	str	r2, [sp, #4]
 8002a26:	f8ad 101c 	strh.w	r1, [sp, #28]
 8002a2a:	9004      	str	r0, [sp, #16]
 8002a2c:	9008      	str	r0, [sp, #32]
 8002a2e:	f7fd fbb7 	bl	80001a0 <strlen>
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <siscanf+0x50>)
 8002a34:	9005      	str	r0, [sp, #20]
 8002a36:	9009      	str	r0, [sp, #36]	; 0x24
 8002a38:	930d      	str	r3, [sp, #52]	; 0x34
 8002a3a:	480b      	ldr	r0, [pc, #44]	; (8002a68 <siscanf+0x54>)
 8002a3c:	9a01      	ldr	r2, [sp, #4]
 8002a3e:	6800      	ldr	r0, [r0, #0]
 8002a40:	9403      	str	r4, [sp, #12]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9311      	str	r3, [sp, #68]	; 0x44
 8002a46:	9316      	str	r3, [sp, #88]	; 0x58
 8002a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002a50:	a904      	add	r1, sp, #16
 8002a52:	4623      	mov	r3, r4
 8002a54:	f000 ffc0 	bl	80039d8 <__ssvfiscanf_r>
 8002a58:	b01f      	add	sp, #124	; 0x7c
 8002a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a5e:	b003      	add	sp, #12
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	08002a8f 	.word	0x08002a8f
 8002a68:	20000060 	.word	0x20000060

08002a6c <__sread>:
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	460c      	mov	r4, r1
 8002a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a74:	f001 fc06 	bl	8004284 <_read_r>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	bfab      	itete	ge
 8002a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8002a80:	181b      	addge	r3, r3, r0
 8002a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a86:	bfac      	ite	ge
 8002a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a8a:	81a3      	strhlt	r3, [r4, #12]
 8002a8c:	bd10      	pop	{r4, pc}

08002a8e <__seofread>:
 8002a8e:	2000      	movs	r0, #0
 8002a90:	4770      	bx	lr

08002a92 <__swrite>:
 8002a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a96:	461f      	mov	r7, r3
 8002a98:	898b      	ldrh	r3, [r1, #12]
 8002a9a:	05db      	lsls	r3, r3, #23
 8002a9c:	4605      	mov	r5, r0
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	4616      	mov	r6, r2
 8002aa2:	d505      	bpl.n	8002ab0 <__swrite+0x1e>
 8002aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f000 fcc8 	bl	8003440 <_lseek_r>
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aba:	81a3      	strh	r3, [r4, #12]
 8002abc:	4632      	mov	r2, r6
 8002abe:	463b      	mov	r3, r7
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac6:	f000 ba69 	b.w	8002f9c <_write_r>

08002aca <__sseek>:
 8002aca:	b510      	push	{r4, lr}
 8002acc:	460c      	mov	r4, r1
 8002ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad2:	f000 fcb5 	bl	8003440 <_lseek_r>
 8002ad6:	1c43      	adds	r3, r0, #1
 8002ad8:	89a3      	ldrh	r3, [r4, #12]
 8002ada:	bf15      	itete	ne
 8002adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ae6:	81a3      	strheq	r3, [r4, #12]
 8002ae8:	bf18      	it	ne
 8002aea:	81a3      	strhne	r3, [r4, #12]
 8002aec:	bd10      	pop	{r4, pc}

08002aee <__sclose>:
 8002aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002af2:	f000 badb 	b.w	80030ac <_close_r>

08002af6 <strcat>:
 8002af6:	b510      	push	{r4, lr}
 8002af8:	4602      	mov	r2, r0
 8002afa:	7814      	ldrb	r4, [r2, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	3201      	adds	r2, #1
 8002b00:	2c00      	cmp	r4, #0
 8002b02:	d1fa      	bne.n	8002afa <strcat+0x4>
 8002b04:	3b01      	subs	r3, #1
 8002b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b0e:	2a00      	cmp	r2, #0
 8002b10:	d1f9      	bne.n	8002b06 <strcat+0x10>
 8002b12:	bd10      	pop	{r4, pc}

08002b14 <_strerror_r>:
 8002b14:	b510      	push	{r4, lr}
 8002b16:	4604      	mov	r4, r0
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	288e      	cmp	r0, #142	; 0x8e
 8002b1e:	f200 8130 	bhi.w	8002d82 <_strerror_r+0x26e>
 8002b22:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002b26:	0139      	.short	0x0139
 8002b28:	0092008f 	.word	0x0092008f
 8002b2c:	00960094 	.word	0x00960094
 8002b30:	009a0098 	.word	0x009a0098
 8002b34:	009e009c 	.word	0x009e009c
 8002b38:	00a400a2 	.word	0x00a400a2
 8002b3c:	00aa00a8 	.word	0x00aa00a8
 8002b40:	00ae00ac 	.word	0x00ae00ac
 8002b44:	00b0012e 	.word	0x00b0012e
 8002b48:	00b400b2 	.word	0x00b400b2
 8002b4c:	00b800b6 	.word	0x00b800b6
 8002b50:	00c000be 	.word	0x00c000be
 8002b54:	00c800c6 	.word	0x00c800c6
 8002b58:	00cc00ca 	.word	0x00cc00ca
 8002b5c:	00d200ce 	.word	0x00d200ce
 8002b60:	00d800d6 	.word	0x00d800d6
 8002b64:	00dc00da 	.word	0x00dc00da
 8002b68:	00e000de 	.word	0x00e000de
 8002b6c:	00e400e2 	.word	0x00e400e2
 8002b70:	012e012e 	.word	0x012e012e
 8002b74:	012e012e 	.word	0x012e012e
 8002b78:	012e012e 	.word	0x012e012e
 8002b7c:	012e012e 	.word	0x012e012e
 8002b80:	00ec00e8 	.word	0x00ec00e8
 8002b84:	012e012e 	.word	0x012e012e
 8002b88:	012e012e 	.word	0x012e012e
 8002b8c:	012e012e 	.word	0x012e012e
 8002b90:	012e012e 	.word	0x012e012e
 8002b94:	012e012e 	.word	0x012e012e
 8002b98:	012e012e 	.word	0x012e012e
 8002b9c:	00ee012e 	.word	0x00ee012e
 8002ba0:	00f00108 	.word	0x00f00108
 8002ba4:	012e00f2 	.word	0x012e00f2
 8002ba8:	012e012e 	.word	0x012e012e
 8002bac:	012e00f4 	.word	0x012e00f4
 8002bb0:	012e012e 	.word	0x012e012e
 8002bb4:	012e00f6 	.word	0x012e00f6
 8002bb8:	00fa012e 	.word	0x00fa012e
 8002bbc:	012e012e 	.word	0x012e012e
 8002bc0:	012e00fc 	.word	0x012e00fc
 8002bc4:	012e012e 	.word	0x012e012e
 8002bc8:	012e012e 	.word	0x012e012e
 8002bcc:	012e012e 	.word	0x012e012e
 8002bd0:	012e012e 	.word	0x012e012e
 8002bd4:	00fe012e 	.word	0x00fe012e
 8002bd8:	0100012e 	.word	0x0100012e
 8002bdc:	01040102 	.word	0x01040102
 8002be0:	012e012e 	.word	0x012e012e
 8002be4:	012e0126 	.word	0x012e0126
 8002be8:	012e012e 	.word	0x012e012e
 8002bec:	012e012e 	.word	0x012e012e
 8002bf0:	012e012e 	.word	0x012e012e
 8002bf4:	0114012e 	.word	0x0114012e
 8002bf8:	010a0106 	.word	0x010a0106
 8002bfc:	010e010c 	.word	0x010e010c
 8002c00:	012e0110 	.word	0x012e0110
 8002c04:	01160112 	.word	0x01160112
 8002c08:	00ea011a 	.word	0x00ea011a
 8002c0c:	012c00c2 	.word	0x012c00c2
 8002c10:	00d000ba 	.word	0x00d000ba
 8002c14:	00a000bc 	.word	0x00a000bc
 8002c18:	012a00a6 	.word	0x012a00a6
 8002c1c:	012e00f8 	.word	0x012e00f8
 8002c20:	00c40118 	.word	0x00c40118
 8002c24:	011c011e 	.word	0x011c011e
 8002c28:	012e012e 	.word	0x012e012e
 8002c2c:	012e012e 	.word	0x012e012e
 8002c30:	00d4012e 	.word	0x00d4012e
 8002c34:	012e012e 	.word	0x012e012e
 8002c38:	00e6012e 	.word	0x00e6012e
 8002c3c:	01200128 	.word	0x01200128
 8002c40:	01240122 	.word	0x01240122
 8002c44:	4b55      	ldr	r3, [pc, #340]	; (8002d9c <_strerror_r+0x288>)
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <_strerror_r+0x28c>)
 8002c4c:	e7fb      	b.n	8002c46 <_strerror_r+0x132>
 8002c4e:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <_strerror_r+0x290>)
 8002c50:	e7f9      	b.n	8002c46 <_strerror_r+0x132>
 8002c52:	4b55      	ldr	r3, [pc, #340]	; (8002da8 <_strerror_r+0x294>)
 8002c54:	e7f7      	b.n	8002c46 <_strerror_r+0x132>
 8002c56:	4b55      	ldr	r3, [pc, #340]	; (8002dac <_strerror_r+0x298>)
 8002c58:	e7f5      	b.n	8002c46 <_strerror_r+0x132>
 8002c5a:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <_strerror_r+0x29c>)
 8002c5c:	e7f3      	b.n	8002c46 <_strerror_r+0x132>
 8002c5e:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <_strerror_r+0x2a0>)
 8002c60:	e7f1      	b.n	8002c46 <_strerror_r+0x132>
 8002c62:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <_strerror_r+0x2a4>)
 8002c64:	e7ef      	b.n	8002c46 <_strerror_r+0x132>
 8002c66:	4b55      	ldr	r3, [pc, #340]	; (8002dbc <_strerror_r+0x2a8>)
 8002c68:	e7ed      	b.n	8002c46 <_strerror_r+0x132>
 8002c6a:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <_strerror_r+0x2ac>)
 8002c6c:	e7eb      	b.n	8002c46 <_strerror_r+0x132>
 8002c6e:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <_strerror_r+0x2b0>)
 8002c70:	e7e9      	b.n	8002c46 <_strerror_r+0x132>
 8002c72:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <_strerror_r+0x2b4>)
 8002c74:	e7e7      	b.n	8002c46 <_strerror_r+0x132>
 8002c76:	4b55      	ldr	r3, [pc, #340]	; (8002dcc <_strerror_r+0x2b8>)
 8002c78:	e7e5      	b.n	8002c46 <_strerror_r+0x132>
 8002c7a:	4b55      	ldr	r3, [pc, #340]	; (8002dd0 <_strerror_r+0x2bc>)
 8002c7c:	e7e3      	b.n	8002c46 <_strerror_r+0x132>
 8002c7e:	4b55      	ldr	r3, [pc, #340]	; (8002dd4 <_strerror_r+0x2c0>)
 8002c80:	e7e1      	b.n	8002c46 <_strerror_r+0x132>
 8002c82:	4b55      	ldr	r3, [pc, #340]	; (8002dd8 <_strerror_r+0x2c4>)
 8002c84:	e7df      	b.n	8002c46 <_strerror_r+0x132>
 8002c86:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <_strerror_r+0x2c8>)
 8002c88:	e7dd      	b.n	8002c46 <_strerror_r+0x132>
 8002c8a:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <_strerror_r+0x2cc>)
 8002c8c:	e7db      	b.n	8002c46 <_strerror_r+0x132>
 8002c8e:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <_strerror_r+0x2d0>)
 8002c90:	e7d9      	b.n	8002c46 <_strerror_r+0x132>
 8002c92:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <_strerror_r+0x2d4>)
 8002c94:	e7d7      	b.n	8002c46 <_strerror_r+0x132>
 8002c96:	4b55      	ldr	r3, [pc, #340]	; (8002dec <_strerror_r+0x2d8>)
 8002c98:	e7d5      	b.n	8002c46 <_strerror_r+0x132>
 8002c9a:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <_strerror_r+0x2dc>)
 8002c9c:	e7d3      	b.n	8002c46 <_strerror_r+0x132>
 8002c9e:	4b55      	ldr	r3, [pc, #340]	; (8002df4 <_strerror_r+0x2e0>)
 8002ca0:	e7d1      	b.n	8002c46 <_strerror_r+0x132>
 8002ca2:	4b55      	ldr	r3, [pc, #340]	; (8002df8 <_strerror_r+0x2e4>)
 8002ca4:	e7cf      	b.n	8002c46 <_strerror_r+0x132>
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <_strerror_r+0x2e8>)
 8002ca8:	e7cd      	b.n	8002c46 <_strerror_r+0x132>
 8002caa:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <_strerror_r+0x2ec>)
 8002cac:	e7cb      	b.n	8002c46 <_strerror_r+0x132>
 8002cae:	4b55      	ldr	r3, [pc, #340]	; (8002e04 <_strerror_r+0x2f0>)
 8002cb0:	e7c9      	b.n	8002c46 <_strerror_r+0x132>
 8002cb2:	4b55      	ldr	r3, [pc, #340]	; (8002e08 <_strerror_r+0x2f4>)
 8002cb4:	e7c7      	b.n	8002c46 <_strerror_r+0x132>
 8002cb6:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <_strerror_r+0x2f8>)
 8002cb8:	e7c5      	b.n	8002c46 <_strerror_r+0x132>
 8002cba:	4b55      	ldr	r3, [pc, #340]	; (8002e10 <_strerror_r+0x2fc>)
 8002cbc:	e7c3      	b.n	8002c46 <_strerror_r+0x132>
 8002cbe:	4b55      	ldr	r3, [pc, #340]	; (8002e14 <_strerror_r+0x300>)
 8002cc0:	e7c1      	b.n	8002c46 <_strerror_r+0x132>
 8002cc2:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <_strerror_r+0x304>)
 8002cc4:	e7bf      	b.n	8002c46 <_strerror_r+0x132>
 8002cc6:	4b55      	ldr	r3, [pc, #340]	; (8002e1c <_strerror_r+0x308>)
 8002cc8:	e7bd      	b.n	8002c46 <_strerror_r+0x132>
 8002cca:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <_strerror_r+0x30c>)
 8002ccc:	e7bb      	b.n	8002c46 <_strerror_r+0x132>
 8002cce:	4b55      	ldr	r3, [pc, #340]	; (8002e24 <_strerror_r+0x310>)
 8002cd0:	e7b9      	b.n	8002c46 <_strerror_r+0x132>
 8002cd2:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <_strerror_r+0x314>)
 8002cd4:	e7b7      	b.n	8002c46 <_strerror_r+0x132>
 8002cd6:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <_strerror_r+0x318>)
 8002cd8:	e7b5      	b.n	8002c46 <_strerror_r+0x132>
 8002cda:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <_strerror_r+0x31c>)
 8002cdc:	e7b3      	b.n	8002c46 <_strerror_r+0x132>
 8002cde:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <_strerror_r+0x320>)
 8002ce0:	e7b1      	b.n	8002c46 <_strerror_r+0x132>
 8002ce2:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <_strerror_r+0x324>)
 8002ce4:	e7af      	b.n	8002c46 <_strerror_r+0x132>
 8002ce6:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <_strerror_r+0x328>)
 8002ce8:	e7ad      	b.n	8002c46 <_strerror_r+0x132>
 8002cea:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <_strerror_r+0x32c>)
 8002cec:	e7ab      	b.n	8002c46 <_strerror_r+0x132>
 8002cee:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <_strerror_r+0x330>)
 8002cf0:	e7a9      	b.n	8002c46 <_strerror_r+0x132>
 8002cf2:	4b55      	ldr	r3, [pc, #340]	; (8002e48 <_strerror_r+0x334>)
 8002cf4:	e7a7      	b.n	8002c46 <_strerror_r+0x132>
 8002cf6:	4b55      	ldr	r3, [pc, #340]	; (8002e4c <_strerror_r+0x338>)
 8002cf8:	e7a5      	b.n	8002c46 <_strerror_r+0x132>
 8002cfa:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <_strerror_r+0x33c>)
 8002cfc:	e7a3      	b.n	8002c46 <_strerror_r+0x132>
 8002cfe:	4b55      	ldr	r3, [pc, #340]	; (8002e54 <_strerror_r+0x340>)
 8002d00:	e7a1      	b.n	8002c46 <_strerror_r+0x132>
 8002d02:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <_strerror_r+0x344>)
 8002d04:	e79f      	b.n	8002c46 <_strerror_r+0x132>
 8002d06:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <_strerror_r+0x348>)
 8002d08:	e79d      	b.n	8002c46 <_strerror_r+0x132>
 8002d0a:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <_strerror_r+0x34c>)
 8002d0c:	e79b      	b.n	8002c46 <_strerror_r+0x132>
 8002d0e:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <_strerror_r+0x350>)
 8002d10:	e799      	b.n	8002c46 <_strerror_r+0x132>
 8002d12:	4b55      	ldr	r3, [pc, #340]	; (8002e68 <_strerror_r+0x354>)
 8002d14:	e797      	b.n	8002c46 <_strerror_r+0x132>
 8002d16:	4b55      	ldr	r3, [pc, #340]	; (8002e6c <_strerror_r+0x358>)
 8002d18:	e795      	b.n	8002c46 <_strerror_r+0x132>
 8002d1a:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <_strerror_r+0x35c>)
 8002d1c:	e793      	b.n	8002c46 <_strerror_r+0x132>
 8002d1e:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <_strerror_r+0x360>)
 8002d20:	e791      	b.n	8002c46 <_strerror_r+0x132>
 8002d22:	4b55      	ldr	r3, [pc, #340]	; (8002e78 <_strerror_r+0x364>)
 8002d24:	e78f      	b.n	8002c46 <_strerror_r+0x132>
 8002d26:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <_strerror_r+0x368>)
 8002d28:	e78d      	b.n	8002c46 <_strerror_r+0x132>
 8002d2a:	4b55      	ldr	r3, [pc, #340]	; (8002e80 <_strerror_r+0x36c>)
 8002d2c:	e78b      	b.n	8002c46 <_strerror_r+0x132>
 8002d2e:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <_strerror_r+0x370>)
 8002d30:	e789      	b.n	8002c46 <_strerror_r+0x132>
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <_strerror_r+0x374>)
 8002d34:	e787      	b.n	8002c46 <_strerror_r+0x132>
 8002d36:	4b55      	ldr	r3, [pc, #340]	; (8002e8c <_strerror_r+0x378>)
 8002d38:	e785      	b.n	8002c46 <_strerror_r+0x132>
 8002d3a:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <_strerror_r+0x37c>)
 8002d3c:	e783      	b.n	8002c46 <_strerror_r+0x132>
 8002d3e:	4b55      	ldr	r3, [pc, #340]	; (8002e94 <_strerror_r+0x380>)
 8002d40:	e781      	b.n	8002c46 <_strerror_r+0x132>
 8002d42:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <_strerror_r+0x384>)
 8002d44:	e77f      	b.n	8002c46 <_strerror_r+0x132>
 8002d46:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <_strerror_r+0x388>)
 8002d48:	e77d      	b.n	8002c46 <_strerror_r+0x132>
 8002d4a:	4b55      	ldr	r3, [pc, #340]	; (8002ea0 <_strerror_r+0x38c>)
 8002d4c:	e77b      	b.n	8002c46 <_strerror_r+0x132>
 8002d4e:	4b55      	ldr	r3, [pc, #340]	; (8002ea4 <_strerror_r+0x390>)
 8002d50:	e779      	b.n	8002c46 <_strerror_r+0x132>
 8002d52:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <_strerror_r+0x394>)
 8002d54:	e777      	b.n	8002c46 <_strerror_r+0x132>
 8002d56:	4b55      	ldr	r3, [pc, #340]	; (8002eac <_strerror_r+0x398>)
 8002d58:	e775      	b.n	8002c46 <_strerror_r+0x132>
 8002d5a:	4b55      	ldr	r3, [pc, #340]	; (8002eb0 <_strerror_r+0x39c>)
 8002d5c:	e773      	b.n	8002c46 <_strerror_r+0x132>
 8002d5e:	4b55      	ldr	r3, [pc, #340]	; (8002eb4 <_strerror_r+0x3a0>)
 8002d60:	e771      	b.n	8002c46 <_strerror_r+0x132>
 8002d62:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <_strerror_r+0x3a4>)
 8002d64:	e76f      	b.n	8002c46 <_strerror_r+0x132>
 8002d66:	4b55      	ldr	r3, [pc, #340]	; (8002ebc <_strerror_r+0x3a8>)
 8002d68:	e76d      	b.n	8002c46 <_strerror_r+0x132>
 8002d6a:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <_strerror_r+0x3ac>)
 8002d6c:	e76b      	b.n	8002c46 <_strerror_r+0x132>
 8002d6e:	4b55      	ldr	r3, [pc, #340]	; (8002ec4 <_strerror_r+0x3b0>)
 8002d70:	e769      	b.n	8002c46 <_strerror_r+0x132>
 8002d72:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <_strerror_r+0x3b4>)
 8002d74:	e767      	b.n	8002c46 <_strerror_r+0x132>
 8002d76:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <_strerror_r+0x3b8>)
 8002d78:	e765      	b.n	8002c46 <_strerror_r+0x132>
 8002d7a:	4b55      	ldr	r3, [pc, #340]	; (8002ed0 <_strerror_r+0x3bc>)
 8002d7c:	e763      	b.n	8002c46 <_strerror_r+0x132>
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <_strerror_r+0x3c0>)
 8002d80:	e761      	b.n	8002c46 <_strerror_r+0x132>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	461a      	movne	r2, r3
 8002d88:	4622      	moveq	r2, r4
 8002d8a:	f000 f8b3 	bl	8002ef4 <_user_strerror>
 8002d8e:	4b52      	ldr	r3, [pc, #328]	; (8002ed8 <_strerror_r+0x3c4>)
 8002d90:	2800      	cmp	r0, #0
 8002d92:	bf18      	it	ne
 8002d94:	4603      	movne	r3, r0
 8002d96:	e756      	b.n	8002c46 <_strerror_r+0x132>
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <_strerror_r+0x3c8>)
 8002d9a:	e754      	b.n	8002c46 <_strerror_r+0x132>
 8002d9c:	08004cb5 	.word	0x08004cb5
 8002da0:	08004cbf 	.word	0x08004cbf
 8002da4:	08004cd9 	.word	0x08004cd9
 8002da8:	08004ce9 	.word	0x08004ce9
 8002dac:	08004d01 	.word	0x08004d01
 8002db0:	08004d0b 	.word	0x08004d0b
 8002db4:	08004d25 	.word	0x08004d25
 8002db8:	08004d37 	.word	0x08004d37
 8002dbc:	08004d49 	.word	0x08004d49
 8002dc0:	08004d62 	.word	0x08004d62
 8002dc4:	08004d72 	.word	0x08004d72
 8002dc8:	08004d7e 	.word	0x08004d7e
 8002dcc:	08004d9b 	.word	0x08004d9b
 8002dd0:	08004dad 	.word	0x08004dad
 8002dd4:	08004dbe 	.word	0x08004dbe
 8002dd8:	08004dd0 	.word	0x08004dd0
 8002ddc:	08004ddc 	.word	0x08004ddc
 8002de0:	08004df4 	.word	0x08004df4
 8002de4:	08004e00 	.word	0x08004e00
 8002de8:	08004e12 	.word	0x08004e12
 8002dec:	08004e21 	.word	0x08004e21
 8002df0:	08004e31 	.word	0x08004e31
 8002df4:	08004e3e 	.word	0x08004e3e
 8002df8:	08004e5d 	.word	0x08004e5d
 8002dfc:	08004e6c 	.word	0x08004e6c
 8002e00:	08004e7d 	.word	0x08004e7d
 8002e04:	08004ea1 	.word	0x08004ea1
 8002e08:	08004ebf 	.word	0x08004ebf
 8002e0c:	08004edd 	.word	0x08004edd
 8002e10:	08004efd 	.word	0x08004efd
 8002e14:	08004f14 	.word	0x08004f14
 8002e18:	08004f23 	.word	0x08004f23
 8002e1c:	08004f32 	.word	0x08004f32
 8002e20:	08004f46 	.word	0x08004f46
 8002e24:	08004f5e 	.word	0x08004f5e
 8002e28:	08004f6c 	.word	0x08004f6c
 8002e2c:	08004f79 	.word	0x08004f79
 8002e30:	08004f8f 	.word	0x08004f8f
 8002e34:	08004f9e 	.word	0x08004f9e
 8002e38:	08004faa 	.word	0x08004faa
 8002e3c:	08004fd9 	.word	0x08004fd9
 8002e40:	08004fea 	.word	0x08004fea
 8002e44:	08005005 	.word	0x08005005
 8002e48:	08005018 	.word	0x08005018
 8002e4c:	0800502e 	.word	0x0800502e
 8002e50:	08005037 	.word	0x08005037
 8002e54:	0800504e 	.word	0x0800504e
 8002e58:	08005056 	.word	0x08005056
 8002e5c:	08005063 	.word	0x08005063
 8002e60:	08005078 	.word	0x08005078
 8002e64:	0800508c 	.word	0x0800508c
 8002e68:	080050a4 	.word	0x080050a4
 8002e6c:	080050b3 	.word	0x080050b3
 8002e70:	080050c4 	.word	0x080050c4
 8002e74:	080050d7 	.word	0x080050d7
 8002e78:	080050e3 	.word	0x080050e3
 8002e7c:	080050fc 	.word	0x080050fc
 8002e80:	08005110 	.word	0x08005110
 8002e84:	0800512b 	.word	0x0800512b
 8002e88:	08005143 	.word	0x08005143
 8002e8c:	0800515d 	.word	0x0800515d
 8002e90:	08005165 	.word	0x08005165
 8002e94:	08005195 	.word	0x08005195
 8002e98:	080051b4 	.word	0x080051b4
 8002e9c:	080051d3 	.word	0x080051d3
 8002ea0:	080051ea 	.word	0x080051ea
 8002ea4:	080051fd 	.word	0x080051fd
 8002ea8:	08005216 	.word	0x08005216
 8002eac:	0800522d 	.word	0x0800522d
 8002eb0:	08005243 	.word	0x08005243
 8002eb4:	08005264 	.word	0x08005264
 8002eb8:	0800527c 	.word	0x0800527c
 8002ebc:	08005298 	.word	0x08005298
 8002ec0:	080052ab 	.word	0x080052ab
 8002ec4:	080052c1 	.word	0x080052c1
 8002ec8:	080052d5 	.word	0x080052d5
 8002ecc:	080052f7 	.word	0x080052f7
 8002ed0:	0800531d 	.word	0x0800531d
 8002ed4:	0800532e 	.word	0x0800532e
 8002ed8:	08004c95 	.word	0x08004c95
 8002edc:	08004cad 	.word	0x08004cad

08002ee0 <strerror>:
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <strerror+0x10>)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f7ff be13 	b.w	8002b14 <_strerror_r>
 8002eee:	bf00      	nop
 8002ef0:	20000060 	.word	0x20000060

08002ef4 <_user_strerror>:
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	4770      	bx	lr

08002ef8 <__swbuf_r>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	460e      	mov	r6, r1
 8002efc:	4614      	mov	r4, r2
 8002efe:	4605      	mov	r5, r0
 8002f00:	b118      	cbz	r0, 8002f0a <__swbuf_r+0x12>
 8002f02:	6983      	ldr	r3, [r0, #24]
 8002f04:	b90b      	cbnz	r3, 8002f0a <__swbuf_r+0x12>
 8002f06:	f000 f9fb 	bl	8003300 <__sinit>
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <__swbuf_r+0x98>)
 8002f0c:	429c      	cmp	r4, r3
 8002f0e:	d12b      	bne.n	8002f68 <__swbuf_r+0x70>
 8002f10:	686c      	ldr	r4, [r5, #4]
 8002f12:	69a3      	ldr	r3, [r4, #24]
 8002f14:	60a3      	str	r3, [r4, #8]
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	071a      	lsls	r2, r3, #28
 8002f1a:	d52f      	bpl.n	8002f7c <__swbuf_r+0x84>
 8002f1c:	6923      	ldr	r3, [r4, #16]
 8002f1e:	b36b      	cbz	r3, 8002f7c <__swbuf_r+0x84>
 8002f20:	6923      	ldr	r3, [r4, #16]
 8002f22:	6820      	ldr	r0, [r4, #0]
 8002f24:	1ac0      	subs	r0, r0, r3
 8002f26:	6963      	ldr	r3, [r4, #20]
 8002f28:	b2f6      	uxtb	r6, r6
 8002f2a:	4283      	cmp	r3, r0
 8002f2c:	4637      	mov	r7, r6
 8002f2e:	dc04      	bgt.n	8002f3a <__swbuf_r+0x42>
 8002f30:	4621      	mov	r1, r4
 8002f32:	4628      	mov	r0, r5
 8002f34:	f000 f950 	bl	80031d8 <_fflush_r>
 8002f38:	bb30      	cbnz	r0, 8002f88 <__swbuf_r+0x90>
 8002f3a:	68a3      	ldr	r3, [r4, #8]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60a3      	str	r3, [r4, #8]
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	6022      	str	r2, [r4, #0]
 8002f46:	701e      	strb	r6, [r3, #0]
 8002f48:	6963      	ldr	r3, [r4, #20]
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	4283      	cmp	r3, r0
 8002f4e:	d004      	beq.n	8002f5a <__swbuf_r+0x62>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	07db      	lsls	r3, r3, #31
 8002f54:	d506      	bpl.n	8002f64 <__swbuf_r+0x6c>
 8002f56:	2e0a      	cmp	r6, #10
 8002f58:	d104      	bne.n	8002f64 <__swbuf_r+0x6c>
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 f93b 	bl	80031d8 <_fflush_r>
 8002f62:	b988      	cbnz	r0, 8002f88 <__swbuf_r+0x90>
 8002f64:	4638      	mov	r0, r7
 8002f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <__swbuf_r+0x9c>)
 8002f6a:	429c      	cmp	r4, r3
 8002f6c:	d101      	bne.n	8002f72 <__swbuf_r+0x7a>
 8002f6e:	68ac      	ldr	r4, [r5, #8]
 8002f70:	e7cf      	b.n	8002f12 <__swbuf_r+0x1a>
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <__swbuf_r+0xa0>)
 8002f74:	429c      	cmp	r4, r3
 8002f76:	bf08      	it	eq
 8002f78:	68ec      	ldreq	r4, [r5, #12]
 8002f7a:	e7ca      	b.n	8002f12 <__swbuf_r+0x1a>
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f000 f81e 	bl	8002fc0 <__swsetup_r>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	d0cb      	beq.n	8002f20 <__swbuf_r+0x28>
 8002f88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f8c:	e7ea      	b.n	8002f64 <__swbuf_r+0x6c>
 8002f8e:	bf00      	nop
 8002f90:	08005364 	.word	0x08005364
 8002f94:	08005384 	.word	0x08005384
 8002f98:	08005344 	.word	0x08005344

08002f9c <_write_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4d07      	ldr	r5, [pc, #28]	; (8002fbc <_write_r+0x20>)
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4608      	mov	r0, r1
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	602a      	str	r2, [r5, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f001 fb9c 	bl	80046e8 <_write>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_write_r+0x1e>
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_write_r+0x1e>
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	20000d10 	.word	0x20000d10

08002fc0 <__swsetup_r>:
 8002fc0:	4b32      	ldr	r3, [pc, #200]	; (800308c <__swsetup_r+0xcc>)
 8002fc2:	b570      	push	{r4, r5, r6, lr}
 8002fc4:	681d      	ldr	r5, [r3, #0]
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	460c      	mov	r4, r1
 8002fca:	b125      	cbz	r5, 8002fd6 <__swsetup_r+0x16>
 8002fcc:	69ab      	ldr	r3, [r5, #24]
 8002fce:	b913      	cbnz	r3, 8002fd6 <__swsetup_r+0x16>
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f995 	bl	8003300 <__sinit>
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <__swsetup_r+0xd0>)
 8002fd8:	429c      	cmp	r4, r3
 8002fda:	d10f      	bne.n	8002ffc <__swsetup_r+0x3c>
 8002fdc:	686c      	ldr	r4, [r5, #4]
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fe4:	0719      	lsls	r1, r3, #28
 8002fe6:	d42c      	bmi.n	8003042 <__swsetup_r+0x82>
 8002fe8:	06dd      	lsls	r5, r3, #27
 8002fea:	d411      	bmi.n	8003010 <__swsetup_r+0x50>
 8002fec:	2309      	movs	r3, #9
 8002fee:	6033      	str	r3, [r6, #0]
 8002ff0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ffa:	e03e      	b.n	800307a <__swsetup_r+0xba>
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <__swsetup_r+0xd4>)
 8002ffe:	429c      	cmp	r4, r3
 8003000:	d101      	bne.n	8003006 <__swsetup_r+0x46>
 8003002:	68ac      	ldr	r4, [r5, #8]
 8003004:	e7eb      	b.n	8002fde <__swsetup_r+0x1e>
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <__swsetup_r+0xd8>)
 8003008:	429c      	cmp	r4, r3
 800300a:	bf08      	it	eq
 800300c:	68ec      	ldreq	r4, [r5, #12]
 800300e:	e7e6      	b.n	8002fde <__swsetup_r+0x1e>
 8003010:	0758      	lsls	r0, r3, #29
 8003012:	d512      	bpl.n	800303a <__swsetup_r+0x7a>
 8003014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003016:	b141      	cbz	r1, 800302a <__swsetup_r+0x6a>
 8003018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800301c:	4299      	cmp	r1, r3
 800301e:	d002      	beq.n	8003026 <__swsetup_r+0x66>
 8003020:	4630      	mov	r0, r6
 8003022:	f000 faab 	bl	800357c <_free_r>
 8003026:	2300      	movs	r3, #0
 8003028:	6363      	str	r3, [r4, #52]	; 0x34
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	2300      	movs	r3, #0
 8003034:	6063      	str	r3, [r4, #4]
 8003036:	6923      	ldr	r3, [r4, #16]
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	81a3      	strh	r3, [r4, #12]
 8003042:	6923      	ldr	r3, [r4, #16]
 8003044:	b94b      	cbnz	r3, 800305a <__swsetup_r+0x9a>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800304c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003050:	d003      	beq.n	800305a <__swsetup_r+0x9a>
 8003052:	4621      	mov	r1, r4
 8003054:	4630      	mov	r0, r6
 8003056:	f000 fa2b 	bl	80034b0 <__smakebuf_r>
 800305a:	89a0      	ldrh	r0, [r4, #12]
 800305c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003060:	f010 0301 	ands.w	r3, r0, #1
 8003064:	d00a      	beq.n	800307c <__swsetup_r+0xbc>
 8003066:	2300      	movs	r3, #0
 8003068:	60a3      	str	r3, [r4, #8]
 800306a:	6963      	ldr	r3, [r4, #20]
 800306c:	425b      	negs	r3, r3
 800306e:	61a3      	str	r3, [r4, #24]
 8003070:	6923      	ldr	r3, [r4, #16]
 8003072:	b943      	cbnz	r3, 8003086 <__swsetup_r+0xc6>
 8003074:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003078:	d1ba      	bne.n	8002ff0 <__swsetup_r+0x30>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	0781      	lsls	r1, r0, #30
 800307e:	bf58      	it	pl
 8003080:	6963      	ldrpl	r3, [r4, #20]
 8003082:	60a3      	str	r3, [r4, #8]
 8003084:	e7f4      	b.n	8003070 <__swsetup_r+0xb0>
 8003086:	2000      	movs	r0, #0
 8003088:	e7f7      	b.n	800307a <__swsetup_r+0xba>
 800308a:	bf00      	nop
 800308c:	20000060 	.word	0x20000060
 8003090:	08005364 	.word	0x08005364
 8003094:	08005384 	.word	0x08005384
 8003098:	08005344 	.word	0x08005344

0800309c <abort>:
 800309c:	b508      	push	{r3, lr}
 800309e:	2006      	movs	r0, #6
 80030a0:	f001 f964 	bl	800436c <raise>
 80030a4:	2001      	movs	r0, #1
 80030a6:	f001 fb27 	bl	80046f8 <_exit>
	...

080030ac <_close_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4d06      	ldr	r5, [pc, #24]	; (80030c8 <_close_r+0x1c>)
 80030b0:	2300      	movs	r3, #0
 80030b2:	4604      	mov	r4, r0
 80030b4:	4608      	mov	r0, r1
 80030b6:	602b      	str	r3, [r5, #0]
 80030b8:	f001 fad0 	bl	800465c <_close>
 80030bc:	1c43      	adds	r3, r0, #1
 80030be:	d102      	bne.n	80030c6 <_close_r+0x1a>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	b103      	cbz	r3, 80030c6 <_close_r+0x1a>
 80030c4:	6023      	str	r3, [r4, #0]
 80030c6:	bd38      	pop	{r3, r4, r5, pc}
 80030c8:	20000d10 	.word	0x20000d10

080030cc <__sflush_r>:
 80030cc:	898a      	ldrh	r2, [r1, #12]
 80030ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d2:	4605      	mov	r5, r0
 80030d4:	0710      	lsls	r0, r2, #28
 80030d6:	460c      	mov	r4, r1
 80030d8:	d458      	bmi.n	800318c <__sflush_r+0xc0>
 80030da:	684b      	ldr	r3, [r1, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	dc05      	bgt.n	80030ec <__sflush_r+0x20>
 80030e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	dc02      	bgt.n	80030ec <__sflush_r+0x20>
 80030e6:	2000      	movs	r0, #0
 80030e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030ee:	2e00      	cmp	r6, #0
 80030f0:	d0f9      	beq.n	80030e6 <__sflush_r+0x1a>
 80030f2:	2300      	movs	r3, #0
 80030f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030f8:	682f      	ldr	r7, [r5, #0]
 80030fa:	6a21      	ldr	r1, [r4, #32]
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	d032      	beq.n	8003166 <__sflush_r+0x9a>
 8003100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	d505      	bpl.n	8003114 <__sflush_r+0x48>
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	1ac0      	subs	r0, r0, r3
 800310c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800310e:	b10b      	cbz	r3, 8003114 <__sflush_r+0x48>
 8003110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003112:	1ac0      	subs	r0, r0, r3
 8003114:	2300      	movs	r3, #0
 8003116:	4602      	mov	r2, r0
 8003118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800311a:	6a21      	ldr	r1, [r4, #32]
 800311c:	4628      	mov	r0, r5
 800311e:	47b0      	blx	r6
 8003120:	1c43      	adds	r3, r0, #1
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	d106      	bne.n	8003134 <__sflush_r+0x68>
 8003126:	6829      	ldr	r1, [r5, #0]
 8003128:	291d      	cmp	r1, #29
 800312a:	d82b      	bhi.n	8003184 <__sflush_r+0xb8>
 800312c:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <__sflush_r+0x108>)
 800312e:	410a      	asrs	r2, r1
 8003130:	07d6      	lsls	r6, r2, #31
 8003132:	d427      	bmi.n	8003184 <__sflush_r+0xb8>
 8003134:	2200      	movs	r2, #0
 8003136:	6062      	str	r2, [r4, #4]
 8003138:	04d9      	lsls	r1, r3, #19
 800313a:	6922      	ldr	r2, [r4, #16]
 800313c:	6022      	str	r2, [r4, #0]
 800313e:	d504      	bpl.n	800314a <__sflush_r+0x7e>
 8003140:	1c42      	adds	r2, r0, #1
 8003142:	d101      	bne.n	8003148 <__sflush_r+0x7c>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	b903      	cbnz	r3, 800314a <__sflush_r+0x7e>
 8003148:	6560      	str	r0, [r4, #84]	; 0x54
 800314a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800314c:	602f      	str	r7, [r5, #0]
 800314e:	2900      	cmp	r1, #0
 8003150:	d0c9      	beq.n	80030e6 <__sflush_r+0x1a>
 8003152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003156:	4299      	cmp	r1, r3
 8003158:	d002      	beq.n	8003160 <__sflush_r+0x94>
 800315a:	4628      	mov	r0, r5
 800315c:	f000 fa0e 	bl	800357c <_free_r>
 8003160:	2000      	movs	r0, #0
 8003162:	6360      	str	r0, [r4, #52]	; 0x34
 8003164:	e7c0      	b.n	80030e8 <__sflush_r+0x1c>
 8003166:	2301      	movs	r3, #1
 8003168:	4628      	mov	r0, r5
 800316a:	47b0      	blx	r6
 800316c:	1c41      	adds	r1, r0, #1
 800316e:	d1c8      	bne.n	8003102 <__sflush_r+0x36>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0c5      	beq.n	8003102 <__sflush_r+0x36>
 8003176:	2b1d      	cmp	r3, #29
 8003178:	d001      	beq.n	800317e <__sflush_r+0xb2>
 800317a:	2b16      	cmp	r3, #22
 800317c:	d101      	bne.n	8003182 <__sflush_r+0xb6>
 800317e:	602f      	str	r7, [r5, #0]
 8003180:	e7b1      	b.n	80030e6 <__sflush_r+0x1a>
 8003182:	89a3      	ldrh	r3, [r4, #12]
 8003184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003188:	81a3      	strh	r3, [r4, #12]
 800318a:	e7ad      	b.n	80030e8 <__sflush_r+0x1c>
 800318c:	690f      	ldr	r7, [r1, #16]
 800318e:	2f00      	cmp	r7, #0
 8003190:	d0a9      	beq.n	80030e6 <__sflush_r+0x1a>
 8003192:	0793      	lsls	r3, r2, #30
 8003194:	680e      	ldr	r6, [r1, #0]
 8003196:	bf08      	it	eq
 8003198:	694b      	ldreq	r3, [r1, #20]
 800319a:	600f      	str	r7, [r1, #0]
 800319c:	bf18      	it	ne
 800319e:	2300      	movne	r3, #0
 80031a0:	eba6 0807 	sub.w	r8, r6, r7
 80031a4:	608b      	str	r3, [r1, #8]
 80031a6:	f1b8 0f00 	cmp.w	r8, #0
 80031aa:	dd9c      	ble.n	80030e6 <__sflush_r+0x1a>
 80031ac:	6a21      	ldr	r1, [r4, #32]
 80031ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031b0:	4643      	mov	r3, r8
 80031b2:	463a      	mov	r2, r7
 80031b4:	4628      	mov	r0, r5
 80031b6:	47b0      	blx	r6
 80031b8:	2800      	cmp	r0, #0
 80031ba:	dc06      	bgt.n	80031ca <__sflush_r+0xfe>
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c8:	e78e      	b.n	80030e8 <__sflush_r+0x1c>
 80031ca:	4407      	add	r7, r0
 80031cc:	eba8 0800 	sub.w	r8, r8, r0
 80031d0:	e7e9      	b.n	80031a6 <__sflush_r+0xda>
 80031d2:	bf00      	nop
 80031d4:	dfbffffe 	.word	0xdfbffffe

080031d8 <_fflush_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	690b      	ldr	r3, [r1, #16]
 80031dc:	4605      	mov	r5, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	b913      	cbnz	r3, 80031e8 <_fflush_r+0x10>
 80031e2:	2500      	movs	r5, #0
 80031e4:	4628      	mov	r0, r5
 80031e6:	bd38      	pop	{r3, r4, r5, pc}
 80031e8:	b118      	cbz	r0, 80031f2 <_fflush_r+0x1a>
 80031ea:	6983      	ldr	r3, [r0, #24]
 80031ec:	b90b      	cbnz	r3, 80031f2 <_fflush_r+0x1a>
 80031ee:	f000 f887 	bl	8003300 <__sinit>
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <_fflush_r+0x6c>)
 80031f4:	429c      	cmp	r4, r3
 80031f6:	d11b      	bne.n	8003230 <_fflush_r+0x58>
 80031f8:	686c      	ldr	r4, [r5, #4]
 80031fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ef      	beq.n	80031e2 <_fflush_r+0xa>
 8003202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003204:	07d0      	lsls	r0, r2, #31
 8003206:	d404      	bmi.n	8003212 <_fflush_r+0x3a>
 8003208:	0599      	lsls	r1, r3, #22
 800320a:	d402      	bmi.n	8003212 <_fflush_r+0x3a>
 800320c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800320e:	f000 f915 	bl	800343c <__retarget_lock_acquire_recursive>
 8003212:	4628      	mov	r0, r5
 8003214:	4621      	mov	r1, r4
 8003216:	f7ff ff59 	bl	80030cc <__sflush_r>
 800321a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800321c:	07da      	lsls	r2, r3, #31
 800321e:	4605      	mov	r5, r0
 8003220:	d4e0      	bmi.n	80031e4 <_fflush_r+0xc>
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	059b      	lsls	r3, r3, #22
 8003226:	d4dd      	bmi.n	80031e4 <_fflush_r+0xc>
 8003228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800322a:	f000 f908 	bl	800343e <__retarget_lock_release_recursive>
 800322e:	e7d9      	b.n	80031e4 <_fflush_r+0xc>
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <_fflush_r+0x70>)
 8003232:	429c      	cmp	r4, r3
 8003234:	d101      	bne.n	800323a <_fflush_r+0x62>
 8003236:	68ac      	ldr	r4, [r5, #8]
 8003238:	e7df      	b.n	80031fa <_fflush_r+0x22>
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <_fflush_r+0x74>)
 800323c:	429c      	cmp	r4, r3
 800323e:	bf08      	it	eq
 8003240:	68ec      	ldreq	r4, [r5, #12]
 8003242:	e7da      	b.n	80031fa <_fflush_r+0x22>
 8003244:	08005364 	.word	0x08005364
 8003248:	08005384 	.word	0x08005384
 800324c:	08005344 	.word	0x08005344

08003250 <std>:
 8003250:	2300      	movs	r3, #0
 8003252:	b510      	push	{r4, lr}
 8003254:	4604      	mov	r4, r0
 8003256:	e9c0 3300 	strd	r3, r3, [r0]
 800325a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800325e:	6083      	str	r3, [r0, #8]
 8003260:	8181      	strh	r1, [r0, #12]
 8003262:	6643      	str	r3, [r0, #100]	; 0x64
 8003264:	81c2      	strh	r2, [r0, #14]
 8003266:	6183      	str	r3, [r0, #24]
 8003268:	4619      	mov	r1, r3
 800326a:	2208      	movs	r2, #8
 800326c:	305c      	adds	r0, #92	; 0x5c
 800326e:	f7ff f9ad 	bl	80025cc <memset>
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <std+0x38>)
 8003274:	6263      	str	r3, [r4, #36]	; 0x24
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <std+0x3c>)
 8003278:	62a3      	str	r3, [r4, #40]	; 0x28
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <std+0x40>)
 800327c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <std+0x44>)
 8003280:	6224      	str	r4, [r4, #32]
 8003282:	6323      	str	r3, [r4, #48]	; 0x30
 8003284:	bd10      	pop	{r4, pc}
 8003286:	bf00      	nop
 8003288:	08002a6d 	.word	0x08002a6d
 800328c:	08002a93 	.word	0x08002a93
 8003290:	08002acb 	.word	0x08002acb
 8003294:	08002aef 	.word	0x08002aef

08003298 <_cleanup_r>:
 8003298:	4901      	ldr	r1, [pc, #4]	; (80032a0 <_cleanup_r+0x8>)
 800329a:	f000 b8af 	b.w	80033fc <_fwalk_reent>
 800329e:	bf00      	nop
 80032a0:	080031d9 	.word	0x080031d9

080032a4 <__sfmoreglue>:
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	2368      	movs	r3, #104	; 0x68
 80032a8:	1e4d      	subs	r5, r1, #1
 80032aa:	435d      	muls	r5, r3
 80032ac:	460e      	mov	r6, r1
 80032ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032b2:	f7ff f9b3 	bl	800261c <_malloc_r>
 80032b6:	4604      	mov	r4, r0
 80032b8:	b140      	cbz	r0, 80032cc <__sfmoreglue+0x28>
 80032ba:	2100      	movs	r1, #0
 80032bc:	e9c0 1600 	strd	r1, r6, [r0]
 80032c0:	300c      	adds	r0, #12
 80032c2:	60a0      	str	r0, [r4, #8]
 80032c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032c8:	f7ff f980 	bl	80025cc <memset>
 80032cc:	4620      	mov	r0, r4
 80032ce:	bd70      	pop	{r4, r5, r6, pc}

080032d0 <__sfp_lock_acquire>:
 80032d0:	4801      	ldr	r0, [pc, #4]	; (80032d8 <__sfp_lock_acquire+0x8>)
 80032d2:	f000 b8b3 	b.w	800343c <__retarget_lock_acquire_recursive>
 80032d6:	bf00      	nop
 80032d8:	20000d0d 	.word	0x20000d0d

080032dc <__sfp_lock_release>:
 80032dc:	4801      	ldr	r0, [pc, #4]	; (80032e4 <__sfp_lock_release+0x8>)
 80032de:	f000 b8ae 	b.w	800343e <__retarget_lock_release_recursive>
 80032e2:	bf00      	nop
 80032e4:	20000d0d 	.word	0x20000d0d

080032e8 <__sinit_lock_acquire>:
 80032e8:	4801      	ldr	r0, [pc, #4]	; (80032f0 <__sinit_lock_acquire+0x8>)
 80032ea:	f000 b8a7 	b.w	800343c <__retarget_lock_acquire_recursive>
 80032ee:	bf00      	nop
 80032f0:	20000d0e 	.word	0x20000d0e

080032f4 <__sinit_lock_release>:
 80032f4:	4801      	ldr	r0, [pc, #4]	; (80032fc <__sinit_lock_release+0x8>)
 80032f6:	f000 b8a2 	b.w	800343e <__retarget_lock_release_recursive>
 80032fa:	bf00      	nop
 80032fc:	20000d0e 	.word	0x20000d0e

08003300 <__sinit>:
 8003300:	b510      	push	{r4, lr}
 8003302:	4604      	mov	r4, r0
 8003304:	f7ff fff0 	bl	80032e8 <__sinit_lock_acquire>
 8003308:	69a3      	ldr	r3, [r4, #24]
 800330a:	b11b      	cbz	r3, 8003314 <__sinit+0x14>
 800330c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003310:	f7ff bff0 	b.w	80032f4 <__sinit_lock_release>
 8003314:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003318:	6523      	str	r3, [r4, #80]	; 0x50
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <__sinit+0x68>)
 800331c:	4a13      	ldr	r2, [pc, #76]	; (800336c <__sinit+0x6c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	62a2      	str	r2, [r4, #40]	; 0x28
 8003322:	42a3      	cmp	r3, r4
 8003324:	bf04      	itt	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	61a3      	streq	r3, [r4, #24]
 800332a:	4620      	mov	r0, r4
 800332c:	f000 f820 	bl	8003370 <__sfp>
 8003330:	6060      	str	r0, [r4, #4]
 8003332:	4620      	mov	r0, r4
 8003334:	f000 f81c 	bl	8003370 <__sfp>
 8003338:	60a0      	str	r0, [r4, #8]
 800333a:	4620      	mov	r0, r4
 800333c:	f000 f818 	bl	8003370 <__sfp>
 8003340:	2200      	movs	r2, #0
 8003342:	60e0      	str	r0, [r4, #12]
 8003344:	2104      	movs	r1, #4
 8003346:	6860      	ldr	r0, [r4, #4]
 8003348:	f7ff ff82 	bl	8003250 <std>
 800334c:	68a0      	ldr	r0, [r4, #8]
 800334e:	2201      	movs	r2, #1
 8003350:	2109      	movs	r1, #9
 8003352:	f7ff ff7d 	bl	8003250 <std>
 8003356:	68e0      	ldr	r0, [r4, #12]
 8003358:	2202      	movs	r2, #2
 800335a:	2112      	movs	r1, #18
 800335c:	f7ff ff78 	bl	8003250 <std>
 8003360:	2301      	movs	r3, #1
 8003362:	61a3      	str	r3, [r4, #24]
 8003364:	e7d2      	b.n	800330c <__sinit+0xc>
 8003366:	bf00      	nop
 8003368:	08004c98 	.word	0x08004c98
 800336c:	08003299 	.word	0x08003299

08003370 <__sfp>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	4607      	mov	r7, r0
 8003374:	f7ff ffac 	bl	80032d0 <__sfp_lock_acquire>
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <__sfp+0x84>)
 800337a:	681e      	ldr	r6, [r3, #0]
 800337c:	69b3      	ldr	r3, [r6, #24]
 800337e:	b913      	cbnz	r3, 8003386 <__sfp+0x16>
 8003380:	4630      	mov	r0, r6
 8003382:	f7ff ffbd 	bl	8003300 <__sinit>
 8003386:	3648      	adds	r6, #72	; 0x48
 8003388:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800338c:	3b01      	subs	r3, #1
 800338e:	d503      	bpl.n	8003398 <__sfp+0x28>
 8003390:	6833      	ldr	r3, [r6, #0]
 8003392:	b30b      	cbz	r3, 80033d8 <__sfp+0x68>
 8003394:	6836      	ldr	r6, [r6, #0]
 8003396:	e7f7      	b.n	8003388 <__sfp+0x18>
 8003398:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800339c:	b9d5      	cbnz	r5, 80033d4 <__sfp+0x64>
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <__sfp+0x88>)
 80033a0:	60e3      	str	r3, [r4, #12]
 80033a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033a6:	6665      	str	r5, [r4, #100]	; 0x64
 80033a8:	f000 f847 	bl	800343a <__retarget_lock_init_recursive>
 80033ac:	f7ff ff96 	bl	80032dc <__sfp_lock_release>
 80033b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033b8:	6025      	str	r5, [r4, #0]
 80033ba:	61a5      	str	r5, [r4, #24]
 80033bc:	2208      	movs	r2, #8
 80033be:	4629      	mov	r1, r5
 80033c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033c4:	f7ff f902 	bl	80025cc <memset>
 80033c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033d0:	4620      	mov	r0, r4
 80033d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d4:	3468      	adds	r4, #104	; 0x68
 80033d6:	e7d9      	b.n	800338c <__sfp+0x1c>
 80033d8:	2104      	movs	r1, #4
 80033da:	4638      	mov	r0, r7
 80033dc:	f7ff ff62 	bl	80032a4 <__sfmoreglue>
 80033e0:	4604      	mov	r4, r0
 80033e2:	6030      	str	r0, [r6, #0]
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d1d5      	bne.n	8003394 <__sfp+0x24>
 80033e8:	f7ff ff78 	bl	80032dc <__sfp_lock_release>
 80033ec:	230c      	movs	r3, #12
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	e7ee      	b.n	80033d0 <__sfp+0x60>
 80033f2:	bf00      	nop
 80033f4:	08004c98 	.word	0x08004c98
 80033f8:	ffff0001 	.word	0xffff0001

080033fc <_fwalk_reent>:
 80033fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003400:	4606      	mov	r6, r0
 8003402:	4688      	mov	r8, r1
 8003404:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003408:	2700      	movs	r7, #0
 800340a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800340e:	f1b9 0901 	subs.w	r9, r9, #1
 8003412:	d505      	bpl.n	8003420 <_fwalk_reent+0x24>
 8003414:	6824      	ldr	r4, [r4, #0]
 8003416:	2c00      	cmp	r4, #0
 8003418:	d1f7      	bne.n	800340a <_fwalk_reent+0xe>
 800341a:	4638      	mov	r0, r7
 800341c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003420:	89ab      	ldrh	r3, [r5, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d907      	bls.n	8003436 <_fwalk_reent+0x3a>
 8003426:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800342a:	3301      	adds	r3, #1
 800342c:	d003      	beq.n	8003436 <_fwalk_reent+0x3a>
 800342e:	4629      	mov	r1, r5
 8003430:	4630      	mov	r0, r6
 8003432:	47c0      	blx	r8
 8003434:	4307      	orrs	r7, r0
 8003436:	3568      	adds	r5, #104	; 0x68
 8003438:	e7e9      	b.n	800340e <_fwalk_reent+0x12>

0800343a <__retarget_lock_init_recursive>:
 800343a:	4770      	bx	lr

0800343c <__retarget_lock_acquire_recursive>:
 800343c:	4770      	bx	lr

0800343e <__retarget_lock_release_recursive>:
 800343e:	4770      	bx	lr

08003440 <_lseek_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4d07      	ldr	r5, [pc, #28]	; (8003460 <_lseek_r+0x20>)
 8003444:	4604      	mov	r4, r0
 8003446:	4608      	mov	r0, r1
 8003448:	4611      	mov	r1, r2
 800344a:	2200      	movs	r2, #0
 800344c:	602a      	str	r2, [r5, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	f001 f92c 	bl	80046ac <_lseek>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d102      	bne.n	800345e <_lseek_r+0x1e>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	b103      	cbz	r3, 800345e <_lseek_r+0x1e>
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	bd38      	pop	{r3, r4, r5, pc}
 8003460:	20000d10 	.word	0x20000d10

08003464 <__swhatbuf_r>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	460c      	mov	r4, r1
 8003468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800346c:	2900      	cmp	r1, #0
 800346e:	b096      	sub	sp, #88	; 0x58
 8003470:	4615      	mov	r5, r2
 8003472:	461e      	mov	r6, r3
 8003474:	da0d      	bge.n	8003492 <__swhatbuf_r+0x2e>
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	f013 0f80 	tst.w	r3, #128	; 0x80
 800347c:	f04f 0100 	mov.w	r1, #0
 8003480:	bf0c      	ite	eq
 8003482:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003486:	2340      	movne	r3, #64	; 0x40
 8003488:	2000      	movs	r0, #0
 800348a:	6031      	str	r1, [r6, #0]
 800348c:	602b      	str	r3, [r5, #0]
 800348e:	b016      	add	sp, #88	; 0x58
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	466a      	mov	r2, sp
 8003494:	f001 f8b8 	bl	8004608 <_fstat_r>
 8003498:	2800      	cmp	r0, #0
 800349a:	dbec      	blt.n	8003476 <__swhatbuf_r+0x12>
 800349c:	9901      	ldr	r1, [sp, #4]
 800349e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80034a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80034a6:	4259      	negs	r1, r3
 80034a8:	4159      	adcs	r1, r3
 80034aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ae:	e7eb      	b.n	8003488 <__swhatbuf_r+0x24>

080034b0 <__smakebuf_r>:
 80034b0:	898b      	ldrh	r3, [r1, #12]
 80034b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034b4:	079d      	lsls	r5, r3, #30
 80034b6:	4606      	mov	r6, r0
 80034b8:	460c      	mov	r4, r1
 80034ba:	d507      	bpl.n	80034cc <__smakebuf_r+0x1c>
 80034bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	6123      	str	r3, [r4, #16]
 80034c4:	2301      	movs	r3, #1
 80034c6:	6163      	str	r3, [r4, #20]
 80034c8:	b002      	add	sp, #8
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	ab01      	add	r3, sp, #4
 80034ce:	466a      	mov	r2, sp
 80034d0:	f7ff ffc8 	bl	8003464 <__swhatbuf_r>
 80034d4:	9900      	ldr	r1, [sp, #0]
 80034d6:	4605      	mov	r5, r0
 80034d8:	4630      	mov	r0, r6
 80034da:	f7ff f89f 	bl	800261c <_malloc_r>
 80034de:	b948      	cbnz	r0, 80034f4 <__smakebuf_r+0x44>
 80034e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034e4:	059a      	lsls	r2, r3, #22
 80034e6:	d4ef      	bmi.n	80034c8 <__smakebuf_r+0x18>
 80034e8:	f023 0303 	bic.w	r3, r3, #3
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	81a3      	strh	r3, [r4, #12]
 80034f2:	e7e3      	b.n	80034bc <__smakebuf_r+0xc>
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <__smakebuf_r+0x7c>)
 80034f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	6020      	str	r0, [r4, #0]
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	9b00      	ldr	r3, [sp, #0]
 8003504:	6163      	str	r3, [r4, #20]
 8003506:	9b01      	ldr	r3, [sp, #4]
 8003508:	6120      	str	r0, [r4, #16]
 800350a:	b15b      	cbz	r3, 8003524 <__smakebuf_r+0x74>
 800350c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003510:	4630      	mov	r0, r6
 8003512:	f001 f88b 	bl	800462c <_isatty_r>
 8003516:	b128      	cbz	r0, 8003524 <__smakebuf_r+0x74>
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	81a3      	strh	r3, [r4, #12]
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	431d      	orrs	r5, r3
 8003528:	81a5      	strh	r5, [r4, #12]
 800352a:	e7cd      	b.n	80034c8 <__smakebuf_r+0x18>
 800352c:	08003299 	.word	0x08003299

08003530 <memmove>:
 8003530:	4288      	cmp	r0, r1
 8003532:	b510      	push	{r4, lr}
 8003534:	eb01 0402 	add.w	r4, r1, r2
 8003538:	d902      	bls.n	8003540 <memmove+0x10>
 800353a:	4284      	cmp	r4, r0
 800353c:	4623      	mov	r3, r4
 800353e:	d807      	bhi.n	8003550 <memmove+0x20>
 8003540:	1e43      	subs	r3, r0, #1
 8003542:	42a1      	cmp	r1, r4
 8003544:	d008      	beq.n	8003558 <memmove+0x28>
 8003546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800354a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800354e:	e7f8      	b.n	8003542 <memmove+0x12>
 8003550:	4402      	add	r2, r0
 8003552:	4601      	mov	r1, r0
 8003554:	428a      	cmp	r2, r1
 8003556:	d100      	bne.n	800355a <memmove+0x2a>
 8003558:	bd10      	pop	{r4, pc}
 800355a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800355e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003562:	e7f7      	b.n	8003554 <memmove+0x24>

08003564 <__malloc_lock>:
 8003564:	4801      	ldr	r0, [pc, #4]	; (800356c <__malloc_lock+0x8>)
 8003566:	f7ff bf69 	b.w	800343c <__retarget_lock_acquire_recursive>
 800356a:	bf00      	nop
 800356c:	20000d0c 	.word	0x20000d0c

08003570 <__malloc_unlock>:
 8003570:	4801      	ldr	r0, [pc, #4]	; (8003578 <__malloc_unlock+0x8>)
 8003572:	f7ff bf64 	b.w	800343e <__retarget_lock_release_recursive>
 8003576:	bf00      	nop
 8003578:	20000d0c 	.word	0x20000d0c

0800357c <_free_r>:
 800357c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800357e:	2900      	cmp	r1, #0
 8003580:	d044      	beq.n	800360c <_free_r+0x90>
 8003582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003586:	9001      	str	r0, [sp, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f1a1 0404 	sub.w	r4, r1, #4
 800358e:	bfb8      	it	lt
 8003590:	18e4      	addlt	r4, r4, r3
 8003592:	f7ff ffe7 	bl	8003564 <__malloc_lock>
 8003596:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <_free_r+0x94>)
 8003598:	9801      	ldr	r0, [sp, #4]
 800359a:	6813      	ldr	r3, [r2, #0]
 800359c:	b933      	cbnz	r3, 80035ac <_free_r+0x30>
 800359e:	6063      	str	r3, [r4, #4]
 80035a0:	6014      	str	r4, [r2, #0]
 80035a2:	b003      	add	sp, #12
 80035a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035a8:	f7ff bfe2 	b.w	8003570 <__malloc_unlock>
 80035ac:	42a3      	cmp	r3, r4
 80035ae:	d908      	bls.n	80035c2 <_free_r+0x46>
 80035b0:	6825      	ldr	r5, [r4, #0]
 80035b2:	1961      	adds	r1, r4, r5
 80035b4:	428b      	cmp	r3, r1
 80035b6:	bf01      	itttt	eq
 80035b8:	6819      	ldreq	r1, [r3, #0]
 80035ba:	685b      	ldreq	r3, [r3, #4]
 80035bc:	1949      	addeq	r1, r1, r5
 80035be:	6021      	streq	r1, [r4, #0]
 80035c0:	e7ed      	b.n	800359e <_free_r+0x22>
 80035c2:	461a      	mov	r2, r3
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	b10b      	cbz	r3, 80035cc <_free_r+0x50>
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	d9fa      	bls.n	80035c2 <_free_r+0x46>
 80035cc:	6811      	ldr	r1, [r2, #0]
 80035ce:	1855      	adds	r5, r2, r1
 80035d0:	42a5      	cmp	r5, r4
 80035d2:	d10b      	bne.n	80035ec <_free_r+0x70>
 80035d4:	6824      	ldr	r4, [r4, #0]
 80035d6:	4421      	add	r1, r4
 80035d8:	1854      	adds	r4, r2, r1
 80035da:	42a3      	cmp	r3, r4
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	d1e0      	bne.n	80035a2 <_free_r+0x26>
 80035e0:	681c      	ldr	r4, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	6053      	str	r3, [r2, #4]
 80035e6:	440c      	add	r4, r1
 80035e8:	6014      	str	r4, [r2, #0]
 80035ea:	e7da      	b.n	80035a2 <_free_r+0x26>
 80035ec:	d902      	bls.n	80035f4 <_free_r+0x78>
 80035ee:	230c      	movs	r3, #12
 80035f0:	6003      	str	r3, [r0, #0]
 80035f2:	e7d6      	b.n	80035a2 <_free_r+0x26>
 80035f4:	6825      	ldr	r5, [r4, #0]
 80035f6:	1961      	adds	r1, r4, r5
 80035f8:	428b      	cmp	r3, r1
 80035fa:	bf04      	itt	eq
 80035fc:	6819      	ldreq	r1, [r3, #0]
 80035fe:	685b      	ldreq	r3, [r3, #4]
 8003600:	6063      	str	r3, [r4, #4]
 8003602:	bf04      	itt	eq
 8003604:	1949      	addeq	r1, r1, r5
 8003606:	6021      	streq	r1, [r4, #0]
 8003608:	6054      	str	r4, [r2, #4]
 800360a:	e7ca      	b.n	80035a2 <_free_r+0x26>
 800360c:	b003      	add	sp, #12
 800360e:	bd30      	pop	{r4, r5, pc}
 8003610:	20000d04 	.word	0x20000d04

08003614 <_realloc_r>:
 8003614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003618:	4680      	mov	r8, r0
 800361a:	4614      	mov	r4, r2
 800361c:	460e      	mov	r6, r1
 800361e:	b921      	cbnz	r1, 800362a <_realloc_r+0x16>
 8003620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003624:	4611      	mov	r1, r2
 8003626:	f7fe bff9 	b.w	800261c <_malloc_r>
 800362a:	b92a      	cbnz	r2, 8003638 <_realloc_r+0x24>
 800362c:	f7ff ffa6 	bl	800357c <_free_r>
 8003630:	4625      	mov	r5, r4
 8003632:	4628      	mov	r0, r5
 8003634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003638:	f001 f808 	bl	800464c <_malloc_usable_size_r>
 800363c:	4284      	cmp	r4, r0
 800363e:	4607      	mov	r7, r0
 8003640:	d802      	bhi.n	8003648 <_realloc_r+0x34>
 8003642:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003646:	d812      	bhi.n	800366e <_realloc_r+0x5a>
 8003648:	4621      	mov	r1, r4
 800364a:	4640      	mov	r0, r8
 800364c:	f7fe ffe6 	bl	800261c <_malloc_r>
 8003650:	4605      	mov	r5, r0
 8003652:	2800      	cmp	r0, #0
 8003654:	d0ed      	beq.n	8003632 <_realloc_r+0x1e>
 8003656:	42bc      	cmp	r4, r7
 8003658:	4622      	mov	r2, r4
 800365a:	4631      	mov	r1, r6
 800365c:	bf28      	it	cs
 800365e:	463a      	movcs	r2, r7
 8003660:	f7fe ffa6 	bl	80025b0 <memcpy>
 8003664:	4631      	mov	r1, r6
 8003666:	4640      	mov	r0, r8
 8003668:	f7ff ff88 	bl	800357c <_free_r>
 800366c:	e7e1      	b.n	8003632 <_realloc_r+0x1e>
 800366e:	4635      	mov	r5, r6
 8003670:	e7df      	b.n	8003632 <_realloc_r+0x1e>

08003672 <__ssputs_r>:
 8003672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003676:	688e      	ldr	r6, [r1, #8]
 8003678:	461f      	mov	r7, r3
 800367a:	42be      	cmp	r6, r7
 800367c:	680b      	ldr	r3, [r1, #0]
 800367e:	4682      	mov	sl, r0
 8003680:	460c      	mov	r4, r1
 8003682:	4690      	mov	r8, r2
 8003684:	d82c      	bhi.n	80036e0 <__ssputs_r+0x6e>
 8003686:	898a      	ldrh	r2, [r1, #12]
 8003688:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800368c:	d026      	beq.n	80036dc <__ssputs_r+0x6a>
 800368e:	6965      	ldr	r5, [r4, #20]
 8003690:	6909      	ldr	r1, [r1, #16]
 8003692:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003696:	eba3 0901 	sub.w	r9, r3, r1
 800369a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800369e:	1c7b      	adds	r3, r7, #1
 80036a0:	444b      	add	r3, r9
 80036a2:	106d      	asrs	r5, r5, #1
 80036a4:	429d      	cmp	r5, r3
 80036a6:	bf38      	it	cc
 80036a8:	461d      	movcc	r5, r3
 80036aa:	0553      	lsls	r3, r2, #21
 80036ac:	d527      	bpl.n	80036fe <__ssputs_r+0x8c>
 80036ae:	4629      	mov	r1, r5
 80036b0:	f7fe ffb4 	bl	800261c <_malloc_r>
 80036b4:	4606      	mov	r6, r0
 80036b6:	b360      	cbz	r0, 8003712 <__ssputs_r+0xa0>
 80036b8:	6921      	ldr	r1, [r4, #16]
 80036ba:	464a      	mov	r2, r9
 80036bc:	f7fe ff78 	bl	80025b0 <memcpy>
 80036c0:	89a3      	ldrh	r3, [r4, #12]
 80036c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ca:	81a3      	strh	r3, [r4, #12]
 80036cc:	6126      	str	r6, [r4, #16]
 80036ce:	6165      	str	r5, [r4, #20]
 80036d0:	444e      	add	r6, r9
 80036d2:	eba5 0509 	sub.w	r5, r5, r9
 80036d6:	6026      	str	r6, [r4, #0]
 80036d8:	60a5      	str	r5, [r4, #8]
 80036da:	463e      	mov	r6, r7
 80036dc:	42be      	cmp	r6, r7
 80036de:	d900      	bls.n	80036e2 <__ssputs_r+0x70>
 80036e0:	463e      	mov	r6, r7
 80036e2:	6820      	ldr	r0, [r4, #0]
 80036e4:	4632      	mov	r2, r6
 80036e6:	4641      	mov	r1, r8
 80036e8:	f7ff ff22 	bl	8003530 <memmove>
 80036ec:	68a3      	ldr	r3, [r4, #8]
 80036ee:	1b9b      	subs	r3, r3, r6
 80036f0:	60a3      	str	r3, [r4, #8]
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	4433      	add	r3, r6
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	2000      	movs	r0, #0
 80036fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fe:	462a      	mov	r2, r5
 8003700:	f7ff ff88 	bl	8003614 <_realloc_r>
 8003704:	4606      	mov	r6, r0
 8003706:	2800      	cmp	r0, #0
 8003708:	d1e0      	bne.n	80036cc <__ssputs_r+0x5a>
 800370a:	6921      	ldr	r1, [r4, #16]
 800370c:	4650      	mov	r0, sl
 800370e:	f7ff ff35 	bl	800357c <_free_r>
 8003712:	230c      	movs	r3, #12
 8003714:	f8ca 3000 	str.w	r3, [sl]
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800371e:	81a3      	strh	r3, [r4, #12]
 8003720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003724:	e7e9      	b.n	80036fa <__ssputs_r+0x88>
	...

08003728 <_svfiprintf_r>:
 8003728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372c:	4698      	mov	r8, r3
 800372e:	898b      	ldrh	r3, [r1, #12]
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	b09d      	sub	sp, #116	; 0x74
 8003734:	4607      	mov	r7, r0
 8003736:	460d      	mov	r5, r1
 8003738:	4614      	mov	r4, r2
 800373a:	d50e      	bpl.n	800375a <_svfiprintf_r+0x32>
 800373c:	690b      	ldr	r3, [r1, #16]
 800373e:	b963      	cbnz	r3, 800375a <_svfiprintf_r+0x32>
 8003740:	2140      	movs	r1, #64	; 0x40
 8003742:	f7fe ff6b 	bl	800261c <_malloc_r>
 8003746:	6028      	str	r0, [r5, #0]
 8003748:	6128      	str	r0, [r5, #16]
 800374a:	b920      	cbnz	r0, 8003756 <_svfiprintf_r+0x2e>
 800374c:	230c      	movs	r3, #12
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003754:	e0d0      	b.n	80038f8 <_svfiprintf_r+0x1d0>
 8003756:	2340      	movs	r3, #64	; 0x40
 8003758:	616b      	str	r3, [r5, #20]
 800375a:	2300      	movs	r3, #0
 800375c:	9309      	str	r3, [sp, #36]	; 0x24
 800375e:	2320      	movs	r3, #32
 8003760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003764:	f8cd 800c 	str.w	r8, [sp, #12]
 8003768:	2330      	movs	r3, #48	; 0x30
 800376a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003910 <_svfiprintf_r+0x1e8>
 800376e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003772:	f04f 0901 	mov.w	r9, #1
 8003776:	4623      	mov	r3, r4
 8003778:	469a      	mov	sl, r3
 800377a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800377e:	b10a      	cbz	r2, 8003784 <_svfiprintf_r+0x5c>
 8003780:	2a25      	cmp	r2, #37	; 0x25
 8003782:	d1f9      	bne.n	8003778 <_svfiprintf_r+0x50>
 8003784:	ebba 0b04 	subs.w	fp, sl, r4
 8003788:	d00b      	beq.n	80037a2 <_svfiprintf_r+0x7a>
 800378a:	465b      	mov	r3, fp
 800378c:	4622      	mov	r2, r4
 800378e:	4629      	mov	r1, r5
 8003790:	4638      	mov	r0, r7
 8003792:	f7ff ff6e 	bl	8003672 <__ssputs_r>
 8003796:	3001      	adds	r0, #1
 8003798:	f000 80a9 	beq.w	80038ee <_svfiprintf_r+0x1c6>
 800379c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800379e:	445a      	add	r2, fp
 80037a0:	9209      	str	r2, [sp, #36]	; 0x24
 80037a2:	f89a 3000 	ldrb.w	r3, [sl]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80a1 	beq.w	80038ee <_svfiprintf_r+0x1c6>
 80037ac:	2300      	movs	r3, #0
 80037ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037b6:	f10a 0a01 	add.w	sl, sl, #1
 80037ba:	9304      	str	r3, [sp, #16]
 80037bc:	9307      	str	r3, [sp, #28]
 80037be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037c2:	931a      	str	r3, [sp, #104]	; 0x68
 80037c4:	4654      	mov	r4, sl
 80037c6:	2205      	movs	r2, #5
 80037c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037cc:	4850      	ldr	r0, [pc, #320]	; (8003910 <_svfiprintf_r+0x1e8>)
 80037ce:	f7fc fcef 	bl	80001b0 <memchr>
 80037d2:	9a04      	ldr	r2, [sp, #16]
 80037d4:	b9d8      	cbnz	r0, 800380e <_svfiprintf_r+0xe6>
 80037d6:	06d0      	lsls	r0, r2, #27
 80037d8:	bf44      	itt	mi
 80037da:	2320      	movmi	r3, #32
 80037dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037e0:	0711      	lsls	r1, r2, #28
 80037e2:	bf44      	itt	mi
 80037e4:	232b      	movmi	r3, #43	; 0x2b
 80037e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ea:	f89a 3000 	ldrb.w	r3, [sl]
 80037ee:	2b2a      	cmp	r3, #42	; 0x2a
 80037f0:	d015      	beq.n	800381e <_svfiprintf_r+0xf6>
 80037f2:	9a07      	ldr	r2, [sp, #28]
 80037f4:	4654      	mov	r4, sl
 80037f6:	2000      	movs	r0, #0
 80037f8:	f04f 0c0a 	mov.w	ip, #10
 80037fc:	4621      	mov	r1, r4
 80037fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003802:	3b30      	subs	r3, #48	; 0x30
 8003804:	2b09      	cmp	r3, #9
 8003806:	d94d      	bls.n	80038a4 <_svfiprintf_r+0x17c>
 8003808:	b1b0      	cbz	r0, 8003838 <_svfiprintf_r+0x110>
 800380a:	9207      	str	r2, [sp, #28]
 800380c:	e014      	b.n	8003838 <_svfiprintf_r+0x110>
 800380e:	eba0 0308 	sub.w	r3, r0, r8
 8003812:	fa09 f303 	lsl.w	r3, r9, r3
 8003816:	4313      	orrs	r3, r2
 8003818:	9304      	str	r3, [sp, #16]
 800381a:	46a2      	mov	sl, r4
 800381c:	e7d2      	b.n	80037c4 <_svfiprintf_r+0x9c>
 800381e:	9b03      	ldr	r3, [sp, #12]
 8003820:	1d19      	adds	r1, r3, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	9103      	str	r1, [sp, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	bfbb      	ittet	lt
 800382a:	425b      	neglt	r3, r3
 800382c:	f042 0202 	orrlt.w	r2, r2, #2
 8003830:	9307      	strge	r3, [sp, #28]
 8003832:	9307      	strlt	r3, [sp, #28]
 8003834:	bfb8      	it	lt
 8003836:	9204      	strlt	r2, [sp, #16]
 8003838:	7823      	ldrb	r3, [r4, #0]
 800383a:	2b2e      	cmp	r3, #46	; 0x2e
 800383c:	d10c      	bne.n	8003858 <_svfiprintf_r+0x130>
 800383e:	7863      	ldrb	r3, [r4, #1]
 8003840:	2b2a      	cmp	r3, #42	; 0x2a
 8003842:	d134      	bne.n	80038ae <_svfiprintf_r+0x186>
 8003844:	9b03      	ldr	r3, [sp, #12]
 8003846:	1d1a      	adds	r2, r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	9203      	str	r2, [sp, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	bfb8      	it	lt
 8003850:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003854:	3402      	adds	r4, #2
 8003856:	9305      	str	r3, [sp, #20]
 8003858:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003920 <_svfiprintf_r+0x1f8>
 800385c:	7821      	ldrb	r1, [r4, #0]
 800385e:	2203      	movs	r2, #3
 8003860:	4650      	mov	r0, sl
 8003862:	f7fc fca5 	bl	80001b0 <memchr>
 8003866:	b138      	cbz	r0, 8003878 <_svfiprintf_r+0x150>
 8003868:	9b04      	ldr	r3, [sp, #16]
 800386a:	eba0 000a 	sub.w	r0, r0, sl
 800386e:	2240      	movs	r2, #64	; 0x40
 8003870:	4082      	lsls	r2, r0
 8003872:	4313      	orrs	r3, r2
 8003874:	3401      	adds	r4, #1
 8003876:	9304      	str	r3, [sp, #16]
 8003878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800387c:	4825      	ldr	r0, [pc, #148]	; (8003914 <_svfiprintf_r+0x1ec>)
 800387e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003882:	2206      	movs	r2, #6
 8003884:	f7fc fc94 	bl	80001b0 <memchr>
 8003888:	2800      	cmp	r0, #0
 800388a:	d038      	beq.n	80038fe <_svfiprintf_r+0x1d6>
 800388c:	4b22      	ldr	r3, [pc, #136]	; (8003918 <_svfiprintf_r+0x1f0>)
 800388e:	bb1b      	cbnz	r3, 80038d8 <_svfiprintf_r+0x1b0>
 8003890:	9b03      	ldr	r3, [sp, #12]
 8003892:	3307      	adds	r3, #7
 8003894:	f023 0307 	bic.w	r3, r3, #7
 8003898:	3308      	adds	r3, #8
 800389a:	9303      	str	r3, [sp, #12]
 800389c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800389e:	4433      	add	r3, r6
 80038a0:	9309      	str	r3, [sp, #36]	; 0x24
 80038a2:	e768      	b.n	8003776 <_svfiprintf_r+0x4e>
 80038a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80038a8:	460c      	mov	r4, r1
 80038aa:	2001      	movs	r0, #1
 80038ac:	e7a6      	b.n	80037fc <_svfiprintf_r+0xd4>
 80038ae:	2300      	movs	r3, #0
 80038b0:	3401      	adds	r4, #1
 80038b2:	9305      	str	r3, [sp, #20]
 80038b4:	4619      	mov	r1, r3
 80038b6:	f04f 0c0a 	mov.w	ip, #10
 80038ba:	4620      	mov	r0, r4
 80038bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038c0:	3a30      	subs	r2, #48	; 0x30
 80038c2:	2a09      	cmp	r2, #9
 80038c4:	d903      	bls.n	80038ce <_svfiprintf_r+0x1a6>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0c6      	beq.n	8003858 <_svfiprintf_r+0x130>
 80038ca:	9105      	str	r1, [sp, #20]
 80038cc:	e7c4      	b.n	8003858 <_svfiprintf_r+0x130>
 80038ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80038d2:	4604      	mov	r4, r0
 80038d4:	2301      	movs	r3, #1
 80038d6:	e7f0      	b.n	80038ba <_svfiprintf_r+0x192>
 80038d8:	ab03      	add	r3, sp, #12
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	462a      	mov	r2, r5
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <_svfiprintf_r+0x1f4>)
 80038e0:	a904      	add	r1, sp, #16
 80038e2:	4638      	mov	r0, r7
 80038e4:	f3af 8000 	nop.w
 80038e8:	1c42      	adds	r2, r0, #1
 80038ea:	4606      	mov	r6, r0
 80038ec:	d1d6      	bne.n	800389c <_svfiprintf_r+0x174>
 80038ee:	89ab      	ldrh	r3, [r5, #12]
 80038f0:	065b      	lsls	r3, r3, #25
 80038f2:	f53f af2d 	bmi.w	8003750 <_svfiprintf_r+0x28>
 80038f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f8:	b01d      	add	sp, #116	; 0x74
 80038fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fe:	ab03      	add	r3, sp, #12
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	462a      	mov	r2, r5
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <_svfiprintf_r+0x1f4>)
 8003906:	a904      	add	r1, sp, #16
 8003908:	4638      	mov	r0, r7
 800390a:	f000 fa4b 	bl	8003da4 <_printf_i>
 800390e:	e7eb      	b.n	80038e8 <_svfiprintf_r+0x1c0>
 8003910:	08004c9c 	.word	0x08004c9c
 8003914:	08004ca6 	.word	0x08004ca6
 8003918:	00000000 	.word	0x00000000
 800391c:	08003673 	.word	0x08003673
 8003920:	08004ca2 	.word	0x08004ca2

08003924 <_sungetc_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	1c4b      	adds	r3, r1, #1
 8003928:	4614      	mov	r4, r2
 800392a:	d103      	bne.n	8003934 <_sungetc_r+0x10>
 800392c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003930:	4628      	mov	r0, r5
 8003932:	bd38      	pop	{r3, r4, r5, pc}
 8003934:	8993      	ldrh	r3, [r2, #12]
 8003936:	f023 0320 	bic.w	r3, r3, #32
 800393a:	8193      	strh	r3, [r2, #12]
 800393c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800393e:	6852      	ldr	r2, [r2, #4]
 8003940:	b2cd      	uxtb	r5, r1
 8003942:	b18b      	cbz	r3, 8003968 <_sungetc_r+0x44>
 8003944:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003946:	4293      	cmp	r3, r2
 8003948:	dd08      	ble.n	800395c <_sungetc_r+0x38>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	1e5a      	subs	r2, r3, #1
 800394e:	6022      	str	r2, [r4, #0]
 8003950:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003954:	6863      	ldr	r3, [r4, #4]
 8003956:	3301      	adds	r3, #1
 8003958:	6063      	str	r3, [r4, #4]
 800395a:	e7e9      	b.n	8003930 <_sungetc_r+0xc>
 800395c:	4621      	mov	r1, r4
 800395e:	f000 fe19 	bl	8004594 <__submore>
 8003962:	2800      	cmp	r0, #0
 8003964:	d0f1      	beq.n	800394a <_sungetc_r+0x26>
 8003966:	e7e1      	b.n	800392c <_sungetc_r+0x8>
 8003968:	6921      	ldr	r1, [r4, #16]
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	b151      	cbz	r1, 8003984 <_sungetc_r+0x60>
 800396e:	4299      	cmp	r1, r3
 8003970:	d208      	bcs.n	8003984 <_sungetc_r+0x60>
 8003972:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003976:	42a9      	cmp	r1, r5
 8003978:	d104      	bne.n	8003984 <_sungetc_r+0x60>
 800397a:	3b01      	subs	r3, #1
 800397c:	3201      	adds	r2, #1
 800397e:	6023      	str	r3, [r4, #0]
 8003980:	6062      	str	r2, [r4, #4]
 8003982:	e7d5      	b.n	8003930 <_sungetc_r+0xc>
 8003984:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800398c:	6363      	str	r3, [r4, #52]	; 0x34
 800398e:	2303      	movs	r3, #3
 8003990:	63a3      	str	r3, [r4, #56]	; 0x38
 8003992:	4623      	mov	r3, r4
 8003994:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	2301      	movs	r3, #1
 800399c:	e7dc      	b.n	8003958 <_sungetc_r+0x34>

0800399e <__ssrefill_r>:
 800399e:	b510      	push	{r4, lr}
 80039a0:	460c      	mov	r4, r1
 80039a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80039a4:	b169      	cbz	r1, 80039c2 <__ssrefill_r+0x24>
 80039a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039aa:	4299      	cmp	r1, r3
 80039ac:	d001      	beq.n	80039b2 <__ssrefill_r+0x14>
 80039ae:	f7ff fde5 	bl	800357c <_free_r>
 80039b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039b4:	6063      	str	r3, [r4, #4]
 80039b6:	2000      	movs	r0, #0
 80039b8:	6360      	str	r0, [r4, #52]	; 0x34
 80039ba:	b113      	cbz	r3, 80039c2 <__ssrefill_r+0x24>
 80039bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	6923      	ldr	r3, [r4, #16]
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	6063      	str	r3, [r4, #4]
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	f043 0320 	orr.w	r3, r3, #32
 80039d0:	81a3      	strh	r3, [r4, #12]
 80039d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039d6:	e7f3      	b.n	80039c0 <__ssrefill_r+0x22>

080039d8 <__ssvfiscanf_r>:
 80039d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039dc:	460c      	mov	r4, r1
 80039de:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80039e2:	2100      	movs	r1, #0
 80039e4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80039e8:	49a6      	ldr	r1, [pc, #664]	; (8003c84 <__ssvfiscanf_r+0x2ac>)
 80039ea:	91a0      	str	r1, [sp, #640]	; 0x280
 80039ec:	f10d 0804 	add.w	r8, sp, #4
 80039f0:	49a5      	ldr	r1, [pc, #660]	; (8003c88 <__ssvfiscanf_r+0x2b0>)
 80039f2:	4fa6      	ldr	r7, [pc, #664]	; (8003c8c <__ssvfiscanf_r+0x2b4>)
 80039f4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003c90 <__ssvfiscanf_r+0x2b8>
 80039f8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80039fc:	4606      	mov	r6, r0
 80039fe:	91a1      	str	r1, [sp, #644]	; 0x284
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	7813      	ldrb	r3, [r2, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 815a 	beq.w	8003cbe <__ssvfiscanf_r+0x2e6>
 8003a0a:	5cf9      	ldrb	r1, [r7, r3]
 8003a0c:	f011 0108 	ands.w	r1, r1, #8
 8003a10:	f102 0501 	add.w	r5, r2, #1
 8003a14:	d019      	beq.n	8003a4a <__ssvfiscanf_r+0x72>
 8003a16:	6863      	ldr	r3, [r4, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	dd0f      	ble.n	8003a3c <__ssvfiscanf_r+0x64>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	5cba      	ldrb	r2, [r7, r2]
 8003a22:	0712      	lsls	r2, r2, #28
 8003a24:	d401      	bmi.n	8003a2a <__ssvfiscanf_r+0x52>
 8003a26:	462a      	mov	r2, r5
 8003a28:	e7eb      	b.n	8003a02 <__ssvfiscanf_r+0x2a>
 8003a2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003a2c:	3201      	adds	r2, #1
 8003a2e:	9245      	str	r2, [sp, #276]	; 0x114
 8003a30:	6862      	ldr	r2, [r4, #4]
 8003a32:	3301      	adds	r3, #1
 8003a34:	3a01      	subs	r2, #1
 8003a36:	6062      	str	r2, [r4, #4]
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	e7ec      	b.n	8003a16 <__ssvfiscanf_r+0x3e>
 8003a3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4630      	mov	r0, r6
 8003a42:	4798      	blx	r3
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d0e9      	beq.n	8003a1c <__ssvfiscanf_r+0x44>
 8003a48:	e7ed      	b.n	8003a26 <__ssvfiscanf_r+0x4e>
 8003a4a:	2b25      	cmp	r3, #37	; 0x25
 8003a4c:	d012      	beq.n	8003a74 <__ssvfiscanf_r+0x9c>
 8003a4e:	469a      	mov	sl, r3
 8003a50:	6863      	ldr	r3, [r4, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f340 8091 	ble.w	8003b7a <__ssvfiscanf_r+0x1a2>
 8003a58:	6822      	ldr	r2, [r4, #0]
 8003a5a:	7813      	ldrb	r3, [r2, #0]
 8003a5c:	4553      	cmp	r3, sl
 8003a5e:	f040 812e 	bne.w	8003cbe <__ssvfiscanf_r+0x2e6>
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	6063      	str	r3, [r4, #4]
 8003a68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003a6a:	3201      	adds	r2, #1
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	6022      	str	r2, [r4, #0]
 8003a70:	9345      	str	r3, [sp, #276]	; 0x114
 8003a72:	e7d8      	b.n	8003a26 <__ssvfiscanf_r+0x4e>
 8003a74:	9141      	str	r1, [sp, #260]	; 0x104
 8003a76:	9143      	str	r1, [sp, #268]	; 0x10c
 8003a78:	7853      	ldrb	r3, [r2, #1]
 8003a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a7c:	bf02      	ittt	eq
 8003a7e:	2310      	moveq	r3, #16
 8003a80:	1c95      	addeq	r5, r2, #2
 8003a82:	9341      	streq	r3, [sp, #260]	; 0x104
 8003a84:	220a      	movs	r2, #10
 8003a86:	46aa      	mov	sl, r5
 8003a88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003a8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003a90:	2b09      	cmp	r3, #9
 8003a92:	d91c      	bls.n	8003ace <__ssvfiscanf_r+0xf6>
 8003a94:	487e      	ldr	r0, [pc, #504]	; (8003c90 <__ssvfiscanf_r+0x2b8>)
 8003a96:	2203      	movs	r2, #3
 8003a98:	f7fc fb8a 	bl	80001b0 <memchr>
 8003a9c:	b138      	cbz	r0, 8003aae <__ssvfiscanf_r+0xd6>
 8003a9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003aa0:	eba0 0009 	sub.w	r0, r0, r9
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	4083      	lsls	r3, r0
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	9341      	str	r3, [sp, #260]	; 0x104
 8003aac:	4655      	mov	r5, sl
 8003aae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ab2:	2b78      	cmp	r3, #120	; 0x78
 8003ab4:	d806      	bhi.n	8003ac4 <__ssvfiscanf_r+0xec>
 8003ab6:	2b57      	cmp	r3, #87	; 0x57
 8003ab8:	d810      	bhi.n	8003adc <__ssvfiscanf_r+0x104>
 8003aba:	2b25      	cmp	r3, #37	; 0x25
 8003abc:	d0c7      	beq.n	8003a4e <__ssvfiscanf_r+0x76>
 8003abe:	d857      	bhi.n	8003b70 <__ssvfiscanf_r+0x198>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d065      	beq.n	8003b90 <__ssvfiscanf_r+0x1b8>
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ac8:	230a      	movs	r3, #10
 8003aca:	9342      	str	r3, [sp, #264]	; 0x108
 8003acc:	e076      	b.n	8003bbc <__ssvfiscanf_r+0x1e4>
 8003ace:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003ad0:	fb02 1103 	mla	r1, r2, r3, r1
 8003ad4:	3930      	subs	r1, #48	; 0x30
 8003ad6:	9143      	str	r1, [sp, #268]	; 0x10c
 8003ad8:	4655      	mov	r5, sl
 8003ada:	e7d4      	b.n	8003a86 <__ssvfiscanf_r+0xae>
 8003adc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003ae0:	2a20      	cmp	r2, #32
 8003ae2:	d8ef      	bhi.n	8003ac4 <__ssvfiscanf_r+0xec>
 8003ae4:	a101      	add	r1, pc, #4	; (adr r1, 8003aec <__ssvfiscanf_r+0x114>)
 8003ae6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b9f 	.word	0x08003b9f
 8003af0:	08003ac5 	.word	0x08003ac5
 8003af4:	08003ac5 	.word	0x08003ac5
 8003af8:	08003bfd 	.word	0x08003bfd
 8003afc:	08003ac5 	.word	0x08003ac5
 8003b00:	08003ac5 	.word	0x08003ac5
 8003b04:	08003ac5 	.word	0x08003ac5
 8003b08:	08003ac5 	.word	0x08003ac5
 8003b0c:	08003ac5 	.word	0x08003ac5
 8003b10:	08003ac5 	.word	0x08003ac5
 8003b14:	08003ac5 	.word	0x08003ac5
 8003b18:	08003c13 	.word	0x08003c13
 8003b1c:	08003bf9 	.word	0x08003bf9
 8003b20:	08003b77 	.word	0x08003b77
 8003b24:	08003b77 	.word	0x08003b77
 8003b28:	08003b77 	.word	0x08003b77
 8003b2c:	08003ac5 	.word	0x08003ac5
 8003b30:	08003bb5 	.word	0x08003bb5
 8003b34:	08003ac5 	.word	0x08003ac5
 8003b38:	08003ac5 	.word	0x08003ac5
 8003b3c:	08003ac5 	.word	0x08003ac5
 8003b40:	08003ac5 	.word	0x08003ac5
 8003b44:	08003c23 	.word	0x08003c23
 8003b48:	08003bf1 	.word	0x08003bf1
 8003b4c:	08003b97 	.word	0x08003b97
 8003b50:	08003ac5 	.word	0x08003ac5
 8003b54:	08003ac5 	.word	0x08003ac5
 8003b58:	08003c1f 	.word	0x08003c1f
 8003b5c:	08003ac5 	.word	0x08003ac5
 8003b60:	08003bf9 	.word	0x08003bf9
 8003b64:	08003ac5 	.word	0x08003ac5
 8003b68:	08003ac5 	.word	0x08003ac5
 8003b6c:	08003b9f 	.word	0x08003b9f
 8003b70:	3b45      	subs	r3, #69	; 0x45
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d8a6      	bhi.n	8003ac4 <__ssvfiscanf_r+0xec>
 8003b76:	2305      	movs	r3, #5
 8003b78:	e01f      	b.n	8003bba <__ssvfiscanf_r+0x1e2>
 8003b7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	4630      	mov	r0, r6
 8003b80:	4798      	blx	r3
 8003b82:	2800      	cmp	r0, #0
 8003b84:	f43f af68 	beq.w	8003a58 <__ssvfiscanf_r+0x80>
 8003b88:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	f040 808d 	bne.w	8003caa <__ssvfiscanf_r+0x2d2>
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b94:	e08f      	b.n	8003cb6 <__ssvfiscanf_r+0x2de>
 8003b96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b98:	f042 0220 	orr.w	r2, r2, #32
 8003b9c:	9241      	str	r2, [sp, #260]	; 0x104
 8003b9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba4:	9241      	str	r2, [sp, #260]	; 0x104
 8003ba6:	2210      	movs	r2, #16
 8003ba8:	2b6f      	cmp	r3, #111	; 0x6f
 8003baa:	9242      	str	r2, [sp, #264]	; 0x108
 8003bac:	bf34      	ite	cc
 8003bae:	2303      	movcc	r3, #3
 8003bb0:	2304      	movcs	r3, #4
 8003bb2:	e002      	b.n	8003bba <__ssvfiscanf_r+0x1e2>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9342      	str	r3, [sp, #264]	; 0x108
 8003bb8:	2303      	movs	r3, #3
 8003bba:	9347      	str	r3, [sp, #284]	; 0x11c
 8003bbc:	6863      	ldr	r3, [r4, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	dd3d      	ble.n	8003c3e <__ssvfiscanf_r+0x266>
 8003bc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003bc4:	0659      	lsls	r1, r3, #25
 8003bc6:	d404      	bmi.n	8003bd2 <__ssvfiscanf_r+0x1fa>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	5cba      	ldrb	r2, [r7, r2]
 8003bce:	0712      	lsls	r2, r2, #28
 8003bd0:	d43c      	bmi.n	8003c4c <__ssvfiscanf_r+0x274>
 8003bd2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	dc4b      	bgt.n	8003c70 <__ssvfiscanf_r+0x298>
 8003bd8:	466b      	mov	r3, sp
 8003bda:	4622      	mov	r2, r4
 8003bdc:	a941      	add	r1, sp, #260	; 0x104
 8003bde:	4630      	mov	r0, r6
 8003be0:	f000 fa02 	bl	8003fe8 <_scanf_chars>
 8003be4:	2801      	cmp	r0, #1
 8003be6:	d06a      	beq.n	8003cbe <__ssvfiscanf_r+0x2e6>
 8003be8:	2802      	cmp	r0, #2
 8003bea:	f47f af1c 	bne.w	8003a26 <__ssvfiscanf_r+0x4e>
 8003bee:	e7cb      	b.n	8003b88 <__ssvfiscanf_r+0x1b0>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	9342      	str	r3, [sp, #264]	; 0x108
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e7e0      	b.n	8003bba <__ssvfiscanf_r+0x1e2>
 8003bf8:	220a      	movs	r2, #10
 8003bfa:	e7d5      	b.n	8003ba8 <__ssvfiscanf_r+0x1d0>
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4640      	mov	r0, r8
 8003c00:	f000 fb52 	bl	80042a8 <__sccl>
 8003c04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0a:	9341      	str	r3, [sp, #260]	; 0x104
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e7d3      	b.n	8003bba <__ssvfiscanf_r+0x1e2>
 8003c12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c18:	9341      	str	r3, [sp, #260]	; 0x104
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e7cd      	b.n	8003bba <__ssvfiscanf_r+0x1e2>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e7cb      	b.n	8003bba <__ssvfiscanf_r+0x1e2>
 8003c22:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003c24:	06c3      	lsls	r3, r0, #27
 8003c26:	f53f aefe 	bmi.w	8003a26 <__ssvfiscanf_r+0x4e>
 8003c2a:	9b00      	ldr	r3, [sp, #0]
 8003c2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003c2e:	1d19      	adds	r1, r3, #4
 8003c30:	9100      	str	r1, [sp, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	07c0      	lsls	r0, r0, #31
 8003c36:	bf4c      	ite	mi
 8003c38:	801a      	strhmi	r2, [r3, #0]
 8003c3a:	601a      	strpl	r2, [r3, #0]
 8003c3c:	e6f3      	b.n	8003a26 <__ssvfiscanf_r+0x4e>
 8003c3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c40:	4621      	mov	r1, r4
 8003c42:	4630      	mov	r0, r6
 8003c44:	4798      	blx	r3
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d0bb      	beq.n	8003bc2 <__ssvfiscanf_r+0x1ea>
 8003c4a:	e79d      	b.n	8003b88 <__ssvfiscanf_r+0x1b0>
 8003c4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003c4e:	3201      	adds	r2, #1
 8003c50:	9245      	str	r2, [sp, #276]	; 0x114
 8003c52:	6862      	ldr	r2, [r4, #4]
 8003c54:	3a01      	subs	r2, #1
 8003c56:	2a00      	cmp	r2, #0
 8003c58:	6062      	str	r2, [r4, #4]
 8003c5a:	dd02      	ble.n	8003c62 <__ssvfiscanf_r+0x28a>
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	e7b2      	b.n	8003bc8 <__ssvfiscanf_r+0x1f0>
 8003c62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c64:	4621      	mov	r1, r4
 8003c66:	4630      	mov	r0, r6
 8003c68:	4798      	blx	r3
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d0ac      	beq.n	8003bc8 <__ssvfiscanf_r+0x1f0>
 8003c6e:	e78b      	b.n	8003b88 <__ssvfiscanf_r+0x1b0>
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	dc0f      	bgt.n	8003c94 <__ssvfiscanf_r+0x2bc>
 8003c74:	466b      	mov	r3, sp
 8003c76:	4622      	mov	r2, r4
 8003c78:	a941      	add	r1, sp, #260	; 0x104
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 fa0e 	bl	800409c <_scanf_i>
 8003c80:	e7b0      	b.n	8003be4 <__ssvfiscanf_r+0x20c>
 8003c82:	bf00      	nop
 8003c84:	08003925 	.word	0x08003925
 8003c88:	0800399f 	.word	0x0800399f
 8003c8c:	080053e2 	.word	0x080053e2
 8003c90:	08004ca2 	.word	0x08004ca2
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <__ssvfiscanf_r+0x2ec>)
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f43f aec5 	beq.w	8003a26 <__ssvfiscanf_r+0x4e>
 8003c9c:	466b      	mov	r3, sp
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	a941      	add	r1, sp, #260	; 0x104
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f3af 8000 	nop.w
 8003ca8:	e79c      	b.n	8003be4 <__ssvfiscanf_r+0x20c>
 8003caa:	89a3      	ldrh	r3, [r4, #12]
 8003cac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003cb0:	bf18      	it	ne
 8003cb2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003cb6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cbe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003cc0:	e7f9      	b.n	8003cb6 <__ssvfiscanf_r+0x2de>
 8003cc2:	bf00      	nop
 8003cc4:	00000000 	.word	0x00000000

08003cc8 <_printf_common>:
 8003cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ccc:	4616      	mov	r6, r2
 8003cce:	4699      	mov	r9, r3
 8003cd0:	688a      	ldr	r2, [r1, #8]
 8003cd2:	690b      	ldr	r3, [r1, #16]
 8003cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	bfb8      	it	lt
 8003cdc:	4613      	movlt	r3, r2
 8003cde:	6033      	str	r3, [r6, #0]
 8003ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ce4:	4607      	mov	r7, r0
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	b10a      	cbz	r2, 8003cee <_printf_common+0x26>
 8003cea:	3301      	adds	r3, #1
 8003cec:	6033      	str	r3, [r6, #0]
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	0699      	lsls	r1, r3, #26
 8003cf2:	bf42      	ittt	mi
 8003cf4:	6833      	ldrmi	r3, [r6, #0]
 8003cf6:	3302      	addmi	r3, #2
 8003cf8:	6033      	strmi	r3, [r6, #0]
 8003cfa:	6825      	ldr	r5, [r4, #0]
 8003cfc:	f015 0506 	ands.w	r5, r5, #6
 8003d00:	d106      	bne.n	8003d10 <_printf_common+0x48>
 8003d02:	f104 0a19 	add.w	sl, r4, #25
 8003d06:	68e3      	ldr	r3, [r4, #12]
 8003d08:	6832      	ldr	r2, [r6, #0]
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	42ab      	cmp	r3, r5
 8003d0e:	dc26      	bgt.n	8003d5e <_printf_common+0x96>
 8003d10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d14:	1e13      	subs	r3, r2, #0
 8003d16:	6822      	ldr	r2, [r4, #0]
 8003d18:	bf18      	it	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	0692      	lsls	r2, r2, #26
 8003d1e:	d42b      	bmi.n	8003d78 <_printf_common+0xb0>
 8003d20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d24:	4649      	mov	r1, r9
 8003d26:	4638      	mov	r0, r7
 8003d28:	47c0      	blx	r8
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d01e      	beq.n	8003d6c <_printf_common+0xa4>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	6922      	ldr	r2, [r4, #16]
 8003d32:	f003 0306 	and.w	r3, r3, #6
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	bf02      	ittt	eq
 8003d3a:	68e5      	ldreq	r5, [r4, #12]
 8003d3c:	6833      	ldreq	r3, [r6, #0]
 8003d3e:	1aed      	subeq	r5, r5, r3
 8003d40:	68a3      	ldr	r3, [r4, #8]
 8003d42:	bf0c      	ite	eq
 8003d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d48:	2500      	movne	r5, #0
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	bfc4      	itt	gt
 8003d4e:	1a9b      	subgt	r3, r3, r2
 8003d50:	18ed      	addgt	r5, r5, r3
 8003d52:	2600      	movs	r6, #0
 8003d54:	341a      	adds	r4, #26
 8003d56:	42b5      	cmp	r5, r6
 8003d58:	d11a      	bne.n	8003d90 <_printf_common+0xc8>
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	e008      	b.n	8003d70 <_printf_common+0xa8>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4652      	mov	r2, sl
 8003d62:	4649      	mov	r1, r9
 8003d64:	4638      	mov	r0, r7
 8003d66:	47c0      	blx	r8
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d103      	bne.n	8003d74 <_printf_common+0xac>
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d74:	3501      	adds	r5, #1
 8003d76:	e7c6      	b.n	8003d06 <_printf_common+0x3e>
 8003d78:	18e1      	adds	r1, r4, r3
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	2030      	movs	r0, #48	; 0x30
 8003d7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d82:	4422      	add	r2, r4
 8003d84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	e7c7      	b.n	8003d20 <_printf_common+0x58>
 8003d90:	2301      	movs	r3, #1
 8003d92:	4622      	mov	r2, r4
 8003d94:	4649      	mov	r1, r9
 8003d96:	4638      	mov	r0, r7
 8003d98:	47c0      	blx	r8
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d0e6      	beq.n	8003d6c <_printf_common+0xa4>
 8003d9e:	3601      	adds	r6, #1
 8003da0:	e7d9      	b.n	8003d56 <_printf_common+0x8e>
	...

08003da4 <_printf_i>:
 8003da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003da8:	7e0f      	ldrb	r7, [r1, #24]
 8003daa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dac:	2f78      	cmp	r7, #120	; 0x78
 8003dae:	4691      	mov	r9, r2
 8003db0:	4680      	mov	r8, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	469a      	mov	sl, r3
 8003db6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dba:	d807      	bhi.n	8003dcc <_printf_i+0x28>
 8003dbc:	2f62      	cmp	r7, #98	; 0x62
 8003dbe:	d80a      	bhi.n	8003dd6 <_printf_i+0x32>
 8003dc0:	2f00      	cmp	r7, #0
 8003dc2:	f000 80d4 	beq.w	8003f6e <_printf_i+0x1ca>
 8003dc6:	2f58      	cmp	r7, #88	; 0x58
 8003dc8:	f000 80c0 	beq.w	8003f4c <_printf_i+0x1a8>
 8003dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dd4:	e03a      	b.n	8003e4c <_printf_i+0xa8>
 8003dd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dda:	2b15      	cmp	r3, #21
 8003ddc:	d8f6      	bhi.n	8003dcc <_printf_i+0x28>
 8003dde:	a101      	add	r1, pc, #4	; (adr r1, 8003de4 <_printf_i+0x40>)
 8003de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003de4:	08003e3d 	.word	0x08003e3d
 8003de8:	08003e51 	.word	0x08003e51
 8003dec:	08003dcd 	.word	0x08003dcd
 8003df0:	08003dcd 	.word	0x08003dcd
 8003df4:	08003dcd 	.word	0x08003dcd
 8003df8:	08003dcd 	.word	0x08003dcd
 8003dfc:	08003e51 	.word	0x08003e51
 8003e00:	08003dcd 	.word	0x08003dcd
 8003e04:	08003dcd 	.word	0x08003dcd
 8003e08:	08003dcd 	.word	0x08003dcd
 8003e0c:	08003dcd 	.word	0x08003dcd
 8003e10:	08003f55 	.word	0x08003f55
 8003e14:	08003e7d 	.word	0x08003e7d
 8003e18:	08003f0f 	.word	0x08003f0f
 8003e1c:	08003dcd 	.word	0x08003dcd
 8003e20:	08003dcd 	.word	0x08003dcd
 8003e24:	08003f77 	.word	0x08003f77
 8003e28:	08003dcd 	.word	0x08003dcd
 8003e2c:	08003e7d 	.word	0x08003e7d
 8003e30:	08003dcd 	.word	0x08003dcd
 8003e34:	08003dcd 	.word	0x08003dcd
 8003e38:	08003f17 	.word	0x08003f17
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	1d1a      	adds	r2, r3, #4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	602a      	str	r2, [r5, #0]
 8003e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e09f      	b.n	8003f90 <_printf_i+0x1ec>
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	0607      	lsls	r7, r0, #24
 8003e56:	f103 0104 	add.w	r1, r3, #4
 8003e5a:	6029      	str	r1, [r5, #0]
 8003e5c:	d501      	bpl.n	8003e62 <_printf_i+0xbe>
 8003e5e:	681e      	ldr	r6, [r3, #0]
 8003e60:	e003      	b.n	8003e6a <_printf_i+0xc6>
 8003e62:	0646      	lsls	r6, r0, #25
 8003e64:	d5fb      	bpl.n	8003e5e <_printf_i+0xba>
 8003e66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e6a:	2e00      	cmp	r6, #0
 8003e6c:	da03      	bge.n	8003e76 <_printf_i+0xd2>
 8003e6e:	232d      	movs	r3, #45	; 0x2d
 8003e70:	4276      	negs	r6, r6
 8003e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e76:	485a      	ldr	r0, [pc, #360]	; (8003fe0 <_printf_i+0x23c>)
 8003e78:	230a      	movs	r3, #10
 8003e7a:	e012      	b.n	8003ea2 <_printf_i+0xfe>
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	6820      	ldr	r0, [r4, #0]
 8003e80:	1d19      	adds	r1, r3, #4
 8003e82:	6029      	str	r1, [r5, #0]
 8003e84:	0605      	lsls	r5, r0, #24
 8003e86:	d501      	bpl.n	8003e8c <_printf_i+0xe8>
 8003e88:	681e      	ldr	r6, [r3, #0]
 8003e8a:	e002      	b.n	8003e92 <_printf_i+0xee>
 8003e8c:	0641      	lsls	r1, r0, #25
 8003e8e:	d5fb      	bpl.n	8003e88 <_printf_i+0xe4>
 8003e90:	881e      	ldrh	r6, [r3, #0]
 8003e92:	4853      	ldr	r0, [pc, #332]	; (8003fe0 <_printf_i+0x23c>)
 8003e94:	2f6f      	cmp	r7, #111	; 0x6f
 8003e96:	bf0c      	ite	eq
 8003e98:	2308      	moveq	r3, #8
 8003e9a:	230a      	movne	r3, #10
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ea2:	6865      	ldr	r5, [r4, #4]
 8003ea4:	60a5      	str	r5, [r4, #8]
 8003ea6:	2d00      	cmp	r5, #0
 8003ea8:	bfa2      	ittt	ge
 8003eaa:	6821      	ldrge	r1, [r4, #0]
 8003eac:	f021 0104 	bicge.w	r1, r1, #4
 8003eb0:	6021      	strge	r1, [r4, #0]
 8003eb2:	b90e      	cbnz	r6, 8003eb8 <_printf_i+0x114>
 8003eb4:	2d00      	cmp	r5, #0
 8003eb6:	d04b      	beq.n	8003f50 <_printf_i+0x1ac>
 8003eb8:	4615      	mov	r5, r2
 8003eba:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ebe:	fb03 6711 	mls	r7, r3, r1, r6
 8003ec2:	5dc7      	ldrb	r7, [r0, r7]
 8003ec4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ec8:	4637      	mov	r7, r6
 8003eca:	42bb      	cmp	r3, r7
 8003ecc:	460e      	mov	r6, r1
 8003ece:	d9f4      	bls.n	8003eba <_printf_i+0x116>
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d10b      	bne.n	8003eec <_printf_i+0x148>
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	07de      	lsls	r6, r3, #31
 8003ed8:	d508      	bpl.n	8003eec <_printf_i+0x148>
 8003eda:	6923      	ldr	r3, [r4, #16]
 8003edc:	6861      	ldr	r1, [r4, #4]
 8003ede:	4299      	cmp	r1, r3
 8003ee0:	bfde      	ittt	le
 8003ee2:	2330      	movle	r3, #48	; 0x30
 8003ee4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ee8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003eec:	1b52      	subs	r2, r2, r5
 8003eee:	6122      	str	r2, [r4, #16]
 8003ef0:	f8cd a000 	str.w	sl, [sp]
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	aa03      	add	r2, sp, #12
 8003ef8:	4621      	mov	r1, r4
 8003efa:	4640      	mov	r0, r8
 8003efc:	f7ff fee4 	bl	8003cc8 <_printf_common>
 8003f00:	3001      	adds	r0, #1
 8003f02:	d14a      	bne.n	8003f9a <_printf_i+0x1f6>
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f08:	b004      	add	sp, #16
 8003f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	f043 0320 	orr.w	r3, r3, #32
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	4833      	ldr	r0, [pc, #204]	; (8003fe4 <_printf_i+0x240>)
 8003f18:	2778      	movs	r7, #120	; 0x78
 8003f1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	6829      	ldr	r1, [r5, #0]
 8003f22:	061f      	lsls	r7, r3, #24
 8003f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f28:	d402      	bmi.n	8003f30 <_printf_i+0x18c>
 8003f2a:	065f      	lsls	r7, r3, #25
 8003f2c:	bf48      	it	mi
 8003f2e:	b2b6      	uxthmi	r6, r6
 8003f30:	07df      	lsls	r7, r3, #31
 8003f32:	bf48      	it	mi
 8003f34:	f043 0320 	orrmi.w	r3, r3, #32
 8003f38:	6029      	str	r1, [r5, #0]
 8003f3a:	bf48      	it	mi
 8003f3c:	6023      	strmi	r3, [r4, #0]
 8003f3e:	b91e      	cbnz	r6, 8003f48 <_printf_i+0x1a4>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	f023 0320 	bic.w	r3, r3, #32
 8003f46:	6023      	str	r3, [r4, #0]
 8003f48:	2310      	movs	r3, #16
 8003f4a:	e7a7      	b.n	8003e9c <_printf_i+0xf8>
 8003f4c:	4824      	ldr	r0, [pc, #144]	; (8003fe0 <_printf_i+0x23c>)
 8003f4e:	e7e4      	b.n	8003f1a <_printf_i+0x176>
 8003f50:	4615      	mov	r5, r2
 8003f52:	e7bd      	b.n	8003ed0 <_printf_i+0x12c>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	6826      	ldr	r6, [r4, #0]
 8003f58:	6961      	ldr	r1, [r4, #20]
 8003f5a:	1d18      	adds	r0, r3, #4
 8003f5c:	6028      	str	r0, [r5, #0]
 8003f5e:	0635      	lsls	r5, r6, #24
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	d501      	bpl.n	8003f68 <_printf_i+0x1c4>
 8003f64:	6019      	str	r1, [r3, #0]
 8003f66:	e002      	b.n	8003f6e <_printf_i+0x1ca>
 8003f68:	0670      	lsls	r0, r6, #25
 8003f6a:	d5fb      	bpl.n	8003f64 <_printf_i+0x1c0>
 8003f6c:	8019      	strh	r1, [r3, #0]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6123      	str	r3, [r4, #16]
 8003f72:	4615      	mov	r5, r2
 8003f74:	e7bc      	b.n	8003ef0 <_printf_i+0x14c>
 8003f76:	682b      	ldr	r3, [r5, #0]
 8003f78:	1d1a      	adds	r2, r3, #4
 8003f7a:	602a      	str	r2, [r5, #0]
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	6862      	ldr	r2, [r4, #4]
 8003f80:	2100      	movs	r1, #0
 8003f82:	4628      	mov	r0, r5
 8003f84:	f7fc f914 	bl	80001b0 <memchr>
 8003f88:	b108      	cbz	r0, 8003f8e <_printf_i+0x1ea>
 8003f8a:	1b40      	subs	r0, r0, r5
 8003f8c:	6060      	str	r0, [r4, #4]
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	6123      	str	r3, [r4, #16]
 8003f92:	2300      	movs	r3, #0
 8003f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f98:	e7aa      	b.n	8003ef0 <_printf_i+0x14c>
 8003f9a:	6923      	ldr	r3, [r4, #16]
 8003f9c:	462a      	mov	r2, r5
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	47d0      	blx	sl
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d0ad      	beq.n	8003f04 <_printf_i+0x160>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	079b      	lsls	r3, r3, #30
 8003fac:	d413      	bmi.n	8003fd6 <_printf_i+0x232>
 8003fae:	68e0      	ldr	r0, [r4, #12]
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	4298      	cmp	r0, r3
 8003fb4:	bfb8      	it	lt
 8003fb6:	4618      	movlt	r0, r3
 8003fb8:	e7a6      	b.n	8003f08 <_printf_i+0x164>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	47d0      	blx	sl
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d09d      	beq.n	8003f04 <_printf_i+0x160>
 8003fc8:	3501      	adds	r5, #1
 8003fca:	68e3      	ldr	r3, [r4, #12]
 8003fcc:	9903      	ldr	r1, [sp, #12]
 8003fce:	1a5b      	subs	r3, r3, r1
 8003fd0:	42ab      	cmp	r3, r5
 8003fd2:	dcf2      	bgt.n	8003fba <_printf_i+0x216>
 8003fd4:	e7eb      	b.n	8003fae <_printf_i+0x20a>
 8003fd6:	2500      	movs	r5, #0
 8003fd8:	f104 0619 	add.w	r6, r4, #25
 8003fdc:	e7f5      	b.n	8003fca <_printf_i+0x226>
 8003fde:	bf00      	nop
 8003fe0:	080053a4 	.word	0x080053a4
 8003fe4:	080053b5 	.word	0x080053b5

08003fe8 <_scanf_chars>:
 8003fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fec:	4615      	mov	r5, r2
 8003fee:	688a      	ldr	r2, [r1, #8]
 8003ff0:	4680      	mov	r8, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	b932      	cbnz	r2, 8004004 <_scanf_chars+0x1c>
 8003ff6:	698a      	ldr	r2, [r1, #24]
 8003ff8:	2a00      	cmp	r2, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2201      	moveq	r2, #1
 8003ffe:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8004002:	608a      	str	r2, [r1, #8]
 8004004:	6822      	ldr	r2, [r4, #0]
 8004006:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004098 <_scanf_chars+0xb0>
 800400a:	06d1      	lsls	r1, r2, #27
 800400c:	bf5f      	itttt	pl
 800400e:	681a      	ldrpl	r2, [r3, #0]
 8004010:	1d11      	addpl	r1, r2, #4
 8004012:	6019      	strpl	r1, [r3, #0]
 8004014:	6816      	ldrpl	r6, [r2, #0]
 8004016:	2700      	movs	r7, #0
 8004018:	69a0      	ldr	r0, [r4, #24]
 800401a:	b188      	cbz	r0, 8004040 <_scanf_chars+0x58>
 800401c:	2801      	cmp	r0, #1
 800401e:	d107      	bne.n	8004030 <_scanf_chars+0x48>
 8004020:	682a      	ldr	r2, [r5, #0]
 8004022:	7811      	ldrb	r1, [r2, #0]
 8004024:	6962      	ldr	r2, [r4, #20]
 8004026:	5c52      	ldrb	r2, [r2, r1]
 8004028:	b952      	cbnz	r2, 8004040 <_scanf_chars+0x58>
 800402a:	2f00      	cmp	r7, #0
 800402c:	d031      	beq.n	8004092 <_scanf_chars+0xaa>
 800402e:	e022      	b.n	8004076 <_scanf_chars+0x8e>
 8004030:	2802      	cmp	r0, #2
 8004032:	d120      	bne.n	8004076 <_scanf_chars+0x8e>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	f819 3003 	ldrb.w	r3, [r9, r3]
 800403c:	071b      	lsls	r3, r3, #28
 800403e:	d41a      	bmi.n	8004076 <_scanf_chars+0x8e>
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	06da      	lsls	r2, r3, #27
 8004044:	bf5e      	ittt	pl
 8004046:	682b      	ldrpl	r3, [r5, #0]
 8004048:	781b      	ldrbpl	r3, [r3, #0]
 800404a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800404e:	682a      	ldr	r2, [r5, #0]
 8004050:	686b      	ldr	r3, [r5, #4]
 8004052:	3201      	adds	r2, #1
 8004054:	602a      	str	r2, [r5, #0]
 8004056:	68a2      	ldr	r2, [r4, #8]
 8004058:	3b01      	subs	r3, #1
 800405a:	3a01      	subs	r2, #1
 800405c:	606b      	str	r3, [r5, #4]
 800405e:	3701      	adds	r7, #1
 8004060:	60a2      	str	r2, [r4, #8]
 8004062:	b142      	cbz	r2, 8004076 <_scanf_chars+0x8e>
 8004064:	2b00      	cmp	r3, #0
 8004066:	dcd7      	bgt.n	8004018 <_scanf_chars+0x30>
 8004068:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800406c:	4629      	mov	r1, r5
 800406e:	4640      	mov	r0, r8
 8004070:	4798      	blx	r3
 8004072:	2800      	cmp	r0, #0
 8004074:	d0d0      	beq.n	8004018 <_scanf_chars+0x30>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	f013 0310 	ands.w	r3, r3, #16
 800407c:	d105      	bne.n	800408a <_scanf_chars+0xa2>
 800407e:	68e2      	ldr	r2, [r4, #12]
 8004080:	3201      	adds	r2, #1
 8004082:	60e2      	str	r2, [r4, #12]
 8004084:	69a2      	ldr	r2, [r4, #24]
 8004086:	b102      	cbz	r2, 800408a <_scanf_chars+0xa2>
 8004088:	7033      	strb	r3, [r6, #0]
 800408a:	6923      	ldr	r3, [r4, #16]
 800408c:	443b      	add	r3, r7
 800408e:	6123      	str	r3, [r4, #16]
 8004090:	2000      	movs	r0, #0
 8004092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004096:	bf00      	nop
 8004098:	080053e2 	.word	0x080053e2

0800409c <_scanf_i>:
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	4698      	mov	r8, r3
 80040a2:	4b74      	ldr	r3, [pc, #464]	; (8004274 <_scanf_i+0x1d8>)
 80040a4:	460c      	mov	r4, r1
 80040a6:	4682      	mov	sl, r0
 80040a8:	4616      	mov	r6, r2
 80040aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040ae:	b087      	sub	sp, #28
 80040b0:	ab03      	add	r3, sp, #12
 80040b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80040b6:	4b70      	ldr	r3, [pc, #448]	; (8004278 <_scanf_i+0x1dc>)
 80040b8:	69a1      	ldr	r1, [r4, #24]
 80040ba:	4a70      	ldr	r2, [pc, #448]	; (800427c <_scanf_i+0x1e0>)
 80040bc:	2903      	cmp	r1, #3
 80040be:	bf18      	it	ne
 80040c0:	461a      	movne	r2, r3
 80040c2:	68a3      	ldr	r3, [r4, #8]
 80040c4:	9201      	str	r2, [sp, #4]
 80040c6:	1e5a      	subs	r2, r3, #1
 80040c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80040cc:	bf88      	it	hi
 80040ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80040d2:	4627      	mov	r7, r4
 80040d4:	bf82      	ittt	hi
 80040d6:	eb03 0905 	addhi.w	r9, r3, r5
 80040da:	f240 135d 	movwhi	r3, #349	; 0x15d
 80040de:	60a3      	strhi	r3, [r4, #8]
 80040e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80040e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80040e8:	bf98      	it	ls
 80040ea:	f04f 0900 	movls.w	r9, #0
 80040ee:	6023      	str	r3, [r4, #0]
 80040f0:	463d      	mov	r5, r7
 80040f2:	f04f 0b00 	mov.w	fp, #0
 80040f6:	6831      	ldr	r1, [r6, #0]
 80040f8:	ab03      	add	r3, sp, #12
 80040fa:	7809      	ldrb	r1, [r1, #0]
 80040fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004100:	2202      	movs	r2, #2
 8004102:	f7fc f855 	bl	80001b0 <memchr>
 8004106:	b328      	cbz	r0, 8004154 <_scanf_i+0xb8>
 8004108:	f1bb 0f01 	cmp.w	fp, #1
 800410c:	d159      	bne.n	80041c2 <_scanf_i+0x126>
 800410e:	6862      	ldr	r2, [r4, #4]
 8004110:	b92a      	cbnz	r2, 800411e <_scanf_i+0x82>
 8004112:	6822      	ldr	r2, [r4, #0]
 8004114:	2308      	movs	r3, #8
 8004116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411a:	6063      	str	r3, [r4, #4]
 800411c:	6022      	str	r2, [r4, #0]
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004124:	6022      	str	r2, [r4, #0]
 8004126:	68a2      	ldr	r2, [r4, #8]
 8004128:	1e51      	subs	r1, r2, #1
 800412a:	60a1      	str	r1, [r4, #8]
 800412c:	b192      	cbz	r2, 8004154 <_scanf_i+0xb8>
 800412e:	6832      	ldr	r2, [r6, #0]
 8004130:	1c51      	adds	r1, r2, #1
 8004132:	6031      	str	r1, [r6, #0]
 8004134:	7812      	ldrb	r2, [r2, #0]
 8004136:	f805 2b01 	strb.w	r2, [r5], #1
 800413a:	6872      	ldr	r2, [r6, #4]
 800413c:	3a01      	subs	r2, #1
 800413e:	2a00      	cmp	r2, #0
 8004140:	6072      	str	r2, [r6, #4]
 8004142:	dc07      	bgt.n	8004154 <_scanf_i+0xb8>
 8004144:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004148:	4631      	mov	r1, r6
 800414a:	4650      	mov	r0, sl
 800414c:	4790      	blx	r2
 800414e:	2800      	cmp	r0, #0
 8004150:	f040 8085 	bne.w	800425e <_scanf_i+0x1c2>
 8004154:	f10b 0b01 	add.w	fp, fp, #1
 8004158:	f1bb 0f03 	cmp.w	fp, #3
 800415c:	d1cb      	bne.n	80040f6 <_scanf_i+0x5a>
 800415e:	6863      	ldr	r3, [r4, #4]
 8004160:	b90b      	cbnz	r3, 8004166 <_scanf_i+0xca>
 8004162:	230a      	movs	r3, #10
 8004164:	6063      	str	r3, [r4, #4]
 8004166:	6863      	ldr	r3, [r4, #4]
 8004168:	4945      	ldr	r1, [pc, #276]	; (8004280 <_scanf_i+0x1e4>)
 800416a:	6960      	ldr	r0, [r4, #20]
 800416c:	1ac9      	subs	r1, r1, r3
 800416e:	f000 f89b 	bl	80042a8 <__sccl>
 8004172:	f04f 0b00 	mov.w	fp, #0
 8004176:	68a3      	ldr	r3, [r4, #8]
 8004178:	6822      	ldr	r2, [r4, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d03d      	beq.n	80041fa <_scanf_i+0x15e>
 800417e:	6831      	ldr	r1, [r6, #0]
 8004180:	6960      	ldr	r0, [r4, #20]
 8004182:	f891 c000 	ldrb.w	ip, [r1]
 8004186:	f810 000c 	ldrb.w	r0, [r0, ip]
 800418a:	2800      	cmp	r0, #0
 800418c:	d035      	beq.n	80041fa <_scanf_i+0x15e>
 800418e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004192:	d124      	bne.n	80041de <_scanf_i+0x142>
 8004194:	0510      	lsls	r0, r2, #20
 8004196:	d522      	bpl.n	80041de <_scanf_i+0x142>
 8004198:	f10b 0b01 	add.w	fp, fp, #1
 800419c:	f1b9 0f00 	cmp.w	r9, #0
 80041a0:	d003      	beq.n	80041aa <_scanf_i+0x10e>
 80041a2:	3301      	adds	r3, #1
 80041a4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80041a8:	60a3      	str	r3, [r4, #8]
 80041aa:	6873      	ldr	r3, [r6, #4]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	6073      	str	r3, [r6, #4]
 80041b2:	dd1b      	ble.n	80041ec <_scanf_i+0x150>
 80041b4:	6833      	ldr	r3, [r6, #0]
 80041b6:	3301      	adds	r3, #1
 80041b8:	6033      	str	r3, [r6, #0]
 80041ba:	68a3      	ldr	r3, [r4, #8]
 80041bc:	3b01      	subs	r3, #1
 80041be:	60a3      	str	r3, [r4, #8]
 80041c0:	e7d9      	b.n	8004176 <_scanf_i+0xda>
 80041c2:	f1bb 0f02 	cmp.w	fp, #2
 80041c6:	d1ae      	bne.n	8004126 <_scanf_i+0x8a>
 80041c8:	6822      	ldr	r2, [r4, #0]
 80041ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80041ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80041d2:	d1bf      	bne.n	8004154 <_scanf_i+0xb8>
 80041d4:	2310      	movs	r3, #16
 80041d6:	6063      	str	r3, [r4, #4]
 80041d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041dc:	e7a2      	b.n	8004124 <_scanf_i+0x88>
 80041de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80041e2:	6022      	str	r2, [r4, #0]
 80041e4:	780b      	ldrb	r3, [r1, #0]
 80041e6:	f805 3b01 	strb.w	r3, [r5], #1
 80041ea:	e7de      	b.n	80041aa <_scanf_i+0x10e>
 80041ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041f0:	4631      	mov	r1, r6
 80041f2:	4650      	mov	r0, sl
 80041f4:	4798      	blx	r3
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d0df      	beq.n	80041ba <_scanf_i+0x11e>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	05d9      	lsls	r1, r3, #23
 80041fe:	d50d      	bpl.n	800421c <_scanf_i+0x180>
 8004200:	42bd      	cmp	r5, r7
 8004202:	d909      	bls.n	8004218 <_scanf_i+0x17c>
 8004204:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004208:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800420c:	4632      	mov	r2, r6
 800420e:	4650      	mov	r0, sl
 8004210:	4798      	blx	r3
 8004212:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8004216:	464d      	mov	r5, r9
 8004218:	42bd      	cmp	r5, r7
 800421a:	d028      	beq.n	800426e <_scanf_i+0x1d2>
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	f012 0210 	ands.w	r2, r2, #16
 8004222:	d113      	bne.n	800424c <_scanf_i+0x1b0>
 8004224:	702a      	strb	r2, [r5, #0]
 8004226:	6863      	ldr	r3, [r4, #4]
 8004228:	9e01      	ldr	r6, [sp, #4]
 800422a:	4639      	mov	r1, r7
 800422c:	4650      	mov	r0, sl
 800422e:	47b0      	blx	r6
 8004230:	f8d8 3000 	ldr.w	r3, [r8]
 8004234:	6821      	ldr	r1, [r4, #0]
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	f8c8 2000 	str.w	r2, [r8]
 800423c:	f011 0f20 	tst.w	r1, #32
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	d00f      	beq.n	8004264 <_scanf_i+0x1c8>
 8004244:	6018      	str	r0, [r3, #0]
 8004246:	68e3      	ldr	r3, [r4, #12]
 8004248:	3301      	adds	r3, #1
 800424a:	60e3      	str	r3, [r4, #12]
 800424c:	6923      	ldr	r3, [r4, #16]
 800424e:	1bed      	subs	r5, r5, r7
 8004250:	445d      	add	r5, fp
 8004252:	442b      	add	r3, r5
 8004254:	6123      	str	r3, [r4, #16]
 8004256:	2000      	movs	r0, #0
 8004258:	b007      	add	sp, #28
 800425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425e:	f04f 0b00 	mov.w	fp, #0
 8004262:	e7ca      	b.n	80041fa <_scanf_i+0x15e>
 8004264:	07ca      	lsls	r2, r1, #31
 8004266:	bf4c      	ite	mi
 8004268:	8018      	strhmi	r0, [r3, #0]
 800426a:	6018      	strpl	r0, [r3, #0]
 800426c:	e7eb      	b.n	8004246 <_scanf_i+0x1aa>
 800426e:	2001      	movs	r0, #1
 8004270:	e7f2      	b.n	8004258 <_scanf_i+0x1bc>
 8004272:	bf00      	nop
 8004274:	08004c38 	.word	0x08004c38
 8004278:	08004591 	.word	0x08004591
 800427c:	080044a9 	.word	0x080044a9
 8004280:	080053d6 	.word	0x080053d6

08004284 <_read_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4d07      	ldr	r5, [pc, #28]	; (80042a4 <_read_r+0x20>)
 8004288:	4604      	mov	r4, r0
 800428a:	4608      	mov	r0, r1
 800428c:	4611      	mov	r1, r2
 800428e:	2200      	movs	r2, #0
 8004290:	602a      	str	r2, [r5, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f000 fa12 	bl	80046bc <_read>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_read_r+0x1e>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_read_r+0x1e>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	20000d10 	.word	0x20000d10

080042a8 <__sccl>:
 80042a8:	b570      	push	{r4, r5, r6, lr}
 80042aa:	780b      	ldrb	r3, [r1, #0]
 80042ac:	4604      	mov	r4, r0
 80042ae:	2b5e      	cmp	r3, #94	; 0x5e
 80042b0:	bf0b      	itete	eq
 80042b2:	784b      	ldrbeq	r3, [r1, #1]
 80042b4:	1c4a      	addne	r2, r1, #1
 80042b6:	1c8a      	addeq	r2, r1, #2
 80042b8:	2100      	movne	r1, #0
 80042ba:	bf08      	it	eq
 80042bc:	2101      	moveq	r1, #1
 80042be:	3801      	subs	r0, #1
 80042c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80042c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80042c8:	42a8      	cmp	r0, r5
 80042ca:	d1fb      	bne.n	80042c4 <__sccl+0x1c>
 80042cc:	b90b      	cbnz	r3, 80042d2 <__sccl+0x2a>
 80042ce:	1e50      	subs	r0, r2, #1
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	f081 0101 	eor.w	r1, r1, #1
 80042d6:	54e1      	strb	r1, [r4, r3]
 80042d8:	4610      	mov	r0, r2
 80042da:	4602      	mov	r2, r0
 80042dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80042e0:	2d2d      	cmp	r5, #45	; 0x2d
 80042e2:	d005      	beq.n	80042f0 <__sccl+0x48>
 80042e4:	2d5d      	cmp	r5, #93	; 0x5d
 80042e6:	d016      	beq.n	8004316 <__sccl+0x6e>
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	d0f1      	beq.n	80042d0 <__sccl+0x28>
 80042ec:	462b      	mov	r3, r5
 80042ee:	e7f2      	b.n	80042d6 <__sccl+0x2e>
 80042f0:	7846      	ldrb	r6, [r0, #1]
 80042f2:	2e5d      	cmp	r6, #93	; 0x5d
 80042f4:	d0fa      	beq.n	80042ec <__sccl+0x44>
 80042f6:	42b3      	cmp	r3, r6
 80042f8:	dcf8      	bgt.n	80042ec <__sccl+0x44>
 80042fa:	3002      	adds	r0, #2
 80042fc:	461a      	mov	r2, r3
 80042fe:	3201      	adds	r2, #1
 8004300:	4296      	cmp	r6, r2
 8004302:	54a1      	strb	r1, [r4, r2]
 8004304:	dcfb      	bgt.n	80042fe <__sccl+0x56>
 8004306:	1af2      	subs	r2, r6, r3
 8004308:	3a01      	subs	r2, #1
 800430a:	1c5d      	adds	r5, r3, #1
 800430c:	42b3      	cmp	r3, r6
 800430e:	bfa8      	it	ge
 8004310:	2200      	movge	r2, #0
 8004312:	18ab      	adds	r3, r5, r2
 8004314:	e7e1      	b.n	80042da <__sccl+0x32>
 8004316:	4610      	mov	r0, r2
 8004318:	e7da      	b.n	80042d0 <__sccl+0x28>

0800431a <_raise_r>:
 800431a:	291f      	cmp	r1, #31
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4604      	mov	r4, r0
 8004320:	460d      	mov	r5, r1
 8004322:	d904      	bls.n	800432e <_raise_r+0x14>
 8004324:	2316      	movs	r3, #22
 8004326:	6003      	str	r3, [r0, #0]
 8004328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800432c:	bd38      	pop	{r3, r4, r5, pc}
 800432e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004330:	b112      	cbz	r2, 8004338 <_raise_r+0x1e>
 8004332:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004336:	b94b      	cbnz	r3, 800434c <_raise_r+0x32>
 8004338:	4620      	mov	r0, r4
 800433a:	f000 f831 	bl	80043a0 <_getpid_r>
 800433e:	462a      	mov	r2, r5
 8004340:	4601      	mov	r1, r0
 8004342:	4620      	mov	r0, r4
 8004344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004348:	f000 b818 	b.w	800437c <_kill_r>
 800434c:	2b01      	cmp	r3, #1
 800434e:	d00a      	beq.n	8004366 <_raise_r+0x4c>
 8004350:	1c59      	adds	r1, r3, #1
 8004352:	d103      	bne.n	800435c <_raise_r+0x42>
 8004354:	2316      	movs	r3, #22
 8004356:	6003      	str	r3, [r0, #0]
 8004358:	2001      	movs	r0, #1
 800435a:	e7e7      	b.n	800432c <_raise_r+0x12>
 800435c:	2400      	movs	r4, #0
 800435e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004362:	4628      	mov	r0, r5
 8004364:	4798      	blx	r3
 8004366:	2000      	movs	r0, #0
 8004368:	e7e0      	b.n	800432c <_raise_r+0x12>
	...

0800436c <raise>:
 800436c:	4b02      	ldr	r3, [pc, #8]	; (8004378 <raise+0xc>)
 800436e:	4601      	mov	r1, r0
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	f7ff bfd2 	b.w	800431a <_raise_r>
 8004376:	bf00      	nop
 8004378:	20000060 	.word	0x20000060

0800437c <_kill_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4d07      	ldr	r5, [pc, #28]	; (800439c <_kill_r+0x20>)
 8004380:	2300      	movs	r3, #0
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	602b      	str	r3, [r5, #0]
 800438a:	f000 f987 	bl	800469c <_kill>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d102      	bne.n	8004398 <_kill_r+0x1c>
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	b103      	cbz	r3, 8004398 <_kill_r+0x1c>
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	20000d10 	.word	0x20000d10

080043a0 <_getpid_r>:
 80043a0:	f000 b96c 	b.w	800467c <_getpid>

080043a4 <_strtol_l.constprop.0>:
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043aa:	d001      	beq.n	80043b0 <_strtol_l.constprop.0+0xc>
 80043ac:	2b24      	cmp	r3, #36	; 0x24
 80043ae:	d906      	bls.n	80043be <_strtol_l.constprop.0+0x1a>
 80043b0:	f7fe f8c2 	bl	8002538 <__errno>
 80043b4:	2316      	movs	r3, #22
 80043b6:	6003      	str	r3, [r0, #0]
 80043b8:	2000      	movs	r0, #0
 80043ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80044a4 <_strtol_l.constprop.0+0x100>
 80043c2:	460d      	mov	r5, r1
 80043c4:	462e      	mov	r6, r5
 80043c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80043ce:	f017 0708 	ands.w	r7, r7, #8
 80043d2:	d1f7      	bne.n	80043c4 <_strtol_l.constprop.0+0x20>
 80043d4:	2c2d      	cmp	r4, #45	; 0x2d
 80043d6:	d132      	bne.n	800443e <_strtol_l.constprop.0+0x9a>
 80043d8:	782c      	ldrb	r4, [r5, #0]
 80043da:	2701      	movs	r7, #1
 80043dc:	1cb5      	adds	r5, r6, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d05b      	beq.n	800449a <_strtol_l.constprop.0+0xf6>
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d109      	bne.n	80043fa <_strtol_l.constprop.0+0x56>
 80043e6:	2c30      	cmp	r4, #48	; 0x30
 80043e8:	d107      	bne.n	80043fa <_strtol_l.constprop.0+0x56>
 80043ea:	782c      	ldrb	r4, [r5, #0]
 80043ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80043f0:	2c58      	cmp	r4, #88	; 0x58
 80043f2:	d14d      	bne.n	8004490 <_strtol_l.constprop.0+0xec>
 80043f4:	786c      	ldrb	r4, [r5, #1]
 80043f6:	2310      	movs	r3, #16
 80043f8:	3502      	adds	r5, #2
 80043fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80043fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004402:	f04f 0e00 	mov.w	lr, #0
 8004406:	fbb8 f9f3 	udiv	r9, r8, r3
 800440a:	4676      	mov	r6, lr
 800440c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004410:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004414:	f1bc 0f09 	cmp.w	ip, #9
 8004418:	d816      	bhi.n	8004448 <_strtol_l.constprop.0+0xa4>
 800441a:	4664      	mov	r4, ip
 800441c:	42a3      	cmp	r3, r4
 800441e:	dd24      	ble.n	800446a <_strtol_l.constprop.0+0xc6>
 8004420:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004424:	d008      	beq.n	8004438 <_strtol_l.constprop.0+0x94>
 8004426:	45b1      	cmp	r9, r6
 8004428:	d31c      	bcc.n	8004464 <_strtol_l.constprop.0+0xc0>
 800442a:	d101      	bne.n	8004430 <_strtol_l.constprop.0+0x8c>
 800442c:	45a2      	cmp	sl, r4
 800442e:	db19      	blt.n	8004464 <_strtol_l.constprop.0+0xc0>
 8004430:	fb06 4603 	mla	r6, r6, r3, r4
 8004434:	f04f 0e01 	mov.w	lr, #1
 8004438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800443c:	e7e8      	b.n	8004410 <_strtol_l.constprop.0+0x6c>
 800443e:	2c2b      	cmp	r4, #43	; 0x2b
 8004440:	bf04      	itt	eq
 8004442:	782c      	ldrbeq	r4, [r5, #0]
 8004444:	1cb5      	addeq	r5, r6, #2
 8004446:	e7ca      	b.n	80043de <_strtol_l.constprop.0+0x3a>
 8004448:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800444c:	f1bc 0f19 	cmp.w	ip, #25
 8004450:	d801      	bhi.n	8004456 <_strtol_l.constprop.0+0xb2>
 8004452:	3c37      	subs	r4, #55	; 0x37
 8004454:	e7e2      	b.n	800441c <_strtol_l.constprop.0+0x78>
 8004456:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800445a:	f1bc 0f19 	cmp.w	ip, #25
 800445e:	d804      	bhi.n	800446a <_strtol_l.constprop.0+0xc6>
 8004460:	3c57      	subs	r4, #87	; 0x57
 8004462:	e7db      	b.n	800441c <_strtol_l.constprop.0+0x78>
 8004464:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004468:	e7e6      	b.n	8004438 <_strtol_l.constprop.0+0x94>
 800446a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800446e:	d105      	bne.n	800447c <_strtol_l.constprop.0+0xd8>
 8004470:	2322      	movs	r3, #34	; 0x22
 8004472:	6003      	str	r3, [r0, #0]
 8004474:	4646      	mov	r6, r8
 8004476:	b942      	cbnz	r2, 800448a <_strtol_l.constprop.0+0xe6>
 8004478:	4630      	mov	r0, r6
 800447a:	e79e      	b.n	80043ba <_strtol_l.constprop.0+0x16>
 800447c:	b107      	cbz	r7, 8004480 <_strtol_l.constprop.0+0xdc>
 800447e:	4276      	negs	r6, r6
 8004480:	2a00      	cmp	r2, #0
 8004482:	d0f9      	beq.n	8004478 <_strtol_l.constprop.0+0xd4>
 8004484:	f1be 0f00 	cmp.w	lr, #0
 8004488:	d000      	beq.n	800448c <_strtol_l.constprop.0+0xe8>
 800448a:	1e69      	subs	r1, r5, #1
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	e7f3      	b.n	8004478 <_strtol_l.constprop.0+0xd4>
 8004490:	2430      	movs	r4, #48	; 0x30
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1b1      	bne.n	80043fa <_strtol_l.constprop.0+0x56>
 8004496:	2308      	movs	r3, #8
 8004498:	e7af      	b.n	80043fa <_strtol_l.constprop.0+0x56>
 800449a:	2c30      	cmp	r4, #48	; 0x30
 800449c:	d0a5      	beq.n	80043ea <_strtol_l.constprop.0+0x46>
 800449e:	230a      	movs	r3, #10
 80044a0:	e7ab      	b.n	80043fa <_strtol_l.constprop.0+0x56>
 80044a2:	bf00      	nop
 80044a4:	080053e2 	.word	0x080053e2

080044a8 <_strtol_r>:
 80044a8:	f7ff bf7c 	b.w	80043a4 <_strtol_l.constprop.0>

080044ac <_strtoul_l.constprop.0>:
 80044ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044b0:	4f36      	ldr	r7, [pc, #216]	; (800458c <_strtoul_l.constprop.0+0xe0>)
 80044b2:	4686      	mov	lr, r0
 80044b4:	460d      	mov	r5, r1
 80044b6:	4628      	mov	r0, r5
 80044b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044bc:	5d3e      	ldrb	r6, [r7, r4]
 80044be:	f016 0608 	ands.w	r6, r6, #8
 80044c2:	d1f8      	bne.n	80044b6 <_strtoul_l.constprop.0+0xa>
 80044c4:	2c2d      	cmp	r4, #45	; 0x2d
 80044c6:	d130      	bne.n	800452a <_strtoul_l.constprop.0+0x7e>
 80044c8:	782c      	ldrb	r4, [r5, #0]
 80044ca:	2601      	movs	r6, #1
 80044cc:	1c85      	adds	r5, r0, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d057      	beq.n	8004582 <_strtoul_l.constprop.0+0xd6>
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d109      	bne.n	80044ea <_strtoul_l.constprop.0+0x3e>
 80044d6:	2c30      	cmp	r4, #48	; 0x30
 80044d8:	d107      	bne.n	80044ea <_strtoul_l.constprop.0+0x3e>
 80044da:	7828      	ldrb	r0, [r5, #0]
 80044dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80044e0:	2858      	cmp	r0, #88	; 0x58
 80044e2:	d149      	bne.n	8004578 <_strtoul_l.constprop.0+0xcc>
 80044e4:	786c      	ldrb	r4, [r5, #1]
 80044e6:	2310      	movs	r3, #16
 80044e8:	3502      	adds	r5, #2
 80044ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80044ee:	2700      	movs	r7, #0
 80044f0:	fbb8 f8f3 	udiv	r8, r8, r3
 80044f4:	fb03 f908 	mul.w	r9, r3, r8
 80044f8:	ea6f 0909 	mvn.w	r9, r9
 80044fc:	4638      	mov	r0, r7
 80044fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004502:	f1bc 0f09 	cmp.w	ip, #9
 8004506:	d815      	bhi.n	8004534 <_strtoul_l.constprop.0+0x88>
 8004508:	4664      	mov	r4, ip
 800450a:	42a3      	cmp	r3, r4
 800450c:	dd23      	ble.n	8004556 <_strtoul_l.constprop.0+0xaa>
 800450e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004512:	d007      	beq.n	8004524 <_strtoul_l.constprop.0+0x78>
 8004514:	4580      	cmp	r8, r0
 8004516:	d31b      	bcc.n	8004550 <_strtoul_l.constprop.0+0xa4>
 8004518:	d101      	bne.n	800451e <_strtoul_l.constprop.0+0x72>
 800451a:	45a1      	cmp	r9, r4
 800451c:	db18      	blt.n	8004550 <_strtoul_l.constprop.0+0xa4>
 800451e:	fb00 4003 	mla	r0, r0, r3, r4
 8004522:	2701      	movs	r7, #1
 8004524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004528:	e7e9      	b.n	80044fe <_strtoul_l.constprop.0+0x52>
 800452a:	2c2b      	cmp	r4, #43	; 0x2b
 800452c:	bf04      	itt	eq
 800452e:	782c      	ldrbeq	r4, [r5, #0]
 8004530:	1c85      	addeq	r5, r0, #2
 8004532:	e7cc      	b.n	80044ce <_strtoul_l.constprop.0+0x22>
 8004534:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004538:	f1bc 0f19 	cmp.w	ip, #25
 800453c:	d801      	bhi.n	8004542 <_strtoul_l.constprop.0+0x96>
 800453e:	3c37      	subs	r4, #55	; 0x37
 8004540:	e7e3      	b.n	800450a <_strtoul_l.constprop.0+0x5e>
 8004542:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004546:	f1bc 0f19 	cmp.w	ip, #25
 800454a:	d804      	bhi.n	8004556 <_strtoul_l.constprop.0+0xaa>
 800454c:	3c57      	subs	r4, #87	; 0x57
 800454e:	e7dc      	b.n	800450a <_strtoul_l.constprop.0+0x5e>
 8004550:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004554:	e7e6      	b.n	8004524 <_strtoul_l.constprop.0+0x78>
 8004556:	1c7b      	adds	r3, r7, #1
 8004558:	d106      	bne.n	8004568 <_strtoul_l.constprop.0+0xbc>
 800455a:	2322      	movs	r3, #34	; 0x22
 800455c:	f8ce 3000 	str.w	r3, [lr]
 8004560:	4638      	mov	r0, r7
 8004562:	b932      	cbnz	r2, 8004572 <_strtoul_l.constprop.0+0xc6>
 8004564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004568:	b106      	cbz	r6, 800456c <_strtoul_l.constprop.0+0xc0>
 800456a:	4240      	negs	r0, r0
 800456c:	2a00      	cmp	r2, #0
 800456e:	d0f9      	beq.n	8004564 <_strtoul_l.constprop.0+0xb8>
 8004570:	b107      	cbz	r7, 8004574 <_strtoul_l.constprop.0+0xc8>
 8004572:	1e69      	subs	r1, r5, #1
 8004574:	6011      	str	r1, [r2, #0]
 8004576:	e7f5      	b.n	8004564 <_strtoul_l.constprop.0+0xb8>
 8004578:	2430      	movs	r4, #48	; 0x30
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1b5      	bne.n	80044ea <_strtoul_l.constprop.0+0x3e>
 800457e:	2308      	movs	r3, #8
 8004580:	e7b3      	b.n	80044ea <_strtoul_l.constprop.0+0x3e>
 8004582:	2c30      	cmp	r4, #48	; 0x30
 8004584:	d0a9      	beq.n	80044da <_strtoul_l.constprop.0+0x2e>
 8004586:	230a      	movs	r3, #10
 8004588:	e7af      	b.n	80044ea <_strtoul_l.constprop.0+0x3e>
 800458a:	bf00      	nop
 800458c:	080053e2 	.word	0x080053e2

08004590 <_strtoul_r>:
 8004590:	f7ff bf8c 	b.w	80044ac <_strtoul_l.constprop.0>

08004594 <__submore>:
 8004594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004598:	460c      	mov	r4, r1
 800459a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800459c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045a0:	4299      	cmp	r1, r3
 80045a2:	d11d      	bne.n	80045e0 <__submore+0x4c>
 80045a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045a8:	f7fe f838 	bl	800261c <_malloc_r>
 80045ac:	b918      	cbnz	r0, 80045b6 <__submore+0x22>
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80045bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80045c0:	6360      	str	r0, [r4, #52]	; 0x34
 80045c2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80045c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80045ca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80045ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80045d2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80045d6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80045da:	6020      	str	r0, [r4, #0]
 80045dc:	2000      	movs	r0, #0
 80045de:	e7e8      	b.n	80045b2 <__submore+0x1e>
 80045e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80045e2:	0077      	lsls	r7, r6, #1
 80045e4:	463a      	mov	r2, r7
 80045e6:	f7ff f815 	bl	8003614 <_realloc_r>
 80045ea:	4605      	mov	r5, r0
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d0de      	beq.n	80045ae <__submore+0x1a>
 80045f0:	eb00 0806 	add.w	r8, r0, r6
 80045f4:	4601      	mov	r1, r0
 80045f6:	4632      	mov	r2, r6
 80045f8:	4640      	mov	r0, r8
 80045fa:	f7fd ffd9 	bl	80025b0 <memcpy>
 80045fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004602:	f8c4 8000 	str.w	r8, [r4]
 8004606:	e7e9      	b.n	80045dc <__submore+0x48>

08004608 <_fstat_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d07      	ldr	r5, [pc, #28]	; (8004628 <_fstat_r+0x20>)
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	f000 f829 	bl	800466c <_fstat>
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	d102      	bne.n	8004624 <_fstat_r+0x1c>
 800461e:	682b      	ldr	r3, [r5, #0]
 8004620:	b103      	cbz	r3, 8004624 <_fstat_r+0x1c>
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	bd38      	pop	{r3, r4, r5, pc}
 8004626:	bf00      	nop
 8004628:	20000d10 	.word	0x20000d10

0800462c <_isatty_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4d06      	ldr	r5, [pc, #24]	; (8004648 <_isatty_r+0x1c>)
 8004630:	2300      	movs	r3, #0
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	602b      	str	r3, [r5, #0]
 8004638:	f000 f828 	bl	800468c <_isatty>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_isatty_r+0x1a>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b103      	cbz	r3, 8004646 <_isatty_r+0x1a>
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20000d10 	.word	0x20000d10

0800464c <_malloc_usable_size_r>:
 800464c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004650:	1f18      	subs	r0, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	bfbc      	itt	lt
 8004656:	580b      	ldrlt	r3, [r1, r0]
 8004658:	18c0      	addlt	r0, r0, r3
 800465a:	4770      	bx	lr

0800465c <_close>:
 800465c:	4b02      	ldr	r3, [pc, #8]	; (8004668 <_close+0xc>)
 800465e:	2258      	movs	r2, #88	; 0x58
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004666:	4770      	bx	lr
 8004668:	20000d10 	.word	0x20000d10

0800466c <_fstat>:
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <_fstat+0xc>)
 800466e:	2258      	movs	r2, #88	; 0x58
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004676:	4770      	bx	lr
 8004678:	20000d10 	.word	0x20000d10

0800467c <_getpid>:
 800467c:	4b02      	ldr	r3, [pc, #8]	; (8004688 <_getpid+0xc>)
 800467e:	2258      	movs	r2, #88	; 0x58
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004686:	4770      	bx	lr
 8004688:	20000d10 	.word	0x20000d10

0800468c <_isatty>:
 800468c:	4b02      	ldr	r3, [pc, #8]	; (8004698 <_isatty+0xc>)
 800468e:	2258      	movs	r2, #88	; 0x58
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	2000      	movs	r0, #0
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000d10 	.word	0x20000d10

0800469c <_kill>:
 800469c:	4b02      	ldr	r3, [pc, #8]	; (80046a8 <_kill+0xc>)
 800469e:	2258      	movs	r2, #88	; 0x58
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046a6:	4770      	bx	lr
 80046a8:	20000d10 	.word	0x20000d10

080046ac <_lseek>:
 80046ac:	4b02      	ldr	r3, [pc, #8]	; (80046b8 <_lseek+0xc>)
 80046ae:	2258      	movs	r2, #88	; 0x58
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b6:	4770      	bx	lr
 80046b8:	20000d10 	.word	0x20000d10

080046bc <_read>:
 80046bc:	4b02      	ldr	r3, [pc, #8]	; (80046c8 <_read+0xc>)
 80046be:	2258      	movs	r2, #88	; 0x58
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c6:	4770      	bx	lr
 80046c8:	20000d10 	.word	0x20000d10

080046cc <_sbrk>:
 80046cc:	4a04      	ldr	r2, [pc, #16]	; (80046e0 <_sbrk+0x14>)
 80046ce:	4905      	ldr	r1, [pc, #20]	; (80046e4 <_sbrk+0x18>)
 80046d0:	6813      	ldr	r3, [r2, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf08      	it	eq
 80046d6:	460b      	moveq	r3, r1
 80046d8:	4418      	add	r0, r3
 80046da:	6010      	str	r0, [r2, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	4770      	bx	lr
 80046e0:	20000d14 	.word	0x20000d14
 80046e4:	20000d18 	.word	0x20000d18

080046e8 <_write>:
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <_write+0xc>)
 80046ea:	2258      	movs	r2, #88	; 0x58
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046f2:	4770      	bx	lr
 80046f4:	20000d10 	.word	0x20000d10

080046f8 <_exit>:
 80046f8:	e7fe      	b.n	80046f8 <_exit>
 80046fa:	bf00      	nop

080046fc <_init>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr

08004708 <_fini>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr

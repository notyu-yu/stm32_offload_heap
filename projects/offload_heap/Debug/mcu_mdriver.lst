
Debug/mcu_mdriver.elf:     file format elf32-littlearm
Debug/mcu_mdriver.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08002469

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00005494 memsz 0x00005494 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08005494 align 2**16
         filesz 0x000000c4 memsz 0x00000d18 flags rw-
    LOAD off    0x00000d18 vaddr 0x20000d18 paddr 0x08005558 align 2**16
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004534  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800548c  0800548c  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800548c  0800548c  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800548c  0800548c  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08005494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  200000c4  08005558  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d18  08005558  00020d18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bde8  00000000  00000000  000200f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006759  00000000  00000000  0003beda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000008b8  00000000  00000000  00042633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  00042ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000258  00000000  00000000  00043a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a015  00000000  00000000  00043c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000301c  00000000  00000000  0004dc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  00050ca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001728  00000000  00000000  00050ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004362  00000000  00000000  00052410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000069b  00000000  00000000  00056772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ac  00000000  00000000  00056e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .stab         000000cc  00000000  00000000  00056ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000001b9  00000000  00000000  00056f88  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
080046d4 l    d  .rodata	00000000 .rodata
0800548c l    d  .ARM.extab	00000000 .ARM.extab
0800548c l    d  .ARM	00000000 .ARM
0800548c l    d  .preinit_array	00000000 .preinit_array
0800548c l    d  .init_array	00000000 .init_array
08005490 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200000c4 l    d  .bss	00000000 .bss
20000d18 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32f411xe.o
0800247c l       .text	00000000 LoopCopyDataInit
08002476 l       .text	00000000 CopyDataInit
0800248e l       .text	00000000 LoopFillZerobss
0800248a l       .text	00000000 FillZerobss
080024b8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 crtstuff.c
080046bc l     O .text	00000000 __EH_FRAME_BEGIN__
08000a3c l     F .text	00000000 __do_global_dtors_aux
200000c4 l     O .bss	00000000 completed.1
08005490 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000a60 l     F .text	00000000 frame_dummy
200000c8 l     O .bss	00000000 object.0
0800548c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_mdriver.c
200000e4 l     O .bss	00000004 errors
20000000 l     O .data	0000005c tracestr
08000a7c l     F .text	00000032 stack_test
08000aae l     F .text	00000016 heap_test
08000ee8 l     F .text	00000424 read_trace
08001340 l     F .text	00000210 eval_mm_valid
08001550 l     F .text	000001d4 eval_mm_util
0800130c l     F .text	00000032 free_trace
08001724 l     F .text	00000268 printresults
08000d0c l     F .text	00000160 add_range
080019f4 l     F .text	00000048 malloc_error
080019b8 l     F .text	0000003c unix_error
08004bec l     O .rodata	0000000a __func__.0
08000e6c l     F .text	0000004a remove_range
08000eb6 l     F .text	00000032 clear_ranges
0800198c l     F .text	0000002c app_error
00000000 l    df *ABS*	00000000 mcu_mlib.c
200000e8 l     O .bss	00000004 mem_start_brk
200000ec l     O .bss	00000004 mem_brk
00000000 l    df *ABS*	00000000 mcu_mm.c
08001b68 l     F .text	0000003e extend_heap
08004bf8 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 mcu_timer.c
08001d8c l     F .text	00000034 __NVIC_EnableIRQ
08001dc0 l     F .text	00000050 __NVIC_SetPriority
200000f0 l     O .bss	00000004 systime
00000000 l    df *ABS*	00000000 mcu.c
00000000 l    df *ABS*	00000000 mcu_request.c
08001f18 l     F .text	0000001c send
08001f34 l     F .text	0000001c receive
00000000 l    df *ABS*	00000000 uart.c
08001f90 l     F .text	00000054 uart_pin_setup
08002020 l     F .text	00000054 uart_enable
00000000 l    df *ABS*	00000000 uart_dma.c
08002088 l     F .text	00000034 __NVIC_EnableIRQ
080020bc l     F .text	00000050 __NVIC_SetPriority
20000cfc l     O .bss	00000004 receiving
20000d00 l     O .bss	00000004 transmitting
0800210c l     F .text	00000058 uart_tx_setup
08002164 l     F .text	00000068 uart_rx_setup
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
0800259c l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf.c
080026c4 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003210 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strtol.c
08004364 l     F .text	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 strtoul.c
0800446c l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20000d14 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000064 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08005494 l       .fini_array	00000000 __fini_array_end
08005490 l       .fini_array	00000000 __fini_array_start
08005490 l       .init_array	00000000 __init_array_end
0800548c l       .preinit_array	00000000 __preinit_array_end
0800548c l       .init_array	00000000 __init_array_start
0800548c l       .preinit_array	00000000 __preinit_array_start
080024b8  w    F .text	00000002 RTC_Alarm_IRQHandler
0800460c g     F .text	00000010 _malloc_usable_size_r
080024b8  w    F .text	00000002 EXTI2_IRQHandler
08003fa8 g     F .text	000000b4 _scanf_chars
08002238 g     F .text	00000058 uart_rx_start
080045ec g     F .text	00000020 _isatty_r
0800463c g     F .text	00000010 _getpid
08003400 g     F .text	00000024 _lseek_r
080024b8  w    F .text	00000002 DebugMon_Handler
080024b8  w    F .text	00000002 SPI4_IRQHandler
0800056c g     F .text	0000005a .hidden __floatdidf
0800433c g     F .text	00000024 _kill_r
080024b8  w    F .text	00000002 TIM1_CC_IRQHandler
08002a8a g     F .text	00000024 __sseek
080032c0 g     F .text	00000070 __sinit
080024b8  w    F .text	00000002 DMA2_Stream5_IRQHandler
08001f50 g     F .text	00000012 mem_req_setup
08002eb8 g     F .text	000000a4 __swbuf_r
080024b8  w    F .text	00000002 HardFault_Handler
08003264 g     F .text	0000002c __sfmoreglue
080022a4 g     F .text	0000003c DMA1_Stream5_IRQHandler
08003530 g     F .text	0000000c __malloc_unlock
08002224 g     F .text	00000014 uart_tx_wait
00000400 g       *ABS*	00000000 _Min_Stack_Size
20000cf4 g     O .bss	00000004 output_offset
08002ea0 g     F .text	00000014 strerror
080024b8  w    F .text	00000002 SysTick_Handler
080024b8  w    F .text	00000002 PVD_IRQHandler
080024b8  w    F .text	00000002 SDIO_IRQHandler
080034f0 g     F .text	00000034 memmove
080024b8  w    F .text	00000002 TAMP_STAMP_IRQHandler
08005494 g       *ABS*	00000000 _sidata
080024b8  w    F .text	00000002 PendSV_Handler
080024b8  w    F .text	00000002 NMI_Handler
0800548c g       .ARM	00000000 __exidx_end
08001cbc g     F .text	000000d0 mm_realloc
080024b8  w    F .text	00000002 EXTI3_IRQHandler
080024f8 g     F .text	0000000c __errno
080024b8  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
080045c8 g     F .text	00000024 _fstat_r
20000d10 g     O .bss	00000004 errno
0800405c g     F .text	000001e8 _scanf_i
08002a4e g     F .text	00000004 __seofread
080046d4 g       .text	00000000 _etext
200000c4 g       .bss	00000000 _sbss
080024b8  w    F .text	00000002 I2C3_ER_IRQHandler
08001ee0 g     F .text	00000004 loop
08001e78 g     F .text	0000000c get_time
08002570 g     F .text	0000001c memcpy
08002290 g     F .text	00000014 uart_rx_wait
200000e0 g     O .bss	00000004 verbose
08001ba8 g     F .text	000000dc mm_malloc
08003258 g     F .text	0000000c _cleanup_r
080036e8 g     F .text	000001fc _svfprintf_r
080004f4 g     F .text	00000022 .hidden __floatsidf
080024b8  w    F .text	00000002 EXTI0_IRQHandler
080024b8  w    F .text	00000002 I2C2_EV_IRQHandler
080024b8  w    F .text	00000002 DMA1_Stream2_IRQHandler
080024b8  w    F .text	00000002 FPU_IRQHandler
08002ad4 g     F .text	000003cc _strerror_r
2000005c g     O .data	00000004 SystemCoreClock
080042da g     F .text	00000050 _raise_r
0800462c g     F .text	00000010 _fstat
080024bc g     F .text	0000003c __assert_func
080024b8  w    F .text	00000002 UsageFault_Handler
080024b8  w    F .text	00000002 DMA2_Stream2_IRQHandler
0800395e g     F .text	0000003a __ssrefill_r
08004360 g     F .text	00000004 _getpid_r
200000c4 g       .bss	00000000 __bss_start__
080004d4 g     F .text	0000001e .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
080024b8  w    F .text	00000002 SPI1_IRQHandler
08000250 g     F .text	00000000 .hidden __aeabi_drsub
08002974 g     F .text	00000020 _sbrk_r
08001f78 g     F .text	00000016 req_receive
08004244 g     F .text	00000024 _read_r
20000cf8 g     O .bss	00000004 cur_id
200008f4 g     O .bss	00000400 msg
080024b8  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08000518 g     F .text	00000042 .hidden __extendsfdf2
08003998 g     F .text	000002f0 __ssvfscanf_r
0800081c g     F .text	000001d0 .hidden __aeabi_ddiv
0800025c g     F .text	00000276 .hidden __adddf3
0800548c g       .ARM	00000000 __exidx_start
080024b8  w    F .text	00000002 DMA2_Stream3_IRQHandler
080005c8 g     F .text	00000254 .hidden __aeabi_dmul
0800464c g     F .text	00000010 _isatty
20000d0e g     O .bss	00000001 __lock___sinit_recursive_mutex
08004c40 g     O .rodata	00000004 _global_impure_ptr
080035d4 g     F .text	0000005e _realloc_r
08002528 g     F .text	00000048 __libc_init_array
0800305c g     F .text	0000000e abort
080004d4 g     F .text	0000001e .hidden __floatunsidf
0800468c g     F .text	0000001c _sbrk
080024b8  w    F .text	00000002 USART6_IRQHandler
080046bc g     F .text	00000000 _init
080021cc g     F .text	00000058 uart_tx_start
08001ee4 g     F .text	00000034 var_print
20000d18 g       .bss	00000000 _ebss
08002468  w    F .text	00000038 Reset_Handler
080009ec g     F .text	0000004e .hidden __fixdfsi
08001a98 g     F .text	0000008c mem_sbrk
08001a3c g     F .text	0000005c mem_init
08001f62 g     F .text	00000016 req_send
20000d0c g     O .bss	00000001 __lock___malloc_recursive_mutex
080024b8  w    F .text	00000002 DMA2_Stream0_IRQHandler
08001e84 g     F .text	0000005c timer_init
08002504 g     F .text	00000024 fprintf
080024b8  w    F .text	00000002 TIM4_IRQHandler
0800025c g     F .text	00000276 .hidden __aeabi_dadd
08002ab6 g     F .text	0000001e strcat
0800055c g     F .text	0000006a .hidden __aeabi_ul2d
080052ec g     O .rodata	00000020 __sf_fake_stderr
20000d18 g       ._user_heap_stack	00000000 end
080024b8  w    F .text	00000002 I2C1_EV_IRQHandler
080033fe g     F .text	00000002 __retarget_lock_release_recursive
080022e0 g     F .text	0000002c DMA1_Stream6_IRQHandler
08003632 g     F .text	000000b4 __ssputs_r
080024b8  w    F .text	00000002 DMA1_Stream1_IRQHandler
080026f2 g     F .text	00000024 __sfputs_r
08002074 g     F .text	00000012 uart_init
08003290 g     F .text	0000000c __sfp_lock_acquire
080001b0 g     F .text	00000000 memchr
20000d18 g       .bss	00000000 __bss_end__
08001b30 g     F .text	00000010 mem_heap_hi
0800353c g     F .text	00000098 _free_r
080024b8  w    F .text	00000002 TIM3_IRQHandler
080024b8  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
080038e4 g     F .text	0000007a _sungetc_r
08000258 g     F .text	0000027a .hidden __aeabi_dsub
080024b8 g       .text	00000002 Default_Handler
08002eb4 g     F .text	00000004 _user_strerror
0800055c g     F .text	0000006a .hidden __floatundidf
0800466c g     F .text	00000010 _lseek
080024b8  w    F .text	00000002 EXTI15_10_IRQHandler
080024b8  w    F .text	00000002 ADC_IRQHandler
080024b8  w    F .text	00000002 DMA1_Stream7_IRQHandler
080024b8  w    F .text	00000002 SPI5_IRQHandler
08004550 g     F .text	00000004 _strtoul_r
0800306c g     F .text	00000020 _close_r
080004f4 g     F .text	00000022 .hidden __aeabi_i2d
080024b8  w    F .text	00000002 TIM5_IRQHandler
080024b8  w    F .text	00000002 DMA2_Stream7_IRQHandler
080024b8  w    F .text	00000002 I2C3_EV_IRQHandler
080029d4 g     F .text	00000058 sscanf
08002f80 g     F .text	000000dc __swsetup_r
080024b8  w    F .text	00000002 EXTI9_5_IRQHandler
0800081c g     F .text	000001d0 .hidden __divdf3
08003330 g     F .text	0000008c __sfp
080024b8  w    F .text	00000002 RTC_WKUP_IRQHandler
080032b4 g     F .text	0000000c __sinit_lock_release
080005c8 g     F .text	00000254 .hidden __muldf3
08002a2c g     F .text	00000022 __sread
0800230c g     F .text	0000003c uart_dma_init
08001b58 g     F .text	00000010 mm_init
08003524 g     F .text	0000000c __malloc_lock
08003198 g     F .text	00000078 _fflush_r
08001b40 g     F .text	00000018 mem_heapsize
08001c84 g     F .text	00000038 mm_free
080024b8  w    F .text	00000002 SPI2_IRQHandler
0800530c g     O .rodata	00000020 __sf_fake_stdin
080033fc g     F .text	00000002 __retarget_lock_acquire_recursive
0800258c g     F .text	00000010 memset
080024b8  w    F .text	00000002 MemManage_Handler
08000ac4 g     F .text	00000248 main
080024b8  w    F .text	00000002 DMA1_Stream0_IRQHandler
080033fa g     F .text	00000002 __retarget_lock_init_recursive
080024b8  w    F .text	00000002 SVC_Handler
08002aae g     F .text	00000008 __sclose
08004468 g     F .text	00000004 _strtol_r
200000f4 g     O .bss	00000800 output_str
080025dc g     F .text	000000e8 _malloc_r
0800056c g     F .text	0000005a .hidden __aeabi_l2d
08004554 g     F .text	00000074 __submore
080024b8  w    F .text	00000002 EXTI4_IRQHandler
080029d4 g     F .text	00000058 siscanf
08002348 g     F .text	0000005c SystemInit
080046c8 g     F .text	00000000 _fini
08002994 g     F .text	00000040 sprintf
08002f5c g     F .text	00000024 _write_r
08003c88 g     F .text	000000da _printf_common
20000060 g     O .data	00000004 _impure_ptr
0800308c g     F .text	0000010c __sflush_r
080036e8 g     F .text	000001fc _svfiprintf_r
080024b8  w    F .text	00000002 WWDG_IRQHandler
08001e10 g     F .text	00000068 TIM2_IRQHandler
08001fe4 g     F .text	0000003c led_init
080023a4 g     F .text	000000c4 set_sysclk_to_100
080024b8  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
080024b8  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
08003998 g     F .text	000002f0 __ssvfiscanf_r
08003424 g     F .text	0000004c __swhatbuf_r
20020000 g       .isr_vector	00000000 _estack
080024b8  w    F .text	00000002 EXTI1_IRQHandler
080046a8 g     F .text	00000010 _write
200000c4 g       .data	00000000 _edata
08001b24 g     F .text	0000000c mem_heap_lo
080024b8  w    F .text	00000002 USART2_IRQHandler
08002a52 g     F .text	00000038 __swrite
08002504 g     F .text	00000024 fiprintf
08002718 g     F .text	0000025c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080033bc g     F .text	0000003e _fwalk_reent
080009ec g     F .text	0000004e .hidden __aeabi_d2iz
0800465c g     F .text	00000010 _kill
080024b8  w    F .text	00000002 I2C2_ER_IRQHandler
0800329c g     F .text	0000000c __sfp_lock_release
0800532c g     O .rodata	00000020 __sf_fake_stdout
08002994 g     F .text	00000040 siprintf
08004268 g     F .text	00000072 __sccl
080024b8  w    F .text	00000002 DMA2_Stream1_IRQHandler
08005389 g     O .rodata	00000101 _ctype_
0800467c g     F .text	00000010 _read
080024b8  w    F .text	00000002 FLASH_IRQHandler
080046b8 g     F .text	00000002 _exit
080024b8  w    F .text	00000002 DMA2_Stream4_IRQHandler
080024b8  w    F .text	00000002 BusFault_Handler
080024b8  w    F .text	00000002 USART1_IRQHandler
08003470 g     F .text	00000080 __smakebuf_r
080001a0 g     F .text	00000010 strlen
080024b8  w    F .text	00000002 OTG_FS_IRQHandler
08003d64 g     F .text	00000244 _printf_i
080024b8  w    F .text	00000002 SPI3_IRQHandler
080024b8  w    F .text	00000002 DMA1_Stream4_IRQHandler
20000d08 g     O .bss	00000004 __malloc_sbrk_start
080024b8  w    F .text	00000002 I2C1_ER_IRQHandler
08000518 g     F .text	00000042 .hidden __aeabi_f2d
20000d04 g     O .bss	00000004 __malloc_free_list
08000258 g     F .text	0000027a .hidden __subdf3
08002718 g     F .text	0000025c _vfprintf_r
080024b8  w    F .text	00000002 DMA2_Stream6_IRQHandler
080024b8  w    F .text	00000002 DMA1_Stream3_IRQHandler
20000d0d g     O .bss	00000001 __lock___sfp_recursive_mutex
0800461c g     F .text	00000010 _close
0800432c g     F .text	00000010 raise
080032a8 g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2iz>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f4:	d215      	bcs.n	8000a22 <__aeabi_d2iz+0x36>
 80009f6:	d511      	bpl.n	8000a1c <__aeabi_d2iz+0x30>
 80009f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d912      	bls.n	8000a28 <__aeabi_d2iz+0x3c>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a12:	fa23 f002 	lsr.w	r0, r3, r2
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d105      	bne.n	8000a34 <__aeabi_d2iz+0x48>
 8000a28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	bf08      	it	eq
 8000a2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__do_global_dtors_aux>:
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	4c05      	ldr	r4, [pc, #20]	; (8000a54 <__do_global_dtors_aux+0x18>)
 8000a40:	7823      	ldrb	r3, [r4, #0]
 8000a42:	b933      	cbnz	r3, 8000a52 <__do_global_dtors_aux+0x16>
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__do_global_dtors_aux+0x1c>)
 8000a46:	b113      	cbz	r3, 8000a4e <__do_global_dtors_aux+0x12>
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <__do_global_dtors_aux+0x20>)
 8000a4a:	f3af 8000 	nop.w
 8000a4e:	2301      	movs	r3, #1
 8000a50:	7023      	strb	r3, [r4, #0]
 8000a52:	bd10      	pop	{r4, pc}
 8000a54:	200000c4 	.word	0x200000c4
 8000a58:	00000000 	.word	0x00000000
 8000a5c:	080046bc 	.word	0x080046bc

08000a60 <frame_dummy>:
 8000a60:	b508      	push	{r3, lr}
 8000a62:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <frame_dummy+0x10>)
 8000a64:	b11b      	cbz	r3, 8000a6e <frame_dummy+0xe>
 8000a66:	4903      	ldr	r1, [pc, #12]	; (8000a74 <frame_dummy+0x14>)
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <frame_dummy+0x18>)
 8000a6a:	f3af 8000 	nop.w
 8000a6e:	bd08      	pop	{r3, pc}
 8000a70:	00000000 	.word	0x00000000
 8000a74:	200000c8 	.word	0x200000c8
 8000a78:	080046bc 	.word	0x080046bc

08000a7c <stack_test>:

// Test file string
static char tracestr[] = TESTSTRING;

// Test for stack overflow
static void stack_test(void) {
 8000a7c:	b500      	push	{lr}
 8000a7e:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8000a82:	b081      	sub	sp, #4
	char buffer_array[10*KB] = {0};
 8000a84:	f50d 6300 	add.w	r3, sp, #2048	; 0x800
 8000a88:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	3304      	adds	r3, #4
 8000a92:	f242 72fc 	movw	r2, #10236	; 0x27fc
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fd77 	bl	800258c <memset>
	stack_test();
 8000a9e:	f7ff ffed 	bl	8000a7c <stack_test>
}
 8000aa2:	bf00      	nop
 8000aa4:	f50d 5d20 	add.w	sp, sp, #10240	; 0x2800
 8000aa8:	b001      	add	sp, #4
 8000aaa:	f85d fb04 	ldr.w	pc, [sp], #4

08000aae <heap_test>:

// Test for stack overflow
static void heap_test(void) {
 8000aae:	b508      	push	{r3, lr}
	while(1) {
		if(!mm_malloc(10*KB)){
 8000ab0:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8000ab4:	f001 f878 	bl	8001ba8 <mm_malloc>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f8      	bne.n	8000ab0 <heap_test+0x2>
			loop();
 8000abe:	f001 fa0f 	bl	8001ee0 <loop>
		if(!mm_malloc(10*KB)){
 8000ac2:	e7f5      	b.n	8000ab0 <heap_test+0x2>

08000ac4 <main>:

/**************
 * Main routine
 **************/
int main(void)
{
 8000ac4:	b500      	push	{lr}
 8000ac6:	b0a3      	sub	sp, #140	; 0x8c
    int i=0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9320      	str	r3, [sp, #128]	; 0x80
    int num_tracefiles = 0;    /* the number of traces in that array */
 8000acc:	2300      	movs	r3, #0
 8000ace:	931f      	str	r3, [sp, #124]	; 0x7c
    trace_t *trace = NULL;     /* stores a single trace file in memory */
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	931e      	str	r3, [sp, #120]	; 0x78
    range_t *ranges = NULL;    /* keeps track of block extents for one trace */
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9308      	str	r3, [sp, #32]
    //speed_t speed_params;      /* input parameters to the xx_speed routines */ 
	
	// Test start and end time
	size_t start_time, end_time;

    int autograder = 0;  /* If set, emit summary info for autograder (-g) */
 8000ad8:	2300      	movs	r3, #0
 8000ada:	931d      	str	r3, [sp, #116]	; 0x74
	int p1_int;
	int p2_int;
	int perfindex_int;

    /* Initialize the simulated memory system in memlib.c */
	mm_init();
 8000adc:	f001 f83c 	bl	8001b58 <mm_init>
	timer_init();
 8000ae0:	f001 f9d0 	bl	8001e84 <timer_init>
	start_time = get_time();
 8000ae4:	f001 f9c8 	bl	8001e78 <get_time>
 8000ae8:	901c      	str	r0, [sp, #112]	; 0x70

    /* Evaluate student's mm malloc package using the K-best scheme */
	trace = read_trace();
 8000aea:	f000 f9fd 	bl	8000ee8 <read_trace>
 8000aee:	901e      	str	r0, [sp, #120]	; 0x78
	mm_stats.ops = trace->num_ops;
 8000af0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fcfd 	bl	80004f4 <__aeabi_i2d>
 8000afa:	4602      	mov	r2, r0
 8000afc:	460b      	mov	r3, r1
 8000afe:	e9cd 2300 	strd	r2, r3, [sp]
	if (verbose > 1) {
 8000b02:	4b74      	ldr	r3, [pc, #464]	; (8000cd4 <main+0x210>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	dd06      	ble.n	8000b18 <main+0x54>
	    sprintf(msg, "Checking mm_malloc for correctness, ");
 8000b0a:	4973      	ldr	r1, [pc, #460]	; (8000cd8 <main+0x214>)
 8000b0c:	4873      	ldr	r0, [pc, #460]	; (8000cdc <main+0x218>)
 8000b0e:	f001 ff41 	bl	8002994 <siprintf>
		var_print(msg);
 8000b12:	4872      	ldr	r0, [pc, #456]	; (8000cdc <main+0x218>)
 8000b14:	f001 f9e6 	bl	8001ee4 <var_print>
	}
	mm_stats.valid = eval_mm_valid(trace, i, &ranges);
 8000b18:	ab08      	add	r3, sp, #32
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b1e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b20:	f000 fc0e 	bl	8001340 <eval_mm_valid>
 8000b24:	4603      	mov	r3, r0
 8000b26:	9302      	str	r3, [sp, #8]
	if (mm_stats.valid) {
 8000b28:	9b02      	ldr	r3, [sp, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d035      	beq.n	8000b9a <main+0xd6>
	    if (verbose > 1) {
 8000b2e:	4b69      	ldr	r3, [pc, #420]	; (8000cd4 <main+0x210>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	dd06      	ble.n	8000b44 <main+0x80>
			sprintf(msg, "efficiency, ");
 8000b36:	496a      	ldr	r1, [pc, #424]	; (8000ce0 <main+0x21c>)
 8000b38:	4868      	ldr	r0, [pc, #416]	; (8000cdc <main+0x218>)
 8000b3a:	f001 ff2b 	bl	8002994 <siprintf>
			var_print(msg);
 8000b3e:	4867      	ldr	r0, [pc, #412]	; (8000cdc <main+0x218>)
 8000b40:	f001 f9d0 	bl	8001ee4 <var_print>
		}
	    mm_stats.util = eval_mm_util(trace, i, &ranges);
 8000b44:	ab08      	add	r3, sp, #32
 8000b46:	461a      	mov	r2, r3
 8000b48:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b4a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b4c:	f000 fd00 	bl	8001550 <eval_mm_util>
 8000b50:	4602      	mov	r2, r0
 8000b52:	460b      	mov	r3, r1
 8000b54:	e9cd 2306 	strd	r2, r3, [sp, #24]
	    if (verbose > 1) {
 8000b58:	4b5e      	ldr	r3, [pc, #376]	; (8000cd4 <main+0x210>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	dd06      	ble.n	8000b6e <main+0xaa>
			sprintf(msg, "and performance.\n");
 8000b60:	4960      	ldr	r1, [pc, #384]	; (8000ce4 <main+0x220>)
 8000b62:	485e      	ldr	r0, [pc, #376]	; (8000cdc <main+0x218>)
 8000b64:	f001 ff16 	bl	8002994 <siprintf>
			var_print(msg);
 8000b68:	485c      	ldr	r0, [pc, #368]	; (8000cdc <main+0x218>)
 8000b6a:	f001 f9bb 	bl	8001ee4 <var_print>
		}
	    //mm_stats.secs = fsecs(eval_mm_speed, &speed_params);
		end_time = get_time();
 8000b6e:	f001 f983 	bl	8001e78 <get_time>
 8000b72:	901b      	str	r0, [sp, #108]	; 0x6c
		mm_stats.secs = (end_time-start_time)/1000.0f;
 8000b74:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000b76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	ee07 3a90 	vmov	s15, r3
 8000b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b82:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8000ce8 <main+0x224>
 8000b86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b8a:	ee16 0a90 	vmov	r0, s13
 8000b8e:	f7ff fcc3 	bl	8000518 <__aeabi_f2d>
 8000b92:	4602      	mov	r2, r0
 8000b94:	460b      	mov	r3, r1
 8000b96:	e9cd 2304 	strd	r2, r3, [sp, #16]
	}
	free_trace(trace);
 8000b9a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b9c:	f000 fbb6 	bl	800130c <free_trace>

    /* Display the mm results in a compact table */
    if (verbose) {
 8000ba0:	4b4c      	ldr	r3, [pc, #304]	; (8000cd4 <main+0x210>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d012      	beq.n	8000bce <main+0x10a>
		sprintf(msg, "\nResults for mm malloc:\n");
 8000ba8:	4950      	ldr	r1, [pc, #320]	; (8000cec <main+0x228>)
 8000baa:	484c      	ldr	r0, [pc, #304]	; (8000cdc <main+0x218>)
 8000bac:	f001 fef2 	bl	8002994 <siprintf>
		var_print(msg);
 8000bb0:	484a      	ldr	r0, [pc, #296]	; (8000cdc <main+0x218>)
 8000bb2:	f001 f997 	bl	8001ee4 <var_print>
		printresults(num_tracefiles, &mm_stats);
 8000bb6:	466b      	mov	r3, sp
 8000bb8:	4619      	mov	r1, r3
 8000bba:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8000bbc:	f000 fdb2 	bl	8001724 <printresults>
		sprintf(msg, "\n");
 8000bc0:	494b      	ldr	r1, [pc, #300]	; (8000cf0 <main+0x22c>)
 8000bc2:	4846      	ldr	r0, [pc, #280]	; (8000cdc <main+0x218>)
 8000bc4:	f001 fee6 	bl	8002994 <siprintf>
		var_print(msg);
 8000bc8:	4844      	ldr	r0, [pc, #272]	; (8000cdc <main+0x218>)
 8000bca:	f001 f98b 	bl	8001ee4 <var_print>
    }

    /* 
     * Accumulate the aggregate statistics for the student's mm package 
     */
    secs = 0;
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	f04f 0300 	mov.w	r3, #0
 8000bd6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    ops = 0;
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    util = 0;
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	f04f 0300 	mov.w	r3, #0
 8000bee:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    numcorrect = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	9321      	str	r3, [sp, #132]	; 0x84
	secs = mm_stats.secs;
 8000bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000bfa:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	ops = mm_stats.ops;
 8000bfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000c02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	util = mm_stats.util;
 8000c06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000c0a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	if (mm_stats.valid)
 8000c0e:	9b02      	ldr	r3, [sp, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <main+0x156>
	    numcorrect++;
 8000c14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000c16:	3301      	adds	r3, #1
 8000c18:	9321      	str	r3, [sp, #132]	; 0x84
    avg_mm_util = util;
 8000c1a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8000c1e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48

    /* 
     * Compute and print the performance index 
     */
    if (errors == 0) {
 8000c22:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <main+0x230>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d130      	bne.n	8000c8c <main+0x1c8>
	avg_mm_throughput = ops/secs;
 8000c2a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8000c2e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8000c32:	f7ff fdf3 	bl	800081c <__aeabi_ddiv>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40

	p1 = avg_mm_util;
 8000c3e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000c42:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	p2 = avg_mm_throughput;
 8000c46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000c4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30

	p1_int = p1*100;
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <main+0x234>)
 8000c54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000c58:	f7ff fcb6 	bl	80005c8 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f7ff fec2 	bl	80009ec <__aeabi_d2iz>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	930b      	str	r3, [sp, #44]	; 0x2c
	p2_int = (int)p2;
 8000c6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000c70:	f7ff febc 	bl	80009ec <__aeabi_d2iz>
 8000c74:	4603      	mov	r3, r0
 8000c76:	930a      	str	r3, [sp, #40]	; 0x28

	sprintf(msg, "Utilization: %d%%. Throughput: %d\n",
 8000c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000c7c:	491f      	ldr	r1, [pc, #124]	; (8000cfc <main+0x238>)
 8000c7e:	4817      	ldr	r0, [pc, #92]	; (8000cdc <main+0x218>)
 8000c80:	f001 fe88 	bl	8002994 <siprintf>
	       p1_int, 
	       p2_int);
	
	var_print(msg);
 8000c84:	4815      	ldr	r0, [pc, #84]	; (8000cdc <main+0x218>)
 8000c86:	f001 f92d 	bl	8001ee4 <var_print>
 8000c8a:	e009      	b.n	8000ca0 <main+0x1dc>
    }
    else { /* There were errors */
	sprintf(msg, "Terminated with %d errors\n", errors);
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <main+0x230>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	491b      	ldr	r1, [pc, #108]	; (8000d00 <main+0x23c>)
 8000c94:	4811      	ldr	r0, [pc, #68]	; (8000cdc <main+0x218>)
 8000c96:	f001 fe7d 	bl	8002994 <siprintf>
	var_print(msg);
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <main+0x218>)
 8000c9c:	f001 f922 	bl	8001ee4 <var_print>
    }

    if (autograder) {
 8000ca0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00f      	beq.n	8000cc6 <main+0x202>
	sprintf(msg, "correct:%d\n", numcorrect);
 8000ca6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8000ca8:	4916      	ldr	r1, [pc, #88]	; (8000d04 <main+0x240>)
 8000caa:	480c      	ldr	r0, [pc, #48]	; (8000cdc <main+0x218>)
 8000cac:	f001 fe72 	bl	8002994 <siprintf>
	var_print(msg);
 8000cb0:	480a      	ldr	r0, [pc, #40]	; (8000cdc <main+0x218>)
 8000cb2:	f001 f917 	bl	8001ee4 <var_print>
	sprintf(msg, "perfidx:%d\n", perfindex_int);
 8000cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cb8:	4913      	ldr	r1, [pc, #76]	; (8000d08 <main+0x244>)
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <main+0x218>)
 8000cbc:	f001 fe6a 	bl	8002994 <siprintf>
	var_print(msg);
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <main+0x218>)
 8000cc2:	f001 f90f 	bl	8001ee4 <var_print>
    }

	loop();
 8000cc6:	f001 f90b 	bl	8001ee0 <loop>
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	b023      	add	sp, #140	; 0x8c
 8000cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cd4:	200000e0 	.word	0x200000e0
 8000cd8:	080046d4 	.word	0x080046d4
 8000cdc:	200008f4 	.word	0x200008f4
 8000ce0:	080046fc 	.word	0x080046fc
 8000ce4:	0800470c 	.word	0x0800470c
 8000ce8:	447a0000 	.word	0x447a0000
 8000cec:	08004720 	.word	0x08004720
 8000cf0:	0800473c 	.word	0x0800473c
 8000cf4:	200000e4 	.word	0x200000e4
 8000cf8:	40590000 	.word	0x40590000
 8000cfc:	08004740 	.word	0x08004740
 8000d00:	08004764 	.word	0x08004764
 8000d04:	08004780 	.word	0x08004780
 8000d08:	0800478c 	.word	0x0800478c

08000d0c <add_range>:
 *     size bytes at addr lo. After checking the block for correctness,
 *     we create a range struct for this block and add it to the range list. 
 */
static int add_range(range_t **ranges, char *lo, int size, 
		     int tracenum, int opnum)
{
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	9005      	str	r0, [sp, #20]
 8000d12:	9104      	str	r1, [sp, #16]
 8000d14:	9203      	str	r2, [sp, #12]
 8000d16:	9302      	str	r3, [sp, #8]
    char *hi = lo + size - 1;
 8000d18:	9b03      	ldr	r3, [sp, #12]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	9a04      	ldr	r2, [sp, #16]
 8000d1e:	4413      	add	r3, r2
 8000d20:	9306      	str	r3, [sp, #24]
    range_t *p;

    assert(size > 0);
 8000d22:	9b03      	ldr	r3, [sp, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dc06      	bgt.n	8000d36 <add_range+0x2a>
 8000d28:	4b48      	ldr	r3, [pc, #288]	; (8000e4c <add_range+0x140>)
 8000d2a:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <add_range+0x144>)
 8000d2c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8000d30:	4848      	ldr	r0, [pc, #288]	; (8000e54 <add_range+0x148>)
 8000d32:	f001 fbc3 	bl	80024bc <__assert_func>

    /* Payload addresses must be ALIGNMENT-byte aligned */
    if (!IS_ALIGNED(lo)) {
 8000d36:	9b04      	ldr	r3, [sp, #16]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00c      	beq.n	8000d5a <add_range+0x4e>
	sprintf(msg, "Payload address (%p) not aligned to %d bytes", 
 8000d40:	2308      	movs	r3, #8
 8000d42:	9a04      	ldr	r2, [sp, #16]
 8000d44:	4944      	ldr	r1, [pc, #272]	; (8000e58 <add_range+0x14c>)
 8000d46:	4845      	ldr	r0, [pc, #276]	; (8000e5c <add_range+0x150>)
 8000d48:	f001 fe24 	bl	8002994 <siprintf>
		lo, ALIGNMENT);
        malloc_error(tracenum, opnum, msg);
 8000d4c:	4a43      	ldr	r2, [pc, #268]	; (8000e5c <add_range+0x150>)
 8000d4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d50:	9802      	ldr	r0, [sp, #8]
 8000d52:	f000 fe4f 	bl	80019f4 <malloc_error>
        return 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e075      	b.n	8000e46 <add_range+0x13a>
    }

    /* The payload must lie within the extent of the heap */
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d5a:	f000 fee3 	bl	8001b24 <mem_heap_lo>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	9b04      	ldr	r3, [sp, #16]
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d311      	bcc.n	8000d8a <add_range+0x7e>
 8000d66:	f000 fee3 	bl	8001b30 <mem_heap_hi>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	9b04      	ldr	r3, [sp, #16]
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d80b      	bhi.n	8000d8a <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d72:	f000 fed7 	bl	8001b24 <mem_heap_lo>
 8000d76:	4602      	mov	r2, r0
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d78:	9b06      	ldr	r3, [sp, #24]
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d305      	bcc.n	8000d8a <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d7e:	f000 fed7 	bl	8001b30 <mem_heap_hi>
 8000d82:	4602      	mov	r2, r0
 8000d84:	9b06      	ldr	r3, [sp, #24]
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d914      	bls.n	8000db4 <add_range+0xa8>
	sprintf(msg, "Payload (%p:%p) lies outside heap (%p:%p)",
 8000d8a:	f000 fecb 	bl	8001b24 <mem_heap_lo>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	f000 fece 	bl	8001b30 <mem_heap_hi>
 8000d94:	4603      	mov	r3, r0
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	9400      	str	r4, [sp, #0]
 8000d9a:	9b06      	ldr	r3, [sp, #24]
 8000d9c:	9a04      	ldr	r2, [sp, #16]
 8000d9e:	4930      	ldr	r1, [pc, #192]	; (8000e60 <add_range+0x154>)
 8000da0:	482e      	ldr	r0, [pc, #184]	; (8000e5c <add_range+0x150>)
 8000da2:	f001 fdf7 	bl	8002994 <siprintf>
		lo, hi, mem_heap_lo(), mem_heap_hi());
	malloc_error(tracenum, opnum, msg);
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <add_range+0x150>)
 8000da8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000daa:	9802      	ldr	r0, [sp, #8]
 8000dac:	f000 fe22 	bl	80019f4 <malloc_error>
        return 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e048      	b.n	8000e46 <add_range+0x13a>
    }

    /* The payload must not overlap any other payloads */
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000db4:	9b05      	ldr	r3, [sp, #20]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	9307      	str	r3, [sp, #28]
 8000dba:	e029      	b.n	8000e10 <add_range+0x104>
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000dbc:	9b07      	ldr	r3, [sp, #28]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	9a04      	ldr	r2, [sp, #16]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d304      	bcc.n	8000dd0 <add_range+0xc4>
 8000dc6:	9b07      	ldr	r3, [sp, #28]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	9a04      	ldr	r2, [sp, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d909      	bls.n	8000de4 <add_range+0xd8>
            (hi >= p->lo && hi <= p->hi)) {
 8000dd0:	9b07      	ldr	r3, [sp, #28]
 8000dd2:	681b      	ldr	r3, [r3, #0]
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000dd4:	9a06      	ldr	r2, [sp, #24]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d317      	bcc.n	8000e0a <add_range+0xfe>
            (hi >= p->lo && hi <= p->hi)) {
 8000dda:	9b07      	ldr	r3, [sp, #28]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	9a06      	ldr	r2, [sp, #24]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d812      	bhi.n	8000e0a <add_range+0xfe>
	    sprintf(msg, "Payload (%p:%p) overlaps another payload (%p:%p)\n",
 8000de4:	9b07      	ldr	r3, [sp, #28]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	9a07      	ldr	r2, [sp, #28]
 8000dea:	6852      	ldr	r2, [r2, #4]
 8000dec:	9201      	str	r2, [sp, #4]
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	9b06      	ldr	r3, [sp, #24]
 8000df2:	9a04      	ldr	r2, [sp, #16]
 8000df4:	491b      	ldr	r1, [pc, #108]	; (8000e64 <add_range+0x158>)
 8000df6:	4819      	ldr	r0, [pc, #100]	; (8000e5c <add_range+0x150>)
 8000df8:	f001 fdcc 	bl	8002994 <siprintf>
		    lo, hi, p->lo, p->hi);
	    malloc_error(tracenum, opnum, msg);
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <add_range+0x150>)
 8000dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000e00:	9802      	ldr	r0, [sp, #8]
 8000e02:	f000 fdf7 	bl	80019f4 <malloc_error>
	    return 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e01d      	b.n	8000e46 <add_range+0x13a>
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000e0a:	9b07      	ldr	r3, [sp, #28]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	9307      	str	r3, [sp, #28]
 8000e10:	9b07      	ldr	r3, [sp, #28]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1d2      	bne.n	8000dbc <add_range+0xb0>

    /* 
     * Everything looks OK, so remember the extent of this block 
     * by creating a range struct and adding it the range list.
     */
    if ((p = (range_t *)mm_malloc(sizeof(range_t))) == NULL)
 8000e16:	200c      	movs	r0, #12
 8000e18:	f000 fec6 	bl	8001ba8 <mm_malloc>
 8000e1c:	9007      	str	r0, [sp, #28]
 8000e1e:	9b07      	ldr	r3, [sp, #28]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <add_range+0x11e>
	unix_error("malloc error in add_range");
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <add_range+0x15c>)
 8000e26:	f000 fdc7 	bl	80019b8 <unix_error>
    p->next = *ranges;
 8000e2a:	9b05      	ldr	r3, [sp, #20]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	9b07      	ldr	r3, [sp, #28]
 8000e30:	609a      	str	r2, [r3, #8]
    p->lo = lo;
 8000e32:	9b07      	ldr	r3, [sp, #28]
 8000e34:	9a04      	ldr	r2, [sp, #16]
 8000e36:	601a      	str	r2, [r3, #0]
    p->hi = hi;
 8000e38:	9b07      	ldr	r3, [sp, #28]
 8000e3a:	9a06      	ldr	r2, [sp, #24]
 8000e3c:	605a      	str	r2, [r3, #4]
    *ranges = p;
 8000e3e:	9b05      	ldr	r3, [sp, #20]
 8000e40:	9a07      	ldr	r2, [sp, #28]
 8000e42:	601a      	str	r2, [r3, #0]
    return 1;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	b008      	add	sp, #32
 8000e4a:	bd10      	pop	{r4, pc}
 8000e4c:	08004798 	.word	0x08004798
 8000e50:	08004bec 	.word	0x08004bec
 8000e54:	080047a4 	.word	0x080047a4
 8000e58:	080047bc 	.word	0x080047bc
 8000e5c:	200008f4 	.word	0x200008f4
 8000e60:	080047ec 	.word	0x080047ec
 8000e64:	08004818 	.word	0x08004818
 8000e68:	0800484c 	.word	0x0800484c

08000e6c <remove_range>:

/* 
 * remove_range - Free the range record of block whose payload starts at lo 
 */
static void remove_range(range_t **ranges, char *lo)
{
 8000e6c:	b500      	push	{lr}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	9001      	str	r0, [sp, #4]
 8000e72:	9100      	str	r1, [sp, #0]
    range_t *p;
    range_t **prevpp = ranges;
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	9302      	str	r3, [sp, #8]

    for (p = *ranges;  p != NULL; p = p->next) {
 8000e78:	9b01      	ldr	r3, [sp, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	e012      	b.n	8000ea6 <remove_range+0x3a>
        if (p->lo == lo) {
 8000e80:	9b03      	ldr	r3, [sp, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	9a00      	ldr	r2, [sp, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d107      	bne.n	8000e9a <remove_range+0x2e>
	    *prevpp = p->next;
 8000e8a:	9b03      	ldr	r3, [sp, #12]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	9b02      	ldr	r3, [sp, #8]
 8000e90:	601a      	str	r2, [r3, #0]
            mm_free(p);
 8000e92:	9803      	ldr	r0, [sp, #12]
 8000e94:	f000 fef6 	bl	8001c84 <mm_free>
            break;
 8000e98:	e009      	b.n	8000eae <remove_range+0x42>
        }
        prevpp = &(p->next);
 8000e9a:	9b03      	ldr	r3, [sp, #12]
 8000e9c:	3308      	adds	r3, #8
 8000e9e:	9302      	str	r3, [sp, #8]
    for (p = *ranges;  p != NULL; p = p->next) {
 8000ea0:	9b03      	ldr	r3, [sp, #12]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	9303      	str	r3, [sp, #12]
 8000ea6:	9b03      	ldr	r3, [sp, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e9      	bne.n	8000e80 <remove_range+0x14>
    }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	b005      	add	sp, #20
 8000eb2:	f85d fb04 	ldr.w	pc, [sp], #4

08000eb6 <clear_ranges>:

/*
 * clear_ranges - free all of the range records for a trace 
 */
static void clear_ranges(range_t **ranges)
{
 8000eb6:	b500      	push	{lr}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	9001      	str	r0, [sp, #4]
    range_t *p;
    range_t *pnext;

    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ebc:	9b01      	ldr	r3, [sp, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	e007      	b.n	8000ed4 <clear_ranges+0x1e>
        pnext = p->next;
 8000ec4:	9b03      	ldr	r3, [sp, #12]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	9302      	str	r3, [sp, #8]
        mm_free(p);
 8000eca:	9803      	ldr	r0, [sp, #12]
 8000ecc:	f000 feda 	bl	8001c84 <mm_free>
    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ed0:	9b02      	ldr	r3, [sp, #8]
 8000ed2:	9303      	str	r3, [sp, #12]
 8000ed4:	9b03      	ldr	r3, [sp, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f4      	bne.n	8000ec4 <clear_ranges+0xe>
    }
    *ranges = NULL;
 8000eda:	9b01      	ldr	r3, [sp, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	b005      	add	sp, #20
 8000ee4:	f85d fb04 	ldr.w	pc, [sp], #4

08000ee8 <read_trace>:

/*
 * read_trace - read a trace file and store it in memory
 */
static trace_t *read_trace()
{
 8000ee8:	b500      	push	{lr}
 8000eea:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
    trace_t *trace;
    char type[MAXLINE];
    char path[MAXLINE];
    unsigned index, size;
    unsigned max_index = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
    unsigned op_index;
	char * scanptr = tracestr;
 8000ef4:	4bc4      	ldr	r3, [pc, #784]	; (8001208 <read_trace+0x320>)
 8000ef6:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
	int bytes_scanned = 0;
 8000efa:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000efe:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

    /* Allocate the trace record */
    if ((trace = (trace_t *) mm_malloc(sizeof(trace_t))) == NULL)
 8000f06:	201c      	movs	r0, #28
 8000f08:	f000 fe4e 	bl	8001ba8 <mm_malloc>
 8000f0c:	f8cd 0818 	str.w	r0, [sp, #2072]	; 0x818
 8000f10:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <read_trace+0x36>
	unix_error("malloc 1 failed in read_trance");
 8000f18:	48bc      	ldr	r0, [pc, #752]	; (800120c <read_trace+0x324>)
 8000f1a:	f000 fd4d 	bl	80019b8 <unix_error>
    /* Read the trace file header */
    //if ((tracefile = fmemopen(tracestr, strlen(tracestr), "r")) == NULL) {
	//sprintf(msg, "Could not open %s in read_trace", path);
	//unix_error(msg);
    //}
    sscanf(scanptr, "%d%n", &(trace->sugg_heapsize), &bytes_scanned); /* not used */
 8000f1e:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
 8000f22:	ab03      	add	r3, sp, #12
 8000f24:	49ba      	ldr	r1, [pc, #744]	; (8001210 <read_trace+0x328>)
 8000f26:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f2a:	f001 fd53 	bl	80029d4 <siscanf>
	scanptr += bytes_scanned;
 8000f2e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f32:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f3e:	4413      	add	r3, r2
 8000f40:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ids), &bytes_scanned);     
 8000f44:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f48:	1d1a      	adds	r2, r3, #4
 8000f4a:	ab03      	add	r3, sp, #12
 8000f4c:	49b0      	ldr	r1, [pc, #704]	; (8001210 <read_trace+0x328>)
 8000f4e:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f52:	f001 fd3f 	bl	80029d4 <siscanf>
	scanptr += bytes_scanned;
 8000f56:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f5a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f66:	4413      	add	r3, r2
 8000f68:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ops), &bytes_scanned);     
 8000f6c:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f70:	f103 0208 	add.w	r2, r3, #8
 8000f74:	ab03      	add	r3, sp, #12
 8000f76:	49a6      	ldr	r1, [pc, #664]	; (8001210 <read_trace+0x328>)
 8000f78:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f7c:	f001 fd2a 	bl	80029d4 <siscanf>
	scanptr += bytes_scanned;
 8000f80:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f84:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f90:	4413      	add	r3, r2
 8000f92:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->weight), &bytes_scanned);        /* not used */
 8000f96:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f9a:	f103 020c 	add.w	r2, r3, #12
 8000f9e:	ab03      	add	r3, sp, #12
 8000fa0:	499b      	ldr	r1, [pc, #620]	; (8001210 <read_trace+0x328>)
 8000fa2:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000fa6:	f001 fd15 	bl	80029d4 <siscanf>
	scanptr += bytes_scanned;
 8000faa:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000fae:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fba:	4413      	add	r3, r2
 8000fbc:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    
    /* We'll store each request line in the trace in this array */
    if ((trace->ops = 
	 (traceop_t *)mm_malloc(trace->num_ops * sizeof(traceop_t))) == NULL)
 8000fc0:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fde9 	bl	8001ba8 <mm_malloc>
 8000fd6:	4602      	mov	r2, r0
    if ((trace->ops = 
 8000fd8:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fdc:	611a      	str	r2, [r3, #16]
 8000fde:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <read_trace+0x106>
	unix_error("malloc 2 failed in read_trace");
 8000fe8:	488a      	ldr	r0, [pc, #552]	; (8001214 <read_trace+0x32c>)
 8000fea:	f000 fce5 	bl	80019b8 <unix_error>

    /* We'll keep an array of pointers to the allocated blocks here... */
    if ((trace->blocks = 
	 (char **)mm_malloc(trace->num_ids * sizeof(char *))) == NULL)
 8000fee:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fdd6 	bl	8001ba8 <mm_malloc>
 8000ffc:	4602      	mov	r2, r0
    if ((trace->blocks = 
 8000ffe:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <read_trace+0x12c>
	unix_error("malloc 3 failed in read_trace");
 800100e:	4882      	ldr	r0, [pc, #520]	; (8001218 <read_trace+0x330>)
 8001010:	f000 fcd2 	bl	80019b8 <unix_error>

    /* ... along with the corresponding byte sizes of each block */
    if ((trace->block_sizes = 
	 (size_t *)mm_malloc(trace->num_ids * sizeof(size_t))) == NULL)
 8001014:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fdc3 	bl	8001ba8 <mm_malloc>
 8001022:	4602      	mov	r2, r0
    if ((trace->block_sizes = 
 8001024:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001028:	619a      	str	r2, [r3, #24]
 800102a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <read_trace+0x152>
	unix_error("malloc 4 failed in read_trace");
 8001034:	4879      	ldr	r0, [pc, #484]	; (800121c <read_trace+0x334>)
 8001036:	f000 fcbf 	bl	80019b8 <unix_error>
    
    /* read every request line in the trace file */
    index = 0;
 800103a:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800103e:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
    op_index = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 800104c:	e141      	b.n	80012d2 <read_trace+0x3ea>
		scanptr += bytes_scanned;
 800104e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001052:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 800105e:	4413      	add	r3, r2
 8001060:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
		switch(type[0]) {
 8001064:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001068:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	3b61      	subs	r3, #97	; 0x61
 8001070:	2b12      	cmp	r3, #18
 8001072:	f200 810d 	bhi.w	8001290 <read_trace+0x3a8>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <read_trace+0x194>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	080010c9 	.word	0x080010c9
 8001080:	08001291 	.word	0x08001291
 8001084:	08001291 	.word	0x08001291
 8001088:	08001291 	.word	0x08001291
 800108c:	08001291 	.word	0x08001291
 8001090:	08001225 	.word	0x08001225
 8001094:	08001291 	.word	0x08001291
 8001098:	0800128b 	.word	0x0800128b
 800109c:	08001291 	.word	0x08001291
 80010a0:	08001291 	.word	0x08001291
 80010a4:	08001291 	.word	0x08001291
 80010a8:	08001291 	.word	0x08001291
 80010ac:	08001291 	.word	0x08001291
 80010b0:	08001291 	.word	0x08001291
 80010b4:	08001291 	.word	0x08001291
 80010b8:	08001291 	.word	0x08001291
 80010bc:	08001291 	.word	0x08001291
 80010c0:	08001169 	.word	0x08001169
 80010c4:	08001285 	.word	0x08001285
		case 'a':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 80010c8:	a904      	add	r1, sp, #16
 80010ca:	aa05      	add	r2, sp, #20
 80010cc:	ab03      	add	r3, sp, #12
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	460b      	mov	r3, r1
 80010d2:	4953      	ldr	r1, [pc, #332]	; (8001220 <read_trace+0x338>)
 80010d4:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 80010d8:	f001 fc7c 	bl	80029d4 <siscanf>
			scanptr += bytes_scanned;
 80010dc:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010e0:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80010ec:	4413      	add	r3, r2
 80010ee:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = ALLOC;
 80010f2:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80010f6:	6919      	ldr	r1, [r3, #16]
 80010f8:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 800110a:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800110e:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001118:	6919      	ldr	r1, [r3, #16]
 800111a:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	4602      	mov	r2, r0
 800112a:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 800112c:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001130:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800113a:	6919      	ldr	r1, [r3, #16]
 800113c:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	4602      	mov	r2, r0
 800114c:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 800114e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001152:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 800115c:	4293      	cmp	r3, r2
 800115e:	bf38      	it	cc
 8001160:	4613      	movcc	r3, r2
 8001162:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 8001166:	e0af      	b.n	80012c8 <read_trace+0x3e0>
		case 'r':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 8001168:	a904      	add	r1, sp, #16
 800116a:	aa05      	add	r2, sp, #20
 800116c:	ab03      	add	r3, sp, #12
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	460b      	mov	r3, r1
 8001172:	492b      	ldr	r1, [pc, #172]	; (8001220 <read_trace+0x338>)
 8001174:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001178:	f001 fc2c 	bl	80029d4 <siscanf>
			scanptr += bytes_scanned;
 800117c:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001180:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 800118c:	4413      	add	r3, r2
 800118e:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = REALLOC;
 8001192:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001196:	6919      	ldr	r1, [r3, #16]
 8001198:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	2202      	movs	r2, #2
 80011a8:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 80011aa:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011ae:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80011b8:	6919      	ldr	r1, [r3, #16]
 80011ba:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	4602      	mov	r2, r0
 80011ca:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 80011cc:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011d0:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80011da:	6919      	ldr	r1, [r3, #16]
 80011dc:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	4602      	mov	r2, r0
 80011ec:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 80011ee:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011f2:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 80011fc:	4293      	cmp	r3, r2
 80011fe:	bf38      	it	cc
 8001200:	4613      	movcc	r3, r2
 8001202:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 8001206:	e05f      	b.n	80012c8 <read_trace+0x3e0>
 8001208:	20000000 	.word	0x20000000
 800120c:	08004868 	.word	0x08004868
 8001210:	08004888 	.word	0x08004888
 8001214:	08004890 	.word	0x08004890
 8001218:	080048b0 	.word	0x080048b0
 800121c:	080048d0 	.word	0x080048d0
 8001220:	080048f0 	.word	0x080048f0
		case 'f':
			sscanf(scanptr, "%u%n", &index, &bytes_scanned);
 8001224:	ab03      	add	r3, sp, #12
 8001226:	aa05      	add	r2, sp, #20
 8001228:	4934      	ldr	r1, [pc, #208]	; (80012fc <read_trace+0x414>)
 800122a:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 800122e:	f001 fbd1 	bl	80029d4 <siscanf>
			scanptr += bytes_scanned;
 8001232:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001236:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8001242:	4413      	add	r3, r2
 8001244:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = FREE;
 8001248:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 8001260:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001264:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800126e:	6919      	ldr	r1, [r3, #16]
 8001270:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	4602      	mov	r2, r0
 8001280:	605a      	str	r2, [r3, #4]
			break;
 8001282:	e021      	b.n	80012c8 <read_trace+0x3e0>
		case 's':
			stack_test();
 8001284:	f7ff fbfa 	bl	8000a7c <stack_test>
			break;
 8001288:	e01e      	b.n	80012c8 <read_trace+0x3e0>
		case 'h':
			heap_test();
 800128a:	f7ff fc10 	bl	8000aae <heap_test>
			break;
 800128e:	e01b      	b.n	80012c8 <read_trace+0x3e0>
		default:
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
			   type[0], scanptr-bytes_scanned, path);
 8001290:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001294:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001298:	781b      	ldrb	r3, [r3, #0]
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 800129a:	4619      	mov	r1, r3
			   type[0], scanptr-bytes_scanned, path);
 800129c:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012a0:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	425b      	negs	r3, r3
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 80012a8:	f8dd 281c 	ldr.w	r2, [sp, #2076]	; 0x81c
 80012ac:	441a      	add	r2, r3
 80012ae:	ab06      	add	r3, sp, #24
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	4613      	mov	r3, r2
 80012b4:	460a      	mov	r2, r1
 80012b6:	4912      	ldr	r1, [pc, #72]	; (8001300 <read_trace+0x418>)
 80012b8:	4812      	ldr	r0, [pc, #72]	; (8001304 <read_trace+0x41c>)
 80012ba:	f001 fb6b 	bl	8002994 <siprintf>
			var_print(msg);
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <read_trace+0x41c>)
 80012c0:	f000 fe10 	bl	8001ee4 <var_print>
			loop();
 80012c4:	f000 fe0c 	bl	8001ee0 <loop>
		}
		op_index++;
 80012c8:	f8dd 3820 	ldr.w	r3, [sp, #2080]	; 0x820
 80012cc:	3301      	adds	r3, #1
 80012ce:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 80012d2:	ab03      	add	r3, sp, #12
 80012d4:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 80012d8:	490b      	ldr	r1, [pc, #44]	; (8001308 <read_trace+0x420>)
 80012da:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 80012de:	f001 fb79 	bl	80029d4 <siscanf>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012e8:	f47f aeb1 	bne.w	800104e <read_trace+0x166>
    }
	// Removed to allow shortened trace files
    //assert(max_index == trace->num_ids - 1);
    //assert(trace->num_ops == op_index);
    
    return trace;
 80012ec:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	f60d 0d2c 	addw	sp, sp, #2092	; 0x82c
 80012f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012fa:	bf00      	nop
 80012fc:	080048f8 	.word	0x080048f8
 8001300:	08004900 	.word	0x08004900
 8001304:	200008f4 	.word	0x200008f4
 8001308:	0800493c 	.word	0x0800493c

0800130c <free_trace>:
/*
 * free_trace - Free the trace record and the three arrays it points
 *              to, all of which were allocated in read_trace().
 */
void free_trace(trace_t *trace)
{
 800130c:	b500      	push	{lr}
 800130e:	b083      	sub	sp, #12
 8001310:	9001      	str	r0, [sp, #4]
    mm_free(trace->ops);         /* free the three arrays... */
 8001312:	9b01      	ldr	r3, [sp, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fcb4 	bl	8001c84 <mm_free>
    mm_free(trace->blocks);      
 800131c:	9b01      	ldr	r3, [sp, #4]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fcaf 	bl	8001c84 <mm_free>
    mm_free(trace->block_sizes);
 8001326:	9b01      	ldr	r3, [sp, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fcaa 	bl	8001c84 <mm_free>
    mm_free(trace);              /* and the trace record itself... */
 8001330:	9801      	ldr	r0, [sp, #4]
 8001332:	f000 fca7 	bl	8001c84 <mm_free>
}
 8001336:	bf00      	nop
 8001338:	b003      	add	sp, #12
 800133a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001340 <eval_mm_valid>:

/*
 * eval_mm_valid - Check the mm malloc package for correctness
 */
static int eval_mm_valid(trace_t *trace, int tracenum, range_t **ranges) 
{
 8001340:	b500      	push	{lr}
 8001342:	b08f      	sub	sp, #60	; 0x3c
 8001344:	9005      	str	r0, [sp, #20]
 8001346:	9104      	str	r1, [sp, #16]
 8001348:	9203      	str	r2, [sp, #12]
    char *newp;
    char *oldp;
    char *p;
    
    /* Reset the heap and free any records in the range list */
    clear_ranges(ranges);
 800134a:	9803      	ldr	r0, [sp, #12]
 800134c:	f7ff fdb3 	bl	8000eb6 <clear_ranges>
	return 0;
    }
	*/

    /* Interpret each operation in the trace in order */
    for (i = 0;  i < trace->num_ops;  i++) {
 8001350:	2300      	movs	r3, #0
 8001352:	930d      	str	r3, [sp, #52]	; 0x34
 8001354:	e0e4      	b.n	8001520 <eval_mm_valid+0x1e0>
	index = trace->ops[i].index;
 8001356:	9b05      	ldr	r3, [sp, #20]
 8001358:	6919      	ldr	r1, [r3, #16]
 800135a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	930a      	str	r3, [sp, #40]	; 0x28
	size = trace->ops[i].size;
 800136a:	9b05      	ldr	r3, [sp, #20]
 800136c:	6919      	ldr	r1, [r3, #16]
 800136e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	9309      	str	r3, [sp, #36]	; 0x24

        switch (trace->ops[i].type) {
 800137e:	9b05      	ldr	r3, [sp, #20]
 8001380:	6919      	ldr	r1, [r3, #16]
 8001382:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d03a      	beq.n	800140a <eval_mm_valid+0xca>
 8001394:	2b02      	cmp	r3, #2
 8001396:	f300 80ac 	bgt.w	80014f2 <eval_mm_valid+0x1b2>
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <eval_mm_valid+0x66>
 800139e:	2b01      	cmp	r3, #1
 80013a0:	f000 8098 	beq.w	80014d4 <eval_mm_valid+0x194>
 80013a4:	e0a5      	b.n	80014f2 <eval_mm_valid+0x1b2>

        case ALLOC: /* mm_malloc */

	    /* Call the student's malloc */
	    if ((p = mm_malloc(size)) == NULL) {
 80013a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fbfd 	bl	8001ba8 <mm_malloc>
 80013ae:	9006      	str	r0, [sp, #24]
 80013b0:	9b06      	ldr	r3, [sp, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <eval_mm_valid+0x84>
		malloc_error(tracenum, i, "mm_malloc failed.");
 80013b6:	4a60      	ldr	r2, [pc, #384]	; (8001538 <eval_mm_valid+0x1f8>)
 80013b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80013ba:	9804      	ldr	r0, [sp, #16]
 80013bc:	f000 fb1a 	bl	80019f4 <malloc_error>
		return 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e0b4      	b.n	800152e <eval_mm_valid+0x1ee>
	    /* 
	     * Test the range of the new block for correctness and add it 
	     * to the range list if OK. The block must be  be aligned properly,
	     * and must not overlap any currently allocated block. 
	     */ 
	    if (add_range(ranges, p, size, tracenum, i) == 0)
 80013c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	9b04      	ldr	r3, [sp, #16]
 80013ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013cc:	9906      	ldr	r1, [sp, #24]
 80013ce:	9803      	ldr	r0, [sp, #12]
 80013d0:	f7ff fc9c 	bl	8000d0c <add_range>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <eval_mm_valid+0x9e>
		return 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	e0a7      	b.n	800152e <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * fill range with low byte of index.  This will be used later
	     * if we realloc the block and wish to make sure that the old
	     * data was copied to the new block
	     */
	    memset(p, index & 0xFF, size);
 80013de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	9806      	ldr	r0, [sp, #24]
 80013e8:	f001 f8d0 	bl	800258c <memset>

	    /* Remember region */
	    trace->blocks[index] = p;
 80013ec:	9b05      	ldr	r3, [sp, #20]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	9a06      	ldr	r2, [sp, #24]
 80013f8:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 80013fa:	9b05      	ldr	r3, [sp, #20]
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001406:	601a      	str	r2, [r3, #0]
	    break;
 8001408:	e087      	b.n	800151a <eval_mm_valid+0x1da>

        case REALLOC: /* mm_realloc */
	    
	    /* Call the student's realloc */
	    oldp = trace->blocks[index];
 800140a:	9b05      	ldr	r3, [sp, #20]
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	9308      	str	r3, [sp, #32]
	    if ((newp = mm_realloc(oldp, size)) == NULL) {
 8001418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	9808      	ldr	r0, [sp, #32]
 800141e:	f000 fc4d 	bl	8001cbc <mm_realloc>
 8001422:	9007      	str	r0, [sp, #28]
 8001424:	9b07      	ldr	r3, [sp, #28]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <eval_mm_valid+0xf8>
		malloc_error(tracenum, i, "mm_realloc failed.");
 800142a:	4a44      	ldr	r2, [pc, #272]	; (800153c <eval_mm_valid+0x1fc>)
 800142c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800142e:	9804      	ldr	r0, [sp, #16]
 8001430:	f000 fae0 	bl	80019f4 <malloc_error>
		return 0;
 8001434:	2300      	movs	r3, #0
 8001436:	e07a      	b.n	800152e <eval_mm_valid+0x1ee>
	    }
	    
	    /* Remove the old region from the range list */
	    remove_range(ranges, oldp);
 8001438:	9908      	ldr	r1, [sp, #32]
 800143a:	9803      	ldr	r0, [sp, #12]
 800143c:	f7ff fd16 	bl	8000e6c <remove_range>
	    
	    /* Check new block for correctness and add it to range list */
	    if (add_range(ranges, newp, size, tracenum, i) == 0)
 8001440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	9b04      	ldr	r3, [sp, #16]
 8001446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001448:	9907      	ldr	r1, [sp, #28]
 800144a:	9803      	ldr	r0, [sp, #12]
 800144c:	f7ff fc5e 	bl	8000d0c <add_range>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <eval_mm_valid+0x11a>
		return 0;
 8001456:	2300      	movs	r3, #0
 8001458:	e069      	b.n	800152e <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * Make sure that the new block contains the data from the old 
	     * block and then fill in the new block with the low order byte
	     * of the new index
	     */
	    oldsize = trace->block_sizes[index];
 800145a:	9b05      	ldr	r3, [sp, #20]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	930b      	str	r3, [sp, #44]	; 0x2c
	    if (size < oldsize) oldsize = size;
 8001468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800146a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800146c:	429a      	cmp	r2, r3
 800146e:	da01      	bge.n	8001474 <eval_mm_valid+0x134>
 8001470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001472:	930b      	str	r3, [sp, #44]	; 0x2c
	    for (j = 0; j < oldsize; j++) {
 8001474:	2300      	movs	r3, #0
 8001476:	930c      	str	r3, [sp, #48]	; 0x30
 8001478:	e012      	b.n	80014a0 <eval_mm_valid+0x160>
	      if (newp[j] != (index & 0xFF)) {
 800147a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800147c:	9a07      	ldr	r2, [sp, #28]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001486:	b2db      	uxtb	r3, r3
 8001488:	429a      	cmp	r2, r3
 800148a:	d006      	beq.n	800149a <eval_mm_valid+0x15a>
		malloc_error(tracenum, i, "mm_realloc did not preserve the "
 800148c:	4a2c      	ldr	r2, [pc, #176]	; (8001540 <eval_mm_valid+0x200>)
 800148e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001490:	9804      	ldr	r0, [sp, #16]
 8001492:	f000 faaf 	bl	80019f4 <malloc_error>
			     "data from old block");
		return 0;
 8001496:	2300      	movs	r3, #0
 8001498:	e049      	b.n	800152e <eval_mm_valid+0x1ee>
	    for (j = 0; j < oldsize; j++) {
 800149a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800149c:	3301      	adds	r3, #1
 800149e:	930c      	str	r3, [sp, #48]	; 0x30
 80014a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80014a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbe8      	blt.n	800147a <eval_mm_valid+0x13a>
	      }
	    }
	    memset(newp, index & 0xFF, size);
 80014a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	9807      	ldr	r0, [sp, #28]
 80014b2:	f001 f86b 	bl	800258c <memset>

	    /* Remember region */
	    trace->blocks[index] = newp;
 80014b6:	9b05      	ldr	r3, [sp, #20]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	9a07      	ldr	r2, [sp, #28]
 80014c2:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 80014c4:	9b05      	ldr	r3, [sp, #20]
 80014c6:	699a      	ldr	r2, [r3, #24]
 80014c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014d0:	601a      	str	r2, [r3, #0]
	    break;
 80014d2:	e022      	b.n	800151a <eval_mm_valid+0x1da>

        case FREE: /* mm_free */
	    
	    /* Remove region from list and call student's free function */
	    p = trace->blocks[index];
 80014d4:	9b05      	ldr	r3, [sp, #20]
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	9306      	str	r3, [sp, #24]
	    remove_range(ranges, p);
 80014e2:	9906      	ldr	r1, [sp, #24]
 80014e4:	9803      	ldr	r0, [sp, #12]
 80014e6:	f7ff fcc1 	bl	8000e6c <remove_range>
	    mm_free(p);
 80014ea:	9806      	ldr	r0, [sp, #24]
 80014ec:	f000 fbca 	bl	8001c84 <mm_free>
	    break;
 80014f0:	e013      	b.n	800151a <eval_mm_valid+0x1da>

	default:
		sprintf(msg, "Type %d", trace->ops[i].type);
 80014f2:	9b05      	ldr	r3, [sp, #20]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	490f      	ldr	r1, [pc, #60]	; (8001544 <eval_mm_valid+0x204>)
 8001508:	480f      	ldr	r0, [pc, #60]	; (8001548 <eval_mm_valid+0x208>)
 800150a:	f001 fa43 	bl	8002994 <siprintf>
		var_print(msg);
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <eval_mm_valid+0x208>)
 8001510:	f000 fce8 	bl	8001ee4 <var_print>
	    app_error("Nonexistent request type in eval_mm_valid");
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <eval_mm_valid+0x20c>)
 8001516:	f000 fa39 	bl	800198c <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 800151a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800151c:	3301      	adds	r3, #1
 800151e:	930d      	str	r3, [sp, #52]	; 0x34
 8001520:	9b05      	ldr	r3, [sp, #20]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001526:	429a      	cmp	r2, r3
 8001528:	f6ff af15 	blt.w	8001356 <eval_mm_valid+0x16>
        }

    }

    /* As far as we know, this is a valid malloc package */
    return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	b00f      	add	sp, #60	; 0x3c
 8001532:	f85d fb04 	ldr.w	pc, [sp], #4
 8001536:	bf00      	nop
 8001538:	08004944 	.word	0x08004944
 800153c:	08004958 	.word	0x08004958
 8001540:	0800496c 	.word	0x0800496c
 8001544:	080049a0 	.word	0x080049a0
 8001548:	200008f4 	.word	0x200008f4
 800154c:	080049a8 	.word	0x080049a8

08001550 <eval_mm_util>:
 *   doesn't allow the students to decrement the brk pointer, so brk
 *   is always the high water mark of the heap. 
 *   
 */
static double eval_mm_util(trace_t *trace, int tracenum, range_t **ranges)
{   
 8001550:	b530      	push	{r4, r5, lr}
 8001552:	b08f      	sub	sp, #60	; 0x3c
 8001554:	9003      	str	r0, [sp, #12]
 8001556:	9102      	str	r1, [sp, #8]
 8001558:	9201      	str	r2, [sp, #4]
    int i;
    int index;
    int size, newsize, oldsize;
    int max_total_size = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	930c      	str	r3, [sp, #48]	; 0x30
    int total_size = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	930b      	str	r3, [sp, #44]	; 0x2c
    /* initialize the heap and the mm malloc package */
    //mem_reset_brk();
    //if (mm_init() < 0)
	//app_error("mm_init failed in eval_mm_util");

    for (i = 0;  i < trace->num_ops;  i++) {
 8001562:	2300      	movs	r3, #0
 8001564:	930d      	str	r3, [sp, #52]	; 0x34
 8001566:	e0ba      	b.n	80016de <eval_mm_util+0x18e>
        switch (trace->ops[i].type) {
 8001568:	9b03      	ldr	r3, [sp, #12]
 800156a:	6919      	ldr	r1, [r3, #16]
 800156c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d040      	beq.n	8001600 <eval_mm_util+0xb0>
 800157e:	2b02      	cmp	r3, #2
 8001580:	f300 80a7 	bgt.w	80016d2 <eval_mm_util+0x182>
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <eval_mm_util+0x40>
 8001588:	2b01      	cmp	r3, #1
 800158a:	f000 8082 	beq.w	8001692 <eval_mm_util+0x142>
 800158e:	e0a0      	b.n	80016d2 <eval_mm_util+0x182>

        case ALLOC: /* mm_alloc */
	    index = trace->ops[i].index;
 8001590:	9b03      	ldr	r3, [sp, #12]
 8001592:	6919      	ldr	r1, [r3, #16]
 8001594:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->ops[i].size;
 80015a4:	9b03      	ldr	r3, [sp, #12]
 80015a6:	6919      	ldr	r1, [r3, #16]
 80015a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	9305      	str	r3, [sp, #20]

	    if ((p = mm_malloc(size)) == NULL) 
 80015b8:	9b05      	ldr	r3, [sp, #20]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 faf4 	bl	8001ba8 <mm_malloc>
 80015c0:	9004      	str	r0, [sp, #16]
 80015c2:	9b04      	ldr	r3, [sp, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <eval_mm_util+0x7e>
		app_error("mm_malloc failed in eval_mm_util");
 80015c8:	4853      	ldr	r0, [pc, #332]	; (8001718 <eval_mm_util+0x1c8>)
 80015ca:	f000 f9df 	bl	800198c <app_error>
	    
	    /* Remember region and size */
	    trace->blocks[index] = p;
 80015ce:	9b03      	ldr	r3, [sp, #12]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	9a04      	ldr	r2, [sp, #16]
 80015da:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 80015dc:	9b03      	ldr	r3, [sp, #12]
 80015de:	699a      	ldr	r2, [r3, #24]
 80015e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	9a05      	ldr	r2, [sp, #20]
 80015e8:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += size;
 80015ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80015ec:	9b05      	ldr	r3, [sp, #20]
 80015ee:	4413      	add	r3, r2
 80015f0:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 80015f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80015f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015f6:	4293      	cmp	r3, r2
 80015f8:	bfb8      	it	lt
 80015fa:	4613      	movlt	r3, r2
 80015fc:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 80015fe:	e06b      	b.n	80016d8 <eval_mm_util+0x188>

	case REALLOC: /* mm_realloc */
	    index = trace->ops[i].index;
 8001600:	9b03      	ldr	r3, [sp, #12]
 8001602:	6919      	ldr	r1, [r3, #16]
 8001604:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	930a      	str	r3, [sp, #40]	; 0x28
	    newsize = trace->ops[i].size;
 8001614:	9b03      	ldr	r3, [sp, #12]
 8001616:	6919      	ldr	r1, [r3, #16]
 8001618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	9309      	str	r3, [sp, #36]	; 0x24
	    oldsize = trace->block_sizes[index];
 8001628:	9b03      	ldr	r3, [sp, #12]
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	9308      	str	r3, [sp, #32]

	    oldp = trace->blocks[index];
 8001636:	9b03      	ldr	r3, [sp, #12]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	9307      	str	r3, [sp, #28]
	    if ((newp = mm_realloc(oldp,newsize)) == NULL)
 8001644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001646:	4619      	mov	r1, r3
 8001648:	9807      	ldr	r0, [sp, #28]
 800164a:	f000 fb37 	bl	8001cbc <mm_realloc>
 800164e:	9006      	str	r0, [sp, #24]
 8001650:	9b06      	ldr	r3, [sp, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <eval_mm_util+0x10c>
		app_error("mm_realloc failed in eval_mm_util");
 8001656:	4831      	ldr	r0, [pc, #196]	; (800171c <eval_mm_util+0x1cc>)
 8001658:	f000 f998 	bl	800198c <app_error>

	    /* Remember region and size */
	    trace->blocks[index] = newp;
 800165c:	9b03      	ldr	r3, [sp, #12]
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	9a06      	ldr	r2, [sp, #24]
 8001668:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = newsize;
 800166a:	9b03      	ldr	r3, [sp, #12]
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001676:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += (newsize - oldsize);
 8001678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800167a:	9b08      	ldr	r3, [sp, #32]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001680:	4413      	add	r3, r2
 8001682:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 8001684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001688:	4293      	cmp	r3, r2
 800168a:	bfb8      	it	lt
 800168c:	4613      	movlt	r3, r2
 800168e:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 8001690:	e022      	b.n	80016d8 <eval_mm_util+0x188>

        case FREE: /* mm_free */
	    index = trace->ops[i].index;
 8001692:	9b03      	ldr	r3, [sp, #12]
 8001694:	6919      	ldr	r1, [r3, #16]
 8001696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->block_sizes[index];
 80016a6:	9b03      	ldr	r3, [sp, #12]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	9305      	str	r3, [sp, #20]
	    p = trace->blocks[index];
 80016b4:	9b03      	ldr	r3, [sp, #12]
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	9304      	str	r3, [sp, #16]
	    
	    mm_free(p);
 80016c2:	9804      	ldr	r0, [sp, #16]
 80016c4:	f000 fade 	bl	8001c84 <mm_free>
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size -= size;
 80016c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80016ca:	9b05      	ldr	r3, [sp, #20]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    break;
 80016d0:	e002      	b.n	80016d8 <eval_mm_util+0x188>

	default:
	    app_error("Nonexistent request type in eval_mm_util");
 80016d2:	4813      	ldr	r0, [pc, #76]	; (8001720 <eval_mm_util+0x1d0>)
 80016d4:	f000 f95a 	bl	800198c <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 80016d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80016da:	3301      	adds	r3, #1
 80016dc:	930d      	str	r3, [sp, #52]	; 0x34
 80016de:	9b03      	ldr	r3, [sp, #12]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f6ff af3f 	blt.w	8001568 <eval_mm_util+0x18>

        }
    }

    return ((double)max_total_size / (double)mem_heapsize());
 80016ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016ec:	f7fe ff02 	bl	80004f4 <__aeabi_i2d>
 80016f0:	4604      	mov	r4, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	f000 fa24 	bl	8001b40 <mem_heapsize>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe feea 	bl	80004d4 <__aeabi_ui2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4620      	mov	r0, r4
 8001706:	4629      	mov	r1, r5
 8001708:	f7ff f888 	bl	800081c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
}
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	b00f      	add	sp, #60	; 0x3c
 8001716:	bd30      	pop	{r4, r5, pc}
 8001718:	080049d4 	.word	0x080049d4
 800171c:	080049f8 	.word	0x080049f8
 8001720:	08004a1c 	.word	0x08004a1c

08001724 <printresults>:

/*
 * printresults - prints a performance summary for some malloc package
 */
static void printresults(int n, stats_t *stats) 
{
 8001724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001728:	b093      	sub	sp, #76	; 0x4c
 800172a:	9009      	str	r0, [sp, #36]	; 0x24
 800172c:	9108      	str	r1, [sp, #32]
    int i;
    double secs = 0;
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    double ops = 0;
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    double util = 0;
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

    /* Print the individual results for each trace */
    sprintf(msg, "%5s%7s %5s%8s%10s%6s\n", 
 8001752:	4b7b      	ldr	r3, [pc, #492]	; (8001940 <printresults+0x21c>)
 8001754:	9303      	str	r3, [sp, #12]
 8001756:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <printresults+0x220>)
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <printresults+0x224>)
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b7b      	ldr	r3, [pc, #492]	; (800194c <printresults+0x228>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <printresults+0x22c>)
 8001764:	4a7b      	ldr	r2, [pc, #492]	; (8001954 <printresults+0x230>)
 8001766:	497c      	ldr	r1, [pc, #496]	; (8001958 <printresults+0x234>)
 8001768:	487c      	ldr	r0, [pc, #496]	; (800195c <printresults+0x238>)
 800176a:	f001 f913 	bl	8002994 <siprintf>
	   "trace", " valid", "util", "ops", "secs", "Kops");
	var_print(msg);
 800176e:	487b      	ldr	r0, [pc, #492]	; (800195c <printresults+0x238>)
 8001770:	f000 fbb8 	bl	8001ee4 <var_print>
    for (i=0; i < n; i++) {
 8001774:	2300      	movs	r3, #0
 8001776:	9311      	str	r3, [sp, #68]	; 0x44
 8001778:	e08a      	b.n	8001890 <printresults+0x16c>
	if (stats[i].valid) {
 800177a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	9a08      	ldr	r2, [sp, #32]
 8001780:	4413      	add	r3, r2
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d06f      	beq.n	8001868 <printresults+0x144>
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
		   i,
		   "yes",
		   stats[i].util*100.0,
 8001788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	9a08      	ldr	r2, [sp, #32]
 800178e:	4413      	add	r3, r2
 8001790:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b71      	ldr	r3, [pc, #452]	; (8001960 <printresults+0x23c>)
 800179a:	f7fe ff15 	bl	80005c8 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4690      	mov	r8, r2
 80017a4:	4699      	mov	r9, r3
		   stats[i].ops,
 80017a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017a8:	015b      	lsls	r3, r3, #5
 80017aa:	9a08      	ldr	r2, [sp, #32]
 80017ac:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80017ae:	e9d3 4500 	ldrd	r4, r5, [r3]
		   stats[i].secs,
 80017b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017b4:	015b      	lsls	r3, r3, #5
 80017b6:	9a08      	ldr	r2, [sp, #32]
 80017b8:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80017ba:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
		   (stats[i].ops/1e3)/stats[i].secs);
 80017be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017c0:	015b      	lsls	r3, r3, #5
 80017c2:	9a08      	ldr	r2, [sp, #32]
 80017c4:	4413      	add	r3, r2
 80017c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	4b65      	ldr	r3, [pc, #404]	; (8001964 <printresults+0x240>)
 80017d0:	f7ff f824 	bl	800081c <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017de:	015b      	lsls	r3, r3, #5
 80017e0:	9a08      	ldr	r2, [sp, #32]
 80017e2:	4413      	add	r3, r2
 80017e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80017e8:	f7ff f818 	bl	800081c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80017f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80017f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80017fc:	e9cd 8900 	strd	r8, r9, [sp]
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <printresults+0x244>)
 8001802:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001804:	4959      	ldr	r1, [pc, #356]	; (800196c <printresults+0x248>)
 8001806:	4855      	ldr	r0, [pc, #340]	; (800195c <printresults+0x238>)
 8001808:	f001 f8c4 	bl	8002994 <siprintf>
		var_print(msg);
 800180c:	4853      	ldr	r0, [pc, #332]	; (800195c <printresults+0x238>)
 800180e:	f000 fb69 	bl	8001ee4 <var_print>
	    secs += stats[i].secs;
 8001812:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001814:	015b      	lsls	r3, r3, #5
 8001816:	9a08      	ldr	r2, [sp, #32]
 8001818:	4413      	add	r3, r2
 800181a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800181e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8001822:	f7fe fd1b 	bl	800025c <__adddf3>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	    ops += stats[i].ops;
 800182e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	9a08      	ldr	r2, [sp, #32]
 8001834:	4413      	add	r3, r2
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800183e:	f7fe fd0d 	bl	800025c <__adddf3>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	    util += stats[i].util;
 800184a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	9a08      	ldr	r2, [sp, #32]
 8001850:	4413      	add	r3, r2
 8001852:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001856:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800185a:	f7fe fcff 	bl	800025c <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001866:	e010      	b.n	800188a <printresults+0x166>
	}
	else {
	    sprintf(msg,"%2d%10s%6s%8s%10s%6s\n", 
 8001868:	4b41      	ldr	r3, [pc, #260]	; (8001970 <printresults+0x24c>)
 800186a:	9303      	str	r3, [sp, #12]
 800186c:	4b40      	ldr	r3, [pc, #256]	; (8001970 <printresults+0x24c>)
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <printresults+0x24c>)
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <printresults+0x24c>)
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <printresults+0x250>)
 800187a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800187c:	493e      	ldr	r1, [pc, #248]	; (8001978 <printresults+0x254>)
 800187e:	4837      	ldr	r0, [pc, #220]	; (800195c <printresults+0x238>)
 8001880:	f001 f888 	bl	8002994 <siprintf>
		   "no",
		   "-",
		   "-",
		   "-",
		   "-");
		var_print(msg);
 8001884:	4835      	ldr	r0, [pc, #212]	; (800195c <printresults+0x238>)
 8001886:	f000 fb2d 	bl	8001ee4 <var_print>
    for (i=0; i < n; i++) {
 800188a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800188c:	3301      	adds	r3, #1
 800188e:	9311      	str	r3, [sp, #68]	; 0x44
 8001890:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001894:	429a      	cmp	r2, r3
 8001896:	f6ff af70 	blt.w	800177a <printresults+0x56>
	}
    }

    /* Print the aggregate results for the set of traces */
    if (errors == 0) {
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <printresults+0x258>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d13b      	bne.n	800191a <printresults+0x1f6>
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
	       "Total       ",
	       (util/n)*100.0,
 80018a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018a4:	f7fe fe26 	bl	80004f4 <__aeabi_i2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80018b0:	f7fe ffb4 	bl	800081c <__aeabi_ddiv>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <printresults+0x23c>)
 80018c2:	f7fe fe81 	bl	80005c8 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4614      	mov	r4, r2
 80018cc:	461d      	mov	r5, r3
	       ops, 
	       secs,
	       (ops/1e3)/secs);
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <printresults+0x240>)
 80018d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80018d8:	f7fe ffa0 	bl	800081c <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80018e4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80018e8:	f7fe ff98 	bl	800081c <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018f4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80018f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001900:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001904:	e9cd 4500 	strd	r4, r5, [sp]
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <printresults+0x25c>)
 800190a:	491e      	ldr	r1, [pc, #120]	; (8001984 <printresults+0x260>)
 800190c:	4813      	ldr	r0, [pc, #76]	; (800195c <printresults+0x238>)
 800190e:	f001 f841 	bl	8002994 <siprintf>
	var_print(msg);
 8001912:	4812      	ldr	r0, [pc, #72]	; (800195c <printresults+0x238>)
 8001914:	f000 fae6 	bl	8001ee4 <var_print>
	       "-", 
	       "-");
	var_print(msg);
    }

}
 8001918:	e00e      	b.n	8001938 <printresults+0x214>
	sprintf(msg, "%12s%6s%8s%10s%6s\n", 
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <printresults+0x24c>)
 800191c:	9302      	str	r3, [sp, #8]
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <printresults+0x24c>)
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <printresults+0x24c>)
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <printresults+0x24c>)
 8001928:	4a15      	ldr	r2, [pc, #84]	; (8001980 <printresults+0x25c>)
 800192a:	4917      	ldr	r1, [pc, #92]	; (8001988 <printresults+0x264>)
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <printresults+0x238>)
 800192e:	f001 f831 	bl	8002994 <siprintf>
	var_print(msg);
 8001932:	480a      	ldr	r0, [pc, #40]	; (800195c <printresults+0x238>)
 8001934:	f000 fad6 	bl	8001ee4 <var_print>
}
 8001938:	bf00      	nop
 800193a:	b013      	add	sp, #76	; 0x4c
 800193c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001940:	08004a70 	.word	0x08004a70
 8001944:	08004a78 	.word	0x08004a78
 8001948:	08004a80 	.word	0x08004a80
 800194c:	08004a84 	.word	0x08004a84
 8001950:	08004a48 	.word	0x08004a48
 8001954:	08004a50 	.word	0x08004a50
 8001958:	08004a58 	.word	0x08004a58
 800195c:	200008f4 	.word	0x200008f4
 8001960:	40590000 	.word	0x40590000
 8001964:	408f4000 	.word	0x408f4000
 8001968:	08004a8c 	.word	0x08004a8c
 800196c:	08004a90 	.word	0x08004a90
 8001970:	08004acc 	.word	0x08004acc
 8001974:	08004ab0 	.word	0x08004ab0
 8001978:	08004ab4 	.word	0x08004ab4
 800197c:	200000e4 	.word	0x200000e4
 8001980:	08004ad0 	.word	0x08004ad0
 8001984:	08004ae0 	.word	0x08004ae0
 8001988:	08004b00 	.word	0x08004b00

0800198c <app_error>:

/* 
 * app_error - Report an arbitrary application error
 */
void app_error(char * err_msg) 
{
 800198c:	b500      	push	{lr}
 800198e:	b083      	sub	sp, #12
 8001990:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s\n", err_msg);
 8001992:	9a01      	ldr	r2, [sp, #4]
 8001994:	4906      	ldr	r1, [pc, #24]	; (80019b0 <app_error+0x24>)
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <app_error+0x28>)
 8001998:	f000 fffc 	bl	8002994 <siprintf>
	var_print(msg);
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <app_error+0x28>)
 800199e:	f000 faa1 	bl	8001ee4 <var_print>
	loop();
 80019a2:	f000 fa9d 	bl	8001ee0 <loop>
}
 80019a6:	bf00      	nop
 80019a8:	b003      	add	sp, #12
 80019aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ae:	bf00      	nop
 80019b0:	08004b14 	.word	0x08004b14
 80019b4:	200008f4 	.word	0x200008f4

080019b8 <unix_error>:

/* 
 * unix_error - Report a Unix-style error
 */
void unix_error(char * err_msg) 
{
 80019b8:	b500      	push	{lr}
 80019ba:	b083      	sub	sp, #12
 80019bc:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s: %s\n", err_msg, strerror(errno));
 80019be:	f000 fd9b 	bl	80024f8 <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 fa6a 	bl	8002ea0 <strerror>
 80019cc:	4603      	mov	r3, r0
 80019ce:	9a01      	ldr	r2, [sp, #4]
 80019d0:	4906      	ldr	r1, [pc, #24]	; (80019ec <unix_error+0x34>)
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <unix_error+0x38>)
 80019d4:	f000 ffde 	bl	8002994 <siprintf>
	var_print(msg);
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <unix_error+0x38>)
 80019da:	f000 fa83 	bl	8001ee4 <var_print>
	loop();
 80019de:	f000 fa7f 	bl	8001ee0 <loop>
}
 80019e2:	bf00      	nop
 80019e4:	b003      	add	sp, #12
 80019e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ea:	bf00      	nop
 80019ec:	08004b18 	.word	0x08004b18
 80019f0:	200008f4 	.word	0x200008f4

080019f4 <malloc_error>:

/*
 * malloc_error - Report an error returned by the mm_malloc package
 */
void malloc_error(int tracenum, int opnum, char *err_msg)
{
 80019f4:	b500      	push	{lr}
 80019f6:	b087      	sub	sp, #28
 80019f8:	9005      	str	r0, [sp, #20]
 80019fa:	9104      	str	r1, [sp, #16]
 80019fc:	9203      	str	r2, [sp, #12]
    errors++;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <malloc_error+0x3c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <malloc_error+0x3c>)
 8001a06:	6013      	str	r3, [r2, #0]
    sprintf(msg, "ERROR [trace %d, line %d]: %s\n", tracenum, LINENUM(opnum), err_msg);
 8001a08:	9b04      	ldr	r3, [sp, #16]
 8001a0a:	1d5a      	adds	r2, r3, #5
 8001a0c:	9b03      	ldr	r3, [sp, #12]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	9a05      	ldr	r2, [sp, #20]
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <malloc_error+0x40>)
 8001a16:	4808      	ldr	r0, [pc, #32]	; (8001a38 <malloc_error+0x44>)
 8001a18:	f000 ffbc 	bl	8002994 <siprintf>
	var_print(msg);
 8001a1c:	4806      	ldr	r0, [pc, #24]	; (8001a38 <malloc_error+0x44>)
 8001a1e:	f000 fa61 	bl	8001ee4 <var_print>
	loop();
 8001a22:	f000 fa5d 	bl	8001ee0 <loop>
}
 8001a26:	bf00      	nop
 8001a28:	b007      	add	sp, #28
 8001a2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a2e:	bf00      	nop
 8001a30:	200000e4 	.word	0x200000e4
 8001a34:	08004b20 	.word	0x08004b20
 8001a38:	200008f4 	.word	0x200008f4

08001a3c <mem_init>:

/* 
 * mem_init - initialize the memory system model
 */
void mem_init(void)
{
 8001a3c:	b500      	push	{lr}
 8001a3e:	b089      	sub	sp, #36	; 0x24
	mem_request req;
	mem_start_brk = (char *)ALIGN((size_t)(&__malloc_sbrk_start));
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <mem_init+0x4c>)
 8001a42:	3307      	adds	r3, #7
 8001a44:	f023 0307 	bic.w	r3, r3, #7
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <mem_init+0x50>)
 8001a4c:	601a      	str	r2, [r3, #0]
    mem_brk = mem_start_brk;
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <mem_init+0x50>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <mem_init+0x54>)
 8001a54:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, size=1 for sbrk move
	req = (mem_request){.request = SBRK, .req_id = (++cur_id), .size=0, .ptr=mem_brk};
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <mem_init+0x58>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <mem_init+0x58>)
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <mem_init+0x58>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <mem_init+0x54>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2103      	movs	r1, #3
 8001a6a:	f88d 1010 	strb.w	r1, [sp, #16]
 8001a6e:	9205      	str	r2, [sp, #20]
 8001a70:	2200      	movs	r2, #0
 8001a72:	9206      	str	r2, [sp, #24]
 8001a74:	9307      	str	r3, [sp, #28]
	req_send(&req);
 8001a76:	ab04      	add	r3, sp, #16
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fa72 	bl	8001f62 <req_send>
}
 8001a7e:	bf00      	nop
 8001a80:	b009      	add	sp, #36	; 0x24
 8001a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a86:	bf00      	nop
 8001a88:	20000d08 	.word	0x20000d08
 8001a8c:	200000e8 	.word	0x200000e8
 8001a90:	200000ec 	.word	0x200000ec
 8001a94:	20000cf8 	.word	0x20000cf8

08001a98 <mem_sbrk>:
 * mem_sbrk - simple model of the sbrk function. Extends the heap 
 *    by incr bytes and returns the start address of the new area. In
 *    this model, the heap cannot be shrunk.
 */
void *mem_sbrk(int incr) 
{
 8001a98:	b530      	push	{r4, r5, lr}
 8001a9a:	b099      	sub	sp, #100	; 0x64
 8001a9c:	9001      	str	r0, [sp, #4]
    char *old_brk = mem_brk;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <mem_sbrk+0x80>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	9317      	str	r3, [sp, #92]	; 0x5c
	register size_t * stack_top asm("sp");
	mem_request req;

    if ( (incr < 0) || ((mem_brk + incr) > (char *)(stack_top))) {
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db06      	blt.n	8001ab8 <mem_sbrk+0x20>
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <mem_sbrk+0x80>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	9b01      	ldr	r3, [sp, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	466a      	mov	r2, sp
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d911      	bls.n	8001adc <mem_sbrk+0x44>
		char output_str[] = "ERROR: mem_sbrk failed. Ran out of memory...\n";
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <mem_sbrk+0x84>)
 8001aba:	ac03      	add	r4, sp, #12
 8001abc:	461d      	mov	r5, r3
 8001abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001aca:	c407      	stmia	r4!, {r0, r1, r2}
 8001acc:	8023      	strh	r3, [r4, #0]
		var_print(output_str);
 8001ace:	ab03      	add	r3, sp, #12
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fa07 	bl	8001ee4 <var_print>
		return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ada:	e01a      	b.n	8001b12 <mem_sbrk+0x7a>
    }
    mem_brk += incr;
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <mem_sbrk+0x80>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	9b01      	ldr	r3, [sp, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <mem_sbrk+0x80>)
 8001ae6:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, size=1 for sbrk move
	req = (mem_request){.request = SBRK, .req_id = (++cur_id), .size=1, .ptr=mem_brk};
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <mem_sbrk+0x88>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <mem_sbrk+0x88>)
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <mem_sbrk+0x88>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <mem_sbrk+0x80>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2103      	movs	r1, #3
 8001afc:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 8001b00:	9214      	str	r2, [sp, #80]	; 0x50
 8001b02:	2201      	movs	r2, #1
 8001b04:	9215      	str	r2, [sp, #84]	; 0x54
 8001b06:	9316      	str	r3, [sp, #88]	; 0x58
	req_send(&req);
 8001b08:	ab13      	add	r3, sp, #76	; 0x4c
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 fa29 	bl	8001f62 <req_send>
    return (void *)old_brk;
 8001b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	b019      	add	sp, #100	; 0x64
 8001b16:	bd30      	pop	{r4, r5, pc}
 8001b18:	200000ec 	.word	0x200000ec
 8001b1c:	08004b40 	.word	0x08004b40
 8001b20:	20000cf8 	.word	0x20000cf8

08001b24 <mem_heap_lo>:
/*
 * mem_heap_lo - return address of the first heap byte
 */
void *mem_heap_lo()
{
    return (void *)mem_start_brk;
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <mem_heap_lo+0x8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4770      	bx	lr
 8001b2c:	200000e8 	.word	0x200000e8

08001b30 <mem_heap_hi>:
/* 
 * mem_heap_hi - return address of last heap byte
 */
void *mem_heap_hi()
{
    return (void *)(mem_brk - 1);
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <mem_heap_hi+0xc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3b01      	subs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	200000ec 	.word	0x200000ec

08001b40 <mem_heapsize>:
/*
 * mem_heapsize() - returns the heap size in bytes
 */
size_t mem_heapsize() 
{
    return (size_t)(mem_brk - mem_start_brk);
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <mem_heapsize+0x10>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <mem_heapsize+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	1ad3      	subs	r3, r2, r3
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	200000ec 	.word	0x200000ec
 8001b54:	200000e8 	.word	0x200000e8

08001b58 <mm_init>:
#define CHUNKSIZE (1<<12) // Heap request chunk

#define MAX(x,y) ((x) > (y) ? (x) : (y))

int mm_init(void)
{
 8001b58:	b508      	push	{r3, lr}
	mem_req_setup();
 8001b5a:	f000 f9f9 	bl	8001f50 <mem_req_setup>
	mem_init();
 8001b5e:	f7ff ff6d 	bl	8001a3c <mem_init>
    return 0;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd08      	pop	{r3, pc}

08001b68 <extend_heap>:

// Extend heap by words * WSIZE with alignment, return 1 on success 0 on fail
static int extend_heap(size_t words) {
 8001b68:	b500      	push	{lr}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	9001      	str	r0, [sp, #4]
	char * bp;
	size_t size;

	size = (words % 2) ? (words+1) * WSIZE : words * WSIZE; // Maintain double word alignment
 8001b6e:	9b01      	ldr	r3, [sp, #4]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <extend_heap+0x18>
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	e001      	b.n	8001b84 <extend_heap+0x1c>
 8001b80:	9b01      	ldr	r3, [sp, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	9303      	str	r3, [sp, #12]
	if ((long)(bp = mem_sbrk(size)) == -1) {
 8001b86:	9b03      	ldr	r3, [sp, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff85 	bl	8001a98 <mem_sbrk>
 8001b8e:	9002      	str	r0, [sp, #8]
 8001b90:	9b02      	ldr	r3, [sp, #8]
 8001b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b96:	d101      	bne.n	8001b9c <extend_heap+0x34>
		return 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <extend_heap+0x36>
	} else {
		return 1;
 8001b9c:	2301      	movs	r3, #1
	}
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	b005      	add	sp, #20
 8001ba2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ba8 <mm_malloc>:

void *mm_malloc(size_t size)
{
 8001ba8:	b500      	push	{lr}
 8001baa:	b095      	sub	sp, #84	; 0x54
 8001bac:	9001      	str	r0, [sp, #4]
	size_t asize, extendsize;	
	mem_request req;	
	mem_request response;

	// Ignore 0 size
	if (size == 0) {
 8001bae:	9b01      	ldr	r3, [sp, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <mm_malloc+0x10>
		return NULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e058      	b.n	8001c6a <mm_malloc+0xc2>
	}

	// Send malloc request to server
	req = (mem_request){.request = MALLOC, .req_id=(++cur_id), .size = size, .ptr=NULL};
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <mm_malloc+0xcc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <mm_malloc+0xcc>)
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <mm_malloc+0xcc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8001bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bce:	9b01      	ldr	r3, [sp, #4]
 8001bd0:	9310      	str	r3, [sp, #64]	; 0x40
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9311      	str	r3, [sp, #68]	; 0x44
	req_send(&req);
 8001bd6:	ab0e      	add	r3, sp, #56	; 0x38
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f9c2 	bl	8001f62 <req_send>
	req_receive(&response);
 8001bde:	ab0a      	add	r3, sp, #40	; 0x28
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f9c9 	bl	8001f78 <req_receive>

	if (response.ptr) {
 8001be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <mm_malloc+0x48>
		return response.ptr;
 8001bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001bee:	e03c      	b.n	8001c6a <mm_malloc+0xc2>
	} else {
		// Need to extend heap
		// Add overhead and alignment to block size
		if (size <= DSIZE) {
 8001bf0:	9b01      	ldr	r3, [sp, #4]
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d802      	bhi.n	8001bfc <mm_malloc+0x54>
			asize = 2*DSIZE;
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	9313      	str	r3, [sp, #76]	; 0x4c
 8001bfa:	e004      	b.n	8001c06 <mm_malloc+0x5e>
		} else {
			asize = DSIZE * ((size + (DSIZE) + (DSIZE-1))/DSIZE); // Add overhead and make rounding floor
 8001bfc:	9b01      	ldr	r3, [sp, #4]
 8001bfe:	330f      	adds	r3, #15
 8001c00:	f023 0307 	bic.w	r3, r3, #7
 8001c04:	9313      	str	r3, [sp, #76]	; 0x4c
		}
		extendsize = MAX(asize, CHUNKSIZE);
 8001c06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0c:	bf38      	it	cc
 8001c0e:	f44f 5380 	movcc.w	r3, #4096	; 0x1000
 8001c12:	9312      	str	r3, [sp, #72]	; 0x48

		if (extend_heap(extendsize/WSIZE)) {
 8001c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ffa5 	bl	8001b68 <extend_heap>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d021      	beq.n	8001c68 <mm_malloc+0xc0>
			// Resend malloc request
			// Send malloc request to server
			req = (mem_request){.request = MALLOC, .req_id=(++cur_id), .size = size, .ptr=NULL};
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <mm_malloc+0xcc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <mm_malloc+0xcc>)
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <mm_malloc+0xcc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8001c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c3a:	9b01      	ldr	r3, [sp, #4]
 8001c3c:	9310      	str	r3, [sp, #64]	; 0x40
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9311      	str	r3, [sp, #68]	; 0x44
			req_send(&req);
 8001c42:	ab0e      	add	r3, sp, #56	; 0x38
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f98c 	bl	8001f62 <req_send>
			req_receive(&response);
 8001c4a:	ab0a      	add	r3, sp, #40	; 0x28
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f993 	bl	8001f78 <req_receive>
			
			assert(response.ptr); // Should have valid response now
 8001c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <mm_malloc+0xbc>
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <mm_malloc+0xd0>)
 8001c5a:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <mm_malloc+0xd4>)
 8001c5c:	2156      	movs	r1, #86	; 0x56
 8001c5e:	4808      	ldr	r0, [pc, #32]	; (8001c80 <mm_malloc+0xd8>)
 8001c60:	f000 fc2c 	bl	80024bc <__assert_func>

			return(response.ptr);
 8001c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c66:	e000      	b.n	8001c6a <mm_malloc+0xc2>
		} else {
			// Not enough memory
			return NULL;
 8001c68:	2300      	movs	r3, #0
		}
	}
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	b015      	add	sp, #84	; 0x54
 8001c6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c72:	bf00      	nop
 8001c74:	20000cf8 	.word	0x20000cf8
 8001c78:	08004ba4 	.word	0x08004ba4
 8001c7c:	08004bf8 	.word	0x08004bf8
 8001c80:	08004bb4 	.word	0x08004bb4

08001c84 <mm_free>:

void mm_free(void *ptr)
{
 8001c84:	b500      	push	{lr}
 8001c86:	b087      	sub	sp, #28
 8001c88:	9001      	str	r0, [sp, #4]
	mem_request req = {.request=FREE, .req_id=(++cur_id), .size=0, .ptr=ptr};
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f88d 3008 	strb.w	r3, [sp, #8]
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <mm_free+0x34>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <mm_free+0x34>)
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <mm_free+0x34>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	9303      	str	r3, [sp, #12]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9304      	str	r3, [sp, #16]
 8001ca4:	9b01      	ldr	r3, [sp, #4]
 8001ca6:	9305      	str	r3, [sp, #20]
	req_send(&req);
 8001ca8:	ab02      	add	r3, sp, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f959 	bl	8001f62 <req_send>
}
 8001cb0:	bf00      	nop
 8001cb2:	b007      	add	sp, #28
 8001cb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cb8:	20000cf8 	.word	0x20000cf8

08001cbc <mm_realloc>:

void *mm_realloc(void *ptr, size_t size)
{
 8001cbc:	b500      	push	{lr}
 8001cbe:	b097      	sub	sp, #92	; 0x5c
 8001cc0:	9001      	str	r0, [sp, #4]
 8001cc2:	9100      	str	r1, [sp, #0]
    void *oldptr = ptr;
 8001cc4:	9b01      	ldr	r3, [sp, #4]
 8001cc6:	9315      	str	r3, [sp, #84]	; 0x54
	size_t next_alloc;
	mem_request req;
	mem_request response;

	// Special cases
	if (ptr == NULL) {
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <mm_realloc+0x1e>
		newptr = mm_malloc(size);
 8001cce:	9800      	ldr	r0, [sp, #0]
 8001cd0:	f7ff ff6a 	bl	8001ba8 <mm_malloc>
 8001cd4:	9013      	str	r0, [sp, #76]	; 0x4c
		return newptr;
 8001cd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001cd8:	e052      	b.n	8001d80 <mm_realloc+0xc4>
	}
	if (size == 0) {
 8001cda:	9b00      	ldr	r3, [sp, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d104      	bne.n	8001cea <mm_realloc+0x2e>
		mm_free(ptr);
 8001ce0:	9801      	ldr	r0, [sp, #4]
 8001ce2:	f7ff ffcf 	bl	8001c84 <mm_free>
		return ptr;
 8001ce6:	9b01      	ldr	r3, [sp, #4]
 8001ce8:	e04a      	b.n	8001d80 <mm_realloc+0xc4>
	}

	// Send realloc request to server
	req = (mem_request){.request = REALLOC, .req_id=(++cur_id), .size = asize, .ptr=ptr};
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <mm_realloc+0xcc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <mm_realloc+0xcc>)
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <mm_realloc+0xcc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
 8001cfe:	9310      	str	r3, [sp, #64]	; 0x40
 8001d00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001d02:	9311      	str	r3, [sp, #68]	; 0x44
 8001d04:	9b01      	ldr	r3, [sp, #4]
 8001d06:	9312      	str	r3, [sp, #72]	; 0x48
	req_send(&req);
 8001d08:	ab0f      	add	r3, sp, #60	; 0x3c
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f929 	bl	8001f62 <req_send>
	req_receive(&response);
 8001d10:	ab0b      	add	r3, sp, #44	; 0x2c
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f930 	bl	8001f78 <req_receive>

	// Extend heap and redo request if needed
	if (response.size) {
 8001d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d020      	beq.n	8001d60 <mm_realloc+0xa4>
		if (extend_heap(response.size)) {
 8001d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff21 	bl	8001b68 <extend_heap>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d017      	beq.n	8001d5c <mm_realloc+0xa0>
			req = (mem_request){.request = REALLOC, .req_id=(++cur_id), .size = asize, .ptr=ptr};
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <mm_realloc+0xcc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <mm_realloc+0xcc>)
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <mm_realloc+0xcc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
 8001d40:	9310      	str	r3, [sp, #64]	; 0x40
 8001d42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001d44:	9311      	str	r3, [sp, #68]	; 0x44
 8001d46:	9b01      	ldr	r3, [sp, #4]
 8001d48:	9312      	str	r3, [sp, #72]	; 0x48
			req_send(&req);
 8001d4a:	ab0f      	add	r3, sp, #60	; 0x3c
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f908 	bl	8001f62 <req_send>
			req_receive(&response);
 8001d52:	ab0b      	add	r3, sp, #44	; 0x2c
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f90f 	bl	8001f78 <req_receive>
 8001d5a:	e001      	b.n	8001d60 <mm_realloc+0xa4>
		} else {
			// Not enough memory
			return NULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e00f      	b.n	8001d80 <mm_realloc+0xc4>
		}
	}

	if (response.ptr == oldptr) {
 8001d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d101      	bne.n	8001d6c <mm_realloc+0xb0>
		// Address stays the same
		return response.ptr;
 8001d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d6a:	e009      	b.n	8001d80 <mm_realloc+0xc4>
	} else {
		// Need to copy to new location
		memcpy(response.ptr, oldptr, size);
 8001d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d6e:	9a00      	ldr	r2, [sp, #0]
 8001d70:	9915      	ldr	r1, [sp, #84]	; 0x54
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fbfc 	bl	8002570 <memcpy>
		mm_free(oldptr);
 8001d78:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001d7a:	f7ff ff83 	bl	8001c84 <mm_free>
		return response.ptr;
 8001d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	}
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	b017      	add	sp, #92	; 0x5c
 8001d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d88:	20000cf8 	.word	0x20000cf8

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0c      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4905      	ldr	r1, [pc, #20]	; (8001dbc <__NVIC_EnableIRQ+0x30>)
 8001da6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001db6:	bf00      	nop
 8001db8:	b002      	add	sp, #8
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	9100      	str	r1, [sp, #0]
 8001dc6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dca:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db0a      	blt.n	8001de8 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	9b00      	ldr	r3, [sp, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x48>)
 8001dd8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de6:	e00b      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	9b00      	ldr	r3, [sp, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	b002      	add	sp, #8
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <TIM2_IRQHandler>:

/*************************************************
* timer 2 interrupt handler
*************************************************/
void TIM2_IRQHandler(void)
{
 8001e10:	b508      	push	{r3, lr}
	systime++;
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <TIM2_IRQHandler+0x5c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <TIM2_IRQHandler+0x5c>)
 8001e1a:	6013      	str	r3, [r2, #0]
	register size_t * stack_top asm("sp");

	// Stall if stack is overflowing to heap
	if (mem_heap_hi() > (void *)(stack_top)) {
 8001e1c:	f7ff fe88 	bl	8001b30 <mem_heap_hi>
 8001e20:	4602      	mov	r2, r0
 8001e22:	466b      	mov	r3, sp
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d908      	bls.n	8001e3a <TIM2_IRQHandler+0x2a>
		sprintf(msg, "Stack overflow detected");
 8001e28:	4911      	ldr	r1, [pc, #68]	; (8001e70 <TIM2_IRQHandler+0x60>)
 8001e2a:	4812      	ldr	r0, [pc, #72]	; (8001e74 <TIM2_IRQHandler+0x64>)
 8001e2c:	f000 fdb2 	bl	8002994 <siprintf>
		var_print(msg);
 8001e30:	4810      	ldr	r0, [pc, #64]	; (8001e74 <TIM2_IRQHandler+0x64>)
 8001e32:	f000 f857 	bl	8001ee4 <var_print>
		loop();
 8001e36:	f000 f853 	bl	8001ee0 <loop>
	}

    // clear interrupt status
    if (TIM2->DIER & 0x01) {
 8001e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00e      	beq.n	8001e66 <TIM2_IRQHandler+0x56>
        if (TIM2->SR & 0x01) {
 8001e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <TIM2_IRQHandler+0x56>
            TIM2->SR &= ~(1U << 0);
 8001e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6113      	str	r3, [r2, #16]
        }
    }
}
 8001e66:	bf00      	nop
 8001e68:	bd08      	pop	{r3, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200000f0 	.word	0x200000f0
 8001e70:	08004bc8 	.word	0x08004bc8
 8001e74:	200008f4 	.word	0x200008f4

08001e78 <get_time>:

// Returns system time in ms
size_t get_time(void) {
	return systime;
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <get_time+0x8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	4770      	bx	lr
 8001e80:	200000f0 	.word	0x200000f0

08001e84 <timer_init>:

/*************************************************
* main code starts from here
*************************************************/
void timer_init(void)
{
 8001e84:	b508      	push	{r3, lr}
    /* set system clock to 100 Mhz */
    set_sysclk_to_100();
 8001e86:	f000 fa8d 	bl	80023a4 <set_sysclk_to_100>

    // enable TIM2 clock (bit0)
    RCC->APB1ENR |= (1 << 0);
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <timer_init+0x58>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a13      	ldr	r2, [pc, #76]	; (8001edc <timer_init+0x58>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40

	// For STM32F411: 100M/4*2 = 50M, 50M/4999+1 = 10 khz clock speed
    TIM2->PSC = 4999;
 8001e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e9a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

	// Set auto reload value to 100 to give 1 ms timer interrupts
    TIM2->ARR = 10;
 8001ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ea4:	220a      	movs	r2, #10
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c

    // Update Interrupt Enable
    TIM2->DIER |= (1 << 0);
 8001ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM2_IRQn, 2); // Priority level 2
 8001eb8:	2102      	movs	r1, #2
 8001eba:	201c      	movs	r0, #28
 8001ebc:	f7ff ff80 	bl	8001dc0 <__NVIC_SetPriority>
    // enable TIM2 IRQ from NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8001ec0:	201c      	movs	r0, #28
 8001ec2:	f7ff ff63 	bl	8001d8c <__NVIC_EnableIRQ>

    // Enable Timer 2 module (CEN, bit0)
    TIM2->CR1 |= (1 << 0);
 8001ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6013      	str	r3, [r2, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	bd08      	pop	{r3, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800

08001ee0 <loop>:
char output_str[MAXLINE*2];
char msg[MAXLINE];
size_t output_offset=0;

void loop() {
	while(1) {}
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <loop>

08001ee4 <var_print>:
}

// Append printed output to output_str
void var_print(char * str) {
 8001ee4:	b500      	push	{lr}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	9001      	str	r0, [sp, #4]
	if (output_offset + strlen(str) <= MAXLINE*2) {
 8001eea:	9801      	ldr	r0, [sp, #4]
 8001eec:	f7fe f958 	bl	80001a0 <strlen>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <var_print+0x2c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001efc:	d804      	bhi.n	8001f08 <var_print+0x24>
		strcat(output_str, str);
 8001efe:	9901      	ldr	r1, [sp, #4]
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <var_print+0x30>)
 8001f02:	f000 fdd8 	bl	8002ab6 <strcat>
	} else {
		while(1){}
	}
}
 8001f06:	e000      	b.n	8001f0a <var_print+0x26>
		while(1){}
 8001f08:	e7fe      	b.n	8001f08 <var_print+0x24>
}
 8001f0a:	b003      	add	sp, #12
 8001f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f10:	20000cf4 	.word	0x20000cf4
 8001f14:	200000f4 	.word	0x200000f4

08001f18 <send>:
	}
	return msg;
}

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 8001f18:	b500      	push	{lr}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	9001      	str	r0, [sp, #4]
 8001f1e:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_start(data, size);
 8001f20:	9900      	ldr	r1, [sp, #0]
 8001f22:	9801      	ldr	r0, [sp, #4]
 8001f24:	f000 f952 	bl	80021cc <uart_tx_start>
		uart_tx_wait();
 8001f28:	f000 f97c 	bl	8002224 <uart_tx_wait>
	} else {
		uart_send(data, size);
	}
}
 8001f2c:	bf00      	nop
 8001f2e:	b003      	add	sp, #12
 8001f30:	f85d fb04 	ldr.w	pc, [sp], #4

08001f34 <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 8001f34:	b500      	push	{lr}
 8001f36:	b083      	sub	sp, #12
 8001f38:	9001      	str	r0, [sp, #4]
 8001f3a:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_rx_start(buffer, size);
 8001f3c:	9900      	ldr	r1, [sp, #0]
 8001f3e:	9801      	ldr	r0, [sp, #4]
 8001f40:	f000 f97a 	bl	8002238 <uart_rx_start>
		uart_rx_wait();
 8001f44:	f000 f9a4 	bl	8002290 <uart_rx_wait>
	} else {
		uart_receive(buffer, size);
	}
}
 8001f48:	bf00      	nop
 8001f4a:	b003      	add	sp, #12
 8001f4c:	f85d fb04 	ldr.w	pc, [sp], #4

08001f50 <mem_req_setup>:

// Initialize request communication
void mem_req_setup(void) {
 8001f50:	b508      	push	{r3, lr}
	uart_init();
 8001f52:	f000 f88f 	bl	8002074 <uart_init>
	led_init();
 8001f56:	f000 f845 	bl	8001fe4 <led_init>
	uart_dma_init();
 8001f5a:	f000 f9d7 	bl	800230c <uart_dma_init>
	
}
 8001f5e:	bf00      	nop
 8001f60:	bd08      	pop	{r3, pc}

08001f62 <req_send>:

// Send request
void req_send(mem_request * buffer) {
 8001f62:	b500      	push	{lr}
 8001f64:	b083      	sub	sp, #12
 8001f66:	9001      	str	r0, [sp, #4]
	send(buffer, sizeof(mem_request));
 8001f68:	2110      	movs	r1, #16
 8001f6a:	9801      	ldr	r0, [sp, #4]
 8001f6c:	f7ff ffd4 	bl	8001f18 <send>
}
 8001f70:	bf00      	nop
 8001f72:	b003      	add	sp, #12
 8001f74:	f85d fb04 	ldr.w	pc, [sp], #4

08001f78 <req_receive>:

// Wait for response
void req_receive(mem_request * buffer) {
 8001f78:	b500      	push	{lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	9001      	str	r0, [sp, #4]
	receive(buffer, sizeof(mem_request));
 8001f7e:	2110      	movs	r1, #16
 8001f80:	9801      	ldr	r0, [sp, #4]
 8001f82:	f7ff ffd7 	bl	8001f34 <receive>
}
 8001f86:	bf00      	nop
 8001f88:	b003      	add	sp, #12
 8001f8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001f90 <uart_pin_setup>:
}

// Setup GPIO A2 and A3 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOA clock, bit 0 on AHB1ENR
    RCC->AHB1ENR |= (1 << 0);
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <uart_pin_setup+0x4c>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <uart_pin_setup+0x4c>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6313      	str	r3, [r2, #48]	; 0x30

    // Set pin modes as alternate mode 7 (pins 2 and 3)
    // USART2 TX and RX pins are PA2 and PA3 respectively
    GPIOA->MODER &= ~(0xFU << 4); // Reset bits 4:5 for PA2 and 6:7 for PA3
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <uart_pin_setup+0x50>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <uart_pin_setup+0x50>)
 8001fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAU << 4); // Set   bits 4:5 for PA2 and 6:7 for PA3 to alternate mode (10)
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <uart_pin_setup+0x50>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <uart_pin_setup+0x50>)
 8001fae:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001fb2:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOA->OSPEEDR |= 0x000000A0; // Set pin 2/3 to high speed mode (0b10)
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <uart_pin_setup+0x50>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <uart_pin_setup+0x50>)
 8001fba:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001fbe:	6093      	str	r3, [r2, #8]

    // Choose AF7 for USART2 in Alternate Function registers
    GPIOA->AFR[0] |= (0x7 << 8); // for pin A2
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <uart_pin_setup+0x50>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <uart_pin_setup+0x50>)
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fca:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x7 << 12); // for pin A3
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <uart_pin_setup+0x50>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <uart_pin_setup+0x50>)
 8001fd2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001fd6:	6213      	str	r3, [r2, #32]
}
 8001fd8:	bf00      	nop
 8001fda:	4770      	bx	lr
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOD clock
	RCC->AHB1ENR |= 0x00000008;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <led_init+0x34>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <led_init+0x34>)
 8001fea:	f043 0308 	orr.w	r3, r3, #8
 8001fee:	6313      	str	r3, [r2, #48]	; 0x30

	// Turn on output mode
	GPIOD->MODER &= 0x00FFFFFF;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <led_init+0x38>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a09      	ldr	r2, [pc, #36]	; (800201c <led_init+0x38>)
 8001ff6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ffa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0x55000000;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <led_init+0x38>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <led_init+0x38>)
 8002002:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8002006:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOD->ODR &= 0x0FFF;
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <led_init+0x38>)
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	4a03      	ldr	r2, [pc, #12]	; (800201c <led_init+0x38>)
 800200e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002012:	6153      	str	r3, [r2, #20]
}
 8002014:	bf00      	nop
 8002016:	4770      	bx	lr
 8002018:	40023800 	.word	0x40023800
 800201c:	40020c00 	.word	0x40020c00

08002020 <uart_enable>:

// Initialize UART 2
static void uart_enable(void) {
    // enable USART2 clock, bit 17 on APB1ENR
    RCC->APB1ENR |= (1 << 17);
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <uart_enable+0x4c>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <uart_enable+0x4c>)
 8002026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202a:	6413      	str	r3, [r2, #64]	; 0x40

    // USART2 parity control, bit 9
    // USART2->CR1 |= (0 << 9); // 0 - no parity

    // USART2 RX enable, RE bit 2
    USART2->CR1 |= (1 << 2);
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <uart_enable+0x50>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <uart_enable+0x50>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	60d3      	str	r3, [r2, #12]
    // USART2 TX enable, TE bit 3
    USART2->CR1 |= (1 << 3);
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <uart_enable+0x50>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <uart_enable+0x50>)
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	60d3      	str	r3, [r2, #12]

    // Enable usart2 - UE, bit 13
    USART2->CR1 |= (1 << 13);
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <uart_enable+0x50>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a09      	ldr	r2, [pc, #36]	; (8002070 <uart_enable+0x50>)
 800204a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800204e:	60d3      	str	r3, [r2, #12]
	// For STM32F411: fCK = 25 Mhz (Sysclk/4), Baudrate = 115200, OVER8 = 0
	// USARTDIV = fCK / baud / 8 * (2-OVER8)
	// USARTDIV = 25Mhz / 115200 / 16 = 13.5633
	// Fraction: 0.5633*16 = 9
	// Mantissa: 13
    USART2->BRR |= (13 << 4); // Mantissa
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <uart_enable+0x50>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <uart_enable+0x50>)
 8002056:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800205a:	6093      	str	r3, [r2, #8]
    USART2->BRR |= 9; // Fraction
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <uart_enable+0x50>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a03      	ldr	r2, [pc, #12]	; (8002070 <uart_enable+0x50>)
 8002062:	f043 0309 	orr.w	r3, r3, #9
 8002066:	6093      	str	r3, [r2, #8]
}	
 8002068:	bf00      	nop
 800206a:	4770      	bx	lr
 800206c:	40023800 	.word	0x40023800
 8002070:	40004400 	.word	0x40004400

08002074 <uart_init>:

void uart_init(void)
{
 8002074:	b508      	push	{r3, lr}
    /* set system clock to 100 Mhz */
    set_sysclk_to_100();
 8002076:	f000 f995 	bl	80023a4 <set_sysclk_to_100>

	uart_pin_setup();
 800207a:	f7ff ff89 	bl	8001f90 <uart_pin_setup>
	uart_enable();
 800207e:	f7ff ffcf 	bl	8002020 <uart_enable>
}
 8002082:	bf00      	nop
 8002084:	bd08      	pop	{r3, pc}
	...

08002088 <__NVIC_EnableIRQ>:
{
 8002088:	b082      	sub	sp, #8
 800208a:	4603      	mov	r3, r0
 800208c:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0c      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002098:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4905      	ldr	r1, [pc, #20]	; (80020b8 <__NVIC_EnableIRQ+0x30>)
 80020a2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020b2:	bf00      	nop
 80020b4:	b002      	add	sp, #8
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
{
 80020bc:	b082      	sub	sp, #8
 80020be:	4603      	mov	r3, r0
 80020c0:	9100      	str	r1, [sp, #0]
 80020c2:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	db0a      	blt.n	80020e4 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	9b00      	ldr	r3, [sp, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x48>)
 80020d4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020e2:	e00b      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e4:	9b00      	ldr	r3, [sp, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <__NVIC_SetPriority+0x4c>)
 80020ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	b002      	add	sp, #8
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <uart_tx_setup>:
static int transmitting=0;

// Setup uart transmission
static void uart_tx_setup(void) {
	// Clear control register
	DMA1_Stream6->CR = 0;
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <uart_tx_setup+0x54>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
	// Wait for DMA to disable
	while(DMA1_Stream6->CR & (1<<0));
 8002112:	bf00      	nop
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <uart_tx_setup+0x54>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f9      	bne.n	8002114 <uart_tx_setup+0x8>
	// Select channel 4 for usart2_tx
	DMA1_Stream6->CR |= (0x4<<25);
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <uart_tx_setup+0x54>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <uart_tx_setup+0x54>)
 8002126:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800212a:	6013      	str	r3, [r2, #0]
	// Enable tx complete interrupt
	DMA1_Stream6->CR |= DMA_SxCR_TCIE;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <uart_tx_setup+0x54>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <uart_tx_setup+0x54>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	6013      	str	r3, [r2, #0]
	// Enable memory increment mode
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <uart_tx_setup+0x54>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a08      	ldr	r2, [pc, #32]	; (8002160 <uart_tx_setup+0x54>)
 800213e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002142:	6013      	str	r3, [r2, #0]
	// Priority level high
	DMA1_Stream6->CR |= (0x2<<16);
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <uart_tx_setup+0x54>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a05      	ldr	r2, [pc, #20]	; (8002160 <uart_tx_setup+0x54>)
 800214a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214e:	6013      	str	r3, [r2, #0]
	// DIR bit set to 01: source SxM0AR, dest SxPAR
	DMA1_Stream6->CR |= (0x1 << 6);
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <uart_tx_setup+0x54>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a02      	ldr	r2, [pc, #8]	; (8002160 <uart_tx_setup+0x54>)
 8002156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	4770      	bx	lr
 8002160:	400260a0 	.word	0x400260a0

08002164 <uart_rx_setup>:

// Setup uart reception
static void uart_rx_setup(void) {
	// Enable receive DMA
	USART2->CR3 |= USART_CR3_DMAR;
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <uart_rx_setup+0x60>)
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <uart_rx_setup+0x60>)
 800216a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216e:	6153      	str	r3, [r2, #20]
	// Clear control register
	DMA1_Stream5->CR = 0;
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <uart_rx_setup+0x64>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
	// Wait for DMA to disable
	while(DMA1_Stream5->CR & (1<<0));
 8002176:	bf00      	nop
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <uart_rx_setup+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f9      	bne.n	8002178 <uart_rx_setup+0x14>
	// Select channel 4 for usart2_rx
	DMA1_Stream5->CR |= (0x4<<25);
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <uart_rx_setup+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <uart_rx_setup+0x64>)
 800218a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800218e:	6013      	str	r3, [r2, #0]
	// Enable rx complete interrupt
	DMA1_Stream5->CR |= DMA_SxCR_TCIE;
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <uart_rx_setup+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <uart_rx_setup+0x64>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	6013      	str	r3, [r2, #0]
	// Enable memory increment mode
	DMA1_Stream5->CR |= DMA_SxCR_MINC;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <uart_rx_setup+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <uart_rx_setup+0x64>)
 80021a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a6:	6013      	str	r3, [r2, #0]
	// Priority level high
	DMA1_Stream5->CR |= (0x2<<16);
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <uart_rx_setup+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <uart_rx_setup+0x64>)
 80021ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b2:	6013      	str	r3, [r2, #0]
	// DIR bit set to 00: source SxPAR, dest SxM0AR
	DMA1_Stream5->CR &= ~(0xC << 6);
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <uart_rx_setup+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a03      	ldr	r2, [pc, #12]	; (80021c8 <uart_rx_setup+0x64>)
 80021ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	4770      	bx	lr
 80021c4:	40004400 	.word	0x40004400
 80021c8:	40026088 	.word	0x40026088

080021cc <uart_tx_start>:

// Start uart transmission of size bytes of data
void uart_tx_start(void * data, size_t size) {
 80021cc:	b500      	push	{lr}
 80021ce:	b083      	sub	sp, #12
 80021d0:	9001      	str	r0, [sp, #4]
 80021d2:	9100      	str	r1, [sp, #0]
	uart_tx_wait();
 80021d4:	f000 f826 	bl	8002224 <uart_tx_wait>
	uart_tx_setup();
 80021d8:	f7ff ff98 	bl	800210c <uart_tx_setup>

	// Source memory address
	DMA1_Stream6->M0AR = (uint32_t)data;
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <uart_tx_start+0x4c>)
 80021de:	9b01      	ldr	r3, [sp, #4]
 80021e0:	60d3      	str	r3, [r2, #12]
	// Destination memory address
	DMA1_Stream6->PAR = (uint32_t)&(USART2->DR);
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <uart_tx_start+0x4c>)
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <uart_tx_start+0x50>)
 80021e6:	609a      	str	r2, [r3, #8]
	// Transfer size
	DMA1_Stream6->NDTR = size;
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <uart_tx_start+0x4c>)
 80021ea:	9b00      	ldr	r3, [sp, #0]
 80021ec:	6053      	str	r3, [r2, #4]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA1_Stream6_IRQn, 3);
 80021ee:	2103      	movs	r1, #3
 80021f0:	2011      	movs	r0, #17
 80021f2:	f7ff ff63 	bl	80020bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021f6:	2011      	movs	r0, #17
 80021f8:	f7ff ff46 	bl	8002088 <__NVIC_EnableIRQ>

	// Enable DMA
	DMA1_Stream6->CR |= DMA_SxCR_EN;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <uart_tx_start+0x4c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a05      	ldr	r2, [pc, #20]	; (8002218 <uart_tx_start+0x4c>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6013      	str	r3, [r2, #0]

	transmitting=1;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <uart_tx_start+0x54>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	b003      	add	sp, #12
 8002212:	f85d fb04 	ldr.w	pc, [sp], #4
 8002216:	bf00      	nop
 8002218:	400260a0 	.word	0x400260a0
 800221c:	40004404 	.word	0x40004404
 8002220:	20000d00 	.word	0x20000d00

08002224 <uart_tx_wait>:

// Wait for uart transmission to finish
void uart_tx_wait(void) {
	while (transmitting);
 8002224:	bf00      	nop
 8002226:	4b03      	ldr	r3, [pc, #12]	; (8002234 <uart_tx_wait+0x10>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1fb      	bne.n	8002226 <uart_tx_wait+0x2>
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	4770      	bx	lr
 8002234:	20000d00 	.word	0x20000d00

08002238 <uart_rx_start>:

// Start uart reception of size bytes of data into buffer
void uart_rx_start(void * buffer, size_t size) {
 8002238:	b500      	push	{lr}
 800223a:	b083      	sub	sp, #12
 800223c:	9001      	str	r0, [sp, #4]
 800223e:	9100      	str	r1, [sp, #0]
	uart_rx_wait();
 8002240:	f000 f826 	bl	8002290 <uart_rx_wait>
	uart_rx_setup();
 8002244:	f7ff ff8e 	bl	8002164 <uart_rx_setup>

	// Source memory address
	DMA1_Stream5->PAR = (uint32_t)&(USART2->DR);
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <uart_rx_start+0x4c>)
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <uart_rx_start+0x50>)
 800224c:	609a      	str	r2, [r3, #8]
	// Destination memory address
	DMA1_Stream5->M0AR = (uint32_t)buffer;
 800224e:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <uart_rx_start+0x4c>)
 8002250:	9b01      	ldr	r3, [sp, #4]
 8002252:	60d3      	str	r3, [r2, #12]
	// Transfer size
	DMA1_Stream5->NDTR = size;
 8002254:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <uart_rx_start+0x4c>)
 8002256:	9b00      	ldr	r3, [sp, #0]
 8002258:	6053      	str	r3, [r2, #4]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA1_Stream5_IRQn, 3);
 800225a:	2103      	movs	r1, #3
 800225c:	2010      	movs	r0, #16
 800225e:	f7ff ff2d 	bl	80020bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002262:	2010      	movs	r0, #16
 8002264:	f7ff ff10 	bl	8002088 <__NVIC_EnableIRQ>

	// Enable DMA
	DMA1_Stream5->CR |= DMA_SxCR_EN;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <uart_rx_start+0x4c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a05      	ldr	r2, [pc, #20]	; (8002284 <uart_rx_start+0x4c>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

	receiving=1;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <uart_rx_start+0x54>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]
}
 800227a:	bf00      	nop
 800227c:	b003      	add	sp, #12
 800227e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002282:	bf00      	nop
 8002284:	40026088 	.word	0x40026088
 8002288:	40004404 	.word	0x40004404
 800228c:	20000cfc 	.word	0x20000cfc

08002290 <uart_rx_wait>:

// Wait for uart reception to finish
void uart_rx_wait(void) {
	while (receiving);
 8002290:	bf00      	nop
 8002292:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <uart_rx_wait+0x10>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1fb      	bne.n	8002292 <uart_rx_wait+0x2>
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	4770      	bx	lr
 80022a0:	20000cfc 	.word	0x20000cfc

080022a4 <DMA1_Stream5_IRQHandler>:

// UART reception finish interrupt
void DMA1_Stream5_IRQHandler(void)
{
    // clear stream receive complete interrupt - bit11 for stream 5
    if (DMA1->HISR & DMA_HISR_TCIF5) {
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <DMA1_Stream5_IRQHandler+0x30>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <DMA1_Stream5_IRQHandler+0x2a>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF5;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <DMA1_Stream5_IRQHandler+0x30>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <DMA1_Stream5_IRQHandler+0x30>)
 80022b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022ba:	60d3      	str	r3, [r2, #12]
		receiving = 0;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <DMA1_Stream5_IRQHandler+0x34>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
		// Disable receive DMA
		USART2->CR3 &= ~USART_CR3_DMAR;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <DMA1_Stream5_IRQHandler+0x38>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <DMA1_Stream5_IRQHandler+0x38>)
 80022c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022cc:	6153      	str	r3, [r2, #20]
    }
}
 80022ce:	bf00      	nop
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40026000 	.word	0x40026000
 80022d8:	20000cfc 	.word	0x20000cfc
 80022dc:	40004400 	.word	0x40004400

080022e0 <DMA1_Stream6_IRQHandler>:

// UART transmission finish interrupt
void DMA1_Stream6_IRQHandler(void)
{
    // clear stream transfer complete interrupt - bit21 for stream 6
    if (DMA1->HISR & DMA_HISR_TCIF6) {
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <DMA1_Stream6_IRQHandler+0x24>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <DMA1_Stream6_IRQHandler+0x1e>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF6;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <DMA1_Stream6_IRQHandler+0x24>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <DMA1_Stream6_IRQHandler+0x24>)
 80022f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022f6:	60d3      	str	r3, [r2, #12]
		transmitting = 0;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <DMA1_Stream6_IRQHandler+0x28>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    }
}
 80022fe:	bf00      	nop
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40026000 	.word	0x40026000
 8002308:	20000d00 	.word	0x20000d00

0800230c <uart_dma_init>:

// Setup UART DMA
void uart_dma_init(void) {
	// Enable transmit DMA
	USART2->CR3 |= USART_CR3_DMAT;
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <uart_dma_init+0x34>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <uart_dma_init+0x34>)
 8002312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002316:	6153      	str	r3, [r2, #20]
	// Enable receive DMA
	USART2->CR3 |= USART_CR3_DMAR;
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <uart_dma_init+0x34>)
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	4a08      	ldr	r2, [pc, #32]	; (8002340 <uart_dma_init+0x34>)
 800231e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002322:	6153      	str	r3, [r2, #20]
	// Clear TC bit
	USART2->SR &= ~USART_SR_TC;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <uart_dma_init+0x34>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a05      	ldr	r2, [pc, #20]	; (8002340 <uart_dma_init+0x34>)
 800232a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800232e:	6013      	str	r3, [r2, #0]
	// Enable DMA1 clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <uart_dma_init+0x38>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4a03      	ldr	r2, [pc, #12]	; (8002344 <uart_dma_init+0x38>)
 8002336:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800233a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800233c:	bf00      	nop
 800233e:	4770      	bx	lr
 8002340:	40004400 	.word	0x40004400
 8002344:	40023800 	.word	0x40023800

08002348 <SystemInit>:
*************************************************/
void SystemInit(void)
{
	/* FPU settings, can be enabled from project makefile */
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <SystemInit+0x50>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <SystemInit+0x50>)
 8002350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <SystemInit+0x54>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0f      	ldr	r2, [pc, #60]	; (800239c <SystemInit+0x54>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <SystemInit+0x54>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <SystemInit+0x54>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <SystemInit+0x54>)
 8002370:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <SystemInit+0x54>)
 800237c:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <SystemInit+0x58>)
 800237e:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <SystemInit+0x54>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a05      	ldr	r2, [pc, #20]	; (800239c <SystemInit+0x54>)
 8002386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238a:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <SystemInit+0x54>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
}
 8002392:	bf00      	nop
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00
 800239c:	40023800 	.word	0x40023800
 80023a0:	24003010 	.word	0x24003010

080023a4 <set_sysclk_to_100>:
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_100(void)
{
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <set_sysclk_to_100+0xac>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <set_sysclk_to_100+0xac>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 80023b0:	bf00      	nop
 80023b2:	4b27      	ldr	r3, [pc, #156]	; (8002450 <set_sysclk_to_100+0xac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f9      	beq.n	80023b2 <set_sysclk_to_100+0xe>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <set_sysclk_to_100+0xac>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a23      	ldr	r2, [pc, #140]	; (8002450 <set_sysclk_to_100+0xac>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <set_sysclk_to_100+0xb0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a21      	ldr	r2, [pc, #132]	; (8002454 <set_sysclk_to_100+0xb0>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d4:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <set_sysclk_to_100+0xac>)
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <set_sysclk_to_100+0xac>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <set_sysclk_to_100+0xac>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <set_sysclk_to_100+0xac>)
 80023e4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80023e8:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /2 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (4 << 13);
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <set_sysclk_to_100+0xac>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <set_sysclk_to_100+0xac>)
 80023f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f4:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <set_sysclk_to_100+0xac>)
 80023f8:	4a17      	ldr	r2, [pc, #92]	; (8002458 <set_sysclk_to_100+0xb4>)
 80023fa:	605a      	str	r2, [r3, #4]
	               (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <set_sysclk_to_100+0xac>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <set_sysclk_to_100+0xac>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002406:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 8002408:	bf00      	nop
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <set_sysclk_to_100+0xac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f9      	beq.n	800240a <set_sysclk_to_100+0x66>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <set_sysclk_to_100+0xb8>)
 8002418:	f240 7205 	movw	r2, #1797	; 0x705
 800241c:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <set_sysclk_to_100+0xac>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <set_sysclk_to_100+0xac>)
 8002424:	f023 0303 	bic.w	r3, r3, #3
 8002428:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <set_sysclk_to_100+0xac>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4a08      	ldr	r2, [pc, #32]	; (8002450 <set_sysclk_to_100+0xac>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 8002436:	bf00      	nop
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <set_sysclk_to_100+0xac>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f9      	beq.n	8002438 <set_sysclk_to_100+0x94>

	// update SystemCoreClock variable
	SystemCoreClock = 100000000;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <set_sysclk_to_100+0xbc>)
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <set_sysclk_to_100+0xc0>)
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40007000 	.word	0x40007000
 8002458:	08416008 	.word	0x08416008
 800245c:	40023c00 	.word	0x40023c00
 8002460:	2000005c 	.word	0x2000005c
 8002464:	05f5e100 	.word	0x05f5e100

08002468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800246c:	480d      	ldr	r0, [pc, #52]	; (80024a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800246e:	490e      	ldr	r1, [pc, #56]	; (80024a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002470:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002474:	e002      	b.n	800247c <LoopCopyDataInit>

08002476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247a:	3304      	adds	r3, #4

0800247c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800247c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002480:	d3f9      	bcc.n	8002476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002484:	4c0b      	ldr	r4, [pc, #44]	; (80024b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002488:	e001      	b.n	800248e <LoopFillZerobss>

0800248a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800248c:	3204      	adds	r2, #4

0800248e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002490:	d3fb      	bcc.n	800248a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002492:	f7ff ff59 	bl	8002348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002496:	f000 f847 	bl	8002528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249a:	f7fe fb13 	bl	8000ac4 <main>
  bx  lr    
 800249e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80024ac:	08005494 	.word	0x08005494
  ldr r2, =_sbss
 80024b0:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80024b4:	20000d18 	.word	0x20000d18

080024b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC_IRQHandler>
	...

080024bc <__assert_func>:
 80024bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024be:	4614      	mov	r4, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <__assert_func+0x2c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4605      	mov	r5, r0
 80024c8:	68d8      	ldr	r0, [r3, #12]
 80024ca:	b14c      	cbz	r4, 80024e0 <__assert_func+0x24>
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <__assert_func+0x30>)
 80024ce:	9100      	str	r1, [sp, #0]
 80024d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80024d4:	4906      	ldr	r1, [pc, #24]	; (80024f0 <__assert_func+0x34>)
 80024d6:	462b      	mov	r3, r5
 80024d8:	f000 f814 	bl	8002504 <fiprintf>
 80024dc:	f000 fdbe 	bl	800305c <abort>
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__assert_func+0x38>)
 80024e2:	461c      	mov	r4, r3
 80024e4:	e7f3      	b.n	80024ce <__assert_func+0x12>
 80024e6:	bf00      	nop
 80024e8:	20000060 	.word	0x20000060
 80024ec:	08004c02 	.word	0x08004c02
 80024f0:	08004c0f 	.word	0x08004c0f
 80024f4:	08004c3d 	.word	0x08004c3d

080024f8 <__errno>:
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <__errno+0x8>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000060 	.word	0x20000060

08002504 <fiprintf>:
 8002504:	b40e      	push	{r1, r2, r3}
 8002506:	b503      	push	{r0, r1, lr}
 8002508:	4601      	mov	r1, r0
 800250a:	ab03      	add	r3, sp, #12
 800250c:	4805      	ldr	r0, [pc, #20]	; (8002524 <fiprintf+0x20>)
 800250e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002512:	6800      	ldr	r0, [r0, #0]
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	f000 f8ff 	bl	8002718 <_vfiprintf_r>
 800251a:	b002      	add	sp, #8
 800251c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002520:	b003      	add	sp, #12
 8002522:	4770      	bx	lr
 8002524:	20000060 	.word	0x20000060

08002528 <__libc_init_array>:
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	4d0d      	ldr	r5, [pc, #52]	; (8002560 <__libc_init_array+0x38>)
 800252c:	4c0d      	ldr	r4, [pc, #52]	; (8002564 <__libc_init_array+0x3c>)
 800252e:	1b64      	subs	r4, r4, r5
 8002530:	10a4      	asrs	r4, r4, #2
 8002532:	2600      	movs	r6, #0
 8002534:	42a6      	cmp	r6, r4
 8002536:	d109      	bne.n	800254c <__libc_init_array+0x24>
 8002538:	4d0b      	ldr	r5, [pc, #44]	; (8002568 <__libc_init_array+0x40>)
 800253a:	4c0c      	ldr	r4, [pc, #48]	; (800256c <__libc_init_array+0x44>)
 800253c:	f002 f8be 	bl	80046bc <_init>
 8002540:	1b64      	subs	r4, r4, r5
 8002542:	10a4      	asrs	r4, r4, #2
 8002544:	2600      	movs	r6, #0
 8002546:	42a6      	cmp	r6, r4
 8002548:	d105      	bne.n	8002556 <__libc_init_array+0x2e>
 800254a:	bd70      	pop	{r4, r5, r6, pc}
 800254c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002550:	4798      	blx	r3
 8002552:	3601      	adds	r6, #1
 8002554:	e7ee      	b.n	8002534 <__libc_init_array+0xc>
 8002556:	f855 3b04 	ldr.w	r3, [r5], #4
 800255a:	4798      	blx	r3
 800255c:	3601      	adds	r6, #1
 800255e:	e7f2      	b.n	8002546 <__libc_init_array+0x1e>
 8002560:	0800548c 	.word	0x0800548c
 8002564:	0800548c 	.word	0x0800548c
 8002568:	0800548c 	.word	0x0800548c
 800256c:	08005490 	.word	0x08005490

08002570 <memcpy>:
 8002570:	440a      	add	r2, r1
 8002572:	4291      	cmp	r1, r2
 8002574:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002578:	d100      	bne.n	800257c <memcpy+0xc>
 800257a:	4770      	bx	lr
 800257c:	b510      	push	{r4, lr}
 800257e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002586:	4291      	cmp	r1, r2
 8002588:	d1f9      	bne.n	800257e <memcpy+0xe>
 800258a:	bd10      	pop	{r4, pc}

0800258c <memset>:
 800258c:	4402      	add	r2, r0
 800258e:	4603      	mov	r3, r0
 8002590:	4293      	cmp	r3, r2
 8002592:	d100      	bne.n	8002596 <memset+0xa>
 8002594:	4770      	bx	lr
 8002596:	f803 1b01 	strb.w	r1, [r3], #1
 800259a:	e7f9      	b.n	8002590 <memset+0x4>

0800259c <sbrk_aligned>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	4e0e      	ldr	r6, [pc, #56]	; (80025d8 <sbrk_aligned+0x3c>)
 80025a0:	460c      	mov	r4, r1
 80025a2:	6831      	ldr	r1, [r6, #0]
 80025a4:	4605      	mov	r5, r0
 80025a6:	b911      	cbnz	r1, 80025ae <sbrk_aligned+0x12>
 80025a8:	f000 f9e4 	bl	8002974 <_sbrk_r>
 80025ac:	6030      	str	r0, [r6, #0]
 80025ae:	4621      	mov	r1, r4
 80025b0:	4628      	mov	r0, r5
 80025b2:	f000 f9df 	bl	8002974 <_sbrk_r>
 80025b6:	1c43      	adds	r3, r0, #1
 80025b8:	d00a      	beq.n	80025d0 <sbrk_aligned+0x34>
 80025ba:	1cc4      	adds	r4, r0, #3
 80025bc:	f024 0403 	bic.w	r4, r4, #3
 80025c0:	42a0      	cmp	r0, r4
 80025c2:	d007      	beq.n	80025d4 <sbrk_aligned+0x38>
 80025c4:	1a21      	subs	r1, r4, r0
 80025c6:	4628      	mov	r0, r5
 80025c8:	f000 f9d4 	bl	8002974 <_sbrk_r>
 80025cc:	3001      	adds	r0, #1
 80025ce:	d101      	bne.n	80025d4 <sbrk_aligned+0x38>
 80025d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80025d4:	4620      	mov	r0, r4
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
 80025d8:	20000d08 	.word	0x20000d08

080025dc <_malloc_r>:
 80025dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e0:	1ccd      	adds	r5, r1, #3
 80025e2:	f025 0503 	bic.w	r5, r5, #3
 80025e6:	3508      	adds	r5, #8
 80025e8:	2d0c      	cmp	r5, #12
 80025ea:	bf38      	it	cc
 80025ec:	250c      	movcc	r5, #12
 80025ee:	2d00      	cmp	r5, #0
 80025f0:	4607      	mov	r7, r0
 80025f2:	db01      	blt.n	80025f8 <_malloc_r+0x1c>
 80025f4:	42a9      	cmp	r1, r5
 80025f6:	d905      	bls.n	8002604 <_malloc_r+0x28>
 80025f8:	230c      	movs	r3, #12
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	2600      	movs	r6, #0
 80025fe:	4630      	mov	r0, r6
 8002600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002604:	4e2e      	ldr	r6, [pc, #184]	; (80026c0 <_malloc_r+0xe4>)
 8002606:	f000 ff8d 	bl	8003524 <__malloc_lock>
 800260a:	6833      	ldr	r3, [r6, #0]
 800260c:	461c      	mov	r4, r3
 800260e:	bb34      	cbnz	r4, 800265e <_malloc_r+0x82>
 8002610:	4629      	mov	r1, r5
 8002612:	4638      	mov	r0, r7
 8002614:	f7ff ffc2 	bl	800259c <sbrk_aligned>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	4604      	mov	r4, r0
 800261c:	d14d      	bne.n	80026ba <_malloc_r+0xde>
 800261e:	6834      	ldr	r4, [r6, #0]
 8002620:	4626      	mov	r6, r4
 8002622:	2e00      	cmp	r6, #0
 8002624:	d140      	bne.n	80026a8 <_malloc_r+0xcc>
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	4631      	mov	r1, r6
 800262a:	4638      	mov	r0, r7
 800262c:	eb04 0803 	add.w	r8, r4, r3
 8002630:	f000 f9a0 	bl	8002974 <_sbrk_r>
 8002634:	4580      	cmp	r8, r0
 8002636:	d13a      	bne.n	80026ae <_malloc_r+0xd2>
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	3503      	adds	r5, #3
 800263c:	1aed      	subs	r5, r5, r3
 800263e:	f025 0503 	bic.w	r5, r5, #3
 8002642:	3508      	adds	r5, #8
 8002644:	2d0c      	cmp	r5, #12
 8002646:	bf38      	it	cc
 8002648:	250c      	movcc	r5, #12
 800264a:	4629      	mov	r1, r5
 800264c:	4638      	mov	r0, r7
 800264e:	f7ff ffa5 	bl	800259c <sbrk_aligned>
 8002652:	3001      	adds	r0, #1
 8002654:	d02b      	beq.n	80026ae <_malloc_r+0xd2>
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	442b      	add	r3, r5
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	e00e      	b.n	800267c <_malloc_r+0xa0>
 800265e:	6822      	ldr	r2, [r4, #0]
 8002660:	1b52      	subs	r2, r2, r5
 8002662:	d41e      	bmi.n	80026a2 <_malloc_r+0xc6>
 8002664:	2a0b      	cmp	r2, #11
 8002666:	d916      	bls.n	8002696 <_malloc_r+0xba>
 8002668:	1961      	adds	r1, r4, r5
 800266a:	42a3      	cmp	r3, r4
 800266c:	6025      	str	r5, [r4, #0]
 800266e:	bf18      	it	ne
 8002670:	6059      	strne	r1, [r3, #4]
 8002672:	6863      	ldr	r3, [r4, #4]
 8002674:	bf08      	it	eq
 8002676:	6031      	streq	r1, [r6, #0]
 8002678:	5162      	str	r2, [r4, r5]
 800267a:	604b      	str	r3, [r1, #4]
 800267c:	4638      	mov	r0, r7
 800267e:	f104 060b 	add.w	r6, r4, #11
 8002682:	f000 ff55 	bl	8003530 <__malloc_unlock>
 8002686:	f026 0607 	bic.w	r6, r6, #7
 800268a:	1d23      	adds	r3, r4, #4
 800268c:	1af2      	subs	r2, r6, r3
 800268e:	d0b6      	beq.n	80025fe <_malloc_r+0x22>
 8002690:	1b9b      	subs	r3, r3, r6
 8002692:	50a3      	str	r3, [r4, r2]
 8002694:	e7b3      	b.n	80025fe <_malloc_r+0x22>
 8002696:	6862      	ldr	r2, [r4, #4]
 8002698:	42a3      	cmp	r3, r4
 800269a:	bf0c      	ite	eq
 800269c:	6032      	streq	r2, [r6, #0]
 800269e:	605a      	strne	r2, [r3, #4]
 80026a0:	e7ec      	b.n	800267c <_malloc_r+0xa0>
 80026a2:	4623      	mov	r3, r4
 80026a4:	6864      	ldr	r4, [r4, #4]
 80026a6:	e7b2      	b.n	800260e <_malloc_r+0x32>
 80026a8:	4634      	mov	r4, r6
 80026aa:	6876      	ldr	r6, [r6, #4]
 80026ac:	e7b9      	b.n	8002622 <_malloc_r+0x46>
 80026ae:	230c      	movs	r3, #12
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4638      	mov	r0, r7
 80026b4:	f000 ff3c 	bl	8003530 <__malloc_unlock>
 80026b8:	e7a1      	b.n	80025fe <_malloc_r+0x22>
 80026ba:	6025      	str	r5, [r4, #0]
 80026bc:	e7de      	b.n	800267c <_malloc_r+0xa0>
 80026be:	bf00      	nop
 80026c0:	20000d04 	.word	0x20000d04

080026c4 <__sfputc_r>:
 80026c4:	6893      	ldr	r3, [r2, #8]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	b410      	push	{r4}
 80026cc:	6093      	str	r3, [r2, #8]
 80026ce:	da08      	bge.n	80026e2 <__sfputc_r+0x1e>
 80026d0:	6994      	ldr	r4, [r2, #24]
 80026d2:	42a3      	cmp	r3, r4
 80026d4:	db01      	blt.n	80026da <__sfputc_r+0x16>
 80026d6:	290a      	cmp	r1, #10
 80026d8:	d103      	bne.n	80026e2 <__sfputc_r+0x1e>
 80026da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026de:	f000 bbeb 	b.w	8002eb8 <__swbuf_r>
 80026e2:	6813      	ldr	r3, [r2, #0]
 80026e4:	1c58      	adds	r0, r3, #1
 80026e6:	6010      	str	r0, [r2, #0]
 80026e8:	7019      	strb	r1, [r3, #0]
 80026ea:	4608      	mov	r0, r1
 80026ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <__sfputs_r>:
 80026f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f4:	4606      	mov	r6, r0
 80026f6:	460f      	mov	r7, r1
 80026f8:	4614      	mov	r4, r2
 80026fa:	18d5      	adds	r5, r2, r3
 80026fc:	42ac      	cmp	r4, r5
 80026fe:	d101      	bne.n	8002704 <__sfputs_r+0x12>
 8002700:	2000      	movs	r0, #0
 8002702:	e007      	b.n	8002714 <__sfputs_r+0x22>
 8002704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002708:	463a      	mov	r2, r7
 800270a:	4630      	mov	r0, r6
 800270c:	f7ff ffda 	bl	80026c4 <__sfputc_r>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d1f3      	bne.n	80026fc <__sfputs_r+0xa>
 8002714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002718 <_vfiprintf_r>:
 8002718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800271c:	460d      	mov	r5, r1
 800271e:	b09d      	sub	sp, #116	; 0x74
 8002720:	4614      	mov	r4, r2
 8002722:	4698      	mov	r8, r3
 8002724:	4606      	mov	r6, r0
 8002726:	b118      	cbz	r0, 8002730 <_vfiprintf_r+0x18>
 8002728:	6983      	ldr	r3, [r0, #24]
 800272a:	b90b      	cbnz	r3, 8002730 <_vfiprintf_r+0x18>
 800272c:	f000 fdc8 	bl	80032c0 <__sinit>
 8002730:	4b88      	ldr	r3, [pc, #544]	; (8002954 <_vfiprintf_r+0x23c>)
 8002732:	429d      	cmp	r5, r3
 8002734:	d11b      	bne.n	800276e <_vfiprintf_r+0x56>
 8002736:	6875      	ldr	r5, [r6, #4]
 8002738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800273a:	07d9      	lsls	r1, r3, #31
 800273c:	d405      	bmi.n	800274a <_vfiprintf_r+0x32>
 800273e:	89ab      	ldrh	r3, [r5, #12]
 8002740:	059a      	lsls	r2, r3, #22
 8002742:	d402      	bmi.n	800274a <_vfiprintf_r+0x32>
 8002744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002746:	f000 fe59 	bl	80033fc <__retarget_lock_acquire_recursive>
 800274a:	89ab      	ldrh	r3, [r5, #12]
 800274c:	071b      	lsls	r3, r3, #28
 800274e:	d501      	bpl.n	8002754 <_vfiprintf_r+0x3c>
 8002750:	692b      	ldr	r3, [r5, #16]
 8002752:	b9eb      	cbnz	r3, 8002790 <_vfiprintf_r+0x78>
 8002754:	4629      	mov	r1, r5
 8002756:	4630      	mov	r0, r6
 8002758:	f000 fc12 	bl	8002f80 <__swsetup_r>
 800275c:	b1c0      	cbz	r0, 8002790 <_vfiprintf_r+0x78>
 800275e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002760:	07dc      	lsls	r4, r3, #31
 8002762:	d50e      	bpl.n	8002782 <_vfiprintf_r+0x6a>
 8002764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002768:	b01d      	add	sp, #116	; 0x74
 800276a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800276e:	4b7a      	ldr	r3, [pc, #488]	; (8002958 <_vfiprintf_r+0x240>)
 8002770:	429d      	cmp	r5, r3
 8002772:	d101      	bne.n	8002778 <_vfiprintf_r+0x60>
 8002774:	68b5      	ldr	r5, [r6, #8]
 8002776:	e7df      	b.n	8002738 <_vfiprintf_r+0x20>
 8002778:	4b78      	ldr	r3, [pc, #480]	; (800295c <_vfiprintf_r+0x244>)
 800277a:	429d      	cmp	r5, r3
 800277c:	bf08      	it	eq
 800277e:	68f5      	ldreq	r5, [r6, #12]
 8002780:	e7da      	b.n	8002738 <_vfiprintf_r+0x20>
 8002782:	89ab      	ldrh	r3, [r5, #12]
 8002784:	0598      	lsls	r0, r3, #22
 8002786:	d4ed      	bmi.n	8002764 <_vfiprintf_r+0x4c>
 8002788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800278a:	f000 fe38 	bl	80033fe <__retarget_lock_release_recursive>
 800278e:	e7e9      	b.n	8002764 <_vfiprintf_r+0x4c>
 8002790:	2300      	movs	r3, #0
 8002792:	9309      	str	r3, [sp, #36]	; 0x24
 8002794:	2320      	movs	r3, #32
 8002796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800279a:	f8cd 800c 	str.w	r8, [sp, #12]
 800279e:	2330      	movs	r3, #48	; 0x30
 80027a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002960 <_vfiprintf_r+0x248>
 80027a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027a8:	f04f 0901 	mov.w	r9, #1
 80027ac:	4623      	mov	r3, r4
 80027ae:	469a      	mov	sl, r3
 80027b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027b4:	b10a      	cbz	r2, 80027ba <_vfiprintf_r+0xa2>
 80027b6:	2a25      	cmp	r2, #37	; 0x25
 80027b8:	d1f9      	bne.n	80027ae <_vfiprintf_r+0x96>
 80027ba:	ebba 0b04 	subs.w	fp, sl, r4
 80027be:	d00b      	beq.n	80027d8 <_vfiprintf_r+0xc0>
 80027c0:	465b      	mov	r3, fp
 80027c2:	4622      	mov	r2, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	4630      	mov	r0, r6
 80027c8:	f7ff ff93 	bl	80026f2 <__sfputs_r>
 80027cc:	3001      	adds	r0, #1
 80027ce:	f000 80a9 	beq.w	8002924 <_vfiprintf_r+0x20c>
 80027d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027d4:	445a      	add	r2, fp
 80027d6:	9209      	str	r2, [sp, #36]	; 0x24
 80027d8:	f89a 3000 	ldrb.w	r3, [sl]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80a1 	beq.w	8002924 <_vfiprintf_r+0x20c>
 80027e2:	2300      	movs	r3, #0
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027ec:	f10a 0a01 	add.w	sl, sl, #1
 80027f0:	9304      	str	r3, [sp, #16]
 80027f2:	9307      	str	r3, [sp, #28]
 80027f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027f8:	931a      	str	r3, [sp, #104]	; 0x68
 80027fa:	4654      	mov	r4, sl
 80027fc:	2205      	movs	r2, #5
 80027fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002802:	4857      	ldr	r0, [pc, #348]	; (8002960 <_vfiprintf_r+0x248>)
 8002804:	f7fd fcd4 	bl	80001b0 <memchr>
 8002808:	9a04      	ldr	r2, [sp, #16]
 800280a:	b9d8      	cbnz	r0, 8002844 <_vfiprintf_r+0x12c>
 800280c:	06d1      	lsls	r1, r2, #27
 800280e:	bf44      	itt	mi
 8002810:	2320      	movmi	r3, #32
 8002812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002816:	0713      	lsls	r3, r2, #28
 8002818:	bf44      	itt	mi
 800281a:	232b      	movmi	r3, #43	; 0x2b
 800281c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002820:	f89a 3000 	ldrb.w	r3, [sl]
 8002824:	2b2a      	cmp	r3, #42	; 0x2a
 8002826:	d015      	beq.n	8002854 <_vfiprintf_r+0x13c>
 8002828:	9a07      	ldr	r2, [sp, #28]
 800282a:	4654      	mov	r4, sl
 800282c:	2000      	movs	r0, #0
 800282e:	f04f 0c0a 	mov.w	ip, #10
 8002832:	4621      	mov	r1, r4
 8002834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002838:	3b30      	subs	r3, #48	; 0x30
 800283a:	2b09      	cmp	r3, #9
 800283c:	d94d      	bls.n	80028da <_vfiprintf_r+0x1c2>
 800283e:	b1b0      	cbz	r0, 800286e <_vfiprintf_r+0x156>
 8002840:	9207      	str	r2, [sp, #28]
 8002842:	e014      	b.n	800286e <_vfiprintf_r+0x156>
 8002844:	eba0 0308 	sub.w	r3, r0, r8
 8002848:	fa09 f303 	lsl.w	r3, r9, r3
 800284c:	4313      	orrs	r3, r2
 800284e:	9304      	str	r3, [sp, #16]
 8002850:	46a2      	mov	sl, r4
 8002852:	e7d2      	b.n	80027fa <_vfiprintf_r+0xe2>
 8002854:	9b03      	ldr	r3, [sp, #12]
 8002856:	1d19      	adds	r1, r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	9103      	str	r1, [sp, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	bfbb      	ittet	lt
 8002860:	425b      	neglt	r3, r3
 8002862:	f042 0202 	orrlt.w	r2, r2, #2
 8002866:	9307      	strge	r3, [sp, #28]
 8002868:	9307      	strlt	r3, [sp, #28]
 800286a:	bfb8      	it	lt
 800286c:	9204      	strlt	r2, [sp, #16]
 800286e:	7823      	ldrb	r3, [r4, #0]
 8002870:	2b2e      	cmp	r3, #46	; 0x2e
 8002872:	d10c      	bne.n	800288e <_vfiprintf_r+0x176>
 8002874:	7863      	ldrb	r3, [r4, #1]
 8002876:	2b2a      	cmp	r3, #42	; 0x2a
 8002878:	d134      	bne.n	80028e4 <_vfiprintf_r+0x1cc>
 800287a:	9b03      	ldr	r3, [sp, #12]
 800287c:	1d1a      	adds	r2, r3, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	9203      	str	r2, [sp, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	bfb8      	it	lt
 8002886:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800288a:	3402      	adds	r4, #2
 800288c:	9305      	str	r3, [sp, #20]
 800288e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8002970 <_vfiprintf_r+0x258>
 8002892:	7821      	ldrb	r1, [r4, #0]
 8002894:	2203      	movs	r2, #3
 8002896:	4650      	mov	r0, sl
 8002898:	f7fd fc8a 	bl	80001b0 <memchr>
 800289c:	b138      	cbz	r0, 80028ae <_vfiprintf_r+0x196>
 800289e:	9b04      	ldr	r3, [sp, #16]
 80028a0:	eba0 000a 	sub.w	r0, r0, sl
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	4082      	lsls	r2, r0
 80028a8:	4313      	orrs	r3, r2
 80028aa:	3401      	adds	r4, #1
 80028ac:	9304      	str	r3, [sp, #16]
 80028ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b2:	482c      	ldr	r0, [pc, #176]	; (8002964 <_vfiprintf_r+0x24c>)
 80028b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028b8:	2206      	movs	r2, #6
 80028ba:	f7fd fc79 	bl	80001b0 <memchr>
 80028be:	2800      	cmp	r0, #0
 80028c0:	d03f      	beq.n	8002942 <_vfiprintf_r+0x22a>
 80028c2:	4b29      	ldr	r3, [pc, #164]	; (8002968 <_vfiprintf_r+0x250>)
 80028c4:	bb1b      	cbnz	r3, 800290e <_vfiprintf_r+0x1f6>
 80028c6:	9b03      	ldr	r3, [sp, #12]
 80028c8:	3307      	adds	r3, #7
 80028ca:	f023 0307 	bic.w	r3, r3, #7
 80028ce:	3308      	adds	r3, #8
 80028d0:	9303      	str	r3, [sp, #12]
 80028d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028d4:	443b      	add	r3, r7
 80028d6:	9309      	str	r3, [sp, #36]	; 0x24
 80028d8:	e768      	b.n	80027ac <_vfiprintf_r+0x94>
 80028da:	fb0c 3202 	mla	r2, ip, r2, r3
 80028de:	460c      	mov	r4, r1
 80028e0:	2001      	movs	r0, #1
 80028e2:	e7a6      	b.n	8002832 <_vfiprintf_r+0x11a>
 80028e4:	2300      	movs	r3, #0
 80028e6:	3401      	adds	r4, #1
 80028e8:	9305      	str	r3, [sp, #20]
 80028ea:	4619      	mov	r1, r3
 80028ec:	f04f 0c0a 	mov.w	ip, #10
 80028f0:	4620      	mov	r0, r4
 80028f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028f6:	3a30      	subs	r2, #48	; 0x30
 80028f8:	2a09      	cmp	r2, #9
 80028fa:	d903      	bls.n	8002904 <_vfiprintf_r+0x1ec>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0c6      	beq.n	800288e <_vfiprintf_r+0x176>
 8002900:	9105      	str	r1, [sp, #20]
 8002902:	e7c4      	b.n	800288e <_vfiprintf_r+0x176>
 8002904:	fb0c 2101 	mla	r1, ip, r1, r2
 8002908:	4604      	mov	r4, r0
 800290a:	2301      	movs	r3, #1
 800290c:	e7f0      	b.n	80028f0 <_vfiprintf_r+0x1d8>
 800290e:	ab03      	add	r3, sp, #12
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	462a      	mov	r2, r5
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <_vfiprintf_r+0x254>)
 8002916:	a904      	add	r1, sp, #16
 8002918:	4630      	mov	r0, r6
 800291a:	f3af 8000 	nop.w
 800291e:	4607      	mov	r7, r0
 8002920:	1c78      	adds	r0, r7, #1
 8002922:	d1d6      	bne.n	80028d2 <_vfiprintf_r+0x1ba>
 8002924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002926:	07d9      	lsls	r1, r3, #31
 8002928:	d405      	bmi.n	8002936 <_vfiprintf_r+0x21e>
 800292a:	89ab      	ldrh	r3, [r5, #12]
 800292c:	059a      	lsls	r2, r3, #22
 800292e:	d402      	bmi.n	8002936 <_vfiprintf_r+0x21e>
 8002930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002932:	f000 fd64 	bl	80033fe <__retarget_lock_release_recursive>
 8002936:	89ab      	ldrh	r3, [r5, #12]
 8002938:	065b      	lsls	r3, r3, #25
 800293a:	f53f af13 	bmi.w	8002764 <_vfiprintf_r+0x4c>
 800293e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002940:	e712      	b.n	8002768 <_vfiprintf_r+0x50>
 8002942:	ab03      	add	r3, sp, #12
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	462a      	mov	r2, r5
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <_vfiprintf_r+0x254>)
 800294a:	a904      	add	r1, sp, #16
 800294c:	4630      	mov	r0, r6
 800294e:	f001 fa09 	bl	8003d64 <_printf_i>
 8002952:	e7e4      	b.n	800291e <_vfiprintf_r+0x206>
 8002954:	0800530c 	.word	0x0800530c
 8002958:	0800532c 	.word	0x0800532c
 800295c:	080052ec 	.word	0x080052ec
 8002960:	08004c44 	.word	0x08004c44
 8002964:	08004c4e 	.word	0x08004c4e
 8002968:	00000000 	.word	0x00000000
 800296c:	080026f3 	.word	0x080026f3
 8002970:	08004c4a 	.word	0x08004c4a

08002974 <_sbrk_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4d06      	ldr	r5, [pc, #24]	; (8002990 <_sbrk_r+0x1c>)
 8002978:	2300      	movs	r3, #0
 800297a:	4604      	mov	r4, r0
 800297c:	4608      	mov	r0, r1
 800297e:	602b      	str	r3, [r5, #0]
 8002980:	f001 fe84 	bl	800468c <_sbrk>
 8002984:	1c43      	adds	r3, r0, #1
 8002986:	d102      	bne.n	800298e <_sbrk_r+0x1a>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	b103      	cbz	r3, 800298e <_sbrk_r+0x1a>
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	bd38      	pop	{r3, r4, r5, pc}
 8002990:	20000d10 	.word	0x20000d10

08002994 <siprintf>:
 8002994:	b40e      	push	{r1, r2, r3}
 8002996:	b500      	push	{lr}
 8002998:	b09c      	sub	sp, #112	; 0x70
 800299a:	ab1d      	add	r3, sp, #116	; 0x74
 800299c:	9002      	str	r0, [sp, #8]
 800299e:	9006      	str	r0, [sp, #24]
 80029a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029a4:	4809      	ldr	r0, [pc, #36]	; (80029cc <siprintf+0x38>)
 80029a6:	9107      	str	r1, [sp, #28]
 80029a8:	9104      	str	r1, [sp, #16]
 80029aa:	4909      	ldr	r1, [pc, #36]	; (80029d0 <siprintf+0x3c>)
 80029ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80029b0:	9105      	str	r1, [sp, #20]
 80029b2:	6800      	ldr	r0, [r0, #0]
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	a902      	add	r1, sp, #8
 80029b8:	f000 fe96 	bl	80036e8 <_svfiprintf_r>
 80029bc:	9b02      	ldr	r3, [sp, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	b01c      	add	sp, #112	; 0x70
 80029c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80029c8:	b003      	add	sp, #12
 80029ca:	4770      	bx	lr
 80029cc:	20000060 	.word	0x20000060
 80029d0:	ffff0208 	.word	0xffff0208

080029d4 <siscanf>:
 80029d4:	b40e      	push	{r1, r2, r3}
 80029d6:	b510      	push	{r4, lr}
 80029d8:	b09f      	sub	sp, #124	; 0x7c
 80029da:	ac21      	add	r4, sp, #132	; 0x84
 80029dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80029e0:	f854 2b04 	ldr.w	r2, [r4], #4
 80029e4:	9201      	str	r2, [sp, #4]
 80029e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80029ea:	9004      	str	r0, [sp, #16]
 80029ec:	9008      	str	r0, [sp, #32]
 80029ee:	f7fd fbd7 	bl	80001a0 <strlen>
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <siscanf+0x50>)
 80029f4:	9005      	str	r0, [sp, #20]
 80029f6:	9009      	str	r0, [sp, #36]	; 0x24
 80029f8:	930d      	str	r3, [sp, #52]	; 0x34
 80029fa:	480b      	ldr	r0, [pc, #44]	; (8002a28 <siscanf+0x54>)
 80029fc:	9a01      	ldr	r2, [sp, #4]
 80029fe:	6800      	ldr	r0, [r0, #0]
 8002a00:	9403      	str	r4, [sp, #12]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9311      	str	r3, [sp, #68]	; 0x44
 8002a06:	9316      	str	r3, [sp, #88]	; 0x58
 8002a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002a10:	a904      	add	r1, sp, #16
 8002a12:	4623      	mov	r3, r4
 8002a14:	f000 ffc0 	bl	8003998 <__ssvfiscanf_r>
 8002a18:	b01f      	add	sp, #124	; 0x7c
 8002a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a1e:	b003      	add	sp, #12
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	08002a4f 	.word	0x08002a4f
 8002a28:	20000060 	.word	0x20000060

08002a2c <__sread>:
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	460c      	mov	r4, r1
 8002a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a34:	f001 fc06 	bl	8004244 <_read_r>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	bfab      	itete	ge
 8002a3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8002a40:	181b      	addge	r3, r3, r0
 8002a42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a46:	bfac      	ite	ge
 8002a48:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a4a:	81a3      	strhlt	r3, [r4, #12]
 8002a4c:	bd10      	pop	{r4, pc}

08002a4e <__seofread>:
 8002a4e:	2000      	movs	r0, #0
 8002a50:	4770      	bx	lr

08002a52 <__swrite>:
 8002a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a56:	461f      	mov	r7, r3
 8002a58:	898b      	ldrh	r3, [r1, #12]
 8002a5a:	05db      	lsls	r3, r3, #23
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	460c      	mov	r4, r1
 8002a60:	4616      	mov	r6, r2
 8002a62:	d505      	bpl.n	8002a70 <__swrite+0x1e>
 8002a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a68:	2302      	movs	r3, #2
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f000 fcc8 	bl	8003400 <_lseek_r>
 8002a70:	89a3      	ldrh	r3, [r4, #12]
 8002a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a7a:	81a3      	strh	r3, [r4, #12]
 8002a7c:	4632      	mov	r2, r6
 8002a7e:	463b      	mov	r3, r7
 8002a80:	4628      	mov	r0, r5
 8002a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a86:	f000 ba69 	b.w	8002f5c <_write_r>

08002a8a <__sseek>:
 8002a8a:	b510      	push	{r4, lr}
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a92:	f000 fcb5 	bl	8003400 <_lseek_r>
 8002a96:	1c43      	adds	r3, r0, #1
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	bf15      	itete	ne
 8002a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002aa6:	81a3      	strheq	r3, [r4, #12]
 8002aa8:	bf18      	it	ne
 8002aaa:	81a3      	strhne	r3, [r4, #12]
 8002aac:	bd10      	pop	{r4, pc}

08002aae <__sclose>:
 8002aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ab2:	f000 badb 	b.w	800306c <_close_r>

08002ab6 <strcat>:
 8002ab6:	b510      	push	{r4, lr}
 8002ab8:	4602      	mov	r2, r0
 8002aba:	7814      	ldrb	r4, [r2, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	3201      	adds	r2, #1
 8002ac0:	2c00      	cmp	r4, #0
 8002ac2:	d1fa      	bne.n	8002aba <strcat+0x4>
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ace:	2a00      	cmp	r2, #0
 8002ad0:	d1f9      	bne.n	8002ac6 <strcat+0x10>
 8002ad2:	bd10      	pop	{r4, pc}

08002ad4 <_strerror_r>:
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	4608      	mov	r0, r1
 8002ada:	4611      	mov	r1, r2
 8002adc:	288e      	cmp	r0, #142	; 0x8e
 8002ade:	f200 8130 	bhi.w	8002d42 <_strerror_r+0x26e>
 8002ae2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002ae6:	0139      	.short	0x0139
 8002ae8:	0092008f 	.word	0x0092008f
 8002aec:	00960094 	.word	0x00960094
 8002af0:	009a0098 	.word	0x009a0098
 8002af4:	009e009c 	.word	0x009e009c
 8002af8:	00a400a2 	.word	0x00a400a2
 8002afc:	00aa00a8 	.word	0x00aa00a8
 8002b00:	00ae00ac 	.word	0x00ae00ac
 8002b04:	00b0012e 	.word	0x00b0012e
 8002b08:	00b400b2 	.word	0x00b400b2
 8002b0c:	00b800b6 	.word	0x00b800b6
 8002b10:	00c000be 	.word	0x00c000be
 8002b14:	00c800c6 	.word	0x00c800c6
 8002b18:	00cc00ca 	.word	0x00cc00ca
 8002b1c:	00d200ce 	.word	0x00d200ce
 8002b20:	00d800d6 	.word	0x00d800d6
 8002b24:	00dc00da 	.word	0x00dc00da
 8002b28:	00e000de 	.word	0x00e000de
 8002b2c:	00e400e2 	.word	0x00e400e2
 8002b30:	012e012e 	.word	0x012e012e
 8002b34:	012e012e 	.word	0x012e012e
 8002b38:	012e012e 	.word	0x012e012e
 8002b3c:	012e012e 	.word	0x012e012e
 8002b40:	00ec00e8 	.word	0x00ec00e8
 8002b44:	012e012e 	.word	0x012e012e
 8002b48:	012e012e 	.word	0x012e012e
 8002b4c:	012e012e 	.word	0x012e012e
 8002b50:	012e012e 	.word	0x012e012e
 8002b54:	012e012e 	.word	0x012e012e
 8002b58:	012e012e 	.word	0x012e012e
 8002b5c:	00ee012e 	.word	0x00ee012e
 8002b60:	00f00108 	.word	0x00f00108
 8002b64:	012e00f2 	.word	0x012e00f2
 8002b68:	012e012e 	.word	0x012e012e
 8002b6c:	012e00f4 	.word	0x012e00f4
 8002b70:	012e012e 	.word	0x012e012e
 8002b74:	012e00f6 	.word	0x012e00f6
 8002b78:	00fa012e 	.word	0x00fa012e
 8002b7c:	012e012e 	.word	0x012e012e
 8002b80:	012e00fc 	.word	0x012e00fc
 8002b84:	012e012e 	.word	0x012e012e
 8002b88:	012e012e 	.word	0x012e012e
 8002b8c:	012e012e 	.word	0x012e012e
 8002b90:	012e012e 	.word	0x012e012e
 8002b94:	00fe012e 	.word	0x00fe012e
 8002b98:	0100012e 	.word	0x0100012e
 8002b9c:	01040102 	.word	0x01040102
 8002ba0:	012e012e 	.word	0x012e012e
 8002ba4:	012e0126 	.word	0x012e0126
 8002ba8:	012e012e 	.word	0x012e012e
 8002bac:	012e012e 	.word	0x012e012e
 8002bb0:	012e012e 	.word	0x012e012e
 8002bb4:	0114012e 	.word	0x0114012e
 8002bb8:	010a0106 	.word	0x010a0106
 8002bbc:	010e010c 	.word	0x010e010c
 8002bc0:	012e0110 	.word	0x012e0110
 8002bc4:	01160112 	.word	0x01160112
 8002bc8:	00ea011a 	.word	0x00ea011a
 8002bcc:	012c00c2 	.word	0x012c00c2
 8002bd0:	00d000ba 	.word	0x00d000ba
 8002bd4:	00a000bc 	.word	0x00a000bc
 8002bd8:	012a00a6 	.word	0x012a00a6
 8002bdc:	012e00f8 	.word	0x012e00f8
 8002be0:	00c40118 	.word	0x00c40118
 8002be4:	011c011e 	.word	0x011c011e
 8002be8:	012e012e 	.word	0x012e012e
 8002bec:	012e012e 	.word	0x012e012e
 8002bf0:	00d4012e 	.word	0x00d4012e
 8002bf4:	012e012e 	.word	0x012e012e
 8002bf8:	00e6012e 	.word	0x00e6012e
 8002bfc:	01200128 	.word	0x01200128
 8002c00:	01240122 	.word	0x01240122
 8002c04:	4b55      	ldr	r3, [pc, #340]	; (8002d5c <_strerror_r+0x288>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	bd10      	pop	{r4, pc}
 8002c0a:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <_strerror_r+0x28c>)
 8002c0c:	e7fb      	b.n	8002c06 <_strerror_r+0x132>
 8002c0e:	4b55      	ldr	r3, [pc, #340]	; (8002d64 <_strerror_r+0x290>)
 8002c10:	e7f9      	b.n	8002c06 <_strerror_r+0x132>
 8002c12:	4b55      	ldr	r3, [pc, #340]	; (8002d68 <_strerror_r+0x294>)
 8002c14:	e7f7      	b.n	8002c06 <_strerror_r+0x132>
 8002c16:	4b55      	ldr	r3, [pc, #340]	; (8002d6c <_strerror_r+0x298>)
 8002c18:	e7f5      	b.n	8002c06 <_strerror_r+0x132>
 8002c1a:	4b55      	ldr	r3, [pc, #340]	; (8002d70 <_strerror_r+0x29c>)
 8002c1c:	e7f3      	b.n	8002c06 <_strerror_r+0x132>
 8002c1e:	4b55      	ldr	r3, [pc, #340]	; (8002d74 <_strerror_r+0x2a0>)
 8002c20:	e7f1      	b.n	8002c06 <_strerror_r+0x132>
 8002c22:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <_strerror_r+0x2a4>)
 8002c24:	e7ef      	b.n	8002c06 <_strerror_r+0x132>
 8002c26:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <_strerror_r+0x2a8>)
 8002c28:	e7ed      	b.n	8002c06 <_strerror_r+0x132>
 8002c2a:	4b55      	ldr	r3, [pc, #340]	; (8002d80 <_strerror_r+0x2ac>)
 8002c2c:	e7eb      	b.n	8002c06 <_strerror_r+0x132>
 8002c2e:	4b55      	ldr	r3, [pc, #340]	; (8002d84 <_strerror_r+0x2b0>)
 8002c30:	e7e9      	b.n	8002c06 <_strerror_r+0x132>
 8002c32:	4b55      	ldr	r3, [pc, #340]	; (8002d88 <_strerror_r+0x2b4>)
 8002c34:	e7e7      	b.n	8002c06 <_strerror_r+0x132>
 8002c36:	4b55      	ldr	r3, [pc, #340]	; (8002d8c <_strerror_r+0x2b8>)
 8002c38:	e7e5      	b.n	8002c06 <_strerror_r+0x132>
 8002c3a:	4b55      	ldr	r3, [pc, #340]	; (8002d90 <_strerror_r+0x2bc>)
 8002c3c:	e7e3      	b.n	8002c06 <_strerror_r+0x132>
 8002c3e:	4b55      	ldr	r3, [pc, #340]	; (8002d94 <_strerror_r+0x2c0>)
 8002c40:	e7e1      	b.n	8002c06 <_strerror_r+0x132>
 8002c42:	4b55      	ldr	r3, [pc, #340]	; (8002d98 <_strerror_r+0x2c4>)
 8002c44:	e7df      	b.n	8002c06 <_strerror_r+0x132>
 8002c46:	4b55      	ldr	r3, [pc, #340]	; (8002d9c <_strerror_r+0x2c8>)
 8002c48:	e7dd      	b.n	8002c06 <_strerror_r+0x132>
 8002c4a:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <_strerror_r+0x2cc>)
 8002c4c:	e7db      	b.n	8002c06 <_strerror_r+0x132>
 8002c4e:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <_strerror_r+0x2d0>)
 8002c50:	e7d9      	b.n	8002c06 <_strerror_r+0x132>
 8002c52:	4b55      	ldr	r3, [pc, #340]	; (8002da8 <_strerror_r+0x2d4>)
 8002c54:	e7d7      	b.n	8002c06 <_strerror_r+0x132>
 8002c56:	4b55      	ldr	r3, [pc, #340]	; (8002dac <_strerror_r+0x2d8>)
 8002c58:	e7d5      	b.n	8002c06 <_strerror_r+0x132>
 8002c5a:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <_strerror_r+0x2dc>)
 8002c5c:	e7d3      	b.n	8002c06 <_strerror_r+0x132>
 8002c5e:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <_strerror_r+0x2e0>)
 8002c60:	e7d1      	b.n	8002c06 <_strerror_r+0x132>
 8002c62:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <_strerror_r+0x2e4>)
 8002c64:	e7cf      	b.n	8002c06 <_strerror_r+0x132>
 8002c66:	4b55      	ldr	r3, [pc, #340]	; (8002dbc <_strerror_r+0x2e8>)
 8002c68:	e7cd      	b.n	8002c06 <_strerror_r+0x132>
 8002c6a:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <_strerror_r+0x2ec>)
 8002c6c:	e7cb      	b.n	8002c06 <_strerror_r+0x132>
 8002c6e:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <_strerror_r+0x2f0>)
 8002c70:	e7c9      	b.n	8002c06 <_strerror_r+0x132>
 8002c72:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <_strerror_r+0x2f4>)
 8002c74:	e7c7      	b.n	8002c06 <_strerror_r+0x132>
 8002c76:	4b55      	ldr	r3, [pc, #340]	; (8002dcc <_strerror_r+0x2f8>)
 8002c78:	e7c5      	b.n	8002c06 <_strerror_r+0x132>
 8002c7a:	4b55      	ldr	r3, [pc, #340]	; (8002dd0 <_strerror_r+0x2fc>)
 8002c7c:	e7c3      	b.n	8002c06 <_strerror_r+0x132>
 8002c7e:	4b55      	ldr	r3, [pc, #340]	; (8002dd4 <_strerror_r+0x300>)
 8002c80:	e7c1      	b.n	8002c06 <_strerror_r+0x132>
 8002c82:	4b55      	ldr	r3, [pc, #340]	; (8002dd8 <_strerror_r+0x304>)
 8002c84:	e7bf      	b.n	8002c06 <_strerror_r+0x132>
 8002c86:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <_strerror_r+0x308>)
 8002c88:	e7bd      	b.n	8002c06 <_strerror_r+0x132>
 8002c8a:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <_strerror_r+0x30c>)
 8002c8c:	e7bb      	b.n	8002c06 <_strerror_r+0x132>
 8002c8e:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <_strerror_r+0x310>)
 8002c90:	e7b9      	b.n	8002c06 <_strerror_r+0x132>
 8002c92:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <_strerror_r+0x314>)
 8002c94:	e7b7      	b.n	8002c06 <_strerror_r+0x132>
 8002c96:	4b55      	ldr	r3, [pc, #340]	; (8002dec <_strerror_r+0x318>)
 8002c98:	e7b5      	b.n	8002c06 <_strerror_r+0x132>
 8002c9a:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <_strerror_r+0x31c>)
 8002c9c:	e7b3      	b.n	8002c06 <_strerror_r+0x132>
 8002c9e:	4b55      	ldr	r3, [pc, #340]	; (8002df4 <_strerror_r+0x320>)
 8002ca0:	e7b1      	b.n	8002c06 <_strerror_r+0x132>
 8002ca2:	4b55      	ldr	r3, [pc, #340]	; (8002df8 <_strerror_r+0x324>)
 8002ca4:	e7af      	b.n	8002c06 <_strerror_r+0x132>
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <_strerror_r+0x328>)
 8002ca8:	e7ad      	b.n	8002c06 <_strerror_r+0x132>
 8002caa:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <_strerror_r+0x32c>)
 8002cac:	e7ab      	b.n	8002c06 <_strerror_r+0x132>
 8002cae:	4b55      	ldr	r3, [pc, #340]	; (8002e04 <_strerror_r+0x330>)
 8002cb0:	e7a9      	b.n	8002c06 <_strerror_r+0x132>
 8002cb2:	4b55      	ldr	r3, [pc, #340]	; (8002e08 <_strerror_r+0x334>)
 8002cb4:	e7a7      	b.n	8002c06 <_strerror_r+0x132>
 8002cb6:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <_strerror_r+0x338>)
 8002cb8:	e7a5      	b.n	8002c06 <_strerror_r+0x132>
 8002cba:	4b55      	ldr	r3, [pc, #340]	; (8002e10 <_strerror_r+0x33c>)
 8002cbc:	e7a3      	b.n	8002c06 <_strerror_r+0x132>
 8002cbe:	4b55      	ldr	r3, [pc, #340]	; (8002e14 <_strerror_r+0x340>)
 8002cc0:	e7a1      	b.n	8002c06 <_strerror_r+0x132>
 8002cc2:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <_strerror_r+0x344>)
 8002cc4:	e79f      	b.n	8002c06 <_strerror_r+0x132>
 8002cc6:	4b55      	ldr	r3, [pc, #340]	; (8002e1c <_strerror_r+0x348>)
 8002cc8:	e79d      	b.n	8002c06 <_strerror_r+0x132>
 8002cca:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <_strerror_r+0x34c>)
 8002ccc:	e79b      	b.n	8002c06 <_strerror_r+0x132>
 8002cce:	4b55      	ldr	r3, [pc, #340]	; (8002e24 <_strerror_r+0x350>)
 8002cd0:	e799      	b.n	8002c06 <_strerror_r+0x132>
 8002cd2:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <_strerror_r+0x354>)
 8002cd4:	e797      	b.n	8002c06 <_strerror_r+0x132>
 8002cd6:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <_strerror_r+0x358>)
 8002cd8:	e795      	b.n	8002c06 <_strerror_r+0x132>
 8002cda:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <_strerror_r+0x35c>)
 8002cdc:	e793      	b.n	8002c06 <_strerror_r+0x132>
 8002cde:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <_strerror_r+0x360>)
 8002ce0:	e791      	b.n	8002c06 <_strerror_r+0x132>
 8002ce2:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <_strerror_r+0x364>)
 8002ce4:	e78f      	b.n	8002c06 <_strerror_r+0x132>
 8002ce6:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <_strerror_r+0x368>)
 8002ce8:	e78d      	b.n	8002c06 <_strerror_r+0x132>
 8002cea:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <_strerror_r+0x36c>)
 8002cec:	e78b      	b.n	8002c06 <_strerror_r+0x132>
 8002cee:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <_strerror_r+0x370>)
 8002cf0:	e789      	b.n	8002c06 <_strerror_r+0x132>
 8002cf2:	4b55      	ldr	r3, [pc, #340]	; (8002e48 <_strerror_r+0x374>)
 8002cf4:	e787      	b.n	8002c06 <_strerror_r+0x132>
 8002cf6:	4b55      	ldr	r3, [pc, #340]	; (8002e4c <_strerror_r+0x378>)
 8002cf8:	e785      	b.n	8002c06 <_strerror_r+0x132>
 8002cfa:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <_strerror_r+0x37c>)
 8002cfc:	e783      	b.n	8002c06 <_strerror_r+0x132>
 8002cfe:	4b55      	ldr	r3, [pc, #340]	; (8002e54 <_strerror_r+0x380>)
 8002d00:	e781      	b.n	8002c06 <_strerror_r+0x132>
 8002d02:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <_strerror_r+0x384>)
 8002d04:	e77f      	b.n	8002c06 <_strerror_r+0x132>
 8002d06:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <_strerror_r+0x388>)
 8002d08:	e77d      	b.n	8002c06 <_strerror_r+0x132>
 8002d0a:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <_strerror_r+0x38c>)
 8002d0c:	e77b      	b.n	8002c06 <_strerror_r+0x132>
 8002d0e:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <_strerror_r+0x390>)
 8002d10:	e779      	b.n	8002c06 <_strerror_r+0x132>
 8002d12:	4b55      	ldr	r3, [pc, #340]	; (8002e68 <_strerror_r+0x394>)
 8002d14:	e777      	b.n	8002c06 <_strerror_r+0x132>
 8002d16:	4b55      	ldr	r3, [pc, #340]	; (8002e6c <_strerror_r+0x398>)
 8002d18:	e775      	b.n	8002c06 <_strerror_r+0x132>
 8002d1a:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <_strerror_r+0x39c>)
 8002d1c:	e773      	b.n	8002c06 <_strerror_r+0x132>
 8002d1e:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <_strerror_r+0x3a0>)
 8002d20:	e771      	b.n	8002c06 <_strerror_r+0x132>
 8002d22:	4b55      	ldr	r3, [pc, #340]	; (8002e78 <_strerror_r+0x3a4>)
 8002d24:	e76f      	b.n	8002c06 <_strerror_r+0x132>
 8002d26:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <_strerror_r+0x3a8>)
 8002d28:	e76d      	b.n	8002c06 <_strerror_r+0x132>
 8002d2a:	4b55      	ldr	r3, [pc, #340]	; (8002e80 <_strerror_r+0x3ac>)
 8002d2c:	e76b      	b.n	8002c06 <_strerror_r+0x132>
 8002d2e:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <_strerror_r+0x3b0>)
 8002d30:	e769      	b.n	8002c06 <_strerror_r+0x132>
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <_strerror_r+0x3b4>)
 8002d34:	e767      	b.n	8002c06 <_strerror_r+0x132>
 8002d36:	4b55      	ldr	r3, [pc, #340]	; (8002e8c <_strerror_r+0x3b8>)
 8002d38:	e765      	b.n	8002c06 <_strerror_r+0x132>
 8002d3a:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <_strerror_r+0x3bc>)
 8002d3c:	e763      	b.n	8002c06 <_strerror_r+0x132>
 8002d3e:	4b55      	ldr	r3, [pc, #340]	; (8002e94 <_strerror_r+0x3c0>)
 8002d40:	e761      	b.n	8002c06 <_strerror_r+0x132>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf14      	ite	ne
 8002d46:	461a      	movne	r2, r3
 8002d48:	4622      	moveq	r2, r4
 8002d4a:	f000 f8b3 	bl	8002eb4 <_user_strerror>
 8002d4e:	4b52      	ldr	r3, [pc, #328]	; (8002e98 <_strerror_r+0x3c4>)
 8002d50:	2800      	cmp	r0, #0
 8002d52:	bf18      	it	ne
 8002d54:	4603      	movne	r3, r0
 8002d56:	e756      	b.n	8002c06 <_strerror_r+0x132>
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <_strerror_r+0x3c8>)
 8002d5a:	e754      	b.n	8002c06 <_strerror_r+0x132>
 8002d5c:	08004c5d 	.word	0x08004c5d
 8002d60:	08004c67 	.word	0x08004c67
 8002d64:	08004c81 	.word	0x08004c81
 8002d68:	08004c91 	.word	0x08004c91
 8002d6c:	08004ca9 	.word	0x08004ca9
 8002d70:	08004cb3 	.word	0x08004cb3
 8002d74:	08004ccd 	.word	0x08004ccd
 8002d78:	08004cdf 	.word	0x08004cdf
 8002d7c:	08004cf1 	.word	0x08004cf1
 8002d80:	08004d0a 	.word	0x08004d0a
 8002d84:	08004d1a 	.word	0x08004d1a
 8002d88:	08004d26 	.word	0x08004d26
 8002d8c:	08004d43 	.word	0x08004d43
 8002d90:	08004d55 	.word	0x08004d55
 8002d94:	08004d66 	.word	0x08004d66
 8002d98:	08004d78 	.word	0x08004d78
 8002d9c:	08004d84 	.word	0x08004d84
 8002da0:	08004d9c 	.word	0x08004d9c
 8002da4:	08004da8 	.word	0x08004da8
 8002da8:	08004dba 	.word	0x08004dba
 8002dac:	08004dc9 	.word	0x08004dc9
 8002db0:	08004dd9 	.word	0x08004dd9
 8002db4:	08004de6 	.word	0x08004de6
 8002db8:	08004e05 	.word	0x08004e05
 8002dbc:	08004e14 	.word	0x08004e14
 8002dc0:	08004e25 	.word	0x08004e25
 8002dc4:	08004e49 	.word	0x08004e49
 8002dc8:	08004e67 	.word	0x08004e67
 8002dcc:	08004e85 	.word	0x08004e85
 8002dd0:	08004ea5 	.word	0x08004ea5
 8002dd4:	08004ebc 	.word	0x08004ebc
 8002dd8:	08004ecb 	.word	0x08004ecb
 8002ddc:	08004eda 	.word	0x08004eda
 8002de0:	08004eee 	.word	0x08004eee
 8002de4:	08004f06 	.word	0x08004f06
 8002de8:	08004f14 	.word	0x08004f14
 8002dec:	08004f21 	.word	0x08004f21
 8002df0:	08004f37 	.word	0x08004f37
 8002df4:	08004f46 	.word	0x08004f46
 8002df8:	08004f52 	.word	0x08004f52
 8002dfc:	08004f81 	.word	0x08004f81
 8002e00:	08004f92 	.word	0x08004f92
 8002e04:	08004fad 	.word	0x08004fad
 8002e08:	08004fc0 	.word	0x08004fc0
 8002e0c:	08004fd6 	.word	0x08004fd6
 8002e10:	08004fdf 	.word	0x08004fdf
 8002e14:	08004ff6 	.word	0x08004ff6
 8002e18:	08004ffe 	.word	0x08004ffe
 8002e1c:	0800500b 	.word	0x0800500b
 8002e20:	08005020 	.word	0x08005020
 8002e24:	08005034 	.word	0x08005034
 8002e28:	0800504c 	.word	0x0800504c
 8002e2c:	0800505b 	.word	0x0800505b
 8002e30:	0800506c 	.word	0x0800506c
 8002e34:	0800507f 	.word	0x0800507f
 8002e38:	0800508b 	.word	0x0800508b
 8002e3c:	080050a4 	.word	0x080050a4
 8002e40:	080050b8 	.word	0x080050b8
 8002e44:	080050d3 	.word	0x080050d3
 8002e48:	080050eb 	.word	0x080050eb
 8002e4c:	08005105 	.word	0x08005105
 8002e50:	0800510d 	.word	0x0800510d
 8002e54:	0800513d 	.word	0x0800513d
 8002e58:	0800515c 	.word	0x0800515c
 8002e5c:	0800517b 	.word	0x0800517b
 8002e60:	08005192 	.word	0x08005192
 8002e64:	080051a5 	.word	0x080051a5
 8002e68:	080051be 	.word	0x080051be
 8002e6c:	080051d5 	.word	0x080051d5
 8002e70:	080051eb 	.word	0x080051eb
 8002e74:	0800520c 	.word	0x0800520c
 8002e78:	08005224 	.word	0x08005224
 8002e7c:	08005240 	.word	0x08005240
 8002e80:	08005253 	.word	0x08005253
 8002e84:	08005269 	.word	0x08005269
 8002e88:	0800527d 	.word	0x0800527d
 8002e8c:	0800529f 	.word	0x0800529f
 8002e90:	080052c5 	.word	0x080052c5
 8002e94:	080052d6 	.word	0x080052d6
 8002e98:	08004c3d 	.word	0x08004c3d
 8002e9c:	08004c55 	.word	0x08004c55

08002ea0 <strerror>:
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	4803      	ldr	r0, [pc, #12]	; (8002eb0 <strerror+0x10>)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6800      	ldr	r0, [r0, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f7ff be13 	b.w	8002ad4 <_strerror_r>
 8002eae:	bf00      	nop
 8002eb0:	20000060 	.word	0x20000060

08002eb4 <_user_strerror>:
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	4770      	bx	lr

08002eb8 <__swbuf_r>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	460e      	mov	r6, r1
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	b118      	cbz	r0, 8002eca <__swbuf_r+0x12>
 8002ec2:	6983      	ldr	r3, [r0, #24]
 8002ec4:	b90b      	cbnz	r3, 8002eca <__swbuf_r+0x12>
 8002ec6:	f000 f9fb 	bl	80032c0 <__sinit>
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <__swbuf_r+0x98>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	d12b      	bne.n	8002f28 <__swbuf_r+0x70>
 8002ed0:	686c      	ldr	r4, [r5, #4]
 8002ed2:	69a3      	ldr	r3, [r4, #24]
 8002ed4:	60a3      	str	r3, [r4, #8]
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	071a      	lsls	r2, r3, #28
 8002eda:	d52f      	bpl.n	8002f3c <__swbuf_r+0x84>
 8002edc:	6923      	ldr	r3, [r4, #16]
 8002ede:	b36b      	cbz	r3, 8002f3c <__swbuf_r+0x84>
 8002ee0:	6923      	ldr	r3, [r4, #16]
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	1ac0      	subs	r0, r0, r3
 8002ee6:	6963      	ldr	r3, [r4, #20]
 8002ee8:	b2f6      	uxtb	r6, r6
 8002eea:	4283      	cmp	r3, r0
 8002eec:	4637      	mov	r7, r6
 8002eee:	dc04      	bgt.n	8002efa <__swbuf_r+0x42>
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f000 f950 	bl	8003198 <_fflush_r>
 8002ef8:	bb30      	cbnz	r0, 8002f48 <__swbuf_r+0x90>
 8002efa:	68a3      	ldr	r3, [r4, #8]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	60a3      	str	r3, [r4, #8]
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	6022      	str	r2, [r4, #0]
 8002f06:	701e      	strb	r6, [r3, #0]
 8002f08:	6963      	ldr	r3, [r4, #20]
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	4283      	cmp	r3, r0
 8002f0e:	d004      	beq.n	8002f1a <__swbuf_r+0x62>
 8002f10:	89a3      	ldrh	r3, [r4, #12]
 8002f12:	07db      	lsls	r3, r3, #31
 8002f14:	d506      	bpl.n	8002f24 <__swbuf_r+0x6c>
 8002f16:	2e0a      	cmp	r6, #10
 8002f18:	d104      	bne.n	8002f24 <__swbuf_r+0x6c>
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	f000 f93b 	bl	8003198 <_fflush_r>
 8002f22:	b988      	cbnz	r0, 8002f48 <__swbuf_r+0x90>
 8002f24:	4638      	mov	r0, r7
 8002f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <__swbuf_r+0x9c>)
 8002f2a:	429c      	cmp	r4, r3
 8002f2c:	d101      	bne.n	8002f32 <__swbuf_r+0x7a>
 8002f2e:	68ac      	ldr	r4, [r5, #8]
 8002f30:	e7cf      	b.n	8002ed2 <__swbuf_r+0x1a>
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <__swbuf_r+0xa0>)
 8002f34:	429c      	cmp	r4, r3
 8002f36:	bf08      	it	eq
 8002f38:	68ec      	ldreq	r4, [r5, #12]
 8002f3a:	e7ca      	b.n	8002ed2 <__swbuf_r+0x1a>
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f000 f81e 	bl	8002f80 <__swsetup_r>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d0cb      	beq.n	8002ee0 <__swbuf_r+0x28>
 8002f48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f4c:	e7ea      	b.n	8002f24 <__swbuf_r+0x6c>
 8002f4e:	bf00      	nop
 8002f50:	0800530c 	.word	0x0800530c
 8002f54:	0800532c 	.word	0x0800532c
 8002f58:	080052ec 	.word	0x080052ec

08002f5c <_write_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4d07      	ldr	r5, [pc, #28]	; (8002f7c <_write_r+0x20>)
 8002f60:	4604      	mov	r4, r0
 8002f62:	4608      	mov	r0, r1
 8002f64:	4611      	mov	r1, r2
 8002f66:	2200      	movs	r2, #0
 8002f68:	602a      	str	r2, [r5, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f001 fb9c 	bl	80046a8 <_write>
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	d102      	bne.n	8002f7a <_write_r+0x1e>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b103      	cbz	r3, 8002f7a <_write_r+0x1e>
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	20000d10 	.word	0x20000d10

08002f80 <__swsetup_r>:
 8002f80:	4b32      	ldr	r3, [pc, #200]	; (800304c <__swsetup_r+0xcc>)
 8002f82:	b570      	push	{r4, r5, r6, lr}
 8002f84:	681d      	ldr	r5, [r3, #0]
 8002f86:	4606      	mov	r6, r0
 8002f88:	460c      	mov	r4, r1
 8002f8a:	b125      	cbz	r5, 8002f96 <__swsetup_r+0x16>
 8002f8c:	69ab      	ldr	r3, [r5, #24]
 8002f8e:	b913      	cbnz	r3, 8002f96 <__swsetup_r+0x16>
 8002f90:	4628      	mov	r0, r5
 8002f92:	f000 f995 	bl	80032c0 <__sinit>
 8002f96:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <__swsetup_r+0xd0>)
 8002f98:	429c      	cmp	r4, r3
 8002f9a:	d10f      	bne.n	8002fbc <__swsetup_r+0x3c>
 8002f9c:	686c      	ldr	r4, [r5, #4]
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fa4:	0719      	lsls	r1, r3, #28
 8002fa6:	d42c      	bmi.n	8003002 <__swsetup_r+0x82>
 8002fa8:	06dd      	lsls	r5, r3, #27
 8002faa:	d411      	bmi.n	8002fd0 <__swsetup_r+0x50>
 8002fac:	2309      	movs	r3, #9
 8002fae:	6033      	str	r3, [r6, #0]
 8002fb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fb4:	81a3      	strh	r3, [r4, #12]
 8002fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fba:	e03e      	b.n	800303a <__swsetup_r+0xba>
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <__swsetup_r+0xd4>)
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	d101      	bne.n	8002fc6 <__swsetup_r+0x46>
 8002fc2:	68ac      	ldr	r4, [r5, #8]
 8002fc4:	e7eb      	b.n	8002f9e <__swsetup_r+0x1e>
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <__swsetup_r+0xd8>)
 8002fc8:	429c      	cmp	r4, r3
 8002fca:	bf08      	it	eq
 8002fcc:	68ec      	ldreq	r4, [r5, #12]
 8002fce:	e7e6      	b.n	8002f9e <__swsetup_r+0x1e>
 8002fd0:	0758      	lsls	r0, r3, #29
 8002fd2:	d512      	bpl.n	8002ffa <__swsetup_r+0x7a>
 8002fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fd6:	b141      	cbz	r1, 8002fea <__swsetup_r+0x6a>
 8002fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fdc:	4299      	cmp	r1, r3
 8002fde:	d002      	beq.n	8002fe6 <__swsetup_r+0x66>
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	f000 faab 	bl	800353c <_free_r>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	6363      	str	r3, [r4, #52]	; 0x34
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ff0:	81a3      	strh	r3, [r4, #12]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6063      	str	r3, [r4, #4]
 8002ff6:	6923      	ldr	r3, [r4, #16]
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	89a3      	ldrh	r3, [r4, #12]
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	81a3      	strh	r3, [r4, #12]
 8003002:	6923      	ldr	r3, [r4, #16]
 8003004:	b94b      	cbnz	r3, 800301a <__swsetup_r+0x9a>
 8003006:	89a3      	ldrh	r3, [r4, #12]
 8003008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800300c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003010:	d003      	beq.n	800301a <__swsetup_r+0x9a>
 8003012:	4621      	mov	r1, r4
 8003014:	4630      	mov	r0, r6
 8003016:	f000 fa2b 	bl	8003470 <__smakebuf_r>
 800301a:	89a0      	ldrh	r0, [r4, #12]
 800301c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003020:	f010 0301 	ands.w	r3, r0, #1
 8003024:	d00a      	beq.n	800303c <__swsetup_r+0xbc>
 8003026:	2300      	movs	r3, #0
 8003028:	60a3      	str	r3, [r4, #8]
 800302a:	6963      	ldr	r3, [r4, #20]
 800302c:	425b      	negs	r3, r3
 800302e:	61a3      	str	r3, [r4, #24]
 8003030:	6923      	ldr	r3, [r4, #16]
 8003032:	b943      	cbnz	r3, 8003046 <__swsetup_r+0xc6>
 8003034:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003038:	d1ba      	bne.n	8002fb0 <__swsetup_r+0x30>
 800303a:	bd70      	pop	{r4, r5, r6, pc}
 800303c:	0781      	lsls	r1, r0, #30
 800303e:	bf58      	it	pl
 8003040:	6963      	ldrpl	r3, [r4, #20]
 8003042:	60a3      	str	r3, [r4, #8]
 8003044:	e7f4      	b.n	8003030 <__swsetup_r+0xb0>
 8003046:	2000      	movs	r0, #0
 8003048:	e7f7      	b.n	800303a <__swsetup_r+0xba>
 800304a:	bf00      	nop
 800304c:	20000060 	.word	0x20000060
 8003050:	0800530c 	.word	0x0800530c
 8003054:	0800532c 	.word	0x0800532c
 8003058:	080052ec 	.word	0x080052ec

0800305c <abort>:
 800305c:	b508      	push	{r3, lr}
 800305e:	2006      	movs	r0, #6
 8003060:	f001 f964 	bl	800432c <raise>
 8003064:	2001      	movs	r0, #1
 8003066:	f001 fb27 	bl	80046b8 <_exit>
	...

0800306c <_close_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4d06      	ldr	r5, [pc, #24]	; (8003088 <_close_r+0x1c>)
 8003070:	2300      	movs	r3, #0
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	602b      	str	r3, [r5, #0]
 8003078:	f001 fad0 	bl	800461c <_close>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_close_r+0x1a>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	b103      	cbz	r3, 8003086 <_close_r+0x1a>
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	20000d10 	.word	0x20000d10

0800308c <__sflush_r>:
 800308c:	898a      	ldrh	r2, [r1, #12]
 800308e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003092:	4605      	mov	r5, r0
 8003094:	0710      	lsls	r0, r2, #28
 8003096:	460c      	mov	r4, r1
 8003098:	d458      	bmi.n	800314c <__sflush_r+0xc0>
 800309a:	684b      	ldr	r3, [r1, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	dc05      	bgt.n	80030ac <__sflush_r+0x20>
 80030a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	dc02      	bgt.n	80030ac <__sflush_r+0x20>
 80030a6:	2000      	movs	r0, #0
 80030a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030ae:	2e00      	cmp	r6, #0
 80030b0:	d0f9      	beq.n	80030a6 <__sflush_r+0x1a>
 80030b2:	2300      	movs	r3, #0
 80030b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030b8:	682f      	ldr	r7, [r5, #0]
 80030ba:	6a21      	ldr	r1, [r4, #32]
 80030bc:	602b      	str	r3, [r5, #0]
 80030be:	d032      	beq.n	8003126 <__sflush_r+0x9a>
 80030c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	075a      	lsls	r2, r3, #29
 80030c6:	d505      	bpl.n	80030d4 <__sflush_r+0x48>
 80030c8:	6863      	ldr	r3, [r4, #4]
 80030ca:	1ac0      	subs	r0, r0, r3
 80030cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030ce:	b10b      	cbz	r3, 80030d4 <__sflush_r+0x48>
 80030d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030d2:	1ac0      	subs	r0, r0, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	4602      	mov	r2, r0
 80030d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030da:	6a21      	ldr	r1, [r4, #32]
 80030dc:	4628      	mov	r0, r5
 80030de:	47b0      	blx	r6
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	89a3      	ldrh	r3, [r4, #12]
 80030e4:	d106      	bne.n	80030f4 <__sflush_r+0x68>
 80030e6:	6829      	ldr	r1, [r5, #0]
 80030e8:	291d      	cmp	r1, #29
 80030ea:	d82b      	bhi.n	8003144 <__sflush_r+0xb8>
 80030ec:	4a29      	ldr	r2, [pc, #164]	; (8003194 <__sflush_r+0x108>)
 80030ee:	410a      	asrs	r2, r1
 80030f0:	07d6      	lsls	r6, r2, #31
 80030f2:	d427      	bmi.n	8003144 <__sflush_r+0xb8>
 80030f4:	2200      	movs	r2, #0
 80030f6:	6062      	str	r2, [r4, #4]
 80030f8:	04d9      	lsls	r1, r3, #19
 80030fa:	6922      	ldr	r2, [r4, #16]
 80030fc:	6022      	str	r2, [r4, #0]
 80030fe:	d504      	bpl.n	800310a <__sflush_r+0x7e>
 8003100:	1c42      	adds	r2, r0, #1
 8003102:	d101      	bne.n	8003108 <__sflush_r+0x7c>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	b903      	cbnz	r3, 800310a <__sflush_r+0x7e>
 8003108:	6560      	str	r0, [r4, #84]	; 0x54
 800310a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800310c:	602f      	str	r7, [r5, #0]
 800310e:	2900      	cmp	r1, #0
 8003110:	d0c9      	beq.n	80030a6 <__sflush_r+0x1a>
 8003112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003116:	4299      	cmp	r1, r3
 8003118:	d002      	beq.n	8003120 <__sflush_r+0x94>
 800311a:	4628      	mov	r0, r5
 800311c:	f000 fa0e 	bl	800353c <_free_r>
 8003120:	2000      	movs	r0, #0
 8003122:	6360      	str	r0, [r4, #52]	; 0x34
 8003124:	e7c0      	b.n	80030a8 <__sflush_r+0x1c>
 8003126:	2301      	movs	r3, #1
 8003128:	4628      	mov	r0, r5
 800312a:	47b0      	blx	r6
 800312c:	1c41      	adds	r1, r0, #1
 800312e:	d1c8      	bne.n	80030c2 <__sflush_r+0x36>
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0c5      	beq.n	80030c2 <__sflush_r+0x36>
 8003136:	2b1d      	cmp	r3, #29
 8003138:	d001      	beq.n	800313e <__sflush_r+0xb2>
 800313a:	2b16      	cmp	r3, #22
 800313c:	d101      	bne.n	8003142 <__sflush_r+0xb6>
 800313e:	602f      	str	r7, [r5, #0]
 8003140:	e7b1      	b.n	80030a6 <__sflush_r+0x1a>
 8003142:	89a3      	ldrh	r3, [r4, #12]
 8003144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003148:	81a3      	strh	r3, [r4, #12]
 800314a:	e7ad      	b.n	80030a8 <__sflush_r+0x1c>
 800314c:	690f      	ldr	r7, [r1, #16]
 800314e:	2f00      	cmp	r7, #0
 8003150:	d0a9      	beq.n	80030a6 <__sflush_r+0x1a>
 8003152:	0793      	lsls	r3, r2, #30
 8003154:	680e      	ldr	r6, [r1, #0]
 8003156:	bf08      	it	eq
 8003158:	694b      	ldreq	r3, [r1, #20]
 800315a:	600f      	str	r7, [r1, #0]
 800315c:	bf18      	it	ne
 800315e:	2300      	movne	r3, #0
 8003160:	eba6 0807 	sub.w	r8, r6, r7
 8003164:	608b      	str	r3, [r1, #8]
 8003166:	f1b8 0f00 	cmp.w	r8, #0
 800316a:	dd9c      	ble.n	80030a6 <__sflush_r+0x1a>
 800316c:	6a21      	ldr	r1, [r4, #32]
 800316e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003170:	4643      	mov	r3, r8
 8003172:	463a      	mov	r2, r7
 8003174:	4628      	mov	r0, r5
 8003176:	47b0      	blx	r6
 8003178:	2800      	cmp	r0, #0
 800317a:	dc06      	bgt.n	800318a <__sflush_r+0xfe>
 800317c:	89a3      	ldrh	r3, [r4, #12]
 800317e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003188:	e78e      	b.n	80030a8 <__sflush_r+0x1c>
 800318a:	4407      	add	r7, r0
 800318c:	eba8 0800 	sub.w	r8, r8, r0
 8003190:	e7e9      	b.n	8003166 <__sflush_r+0xda>
 8003192:	bf00      	nop
 8003194:	dfbffffe 	.word	0xdfbffffe

08003198 <_fflush_r>:
 8003198:	b538      	push	{r3, r4, r5, lr}
 800319a:	690b      	ldr	r3, [r1, #16]
 800319c:	4605      	mov	r5, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	b913      	cbnz	r3, 80031a8 <_fflush_r+0x10>
 80031a2:	2500      	movs	r5, #0
 80031a4:	4628      	mov	r0, r5
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
 80031a8:	b118      	cbz	r0, 80031b2 <_fflush_r+0x1a>
 80031aa:	6983      	ldr	r3, [r0, #24]
 80031ac:	b90b      	cbnz	r3, 80031b2 <_fflush_r+0x1a>
 80031ae:	f000 f887 	bl	80032c0 <__sinit>
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <_fflush_r+0x6c>)
 80031b4:	429c      	cmp	r4, r3
 80031b6:	d11b      	bne.n	80031f0 <_fflush_r+0x58>
 80031b8:	686c      	ldr	r4, [r5, #4]
 80031ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0ef      	beq.n	80031a2 <_fflush_r+0xa>
 80031c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031c4:	07d0      	lsls	r0, r2, #31
 80031c6:	d404      	bmi.n	80031d2 <_fflush_r+0x3a>
 80031c8:	0599      	lsls	r1, r3, #22
 80031ca:	d402      	bmi.n	80031d2 <_fflush_r+0x3a>
 80031cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ce:	f000 f915 	bl	80033fc <__retarget_lock_acquire_recursive>
 80031d2:	4628      	mov	r0, r5
 80031d4:	4621      	mov	r1, r4
 80031d6:	f7ff ff59 	bl	800308c <__sflush_r>
 80031da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031dc:	07da      	lsls	r2, r3, #31
 80031de:	4605      	mov	r5, r0
 80031e0:	d4e0      	bmi.n	80031a4 <_fflush_r+0xc>
 80031e2:	89a3      	ldrh	r3, [r4, #12]
 80031e4:	059b      	lsls	r3, r3, #22
 80031e6:	d4dd      	bmi.n	80031a4 <_fflush_r+0xc>
 80031e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ea:	f000 f908 	bl	80033fe <__retarget_lock_release_recursive>
 80031ee:	e7d9      	b.n	80031a4 <_fflush_r+0xc>
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <_fflush_r+0x70>)
 80031f2:	429c      	cmp	r4, r3
 80031f4:	d101      	bne.n	80031fa <_fflush_r+0x62>
 80031f6:	68ac      	ldr	r4, [r5, #8]
 80031f8:	e7df      	b.n	80031ba <_fflush_r+0x22>
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <_fflush_r+0x74>)
 80031fc:	429c      	cmp	r4, r3
 80031fe:	bf08      	it	eq
 8003200:	68ec      	ldreq	r4, [r5, #12]
 8003202:	e7da      	b.n	80031ba <_fflush_r+0x22>
 8003204:	0800530c 	.word	0x0800530c
 8003208:	0800532c 	.word	0x0800532c
 800320c:	080052ec 	.word	0x080052ec

08003210 <std>:
 8003210:	2300      	movs	r3, #0
 8003212:	b510      	push	{r4, lr}
 8003214:	4604      	mov	r4, r0
 8003216:	e9c0 3300 	strd	r3, r3, [r0]
 800321a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800321e:	6083      	str	r3, [r0, #8]
 8003220:	8181      	strh	r1, [r0, #12]
 8003222:	6643      	str	r3, [r0, #100]	; 0x64
 8003224:	81c2      	strh	r2, [r0, #14]
 8003226:	6183      	str	r3, [r0, #24]
 8003228:	4619      	mov	r1, r3
 800322a:	2208      	movs	r2, #8
 800322c:	305c      	adds	r0, #92	; 0x5c
 800322e:	f7ff f9ad 	bl	800258c <memset>
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <std+0x38>)
 8003234:	6263      	str	r3, [r4, #36]	; 0x24
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <std+0x3c>)
 8003238:	62a3      	str	r3, [r4, #40]	; 0x28
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <std+0x40>)
 800323c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <std+0x44>)
 8003240:	6224      	str	r4, [r4, #32]
 8003242:	6323      	str	r3, [r4, #48]	; 0x30
 8003244:	bd10      	pop	{r4, pc}
 8003246:	bf00      	nop
 8003248:	08002a2d 	.word	0x08002a2d
 800324c:	08002a53 	.word	0x08002a53
 8003250:	08002a8b 	.word	0x08002a8b
 8003254:	08002aaf 	.word	0x08002aaf

08003258 <_cleanup_r>:
 8003258:	4901      	ldr	r1, [pc, #4]	; (8003260 <_cleanup_r+0x8>)
 800325a:	f000 b8af 	b.w	80033bc <_fwalk_reent>
 800325e:	bf00      	nop
 8003260:	08003199 	.word	0x08003199

08003264 <__sfmoreglue>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	2368      	movs	r3, #104	; 0x68
 8003268:	1e4d      	subs	r5, r1, #1
 800326a:	435d      	muls	r5, r3
 800326c:	460e      	mov	r6, r1
 800326e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003272:	f7ff f9b3 	bl	80025dc <_malloc_r>
 8003276:	4604      	mov	r4, r0
 8003278:	b140      	cbz	r0, 800328c <__sfmoreglue+0x28>
 800327a:	2100      	movs	r1, #0
 800327c:	e9c0 1600 	strd	r1, r6, [r0]
 8003280:	300c      	adds	r0, #12
 8003282:	60a0      	str	r0, [r4, #8]
 8003284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003288:	f7ff f980 	bl	800258c <memset>
 800328c:	4620      	mov	r0, r4
 800328e:	bd70      	pop	{r4, r5, r6, pc}

08003290 <__sfp_lock_acquire>:
 8003290:	4801      	ldr	r0, [pc, #4]	; (8003298 <__sfp_lock_acquire+0x8>)
 8003292:	f000 b8b3 	b.w	80033fc <__retarget_lock_acquire_recursive>
 8003296:	bf00      	nop
 8003298:	20000d0d 	.word	0x20000d0d

0800329c <__sfp_lock_release>:
 800329c:	4801      	ldr	r0, [pc, #4]	; (80032a4 <__sfp_lock_release+0x8>)
 800329e:	f000 b8ae 	b.w	80033fe <__retarget_lock_release_recursive>
 80032a2:	bf00      	nop
 80032a4:	20000d0d 	.word	0x20000d0d

080032a8 <__sinit_lock_acquire>:
 80032a8:	4801      	ldr	r0, [pc, #4]	; (80032b0 <__sinit_lock_acquire+0x8>)
 80032aa:	f000 b8a7 	b.w	80033fc <__retarget_lock_acquire_recursive>
 80032ae:	bf00      	nop
 80032b0:	20000d0e 	.word	0x20000d0e

080032b4 <__sinit_lock_release>:
 80032b4:	4801      	ldr	r0, [pc, #4]	; (80032bc <__sinit_lock_release+0x8>)
 80032b6:	f000 b8a2 	b.w	80033fe <__retarget_lock_release_recursive>
 80032ba:	bf00      	nop
 80032bc:	20000d0e 	.word	0x20000d0e

080032c0 <__sinit>:
 80032c0:	b510      	push	{r4, lr}
 80032c2:	4604      	mov	r4, r0
 80032c4:	f7ff fff0 	bl	80032a8 <__sinit_lock_acquire>
 80032c8:	69a3      	ldr	r3, [r4, #24]
 80032ca:	b11b      	cbz	r3, 80032d4 <__sinit+0x14>
 80032cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032d0:	f7ff bff0 	b.w	80032b4 <__sinit_lock_release>
 80032d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032d8:	6523      	str	r3, [r4, #80]	; 0x50
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <__sinit+0x68>)
 80032dc:	4a13      	ldr	r2, [pc, #76]	; (800332c <__sinit+0x6c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80032e2:	42a3      	cmp	r3, r4
 80032e4:	bf04      	itt	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	61a3      	streq	r3, [r4, #24]
 80032ea:	4620      	mov	r0, r4
 80032ec:	f000 f820 	bl	8003330 <__sfp>
 80032f0:	6060      	str	r0, [r4, #4]
 80032f2:	4620      	mov	r0, r4
 80032f4:	f000 f81c 	bl	8003330 <__sfp>
 80032f8:	60a0      	str	r0, [r4, #8]
 80032fa:	4620      	mov	r0, r4
 80032fc:	f000 f818 	bl	8003330 <__sfp>
 8003300:	2200      	movs	r2, #0
 8003302:	60e0      	str	r0, [r4, #12]
 8003304:	2104      	movs	r1, #4
 8003306:	6860      	ldr	r0, [r4, #4]
 8003308:	f7ff ff82 	bl	8003210 <std>
 800330c:	68a0      	ldr	r0, [r4, #8]
 800330e:	2201      	movs	r2, #1
 8003310:	2109      	movs	r1, #9
 8003312:	f7ff ff7d 	bl	8003210 <std>
 8003316:	68e0      	ldr	r0, [r4, #12]
 8003318:	2202      	movs	r2, #2
 800331a:	2112      	movs	r1, #18
 800331c:	f7ff ff78 	bl	8003210 <std>
 8003320:	2301      	movs	r3, #1
 8003322:	61a3      	str	r3, [r4, #24]
 8003324:	e7d2      	b.n	80032cc <__sinit+0xc>
 8003326:	bf00      	nop
 8003328:	08004c40 	.word	0x08004c40
 800332c:	08003259 	.word	0x08003259

08003330 <__sfp>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	4607      	mov	r7, r0
 8003334:	f7ff ffac 	bl	8003290 <__sfp_lock_acquire>
 8003338:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <__sfp+0x84>)
 800333a:	681e      	ldr	r6, [r3, #0]
 800333c:	69b3      	ldr	r3, [r6, #24]
 800333e:	b913      	cbnz	r3, 8003346 <__sfp+0x16>
 8003340:	4630      	mov	r0, r6
 8003342:	f7ff ffbd 	bl	80032c0 <__sinit>
 8003346:	3648      	adds	r6, #72	; 0x48
 8003348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800334c:	3b01      	subs	r3, #1
 800334e:	d503      	bpl.n	8003358 <__sfp+0x28>
 8003350:	6833      	ldr	r3, [r6, #0]
 8003352:	b30b      	cbz	r3, 8003398 <__sfp+0x68>
 8003354:	6836      	ldr	r6, [r6, #0]
 8003356:	e7f7      	b.n	8003348 <__sfp+0x18>
 8003358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800335c:	b9d5      	cbnz	r5, 8003394 <__sfp+0x64>
 800335e:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <__sfp+0x88>)
 8003360:	60e3      	str	r3, [r4, #12]
 8003362:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003366:	6665      	str	r5, [r4, #100]	; 0x64
 8003368:	f000 f847 	bl	80033fa <__retarget_lock_init_recursive>
 800336c:	f7ff ff96 	bl	800329c <__sfp_lock_release>
 8003370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003378:	6025      	str	r5, [r4, #0]
 800337a:	61a5      	str	r5, [r4, #24]
 800337c:	2208      	movs	r2, #8
 800337e:	4629      	mov	r1, r5
 8003380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003384:	f7ff f902 	bl	800258c <memset>
 8003388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800338c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003390:	4620      	mov	r0, r4
 8003392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003394:	3468      	adds	r4, #104	; 0x68
 8003396:	e7d9      	b.n	800334c <__sfp+0x1c>
 8003398:	2104      	movs	r1, #4
 800339a:	4638      	mov	r0, r7
 800339c:	f7ff ff62 	bl	8003264 <__sfmoreglue>
 80033a0:	4604      	mov	r4, r0
 80033a2:	6030      	str	r0, [r6, #0]
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d1d5      	bne.n	8003354 <__sfp+0x24>
 80033a8:	f7ff ff78 	bl	800329c <__sfp_lock_release>
 80033ac:	230c      	movs	r3, #12
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	e7ee      	b.n	8003390 <__sfp+0x60>
 80033b2:	bf00      	nop
 80033b4:	08004c40 	.word	0x08004c40
 80033b8:	ffff0001 	.word	0xffff0001

080033bc <_fwalk_reent>:
 80033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c0:	4606      	mov	r6, r0
 80033c2:	4688      	mov	r8, r1
 80033c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033c8:	2700      	movs	r7, #0
 80033ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033ce:	f1b9 0901 	subs.w	r9, r9, #1
 80033d2:	d505      	bpl.n	80033e0 <_fwalk_reent+0x24>
 80033d4:	6824      	ldr	r4, [r4, #0]
 80033d6:	2c00      	cmp	r4, #0
 80033d8:	d1f7      	bne.n	80033ca <_fwalk_reent+0xe>
 80033da:	4638      	mov	r0, r7
 80033dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033e0:	89ab      	ldrh	r3, [r5, #12]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d907      	bls.n	80033f6 <_fwalk_reent+0x3a>
 80033e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033ea:	3301      	adds	r3, #1
 80033ec:	d003      	beq.n	80033f6 <_fwalk_reent+0x3a>
 80033ee:	4629      	mov	r1, r5
 80033f0:	4630      	mov	r0, r6
 80033f2:	47c0      	blx	r8
 80033f4:	4307      	orrs	r7, r0
 80033f6:	3568      	adds	r5, #104	; 0x68
 80033f8:	e7e9      	b.n	80033ce <_fwalk_reent+0x12>

080033fa <__retarget_lock_init_recursive>:
 80033fa:	4770      	bx	lr

080033fc <__retarget_lock_acquire_recursive>:
 80033fc:	4770      	bx	lr

080033fe <__retarget_lock_release_recursive>:
 80033fe:	4770      	bx	lr

08003400 <_lseek_r>:
 8003400:	b538      	push	{r3, r4, r5, lr}
 8003402:	4d07      	ldr	r5, [pc, #28]	; (8003420 <_lseek_r+0x20>)
 8003404:	4604      	mov	r4, r0
 8003406:	4608      	mov	r0, r1
 8003408:	4611      	mov	r1, r2
 800340a:	2200      	movs	r2, #0
 800340c:	602a      	str	r2, [r5, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	f001 f92c 	bl	800466c <_lseek>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d102      	bne.n	800341e <_lseek_r+0x1e>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	b103      	cbz	r3, 800341e <_lseek_r+0x1e>
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	bd38      	pop	{r3, r4, r5, pc}
 8003420:	20000d10 	.word	0x20000d10

08003424 <__swhatbuf_r>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	460c      	mov	r4, r1
 8003428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800342c:	2900      	cmp	r1, #0
 800342e:	b096      	sub	sp, #88	; 0x58
 8003430:	4615      	mov	r5, r2
 8003432:	461e      	mov	r6, r3
 8003434:	da0d      	bge.n	8003452 <__swhatbuf_r+0x2e>
 8003436:	89a3      	ldrh	r3, [r4, #12]
 8003438:	f013 0f80 	tst.w	r3, #128	; 0x80
 800343c:	f04f 0100 	mov.w	r1, #0
 8003440:	bf0c      	ite	eq
 8003442:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003446:	2340      	movne	r3, #64	; 0x40
 8003448:	2000      	movs	r0, #0
 800344a:	6031      	str	r1, [r6, #0]
 800344c:	602b      	str	r3, [r5, #0]
 800344e:	b016      	add	sp, #88	; 0x58
 8003450:	bd70      	pop	{r4, r5, r6, pc}
 8003452:	466a      	mov	r2, sp
 8003454:	f001 f8b8 	bl	80045c8 <_fstat_r>
 8003458:	2800      	cmp	r0, #0
 800345a:	dbec      	blt.n	8003436 <__swhatbuf_r+0x12>
 800345c:	9901      	ldr	r1, [sp, #4]
 800345e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003462:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003466:	4259      	negs	r1, r3
 8003468:	4159      	adcs	r1, r3
 800346a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346e:	e7eb      	b.n	8003448 <__swhatbuf_r+0x24>

08003470 <__smakebuf_r>:
 8003470:	898b      	ldrh	r3, [r1, #12]
 8003472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003474:	079d      	lsls	r5, r3, #30
 8003476:	4606      	mov	r6, r0
 8003478:	460c      	mov	r4, r1
 800347a:	d507      	bpl.n	800348c <__smakebuf_r+0x1c>
 800347c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	6123      	str	r3, [r4, #16]
 8003484:	2301      	movs	r3, #1
 8003486:	6163      	str	r3, [r4, #20]
 8003488:	b002      	add	sp, #8
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	ab01      	add	r3, sp, #4
 800348e:	466a      	mov	r2, sp
 8003490:	f7ff ffc8 	bl	8003424 <__swhatbuf_r>
 8003494:	9900      	ldr	r1, [sp, #0]
 8003496:	4605      	mov	r5, r0
 8003498:	4630      	mov	r0, r6
 800349a:	f7ff f89f 	bl	80025dc <_malloc_r>
 800349e:	b948      	cbnz	r0, 80034b4 <__smakebuf_r+0x44>
 80034a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034a4:	059a      	lsls	r2, r3, #22
 80034a6:	d4ef      	bmi.n	8003488 <__smakebuf_r+0x18>
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	e7e3      	b.n	800347c <__smakebuf_r+0xc>
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <__smakebuf_r+0x7c>)
 80034b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	6020      	str	r0, [r4, #0]
 80034bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	9b00      	ldr	r3, [sp, #0]
 80034c4:	6163      	str	r3, [r4, #20]
 80034c6:	9b01      	ldr	r3, [sp, #4]
 80034c8:	6120      	str	r0, [r4, #16]
 80034ca:	b15b      	cbz	r3, 80034e4 <__smakebuf_r+0x74>
 80034cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034d0:	4630      	mov	r0, r6
 80034d2:	f001 f88b 	bl	80045ec <_isatty_r>
 80034d6:	b128      	cbz	r0, 80034e4 <__smakebuf_r+0x74>
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	81a3      	strh	r3, [r4, #12]
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	431d      	orrs	r5, r3
 80034e8:	81a5      	strh	r5, [r4, #12]
 80034ea:	e7cd      	b.n	8003488 <__smakebuf_r+0x18>
 80034ec:	08003259 	.word	0x08003259

080034f0 <memmove>:
 80034f0:	4288      	cmp	r0, r1
 80034f2:	b510      	push	{r4, lr}
 80034f4:	eb01 0402 	add.w	r4, r1, r2
 80034f8:	d902      	bls.n	8003500 <memmove+0x10>
 80034fa:	4284      	cmp	r4, r0
 80034fc:	4623      	mov	r3, r4
 80034fe:	d807      	bhi.n	8003510 <memmove+0x20>
 8003500:	1e43      	subs	r3, r0, #1
 8003502:	42a1      	cmp	r1, r4
 8003504:	d008      	beq.n	8003518 <memmove+0x28>
 8003506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800350a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800350e:	e7f8      	b.n	8003502 <memmove+0x12>
 8003510:	4402      	add	r2, r0
 8003512:	4601      	mov	r1, r0
 8003514:	428a      	cmp	r2, r1
 8003516:	d100      	bne.n	800351a <memmove+0x2a>
 8003518:	bd10      	pop	{r4, pc}
 800351a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800351e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003522:	e7f7      	b.n	8003514 <memmove+0x24>

08003524 <__malloc_lock>:
 8003524:	4801      	ldr	r0, [pc, #4]	; (800352c <__malloc_lock+0x8>)
 8003526:	f7ff bf69 	b.w	80033fc <__retarget_lock_acquire_recursive>
 800352a:	bf00      	nop
 800352c:	20000d0c 	.word	0x20000d0c

08003530 <__malloc_unlock>:
 8003530:	4801      	ldr	r0, [pc, #4]	; (8003538 <__malloc_unlock+0x8>)
 8003532:	f7ff bf64 	b.w	80033fe <__retarget_lock_release_recursive>
 8003536:	bf00      	nop
 8003538:	20000d0c 	.word	0x20000d0c

0800353c <_free_r>:
 800353c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800353e:	2900      	cmp	r1, #0
 8003540:	d044      	beq.n	80035cc <_free_r+0x90>
 8003542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003546:	9001      	str	r0, [sp, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f1a1 0404 	sub.w	r4, r1, #4
 800354e:	bfb8      	it	lt
 8003550:	18e4      	addlt	r4, r4, r3
 8003552:	f7ff ffe7 	bl	8003524 <__malloc_lock>
 8003556:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <_free_r+0x94>)
 8003558:	9801      	ldr	r0, [sp, #4]
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	b933      	cbnz	r3, 800356c <_free_r+0x30>
 800355e:	6063      	str	r3, [r4, #4]
 8003560:	6014      	str	r4, [r2, #0]
 8003562:	b003      	add	sp, #12
 8003564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003568:	f7ff bfe2 	b.w	8003530 <__malloc_unlock>
 800356c:	42a3      	cmp	r3, r4
 800356e:	d908      	bls.n	8003582 <_free_r+0x46>
 8003570:	6825      	ldr	r5, [r4, #0]
 8003572:	1961      	adds	r1, r4, r5
 8003574:	428b      	cmp	r3, r1
 8003576:	bf01      	itttt	eq
 8003578:	6819      	ldreq	r1, [r3, #0]
 800357a:	685b      	ldreq	r3, [r3, #4]
 800357c:	1949      	addeq	r1, r1, r5
 800357e:	6021      	streq	r1, [r4, #0]
 8003580:	e7ed      	b.n	800355e <_free_r+0x22>
 8003582:	461a      	mov	r2, r3
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	b10b      	cbz	r3, 800358c <_free_r+0x50>
 8003588:	42a3      	cmp	r3, r4
 800358a:	d9fa      	bls.n	8003582 <_free_r+0x46>
 800358c:	6811      	ldr	r1, [r2, #0]
 800358e:	1855      	adds	r5, r2, r1
 8003590:	42a5      	cmp	r5, r4
 8003592:	d10b      	bne.n	80035ac <_free_r+0x70>
 8003594:	6824      	ldr	r4, [r4, #0]
 8003596:	4421      	add	r1, r4
 8003598:	1854      	adds	r4, r2, r1
 800359a:	42a3      	cmp	r3, r4
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	d1e0      	bne.n	8003562 <_free_r+0x26>
 80035a0:	681c      	ldr	r4, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	6053      	str	r3, [r2, #4]
 80035a6:	440c      	add	r4, r1
 80035a8:	6014      	str	r4, [r2, #0]
 80035aa:	e7da      	b.n	8003562 <_free_r+0x26>
 80035ac:	d902      	bls.n	80035b4 <_free_r+0x78>
 80035ae:	230c      	movs	r3, #12
 80035b0:	6003      	str	r3, [r0, #0]
 80035b2:	e7d6      	b.n	8003562 <_free_r+0x26>
 80035b4:	6825      	ldr	r5, [r4, #0]
 80035b6:	1961      	adds	r1, r4, r5
 80035b8:	428b      	cmp	r3, r1
 80035ba:	bf04      	itt	eq
 80035bc:	6819      	ldreq	r1, [r3, #0]
 80035be:	685b      	ldreq	r3, [r3, #4]
 80035c0:	6063      	str	r3, [r4, #4]
 80035c2:	bf04      	itt	eq
 80035c4:	1949      	addeq	r1, r1, r5
 80035c6:	6021      	streq	r1, [r4, #0]
 80035c8:	6054      	str	r4, [r2, #4]
 80035ca:	e7ca      	b.n	8003562 <_free_r+0x26>
 80035cc:	b003      	add	sp, #12
 80035ce:	bd30      	pop	{r4, r5, pc}
 80035d0:	20000d04 	.word	0x20000d04

080035d4 <_realloc_r>:
 80035d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d8:	4680      	mov	r8, r0
 80035da:	4614      	mov	r4, r2
 80035dc:	460e      	mov	r6, r1
 80035de:	b921      	cbnz	r1, 80035ea <_realloc_r+0x16>
 80035e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035e4:	4611      	mov	r1, r2
 80035e6:	f7fe bff9 	b.w	80025dc <_malloc_r>
 80035ea:	b92a      	cbnz	r2, 80035f8 <_realloc_r+0x24>
 80035ec:	f7ff ffa6 	bl	800353c <_free_r>
 80035f0:	4625      	mov	r5, r4
 80035f2:	4628      	mov	r0, r5
 80035f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035f8:	f001 f808 	bl	800460c <_malloc_usable_size_r>
 80035fc:	4284      	cmp	r4, r0
 80035fe:	4607      	mov	r7, r0
 8003600:	d802      	bhi.n	8003608 <_realloc_r+0x34>
 8003602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003606:	d812      	bhi.n	800362e <_realloc_r+0x5a>
 8003608:	4621      	mov	r1, r4
 800360a:	4640      	mov	r0, r8
 800360c:	f7fe ffe6 	bl	80025dc <_malloc_r>
 8003610:	4605      	mov	r5, r0
 8003612:	2800      	cmp	r0, #0
 8003614:	d0ed      	beq.n	80035f2 <_realloc_r+0x1e>
 8003616:	42bc      	cmp	r4, r7
 8003618:	4622      	mov	r2, r4
 800361a:	4631      	mov	r1, r6
 800361c:	bf28      	it	cs
 800361e:	463a      	movcs	r2, r7
 8003620:	f7fe ffa6 	bl	8002570 <memcpy>
 8003624:	4631      	mov	r1, r6
 8003626:	4640      	mov	r0, r8
 8003628:	f7ff ff88 	bl	800353c <_free_r>
 800362c:	e7e1      	b.n	80035f2 <_realloc_r+0x1e>
 800362e:	4635      	mov	r5, r6
 8003630:	e7df      	b.n	80035f2 <_realloc_r+0x1e>

08003632 <__ssputs_r>:
 8003632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003636:	688e      	ldr	r6, [r1, #8]
 8003638:	461f      	mov	r7, r3
 800363a:	42be      	cmp	r6, r7
 800363c:	680b      	ldr	r3, [r1, #0]
 800363e:	4682      	mov	sl, r0
 8003640:	460c      	mov	r4, r1
 8003642:	4690      	mov	r8, r2
 8003644:	d82c      	bhi.n	80036a0 <__ssputs_r+0x6e>
 8003646:	898a      	ldrh	r2, [r1, #12]
 8003648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800364c:	d026      	beq.n	800369c <__ssputs_r+0x6a>
 800364e:	6965      	ldr	r5, [r4, #20]
 8003650:	6909      	ldr	r1, [r1, #16]
 8003652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003656:	eba3 0901 	sub.w	r9, r3, r1
 800365a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800365e:	1c7b      	adds	r3, r7, #1
 8003660:	444b      	add	r3, r9
 8003662:	106d      	asrs	r5, r5, #1
 8003664:	429d      	cmp	r5, r3
 8003666:	bf38      	it	cc
 8003668:	461d      	movcc	r5, r3
 800366a:	0553      	lsls	r3, r2, #21
 800366c:	d527      	bpl.n	80036be <__ssputs_r+0x8c>
 800366e:	4629      	mov	r1, r5
 8003670:	f7fe ffb4 	bl	80025dc <_malloc_r>
 8003674:	4606      	mov	r6, r0
 8003676:	b360      	cbz	r0, 80036d2 <__ssputs_r+0xa0>
 8003678:	6921      	ldr	r1, [r4, #16]
 800367a:	464a      	mov	r2, r9
 800367c:	f7fe ff78 	bl	8002570 <memcpy>
 8003680:	89a3      	ldrh	r3, [r4, #12]
 8003682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	6126      	str	r6, [r4, #16]
 800368e:	6165      	str	r5, [r4, #20]
 8003690:	444e      	add	r6, r9
 8003692:	eba5 0509 	sub.w	r5, r5, r9
 8003696:	6026      	str	r6, [r4, #0]
 8003698:	60a5      	str	r5, [r4, #8]
 800369a:	463e      	mov	r6, r7
 800369c:	42be      	cmp	r6, r7
 800369e:	d900      	bls.n	80036a2 <__ssputs_r+0x70>
 80036a0:	463e      	mov	r6, r7
 80036a2:	6820      	ldr	r0, [r4, #0]
 80036a4:	4632      	mov	r2, r6
 80036a6:	4641      	mov	r1, r8
 80036a8:	f7ff ff22 	bl	80034f0 <memmove>
 80036ac:	68a3      	ldr	r3, [r4, #8]
 80036ae:	1b9b      	subs	r3, r3, r6
 80036b0:	60a3      	str	r3, [r4, #8]
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	4433      	add	r3, r6
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	2000      	movs	r0, #0
 80036ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036be:	462a      	mov	r2, r5
 80036c0:	f7ff ff88 	bl	80035d4 <_realloc_r>
 80036c4:	4606      	mov	r6, r0
 80036c6:	2800      	cmp	r0, #0
 80036c8:	d1e0      	bne.n	800368c <__ssputs_r+0x5a>
 80036ca:	6921      	ldr	r1, [r4, #16]
 80036cc:	4650      	mov	r0, sl
 80036ce:	f7ff ff35 	bl	800353c <_free_r>
 80036d2:	230c      	movs	r3, #12
 80036d4:	f8ca 3000 	str.w	r3, [sl]
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036e4:	e7e9      	b.n	80036ba <__ssputs_r+0x88>
	...

080036e8 <_svfiprintf_r>:
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	4698      	mov	r8, r3
 80036ee:	898b      	ldrh	r3, [r1, #12]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	b09d      	sub	sp, #116	; 0x74
 80036f4:	4607      	mov	r7, r0
 80036f6:	460d      	mov	r5, r1
 80036f8:	4614      	mov	r4, r2
 80036fa:	d50e      	bpl.n	800371a <_svfiprintf_r+0x32>
 80036fc:	690b      	ldr	r3, [r1, #16]
 80036fe:	b963      	cbnz	r3, 800371a <_svfiprintf_r+0x32>
 8003700:	2140      	movs	r1, #64	; 0x40
 8003702:	f7fe ff6b 	bl	80025dc <_malloc_r>
 8003706:	6028      	str	r0, [r5, #0]
 8003708:	6128      	str	r0, [r5, #16]
 800370a:	b920      	cbnz	r0, 8003716 <_svfiprintf_r+0x2e>
 800370c:	230c      	movs	r3, #12
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003714:	e0d0      	b.n	80038b8 <_svfiprintf_r+0x1d0>
 8003716:	2340      	movs	r3, #64	; 0x40
 8003718:	616b      	str	r3, [r5, #20]
 800371a:	2300      	movs	r3, #0
 800371c:	9309      	str	r3, [sp, #36]	; 0x24
 800371e:	2320      	movs	r3, #32
 8003720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003724:	f8cd 800c 	str.w	r8, [sp, #12]
 8003728:	2330      	movs	r3, #48	; 0x30
 800372a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038d0 <_svfiprintf_r+0x1e8>
 800372e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003732:	f04f 0901 	mov.w	r9, #1
 8003736:	4623      	mov	r3, r4
 8003738:	469a      	mov	sl, r3
 800373a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800373e:	b10a      	cbz	r2, 8003744 <_svfiprintf_r+0x5c>
 8003740:	2a25      	cmp	r2, #37	; 0x25
 8003742:	d1f9      	bne.n	8003738 <_svfiprintf_r+0x50>
 8003744:	ebba 0b04 	subs.w	fp, sl, r4
 8003748:	d00b      	beq.n	8003762 <_svfiprintf_r+0x7a>
 800374a:	465b      	mov	r3, fp
 800374c:	4622      	mov	r2, r4
 800374e:	4629      	mov	r1, r5
 8003750:	4638      	mov	r0, r7
 8003752:	f7ff ff6e 	bl	8003632 <__ssputs_r>
 8003756:	3001      	adds	r0, #1
 8003758:	f000 80a9 	beq.w	80038ae <_svfiprintf_r+0x1c6>
 800375c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800375e:	445a      	add	r2, fp
 8003760:	9209      	str	r2, [sp, #36]	; 0x24
 8003762:	f89a 3000 	ldrb.w	r3, [sl]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80a1 	beq.w	80038ae <_svfiprintf_r+0x1c6>
 800376c:	2300      	movs	r3, #0
 800376e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003776:	f10a 0a01 	add.w	sl, sl, #1
 800377a:	9304      	str	r3, [sp, #16]
 800377c:	9307      	str	r3, [sp, #28]
 800377e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003782:	931a      	str	r3, [sp, #104]	; 0x68
 8003784:	4654      	mov	r4, sl
 8003786:	2205      	movs	r2, #5
 8003788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378c:	4850      	ldr	r0, [pc, #320]	; (80038d0 <_svfiprintf_r+0x1e8>)
 800378e:	f7fc fd0f 	bl	80001b0 <memchr>
 8003792:	9a04      	ldr	r2, [sp, #16]
 8003794:	b9d8      	cbnz	r0, 80037ce <_svfiprintf_r+0xe6>
 8003796:	06d0      	lsls	r0, r2, #27
 8003798:	bf44      	itt	mi
 800379a:	2320      	movmi	r3, #32
 800379c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a0:	0711      	lsls	r1, r2, #28
 80037a2:	bf44      	itt	mi
 80037a4:	232b      	movmi	r3, #43	; 0x2b
 80037a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037aa:	f89a 3000 	ldrb.w	r3, [sl]
 80037ae:	2b2a      	cmp	r3, #42	; 0x2a
 80037b0:	d015      	beq.n	80037de <_svfiprintf_r+0xf6>
 80037b2:	9a07      	ldr	r2, [sp, #28]
 80037b4:	4654      	mov	r4, sl
 80037b6:	2000      	movs	r0, #0
 80037b8:	f04f 0c0a 	mov.w	ip, #10
 80037bc:	4621      	mov	r1, r4
 80037be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037c2:	3b30      	subs	r3, #48	; 0x30
 80037c4:	2b09      	cmp	r3, #9
 80037c6:	d94d      	bls.n	8003864 <_svfiprintf_r+0x17c>
 80037c8:	b1b0      	cbz	r0, 80037f8 <_svfiprintf_r+0x110>
 80037ca:	9207      	str	r2, [sp, #28]
 80037cc:	e014      	b.n	80037f8 <_svfiprintf_r+0x110>
 80037ce:	eba0 0308 	sub.w	r3, r0, r8
 80037d2:	fa09 f303 	lsl.w	r3, r9, r3
 80037d6:	4313      	orrs	r3, r2
 80037d8:	9304      	str	r3, [sp, #16]
 80037da:	46a2      	mov	sl, r4
 80037dc:	e7d2      	b.n	8003784 <_svfiprintf_r+0x9c>
 80037de:	9b03      	ldr	r3, [sp, #12]
 80037e0:	1d19      	adds	r1, r3, #4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	9103      	str	r1, [sp, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bfbb      	ittet	lt
 80037ea:	425b      	neglt	r3, r3
 80037ec:	f042 0202 	orrlt.w	r2, r2, #2
 80037f0:	9307      	strge	r3, [sp, #28]
 80037f2:	9307      	strlt	r3, [sp, #28]
 80037f4:	bfb8      	it	lt
 80037f6:	9204      	strlt	r2, [sp, #16]
 80037f8:	7823      	ldrb	r3, [r4, #0]
 80037fa:	2b2e      	cmp	r3, #46	; 0x2e
 80037fc:	d10c      	bne.n	8003818 <_svfiprintf_r+0x130>
 80037fe:	7863      	ldrb	r3, [r4, #1]
 8003800:	2b2a      	cmp	r3, #42	; 0x2a
 8003802:	d134      	bne.n	800386e <_svfiprintf_r+0x186>
 8003804:	9b03      	ldr	r3, [sp, #12]
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	9203      	str	r2, [sp, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	bfb8      	it	lt
 8003810:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003814:	3402      	adds	r4, #2
 8003816:	9305      	str	r3, [sp, #20]
 8003818:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80038e0 <_svfiprintf_r+0x1f8>
 800381c:	7821      	ldrb	r1, [r4, #0]
 800381e:	2203      	movs	r2, #3
 8003820:	4650      	mov	r0, sl
 8003822:	f7fc fcc5 	bl	80001b0 <memchr>
 8003826:	b138      	cbz	r0, 8003838 <_svfiprintf_r+0x150>
 8003828:	9b04      	ldr	r3, [sp, #16]
 800382a:	eba0 000a 	sub.w	r0, r0, sl
 800382e:	2240      	movs	r2, #64	; 0x40
 8003830:	4082      	lsls	r2, r0
 8003832:	4313      	orrs	r3, r2
 8003834:	3401      	adds	r4, #1
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800383c:	4825      	ldr	r0, [pc, #148]	; (80038d4 <_svfiprintf_r+0x1ec>)
 800383e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003842:	2206      	movs	r2, #6
 8003844:	f7fc fcb4 	bl	80001b0 <memchr>
 8003848:	2800      	cmp	r0, #0
 800384a:	d038      	beq.n	80038be <_svfiprintf_r+0x1d6>
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <_svfiprintf_r+0x1f0>)
 800384e:	bb1b      	cbnz	r3, 8003898 <_svfiprintf_r+0x1b0>
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	3307      	adds	r3, #7
 8003854:	f023 0307 	bic.w	r3, r3, #7
 8003858:	3308      	adds	r3, #8
 800385a:	9303      	str	r3, [sp, #12]
 800385c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800385e:	4433      	add	r3, r6
 8003860:	9309      	str	r3, [sp, #36]	; 0x24
 8003862:	e768      	b.n	8003736 <_svfiprintf_r+0x4e>
 8003864:	fb0c 3202 	mla	r2, ip, r2, r3
 8003868:	460c      	mov	r4, r1
 800386a:	2001      	movs	r0, #1
 800386c:	e7a6      	b.n	80037bc <_svfiprintf_r+0xd4>
 800386e:	2300      	movs	r3, #0
 8003870:	3401      	adds	r4, #1
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	4619      	mov	r1, r3
 8003876:	f04f 0c0a 	mov.w	ip, #10
 800387a:	4620      	mov	r0, r4
 800387c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003880:	3a30      	subs	r2, #48	; 0x30
 8003882:	2a09      	cmp	r2, #9
 8003884:	d903      	bls.n	800388e <_svfiprintf_r+0x1a6>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0c6      	beq.n	8003818 <_svfiprintf_r+0x130>
 800388a:	9105      	str	r1, [sp, #20]
 800388c:	e7c4      	b.n	8003818 <_svfiprintf_r+0x130>
 800388e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003892:	4604      	mov	r4, r0
 8003894:	2301      	movs	r3, #1
 8003896:	e7f0      	b.n	800387a <_svfiprintf_r+0x192>
 8003898:	ab03      	add	r3, sp, #12
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	462a      	mov	r2, r5
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <_svfiprintf_r+0x1f4>)
 80038a0:	a904      	add	r1, sp, #16
 80038a2:	4638      	mov	r0, r7
 80038a4:	f3af 8000 	nop.w
 80038a8:	1c42      	adds	r2, r0, #1
 80038aa:	4606      	mov	r6, r0
 80038ac:	d1d6      	bne.n	800385c <_svfiprintf_r+0x174>
 80038ae:	89ab      	ldrh	r3, [r5, #12]
 80038b0:	065b      	lsls	r3, r3, #25
 80038b2:	f53f af2d 	bmi.w	8003710 <_svfiprintf_r+0x28>
 80038b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038b8:	b01d      	add	sp, #116	; 0x74
 80038ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038be:	ab03      	add	r3, sp, #12
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	462a      	mov	r2, r5
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <_svfiprintf_r+0x1f4>)
 80038c6:	a904      	add	r1, sp, #16
 80038c8:	4638      	mov	r0, r7
 80038ca:	f000 fa4b 	bl	8003d64 <_printf_i>
 80038ce:	e7eb      	b.n	80038a8 <_svfiprintf_r+0x1c0>
 80038d0:	08004c44 	.word	0x08004c44
 80038d4:	08004c4e 	.word	0x08004c4e
 80038d8:	00000000 	.word	0x00000000
 80038dc:	08003633 	.word	0x08003633
 80038e0:	08004c4a 	.word	0x08004c4a

080038e4 <_sungetc_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	1c4b      	adds	r3, r1, #1
 80038e8:	4614      	mov	r4, r2
 80038ea:	d103      	bne.n	80038f4 <_sungetc_r+0x10>
 80038ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80038f0:	4628      	mov	r0, r5
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
 80038f4:	8993      	ldrh	r3, [r2, #12]
 80038f6:	f023 0320 	bic.w	r3, r3, #32
 80038fa:	8193      	strh	r3, [r2, #12]
 80038fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038fe:	6852      	ldr	r2, [r2, #4]
 8003900:	b2cd      	uxtb	r5, r1
 8003902:	b18b      	cbz	r3, 8003928 <_sungetc_r+0x44>
 8003904:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003906:	4293      	cmp	r3, r2
 8003908:	dd08      	ble.n	800391c <_sungetc_r+0x38>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	6022      	str	r2, [r4, #0]
 8003910:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	3301      	adds	r3, #1
 8003918:	6063      	str	r3, [r4, #4]
 800391a:	e7e9      	b.n	80038f0 <_sungetc_r+0xc>
 800391c:	4621      	mov	r1, r4
 800391e:	f000 fe19 	bl	8004554 <__submore>
 8003922:	2800      	cmp	r0, #0
 8003924:	d0f1      	beq.n	800390a <_sungetc_r+0x26>
 8003926:	e7e1      	b.n	80038ec <_sungetc_r+0x8>
 8003928:	6921      	ldr	r1, [r4, #16]
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	b151      	cbz	r1, 8003944 <_sungetc_r+0x60>
 800392e:	4299      	cmp	r1, r3
 8003930:	d208      	bcs.n	8003944 <_sungetc_r+0x60>
 8003932:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003936:	42a9      	cmp	r1, r5
 8003938:	d104      	bne.n	8003944 <_sungetc_r+0x60>
 800393a:	3b01      	subs	r3, #1
 800393c:	3201      	adds	r2, #1
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	6062      	str	r2, [r4, #4]
 8003942:	e7d5      	b.n	80038f0 <_sungetc_r+0xc>
 8003944:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800394c:	6363      	str	r3, [r4, #52]	; 0x34
 800394e:	2303      	movs	r3, #3
 8003950:	63a3      	str	r3, [r4, #56]	; 0x38
 8003952:	4623      	mov	r3, r4
 8003954:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	2301      	movs	r3, #1
 800395c:	e7dc      	b.n	8003918 <_sungetc_r+0x34>

0800395e <__ssrefill_r>:
 800395e:	b510      	push	{r4, lr}
 8003960:	460c      	mov	r4, r1
 8003962:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003964:	b169      	cbz	r1, 8003982 <__ssrefill_r+0x24>
 8003966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800396a:	4299      	cmp	r1, r3
 800396c:	d001      	beq.n	8003972 <__ssrefill_r+0x14>
 800396e:	f7ff fde5 	bl	800353c <_free_r>
 8003972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003974:	6063      	str	r3, [r4, #4]
 8003976:	2000      	movs	r0, #0
 8003978:	6360      	str	r0, [r4, #52]	; 0x34
 800397a:	b113      	cbz	r3, 8003982 <__ssrefill_r+0x24>
 800397c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800397e:	6023      	str	r3, [r4, #0]
 8003980:	bd10      	pop	{r4, pc}
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	2300      	movs	r3, #0
 8003988:	6063      	str	r3, [r4, #4]
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	f043 0320 	orr.w	r3, r3, #32
 8003990:	81a3      	strh	r3, [r4, #12]
 8003992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003996:	e7f3      	b.n	8003980 <__ssrefill_r+0x22>

08003998 <__ssvfiscanf_r>:
 8003998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	460c      	mov	r4, r1
 800399e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80039a2:	2100      	movs	r1, #0
 80039a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80039a8:	49a6      	ldr	r1, [pc, #664]	; (8003c44 <__ssvfiscanf_r+0x2ac>)
 80039aa:	91a0      	str	r1, [sp, #640]	; 0x280
 80039ac:	f10d 0804 	add.w	r8, sp, #4
 80039b0:	49a5      	ldr	r1, [pc, #660]	; (8003c48 <__ssvfiscanf_r+0x2b0>)
 80039b2:	4fa6      	ldr	r7, [pc, #664]	; (8003c4c <__ssvfiscanf_r+0x2b4>)
 80039b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003c50 <__ssvfiscanf_r+0x2b8>
 80039b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80039bc:	4606      	mov	r6, r0
 80039be:	91a1      	str	r1, [sp, #644]	; 0x284
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	7813      	ldrb	r3, [r2, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 815a 	beq.w	8003c7e <__ssvfiscanf_r+0x2e6>
 80039ca:	5cf9      	ldrb	r1, [r7, r3]
 80039cc:	f011 0108 	ands.w	r1, r1, #8
 80039d0:	f102 0501 	add.w	r5, r2, #1
 80039d4:	d019      	beq.n	8003a0a <__ssvfiscanf_r+0x72>
 80039d6:	6863      	ldr	r3, [r4, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	dd0f      	ble.n	80039fc <__ssvfiscanf_r+0x64>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	5cba      	ldrb	r2, [r7, r2]
 80039e2:	0712      	lsls	r2, r2, #28
 80039e4:	d401      	bmi.n	80039ea <__ssvfiscanf_r+0x52>
 80039e6:	462a      	mov	r2, r5
 80039e8:	e7eb      	b.n	80039c2 <__ssvfiscanf_r+0x2a>
 80039ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80039ec:	3201      	adds	r2, #1
 80039ee:	9245      	str	r2, [sp, #276]	; 0x114
 80039f0:	6862      	ldr	r2, [r4, #4]
 80039f2:	3301      	adds	r3, #1
 80039f4:	3a01      	subs	r2, #1
 80039f6:	6062      	str	r2, [r4, #4]
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	e7ec      	b.n	80039d6 <__ssvfiscanf_r+0x3e>
 80039fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80039fe:	4621      	mov	r1, r4
 8003a00:	4630      	mov	r0, r6
 8003a02:	4798      	blx	r3
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d0e9      	beq.n	80039dc <__ssvfiscanf_r+0x44>
 8003a08:	e7ed      	b.n	80039e6 <__ssvfiscanf_r+0x4e>
 8003a0a:	2b25      	cmp	r3, #37	; 0x25
 8003a0c:	d012      	beq.n	8003a34 <__ssvfiscanf_r+0x9c>
 8003a0e:	469a      	mov	sl, r3
 8003a10:	6863      	ldr	r3, [r4, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f340 8091 	ble.w	8003b3a <__ssvfiscanf_r+0x1a2>
 8003a18:	6822      	ldr	r2, [r4, #0]
 8003a1a:	7813      	ldrb	r3, [r2, #0]
 8003a1c:	4553      	cmp	r3, sl
 8003a1e:	f040 812e 	bne.w	8003c7e <__ssvfiscanf_r+0x2e6>
 8003a22:	6863      	ldr	r3, [r4, #4]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	6063      	str	r3, [r4, #4]
 8003a28:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003a2a:	3201      	adds	r2, #1
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	6022      	str	r2, [r4, #0]
 8003a30:	9345      	str	r3, [sp, #276]	; 0x114
 8003a32:	e7d8      	b.n	80039e6 <__ssvfiscanf_r+0x4e>
 8003a34:	9141      	str	r1, [sp, #260]	; 0x104
 8003a36:	9143      	str	r1, [sp, #268]	; 0x10c
 8003a38:	7853      	ldrb	r3, [r2, #1]
 8003a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3c:	bf02      	ittt	eq
 8003a3e:	2310      	moveq	r3, #16
 8003a40:	1c95      	addeq	r5, r2, #2
 8003a42:	9341      	streq	r3, [sp, #260]	; 0x104
 8003a44:	220a      	movs	r2, #10
 8003a46:	46aa      	mov	sl, r5
 8003a48:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003a4c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003a50:	2b09      	cmp	r3, #9
 8003a52:	d91c      	bls.n	8003a8e <__ssvfiscanf_r+0xf6>
 8003a54:	487e      	ldr	r0, [pc, #504]	; (8003c50 <__ssvfiscanf_r+0x2b8>)
 8003a56:	2203      	movs	r2, #3
 8003a58:	f7fc fbaa 	bl	80001b0 <memchr>
 8003a5c:	b138      	cbz	r0, 8003a6e <__ssvfiscanf_r+0xd6>
 8003a5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003a60:	eba0 0009 	sub.w	r0, r0, r9
 8003a64:	2301      	movs	r3, #1
 8003a66:	4083      	lsls	r3, r0
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	9341      	str	r3, [sp, #260]	; 0x104
 8003a6c:	4655      	mov	r5, sl
 8003a6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a72:	2b78      	cmp	r3, #120	; 0x78
 8003a74:	d806      	bhi.n	8003a84 <__ssvfiscanf_r+0xec>
 8003a76:	2b57      	cmp	r3, #87	; 0x57
 8003a78:	d810      	bhi.n	8003a9c <__ssvfiscanf_r+0x104>
 8003a7a:	2b25      	cmp	r3, #37	; 0x25
 8003a7c:	d0c7      	beq.n	8003a0e <__ssvfiscanf_r+0x76>
 8003a7e:	d857      	bhi.n	8003b30 <__ssvfiscanf_r+0x198>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d065      	beq.n	8003b50 <__ssvfiscanf_r+0x1b8>
 8003a84:	2303      	movs	r3, #3
 8003a86:	9347      	str	r3, [sp, #284]	; 0x11c
 8003a88:	230a      	movs	r3, #10
 8003a8a:	9342      	str	r3, [sp, #264]	; 0x108
 8003a8c:	e076      	b.n	8003b7c <__ssvfiscanf_r+0x1e4>
 8003a8e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003a90:	fb02 1103 	mla	r1, r2, r3, r1
 8003a94:	3930      	subs	r1, #48	; 0x30
 8003a96:	9143      	str	r1, [sp, #268]	; 0x10c
 8003a98:	4655      	mov	r5, sl
 8003a9a:	e7d4      	b.n	8003a46 <__ssvfiscanf_r+0xae>
 8003a9c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003aa0:	2a20      	cmp	r2, #32
 8003aa2:	d8ef      	bhi.n	8003a84 <__ssvfiscanf_r+0xec>
 8003aa4:	a101      	add	r1, pc, #4	; (adr r1, 8003aac <__ssvfiscanf_r+0x114>)
 8003aa6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003b5f 	.word	0x08003b5f
 8003ab0:	08003a85 	.word	0x08003a85
 8003ab4:	08003a85 	.word	0x08003a85
 8003ab8:	08003bbd 	.word	0x08003bbd
 8003abc:	08003a85 	.word	0x08003a85
 8003ac0:	08003a85 	.word	0x08003a85
 8003ac4:	08003a85 	.word	0x08003a85
 8003ac8:	08003a85 	.word	0x08003a85
 8003acc:	08003a85 	.word	0x08003a85
 8003ad0:	08003a85 	.word	0x08003a85
 8003ad4:	08003a85 	.word	0x08003a85
 8003ad8:	08003bd3 	.word	0x08003bd3
 8003adc:	08003bb9 	.word	0x08003bb9
 8003ae0:	08003b37 	.word	0x08003b37
 8003ae4:	08003b37 	.word	0x08003b37
 8003ae8:	08003b37 	.word	0x08003b37
 8003aec:	08003a85 	.word	0x08003a85
 8003af0:	08003b75 	.word	0x08003b75
 8003af4:	08003a85 	.word	0x08003a85
 8003af8:	08003a85 	.word	0x08003a85
 8003afc:	08003a85 	.word	0x08003a85
 8003b00:	08003a85 	.word	0x08003a85
 8003b04:	08003be3 	.word	0x08003be3
 8003b08:	08003bb1 	.word	0x08003bb1
 8003b0c:	08003b57 	.word	0x08003b57
 8003b10:	08003a85 	.word	0x08003a85
 8003b14:	08003a85 	.word	0x08003a85
 8003b18:	08003bdf 	.word	0x08003bdf
 8003b1c:	08003a85 	.word	0x08003a85
 8003b20:	08003bb9 	.word	0x08003bb9
 8003b24:	08003a85 	.word	0x08003a85
 8003b28:	08003a85 	.word	0x08003a85
 8003b2c:	08003b5f 	.word	0x08003b5f
 8003b30:	3b45      	subs	r3, #69	; 0x45
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d8a6      	bhi.n	8003a84 <__ssvfiscanf_r+0xec>
 8003b36:	2305      	movs	r3, #5
 8003b38:	e01f      	b.n	8003b7a <__ssvfiscanf_r+0x1e2>
 8003b3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	4630      	mov	r0, r6
 8003b40:	4798      	blx	r3
 8003b42:	2800      	cmp	r0, #0
 8003b44:	f43f af68 	beq.w	8003a18 <__ssvfiscanf_r+0x80>
 8003b48:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	f040 808d 	bne.w	8003c6a <__ssvfiscanf_r+0x2d2>
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b54:	e08f      	b.n	8003c76 <__ssvfiscanf_r+0x2de>
 8003b56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b58:	f042 0220 	orr.w	r2, r2, #32
 8003b5c:	9241      	str	r2, [sp, #260]	; 0x104
 8003b5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b64:	9241      	str	r2, [sp, #260]	; 0x104
 8003b66:	2210      	movs	r2, #16
 8003b68:	2b6f      	cmp	r3, #111	; 0x6f
 8003b6a:	9242      	str	r2, [sp, #264]	; 0x108
 8003b6c:	bf34      	ite	cc
 8003b6e:	2303      	movcc	r3, #3
 8003b70:	2304      	movcs	r3, #4
 8003b72:	e002      	b.n	8003b7a <__ssvfiscanf_r+0x1e2>
 8003b74:	2300      	movs	r3, #0
 8003b76:	9342      	str	r3, [sp, #264]	; 0x108
 8003b78:	2303      	movs	r3, #3
 8003b7a:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b7c:	6863      	ldr	r3, [r4, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	dd3d      	ble.n	8003bfe <__ssvfiscanf_r+0x266>
 8003b82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b84:	0659      	lsls	r1, r3, #25
 8003b86:	d404      	bmi.n	8003b92 <__ssvfiscanf_r+0x1fa>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	5cba      	ldrb	r2, [r7, r2]
 8003b8e:	0712      	lsls	r2, r2, #28
 8003b90:	d43c      	bmi.n	8003c0c <__ssvfiscanf_r+0x274>
 8003b92:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	dc4b      	bgt.n	8003c30 <__ssvfiscanf_r+0x298>
 8003b98:	466b      	mov	r3, sp
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	a941      	add	r1, sp, #260	; 0x104
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f000 fa02 	bl	8003fa8 <_scanf_chars>
 8003ba4:	2801      	cmp	r0, #1
 8003ba6:	d06a      	beq.n	8003c7e <__ssvfiscanf_r+0x2e6>
 8003ba8:	2802      	cmp	r0, #2
 8003baa:	f47f af1c 	bne.w	80039e6 <__ssvfiscanf_r+0x4e>
 8003bae:	e7cb      	b.n	8003b48 <__ssvfiscanf_r+0x1b0>
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	9342      	str	r3, [sp, #264]	; 0x108
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	e7e0      	b.n	8003b7a <__ssvfiscanf_r+0x1e2>
 8003bb8:	220a      	movs	r2, #10
 8003bba:	e7d5      	b.n	8003b68 <__ssvfiscanf_r+0x1d0>
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	f000 fb52 	bl	8004268 <__sccl>
 8003bc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bca:	9341      	str	r3, [sp, #260]	; 0x104
 8003bcc:	4605      	mov	r5, r0
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e7d3      	b.n	8003b7a <__ssvfiscanf_r+0x1e2>
 8003bd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd8:	9341      	str	r3, [sp, #260]	; 0x104
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e7cd      	b.n	8003b7a <__ssvfiscanf_r+0x1e2>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e7cb      	b.n	8003b7a <__ssvfiscanf_r+0x1e2>
 8003be2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003be4:	06c3      	lsls	r3, r0, #27
 8003be6:	f53f aefe 	bmi.w	80039e6 <__ssvfiscanf_r+0x4e>
 8003bea:	9b00      	ldr	r3, [sp, #0]
 8003bec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003bee:	1d19      	adds	r1, r3, #4
 8003bf0:	9100      	str	r1, [sp, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	07c0      	lsls	r0, r0, #31
 8003bf6:	bf4c      	ite	mi
 8003bf8:	801a      	strhmi	r2, [r3, #0]
 8003bfa:	601a      	strpl	r2, [r3, #0]
 8003bfc:	e6f3      	b.n	80039e6 <__ssvfiscanf_r+0x4e>
 8003bfe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c00:	4621      	mov	r1, r4
 8003c02:	4630      	mov	r0, r6
 8003c04:	4798      	blx	r3
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d0bb      	beq.n	8003b82 <__ssvfiscanf_r+0x1ea>
 8003c0a:	e79d      	b.n	8003b48 <__ssvfiscanf_r+0x1b0>
 8003c0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003c0e:	3201      	adds	r2, #1
 8003c10:	9245      	str	r2, [sp, #276]	; 0x114
 8003c12:	6862      	ldr	r2, [r4, #4]
 8003c14:	3a01      	subs	r2, #1
 8003c16:	2a00      	cmp	r2, #0
 8003c18:	6062      	str	r2, [r4, #4]
 8003c1a:	dd02      	ble.n	8003c22 <__ssvfiscanf_r+0x28a>
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	6023      	str	r3, [r4, #0]
 8003c20:	e7b2      	b.n	8003b88 <__ssvfiscanf_r+0x1f0>
 8003c22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c24:	4621      	mov	r1, r4
 8003c26:	4630      	mov	r0, r6
 8003c28:	4798      	blx	r3
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d0ac      	beq.n	8003b88 <__ssvfiscanf_r+0x1f0>
 8003c2e:	e78b      	b.n	8003b48 <__ssvfiscanf_r+0x1b0>
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	dc0f      	bgt.n	8003c54 <__ssvfiscanf_r+0x2bc>
 8003c34:	466b      	mov	r3, sp
 8003c36:	4622      	mov	r2, r4
 8003c38:	a941      	add	r1, sp, #260	; 0x104
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f000 fa0e 	bl	800405c <_scanf_i>
 8003c40:	e7b0      	b.n	8003ba4 <__ssvfiscanf_r+0x20c>
 8003c42:	bf00      	nop
 8003c44:	080038e5 	.word	0x080038e5
 8003c48:	0800395f 	.word	0x0800395f
 8003c4c:	0800538a 	.word	0x0800538a
 8003c50:	08004c4a 	.word	0x08004c4a
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <__ssvfiscanf_r+0x2ec>)
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f43f aec5 	beq.w	80039e6 <__ssvfiscanf_r+0x4e>
 8003c5c:	466b      	mov	r3, sp
 8003c5e:	4622      	mov	r2, r4
 8003c60:	a941      	add	r1, sp, #260	; 0x104
 8003c62:	4630      	mov	r0, r6
 8003c64:	f3af 8000 	nop.w
 8003c68:	e79c      	b.n	8003ba4 <__ssvfiscanf_r+0x20c>
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c70:	bf18      	it	ne
 8003c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003c76:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003c80:	e7f9      	b.n	8003c76 <__ssvfiscanf_r+0x2de>
 8003c82:	bf00      	nop
 8003c84:	00000000 	.word	0x00000000

08003c88 <_printf_common>:
 8003c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	4699      	mov	r9, r3
 8003c90:	688a      	ldr	r2, [r1, #8]
 8003c92:	690b      	ldr	r3, [r1, #16]
 8003c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	bfb8      	it	lt
 8003c9c:	4613      	movlt	r3, r2
 8003c9e:	6033      	str	r3, [r6, #0]
 8003ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ca4:	4607      	mov	r7, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	b10a      	cbz	r2, 8003cae <_printf_common+0x26>
 8003caa:	3301      	adds	r3, #1
 8003cac:	6033      	str	r3, [r6, #0]
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	0699      	lsls	r1, r3, #26
 8003cb2:	bf42      	ittt	mi
 8003cb4:	6833      	ldrmi	r3, [r6, #0]
 8003cb6:	3302      	addmi	r3, #2
 8003cb8:	6033      	strmi	r3, [r6, #0]
 8003cba:	6825      	ldr	r5, [r4, #0]
 8003cbc:	f015 0506 	ands.w	r5, r5, #6
 8003cc0:	d106      	bne.n	8003cd0 <_printf_common+0x48>
 8003cc2:	f104 0a19 	add.w	sl, r4, #25
 8003cc6:	68e3      	ldr	r3, [r4, #12]
 8003cc8:	6832      	ldr	r2, [r6, #0]
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	42ab      	cmp	r3, r5
 8003cce:	dc26      	bgt.n	8003d1e <_printf_common+0x96>
 8003cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cd4:	1e13      	subs	r3, r2, #0
 8003cd6:	6822      	ldr	r2, [r4, #0]
 8003cd8:	bf18      	it	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	0692      	lsls	r2, r2, #26
 8003cde:	d42b      	bmi.n	8003d38 <_printf_common+0xb0>
 8003ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	47c0      	blx	r8
 8003cea:	3001      	adds	r0, #1
 8003cec:	d01e      	beq.n	8003d2c <_printf_common+0xa4>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	6922      	ldr	r2, [r4, #16]
 8003cf2:	f003 0306 	and.w	r3, r3, #6
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf02      	ittt	eq
 8003cfa:	68e5      	ldreq	r5, [r4, #12]
 8003cfc:	6833      	ldreq	r3, [r6, #0]
 8003cfe:	1aed      	subeq	r5, r5, r3
 8003d00:	68a3      	ldr	r3, [r4, #8]
 8003d02:	bf0c      	ite	eq
 8003d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d08:	2500      	movne	r5, #0
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	bfc4      	itt	gt
 8003d0e:	1a9b      	subgt	r3, r3, r2
 8003d10:	18ed      	addgt	r5, r5, r3
 8003d12:	2600      	movs	r6, #0
 8003d14:	341a      	adds	r4, #26
 8003d16:	42b5      	cmp	r5, r6
 8003d18:	d11a      	bne.n	8003d50 <_printf_common+0xc8>
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	e008      	b.n	8003d30 <_printf_common+0xa8>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	4652      	mov	r2, sl
 8003d22:	4649      	mov	r1, r9
 8003d24:	4638      	mov	r0, r7
 8003d26:	47c0      	blx	r8
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d103      	bne.n	8003d34 <_printf_common+0xac>
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d34:	3501      	adds	r5, #1
 8003d36:	e7c6      	b.n	8003cc6 <_printf_common+0x3e>
 8003d38:	18e1      	adds	r1, r4, r3
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	2030      	movs	r0, #48	; 0x30
 8003d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d42:	4422      	add	r2, r4
 8003d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	e7c7      	b.n	8003ce0 <_printf_common+0x58>
 8003d50:	2301      	movs	r3, #1
 8003d52:	4622      	mov	r2, r4
 8003d54:	4649      	mov	r1, r9
 8003d56:	4638      	mov	r0, r7
 8003d58:	47c0      	blx	r8
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d0e6      	beq.n	8003d2c <_printf_common+0xa4>
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7d9      	b.n	8003d16 <_printf_common+0x8e>
	...

08003d64 <_printf_i>:
 8003d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d68:	7e0f      	ldrb	r7, [r1, #24]
 8003d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d6c:	2f78      	cmp	r7, #120	; 0x78
 8003d6e:	4691      	mov	r9, r2
 8003d70:	4680      	mov	r8, r0
 8003d72:	460c      	mov	r4, r1
 8003d74:	469a      	mov	sl, r3
 8003d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d7a:	d807      	bhi.n	8003d8c <_printf_i+0x28>
 8003d7c:	2f62      	cmp	r7, #98	; 0x62
 8003d7e:	d80a      	bhi.n	8003d96 <_printf_i+0x32>
 8003d80:	2f00      	cmp	r7, #0
 8003d82:	f000 80d4 	beq.w	8003f2e <_printf_i+0x1ca>
 8003d86:	2f58      	cmp	r7, #88	; 0x58
 8003d88:	f000 80c0 	beq.w	8003f0c <_printf_i+0x1a8>
 8003d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d94:	e03a      	b.n	8003e0c <_printf_i+0xa8>
 8003d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d9a:	2b15      	cmp	r3, #21
 8003d9c:	d8f6      	bhi.n	8003d8c <_printf_i+0x28>
 8003d9e:	a101      	add	r1, pc, #4	; (adr r1, 8003da4 <_printf_i+0x40>)
 8003da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003da4:	08003dfd 	.word	0x08003dfd
 8003da8:	08003e11 	.word	0x08003e11
 8003dac:	08003d8d 	.word	0x08003d8d
 8003db0:	08003d8d 	.word	0x08003d8d
 8003db4:	08003d8d 	.word	0x08003d8d
 8003db8:	08003d8d 	.word	0x08003d8d
 8003dbc:	08003e11 	.word	0x08003e11
 8003dc0:	08003d8d 	.word	0x08003d8d
 8003dc4:	08003d8d 	.word	0x08003d8d
 8003dc8:	08003d8d 	.word	0x08003d8d
 8003dcc:	08003d8d 	.word	0x08003d8d
 8003dd0:	08003f15 	.word	0x08003f15
 8003dd4:	08003e3d 	.word	0x08003e3d
 8003dd8:	08003ecf 	.word	0x08003ecf
 8003ddc:	08003d8d 	.word	0x08003d8d
 8003de0:	08003d8d 	.word	0x08003d8d
 8003de4:	08003f37 	.word	0x08003f37
 8003de8:	08003d8d 	.word	0x08003d8d
 8003dec:	08003e3d 	.word	0x08003e3d
 8003df0:	08003d8d 	.word	0x08003d8d
 8003df4:	08003d8d 	.word	0x08003d8d
 8003df8:	08003ed7 	.word	0x08003ed7
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	1d1a      	adds	r2, r3, #4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	602a      	str	r2, [r5, #0]
 8003e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e09f      	b.n	8003f50 <_printf_i+0x1ec>
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	682b      	ldr	r3, [r5, #0]
 8003e14:	0607      	lsls	r7, r0, #24
 8003e16:	f103 0104 	add.w	r1, r3, #4
 8003e1a:	6029      	str	r1, [r5, #0]
 8003e1c:	d501      	bpl.n	8003e22 <_printf_i+0xbe>
 8003e1e:	681e      	ldr	r6, [r3, #0]
 8003e20:	e003      	b.n	8003e2a <_printf_i+0xc6>
 8003e22:	0646      	lsls	r6, r0, #25
 8003e24:	d5fb      	bpl.n	8003e1e <_printf_i+0xba>
 8003e26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e2a:	2e00      	cmp	r6, #0
 8003e2c:	da03      	bge.n	8003e36 <_printf_i+0xd2>
 8003e2e:	232d      	movs	r3, #45	; 0x2d
 8003e30:	4276      	negs	r6, r6
 8003e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e36:	485a      	ldr	r0, [pc, #360]	; (8003fa0 <_printf_i+0x23c>)
 8003e38:	230a      	movs	r3, #10
 8003e3a:	e012      	b.n	8003e62 <_printf_i+0xfe>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	6820      	ldr	r0, [r4, #0]
 8003e40:	1d19      	adds	r1, r3, #4
 8003e42:	6029      	str	r1, [r5, #0]
 8003e44:	0605      	lsls	r5, r0, #24
 8003e46:	d501      	bpl.n	8003e4c <_printf_i+0xe8>
 8003e48:	681e      	ldr	r6, [r3, #0]
 8003e4a:	e002      	b.n	8003e52 <_printf_i+0xee>
 8003e4c:	0641      	lsls	r1, r0, #25
 8003e4e:	d5fb      	bpl.n	8003e48 <_printf_i+0xe4>
 8003e50:	881e      	ldrh	r6, [r3, #0]
 8003e52:	4853      	ldr	r0, [pc, #332]	; (8003fa0 <_printf_i+0x23c>)
 8003e54:	2f6f      	cmp	r7, #111	; 0x6f
 8003e56:	bf0c      	ite	eq
 8003e58:	2308      	moveq	r3, #8
 8003e5a:	230a      	movne	r3, #10
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e62:	6865      	ldr	r5, [r4, #4]
 8003e64:	60a5      	str	r5, [r4, #8]
 8003e66:	2d00      	cmp	r5, #0
 8003e68:	bfa2      	ittt	ge
 8003e6a:	6821      	ldrge	r1, [r4, #0]
 8003e6c:	f021 0104 	bicge.w	r1, r1, #4
 8003e70:	6021      	strge	r1, [r4, #0]
 8003e72:	b90e      	cbnz	r6, 8003e78 <_printf_i+0x114>
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	d04b      	beq.n	8003f10 <_printf_i+0x1ac>
 8003e78:	4615      	mov	r5, r2
 8003e7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e7e:	fb03 6711 	mls	r7, r3, r1, r6
 8003e82:	5dc7      	ldrb	r7, [r0, r7]
 8003e84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e88:	4637      	mov	r7, r6
 8003e8a:	42bb      	cmp	r3, r7
 8003e8c:	460e      	mov	r6, r1
 8003e8e:	d9f4      	bls.n	8003e7a <_printf_i+0x116>
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d10b      	bne.n	8003eac <_printf_i+0x148>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	07de      	lsls	r6, r3, #31
 8003e98:	d508      	bpl.n	8003eac <_printf_i+0x148>
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	6861      	ldr	r1, [r4, #4]
 8003e9e:	4299      	cmp	r1, r3
 8003ea0:	bfde      	ittt	le
 8003ea2:	2330      	movle	r3, #48	; 0x30
 8003ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ea8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003eac:	1b52      	subs	r2, r2, r5
 8003eae:	6122      	str	r2, [r4, #16]
 8003eb0:	f8cd a000 	str.w	sl, [sp]
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	aa03      	add	r2, sp, #12
 8003eb8:	4621      	mov	r1, r4
 8003eba:	4640      	mov	r0, r8
 8003ebc:	f7ff fee4 	bl	8003c88 <_printf_common>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d14a      	bne.n	8003f5a <_printf_i+0x1f6>
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec8:	b004      	add	sp, #16
 8003eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	f043 0320 	orr.w	r3, r3, #32
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	4833      	ldr	r0, [pc, #204]	; (8003fa4 <_printf_i+0x240>)
 8003ed8:	2778      	movs	r7, #120	; 0x78
 8003eda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	6829      	ldr	r1, [r5, #0]
 8003ee2:	061f      	lsls	r7, r3, #24
 8003ee4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ee8:	d402      	bmi.n	8003ef0 <_printf_i+0x18c>
 8003eea:	065f      	lsls	r7, r3, #25
 8003eec:	bf48      	it	mi
 8003eee:	b2b6      	uxthmi	r6, r6
 8003ef0:	07df      	lsls	r7, r3, #31
 8003ef2:	bf48      	it	mi
 8003ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8003ef8:	6029      	str	r1, [r5, #0]
 8003efa:	bf48      	it	mi
 8003efc:	6023      	strmi	r3, [r4, #0]
 8003efe:	b91e      	cbnz	r6, 8003f08 <_printf_i+0x1a4>
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	f023 0320 	bic.w	r3, r3, #32
 8003f06:	6023      	str	r3, [r4, #0]
 8003f08:	2310      	movs	r3, #16
 8003f0a:	e7a7      	b.n	8003e5c <_printf_i+0xf8>
 8003f0c:	4824      	ldr	r0, [pc, #144]	; (8003fa0 <_printf_i+0x23c>)
 8003f0e:	e7e4      	b.n	8003eda <_printf_i+0x176>
 8003f10:	4615      	mov	r5, r2
 8003f12:	e7bd      	b.n	8003e90 <_printf_i+0x12c>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	6826      	ldr	r6, [r4, #0]
 8003f18:	6961      	ldr	r1, [r4, #20]
 8003f1a:	1d18      	adds	r0, r3, #4
 8003f1c:	6028      	str	r0, [r5, #0]
 8003f1e:	0635      	lsls	r5, r6, #24
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	d501      	bpl.n	8003f28 <_printf_i+0x1c4>
 8003f24:	6019      	str	r1, [r3, #0]
 8003f26:	e002      	b.n	8003f2e <_printf_i+0x1ca>
 8003f28:	0670      	lsls	r0, r6, #25
 8003f2a:	d5fb      	bpl.n	8003f24 <_printf_i+0x1c0>
 8003f2c:	8019      	strh	r1, [r3, #0]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6123      	str	r3, [r4, #16]
 8003f32:	4615      	mov	r5, r2
 8003f34:	e7bc      	b.n	8003eb0 <_printf_i+0x14c>
 8003f36:	682b      	ldr	r3, [r5, #0]
 8003f38:	1d1a      	adds	r2, r3, #4
 8003f3a:	602a      	str	r2, [r5, #0]
 8003f3c:	681d      	ldr	r5, [r3, #0]
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	2100      	movs	r1, #0
 8003f42:	4628      	mov	r0, r5
 8003f44:	f7fc f934 	bl	80001b0 <memchr>
 8003f48:	b108      	cbz	r0, 8003f4e <_printf_i+0x1ea>
 8003f4a:	1b40      	subs	r0, r0, r5
 8003f4c:	6060      	str	r0, [r4, #4]
 8003f4e:	6863      	ldr	r3, [r4, #4]
 8003f50:	6123      	str	r3, [r4, #16]
 8003f52:	2300      	movs	r3, #0
 8003f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f58:	e7aa      	b.n	8003eb0 <_printf_i+0x14c>
 8003f5a:	6923      	ldr	r3, [r4, #16]
 8003f5c:	462a      	mov	r2, r5
 8003f5e:	4649      	mov	r1, r9
 8003f60:	4640      	mov	r0, r8
 8003f62:	47d0      	blx	sl
 8003f64:	3001      	adds	r0, #1
 8003f66:	d0ad      	beq.n	8003ec4 <_printf_i+0x160>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	079b      	lsls	r3, r3, #30
 8003f6c:	d413      	bmi.n	8003f96 <_printf_i+0x232>
 8003f6e:	68e0      	ldr	r0, [r4, #12]
 8003f70:	9b03      	ldr	r3, [sp, #12]
 8003f72:	4298      	cmp	r0, r3
 8003f74:	bfb8      	it	lt
 8003f76:	4618      	movlt	r0, r3
 8003f78:	e7a6      	b.n	8003ec8 <_printf_i+0x164>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4640      	mov	r0, r8
 8003f82:	47d0      	blx	sl
 8003f84:	3001      	adds	r0, #1
 8003f86:	d09d      	beq.n	8003ec4 <_printf_i+0x160>
 8003f88:	3501      	adds	r5, #1
 8003f8a:	68e3      	ldr	r3, [r4, #12]
 8003f8c:	9903      	ldr	r1, [sp, #12]
 8003f8e:	1a5b      	subs	r3, r3, r1
 8003f90:	42ab      	cmp	r3, r5
 8003f92:	dcf2      	bgt.n	8003f7a <_printf_i+0x216>
 8003f94:	e7eb      	b.n	8003f6e <_printf_i+0x20a>
 8003f96:	2500      	movs	r5, #0
 8003f98:	f104 0619 	add.w	r6, r4, #25
 8003f9c:	e7f5      	b.n	8003f8a <_printf_i+0x226>
 8003f9e:	bf00      	nop
 8003fa0:	0800534c 	.word	0x0800534c
 8003fa4:	0800535d 	.word	0x0800535d

08003fa8 <_scanf_chars>:
 8003fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fac:	4615      	mov	r5, r2
 8003fae:	688a      	ldr	r2, [r1, #8]
 8003fb0:	4680      	mov	r8, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	b932      	cbnz	r2, 8003fc4 <_scanf_chars+0x1c>
 8003fb6:	698a      	ldr	r2, [r1, #24]
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2201      	moveq	r2, #1
 8003fbe:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8003fc2:	608a      	str	r2, [r1, #8]
 8003fc4:	6822      	ldr	r2, [r4, #0]
 8003fc6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004058 <_scanf_chars+0xb0>
 8003fca:	06d1      	lsls	r1, r2, #27
 8003fcc:	bf5f      	itttt	pl
 8003fce:	681a      	ldrpl	r2, [r3, #0]
 8003fd0:	1d11      	addpl	r1, r2, #4
 8003fd2:	6019      	strpl	r1, [r3, #0]
 8003fd4:	6816      	ldrpl	r6, [r2, #0]
 8003fd6:	2700      	movs	r7, #0
 8003fd8:	69a0      	ldr	r0, [r4, #24]
 8003fda:	b188      	cbz	r0, 8004000 <_scanf_chars+0x58>
 8003fdc:	2801      	cmp	r0, #1
 8003fde:	d107      	bne.n	8003ff0 <_scanf_chars+0x48>
 8003fe0:	682a      	ldr	r2, [r5, #0]
 8003fe2:	7811      	ldrb	r1, [r2, #0]
 8003fe4:	6962      	ldr	r2, [r4, #20]
 8003fe6:	5c52      	ldrb	r2, [r2, r1]
 8003fe8:	b952      	cbnz	r2, 8004000 <_scanf_chars+0x58>
 8003fea:	2f00      	cmp	r7, #0
 8003fec:	d031      	beq.n	8004052 <_scanf_chars+0xaa>
 8003fee:	e022      	b.n	8004036 <_scanf_chars+0x8e>
 8003ff0:	2802      	cmp	r0, #2
 8003ff2:	d120      	bne.n	8004036 <_scanf_chars+0x8e>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003ffc:	071b      	lsls	r3, r3, #28
 8003ffe:	d41a      	bmi.n	8004036 <_scanf_chars+0x8e>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	06da      	lsls	r2, r3, #27
 8004004:	bf5e      	ittt	pl
 8004006:	682b      	ldrpl	r3, [r5, #0]
 8004008:	781b      	ldrbpl	r3, [r3, #0]
 800400a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800400e:	682a      	ldr	r2, [r5, #0]
 8004010:	686b      	ldr	r3, [r5, #4]
 8004012:	3201      	adds	r2, #1
 8004014:	602a      	str	r2, [r5, #0]
 8004016:	68a2      	ldr	r2, [r4, #8]
 8004018:	3b01      	subs	r3, #1
 800401a:	3a01      	subs	r2, #1
 800401c:	606b      	str	r3, [r5, #4]
 800401e:	3701      	adds	r7, #1
 8004020:	60a2      	str	r2, [r4, #8]
 8004022:	b142      	cbz	r2, 8004036 <_scanf_chars+0x8e>
 8004024:	2b00      	cmp	r3, #0
 8004026:	dcd7      	bgt.n	8003fd8 <_scanf_chars+0x30>
 8004028:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800402c:	4629      	mov	r1, r5
 800402e:	4640      	mov	r0, r8
 8004030:	4798      	blx	r3
 8004032:	2800      	cmp	r0, #0
 8004034:	d0d0      	beq.n	8003fd8 <_scanf_chars+0x30>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	f013 0310 	ands.w	r3, r3, #16
 800403c:	d105      	bne.n	800404a <_scanf_chars+0xa2>
 800403e:	68e2      	ldr	r2, [r4, #12]
 8004040:	3201      	adds	r2, #1
 8004042:	60e2      	str	r2, [r4, #12]
 8004044:	69a2      	ldr	r2, [r4, #24]
 8004046:	b102      	cbz	r2, 800404a <_scanf_chars+0xa2>
 8004048:	7033      	strb	r3, [r6, #0]
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	443b      	add	r3, r7
 800404e:	6123      	str	r3, [r4, #16]
 8004050:	2000      	movs	r0, #0
 8004052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004056:	bf00      	nop
 8004058:	0800538a 	.word	0x0800538a

0800405c <_scanf_i>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	4698      	mov	r8, r3
 8004062:	4b74      	ldr	r3, [pc, #464]	; (8004234 <_scanf_i+0x1d8>)
 8004064:	460c      	mov	r4, r1
 8004066:	4682      	mov	sl, r0
 8004068:	4616      	mov	r6, r2
 800406a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800406e:	b087      	sub	sp, #28
 8004070:	ab03      	add	r3, sp, #12
 8004072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004076:	4b70      	ldr	r3, [pc, #448]	; (8004238 <_scanf_i+0x1dc>)
 8004078:	69a1      	ldr	r1, [r4, #24]
 800407a:	4a70      	ldr	r2, [pc, #448]	; (800423c <_scanf_i+0x1e0>)
 800407c:	2903      	cmp	r1, #3
 800407e:	bf18      	it	ne
 8004080:	461a      	movne	r2, r3
 8004082:	68a3      	ldr	r3, [r4, #8]
 8004084:	9201      	str	r2, [sp, #4]
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800408c:	bf88      	it	hi
 800408e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004092:	4627      	mov	r7, r4
 8004094:	bf82      	ittt	hi
 8004096:	eb03 0905 	addhi.w	r9, r3, r5
 800409a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800409e:	60a3      	strhi	r3, [r4, #8]
 80040a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80040a4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80040a8:	bf98      	it	ls
 80040aa:	f04f 0900 	movls.w	r9, #0
 80040ae:	6023      	str	r3, [r4, #0]
 80040b0:	463d      	mov	r5, r7
 80040b2:	f04f 0b00 	mov.w	fp, #0
 80040b6:	6831      	ldr	r1, [r6, #0]
 80040b8:	ab03      	add	r3, sp, #12
 80040ba:	7809      	ldrb	r1, [r1, #0]
 80040bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f7fc f875 	bl	80001b0 <memchr>
 80040c6:	b328      	cbz	r0, 8004114 <_scanf_i+0xb8>
 80040c8:	f1bb 0f01 	cmp.w	fp, #1
 80040cc:	d159      	bne.n	8004182 <_scanf_i+0x126>
 80040ce:	6862      	ldr	r2, [r4, #4]
 80040d0:	b92a      	cbnz	r2, 80040de <_scanf_i+0x82>
 80040d2:	6822      	ldr	r2, [r4, #0]
 80040d4:	2308      	movs	r3, #8
 80040d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040da:	6063      	str	r3, [r4, #4]
 80040dc:	6022      	str	r2, [r4, #0]
 80040de:	6822      	ldr	r2, [r4, #0]
 80040e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80040e4:	6022      	str	r2, [r4, #0]
 80040e6:	68a2      	ldr	r2, [r4, #8]
 80040e8:	1e51      	subs	r1, r2, #1
 80040ea:	60a1      	str	r1, [r4, #8]
 80040ec:	b192      	cbz	r2, 8004114 <_scanf_i+0xb8>
 80040ee:	6832      	ldr	r2, [r6, #0]
 80040f0:	1c51      	adds	r1, r2, #1
 80040f2:	6031      	str	r1, [r6, #0]
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	f805 2b01 	strb.w	r2, [r5], #1
 80040fa:	6872      	ldr	r2, [r6, #4]
 80040fc:	3a01      	subs	r2, #1
 80040fe:	2a00      	cmp	r2, #0
 8004100:	6072      	str	r2, [r6, #4]
 8004102:	dc07      	bgt.n	8004114 <_scanf_i+0xb8>
 8004104:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004108:	4631      	mov	r1, r6
 800410a:	4650      	mov	r0, sl
 800410c:	4790      	blx	r2
 800410e:	2800      	cmp	r0, #0
 8004110:	f040 8085 	bne.w	800421e <_scanf_i+0x1c2>
 8004114:	f10b 0b01 	add.w	fp, fp, #1
 8004118:	f1bb 0f03 	cmp.w	fp, #3
 800411c:	d1cb      	bne.n	80040b6 <_scanf_i+0x5a>
 800411e:	6863      	ldr	r3, [r4, #4]
 8004120:	b90b      	cbnz	r3, 8004126 <_scanf_i+0xca>
 8004122:	230a      	movs	r3, #10
 8004124:	6063      	str	r3, [r4, #4]
 8004126:	6863      	ldr	r3, [r4, #4]
 8004128:	4945      	ldr	r1, [pc, #276]	; (8004240 <_scanf_i+0x1e4>)
 800412a:	6960      	ldr	r0, [r4, #20]
 800412c:	1ac9      	subs	r1, r1, r3
 800412e:	f000 f89b 	bl	8004268 <__sccl>
 8004132:	f04f 0b00 	mov.w	fp, #0
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03d      	beq.n	80041ba <_scanf_i+0x15e>
 800413e:	6831      	ldr	r1, [r6, #0]
 8004140:	6960      	ldr	r0, [r4, #20]
 8004142:	f891 c000 	ldrb.w	ip, [r1]
 8004146:	f810 000c 	ldrb.w	r0, [r0, ip]
 800414a:	2800      	cmp	r0, #0
 800414c:	d035      	beq.n	80041ba <_scanf_i+0x15e>
 800414e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004152:	d124      	bne.n	800419e <_scanf_i+0x142>
 8004154:	0510      	lsls	r0, r2, #20
 8004156:	d522      	bpl.n	800419e <_scanf_i+0x142>
 8004158:	f10b 0b01 	add.w	fp, fp, #1
 800415c:	f1b9 0f00 	cmp.w	r9, #0
 8004160:	d003      	beq.n	800416a <_scanf_i+0x10e>
 8004162:	3301      	adds	r3, #1
 8004164:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004168:	60a3      	str	r3, [r4, #8]
 800416a:	6873      	ldr	r3, [r6, #4]
 800416c:	3b01      	subs	r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	6073      	str	r3, [r6, #4]
 8004172:	dd1b      	ble.n	80041ac <_scanf_i+0x150>
 8004174:	6833      	ldr	r3, [r6, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	6033      	str	r3, [r6, #0]
 800417a:	68a3      	ldr	r3, [r4, #8]
 800417c:	3b01      	subs	r3, #1
 800417e:	60a3      	str	r3, [r4, #8]
 8004180:	e7d9      	b.n	8004136 <_scanf_i+0xda>
 8004182:	f1bb 0f02 	cmp.w	fp, #2
 8004186:	d1ae      	bne.n	80040e6 <_scanf_i+0x8a>
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800418e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004192:	d1bf      	bne.n	8004114 <_scanf_i+0xb8>
 8004194:	2310      	movs	r3, #16
 8004196:	6063      	str	r3, [r4, #4]
 8004198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419c:	e7a2      	b.n	80040e4 <_scanf_i+0x88>
 800419e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80041a2:	6022      	str	r2, [r4, #0]
 80041a4:	780b      	ldrb	r3, [r1, #0]
 80041a6:	f805 3b01 	strb.w	r3, [r5], #1
 80041aa:	e7de      	b.n	800416a <_scanf_i+0x10e>
 80041ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041b0:	4631      	mov	r1, r6
 80041b2:	4650      	mov	r0, sl
 80041b4:	4798      	blx	r3
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d0df      	beq.n	800417a <_scanf_i+0x11e>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	05d9      	lsls	r1, r3, #23
 80041be:	d50d      	bpl.n	80041dc <_scanf_i+0x180>
 80041c0:	42bd      	cmp	r5, r7
 80041c2:	d909      	bls.n	80041d8 <_scanf_i+0x17c>
 80041c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80041c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041cc:	4632      	mov	r2, r6
 80041ce:	4650      	mov	r0, sl
 80041d0:	4798      	blx	r3
 80041d2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80041d6:	464d      	mov	r5, r9
 80041d8:	42bd      	cmp	r5, r7
 80041da:	d028      	beq.n	800422e <_scanf_i+0x1d2>
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	f012 0210 	ands.w	r2, r2, #16
 80041e2:	d113      	bne.n	800420c <_scanf_i+0x1b0>
 80041e4:	702a      	strb	r2, [r5, #0]
 80041e6:	6863      	ldr	r3, [r4, #4]
 80041e8:	9e01      	ldr	r6, [sp, #4]
 80041ea:	4639      	mov	r1, r7
 80041ec:	4650      	mov	r0, sl
 80041ee:	47b0      	blx	r6
 80041f0:	f8d8 3000 	ldr.w	r3, [r8]
 80041f4:	6821      	ldr	r1, [r4, #0]
 80041f6:	1d1a      	adds	r2, r3, #4
 80041f8:	f8c8 2000 	str.w	r2, [r8]
 80041fc:	f011 0f20 	tst.w	r1, #32
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	d00f      	beq.n	8004224 <_scanf_i+0x1c8>
 8004204:	6018      	str	r0, [r3, #0]
 8004206:	68e3      	ldr	r3, [r4, #12]
 8004208:	3301      	adds	r3, #1
 800420a:	60e3      	str	r3, [r4, #12]
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	1bed      	subs	r5, r5, r7
 8004210:	445d      	add	r5, fp
 8004212:	442b      	add	r3, r5
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	2000      	movs	r0, #0
 8004218:	b007      	add	sp, #28
 800421a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421e:	f04f 0b00 	mov.w	fp, #0
 8004222:	e7ca      	b.n	80041ba <_scanf_i+0x15e>
 8004224:	07ca      	lsls	r2, r1, #31
 8004226:	bf4c      	ite	mi
 8004228:	8018      	strhmi	r0, [r3, #0]
 800422a:	6018      	strpl	r0, [r3, #0]
 800422c:	e7eb      	b.n	8004206 <_scanf_i+0x1aa>
 800422e:	2001      	movs	r0, #1
 8004230:	e7f2      	b.n	8004218 <_scanf_i+0x1bc>
 8004232:	bf00      	nop
 8004234:	08004be0 	.word	0x08004be0
 8004238:	08004551 	.word	0x08004551
 800423c:	08004469 	.word	0x08004469
 8004240:	0800537e 	.word	0x0800537e

08004244 <_read_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4d07      	ldr	r5, [pc, #28]	; (8004264 <_read_r+0x20>)
 8004248:	4604      	mov	r4, r0
 800424a:	4608      	mov	r0, r1
 800424c:	4611      	mov	r1, r2
 800424e:	2200      	movs	r2, #0
 8004250:	602a      	str	r2, [r5, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	f000 fa12 	bl	800467c <_read>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_read_r+0x1e>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_read_r+0x1e>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	20000d10 	.word	0x20000d10

08004268 <__sccl>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	780b      	ldrb	r3, [r1, #0]
 800426c:	4604      	mov	r4, r0
 800426e:	2b5e      	cmp	r3, #94	; 0x5e
 8004270:	bf0b      	itete	eq
 8004272:	784b      	ldrbeq	r3, [r1, #1]
 8004274:	1c4a      	addne	r2, r1, #1
 8004276:	1c8a      	addeq	r2, r1, #2
 8004278:	2100      	movne	r1, #0
 800427a:	bf08      	it	eq
 800427c:	2101      	moveq	r1, #1
 800427e:	3801      	subs	r0, #1
 8004280:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004284:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004288:	42a8      	cmp	r0, r5
 800428a:	d1fb      	bne.n	8004284 <__sccl+0x1c>
 800428c:	b90b      	cbnz	r3, 8004292 <__sccl+0x2a>
 800428e:	1e50      	subs	r0, r2, #1
 8004290:	bd70      	pop	{r4, r5, r6, pc}
 8004292:	f081 0101 	eor.w	r1, r1, #1
 8004296:	54e1      	strb	r1, [r4, r3]
 8004298:	4610      	mov	r0, r2
 800429a:	4602      	mov	r2, r0
 800429c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80042a0:	2d2d      	cmp	r5, #45	; 0x2d
 80042a2:	d005      	beq.n	80042b0 <__sccl+0x48>
 80042a4:	2d5d      	cmp	r5, #93	; 0x5d
 80042a6:	d016      	beq.n	80042d6 <__sccl+0x6e>
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	d0f1      	beq.n	8004290 <__sccl+0x28>
 80042ac:	462b      	mov	r3, r5
 80042ae:	e7f2      	b.n	8004296 <__sccl+0x2e>
 80042b0:	7846      	ldrb	r6, [r0, #1]
 80042b2:	2e5d      	cmp	r6, #93	; 0x5d
 80042b4:	d0fa      	beq.n	80042ac <__sccl+0x44>
 80042b6:	42b3      	cmp	r3, r6
 80042b8:	dcf8      	bgt.n	80042ac <__sccl+0x44>
 80042ba:	3002      	adds	r0, #2
 80042bc:	461a      	mov	r2, r3
 80042be:	3201      	adds	r2, #1
 80042c0:	4296      	cmp	r6, r2
 80042c2:	54a1      	strb	r1, [r4, r2]
 80042c4:	dcfb      	bgt.n	80042be <__sccl+0x56>
 80042c6:	1af2      	subs	r2, r6, r3
 80042c8:	3a01      	subs	r2, #1
 80042ca:	1c5d      	adds	r5, r3, #1
 80042cc:	42b3      	cmp	r3, r6
 80042ce:	bfa8      	it	ge
 80042d0:	2200      	movge	r2, #0
 80042d2:	18ab      	adds	r3, r5, r2
 80042d4:	e7e1      	b.n	800429a <__sccl+0x32>
 80042d6:	4610      	mov	r0, r2
 80042d8:	e7da      	b.n	8004290 <__sccl+0x28>

080042da <_raise_r>:
 80042da:	291f      	cmp	r1, #31
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4604      	mov	r4, r0
 80042e0:	460d      	mov	r5, r1
 80042e2:	d904      	bls.n	80042ee <_raise_r+0x14>
 80042e4:	2316      	movs	r3, #22
 80042e6:	6003      	str	r3, [r0, #0]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
 80042ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80042f0:	b112      	cbz	r2, 80042f8 <_raise_r+0x1e>
 80042f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80042f6:	b94b      	cbnz	r3, 800430c <_raise_r+0x32>
 80042f8:	4620      	mov	r0, r4
 80042fa:	f000 f831 	bl	8004360 <_getpid_r>
 80042fe:	462a      	mov	r2, r5
 8004300:	4601      	mov	r1, r0
 8004302:	4620      	mov	r0, r4
 8004304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004308:	f000 b818 	b.w	800433c <_kill_r>
 800430c:	2b01      	cmp	r3, #1
 800430e:	d00a      	beq.n	8004326 <_raise_r+0x4c>
 8004310:	1c59      	adds	r1, r3, #1
 8004312:	d103      	bne.n	800431c <_raise_r+0x42>
 8004314:	2316      	movs	r3, #22
 8004316:	6003      	str	r3, [r0, #0]
 8004318:	2001      	movs	r0, #1
 800431a:	e7e7      	b.n	80042ec <_raise_r+0x12>
 800431c:	2400      	movs	r4, #0
 800431e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004322:	4628      	mov	r0, r5
 8004324:	4798      	blx	r3
 8004326:	2000      	movs	r0, #0
 8004328:	e7e0      	b.n	80042ec <_raise_r+0x12>
	...

0800432c <raise>:
 800432c:	4b02      	ldr	r3, [pc, #8]	; (8004338 <raise+0xc>)
 800432e:	4601      	mov	r1, r0
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	f7ff bfd2 	b.w	80042da <_raise_r>
 8004336:	bf00      	nop
 8004338:	20000060 	.word	0x20000060

0800433c <_kill_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4d07      	ldr	r5, [pc, #28]	; (800435c <_kill_r+0x20>)
 8004340:	2300      	movs	r3, #0
 8004342:	4604      	mov	r4, r0
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	602b      	str	r3, [r5, #0]
 800434a:	f000 f987 	bl	800465c <_kill>
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	d102      	bne.n	8004358 <_kill_r+0x1c>
 8004352:	682b      	ldr	r3, [r5, #0]
 8004354:	b103      	cbz	r3, 8004358 <_kill_r+0x1c>
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	bd38      	pop	{r3, r4, r5, pc}
 800435a:	bf00      	nop
 800435c:	20000d10 	.word	0x20000d10

08004360 <_getpid_r>:
 8004360:	f000 b96c 	b.w	800463c <_getpid>

08004364 <_strtol_l.constprop.0>:
 8004364:	2b01      	cmp	r3, #1
 8004366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436a:	d001      	beq.n	8004370 <_strtol_l.constprop.0+0xc>
 800436c:	2b24      	cmp	r3, #36	; 0x24
 800436e:	d906      	bls.n	800437e <_strtol_l.constprop.0+0x1a>
 8004370:	f7fe f8c2 	bl	80024f8 <__errno>
 8004374:	2316      	movs	r3, #22
 8004376:	6003      	str	r3, [r0, #0]
 8004378:	2000      	movs	r0, #0
 800437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004464 <_strtol_l.constprop.0+0x100>
 8004382:	460d      	mov	r5, r1
 8004384:	462e      	mov	r6, r5
 8004386:	f815 4b01 	ldrb.w	r4, [r5], #1
 800438a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800438e:	f017 0708 	ands.w	r7, r7, #8
 8004392:	d1f7      	bne.n	8004384 <_strtol_l.constprop.0+0x20>
 8004394:	2c2d      	cmp	r4, #45	; 0x2d
 8004396:	d132      	bne.n	80043fe <_strtol_l.constprop.0+0x9a>
 8004398:	782c      	ldrb	r4, [r5, #0]
 800439a:	2701      	movs	r7, #1
 800439c:	1cb5      	adds	r5, r6, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d05b      	beq.n	800445a <_strtol_l.constprop.0+0xf6>
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d109      	bne.n	80043ba <_strtol_l.constprop.0+0x56>
 80043a6:	2c30      	cmp	r4, #48	; 0x30
 80043a8:	d107      	bne.n	80043ba <_strtol_l.constprop.0+0x56>
 80043aa:	782c      	ldrb	r4, [r5, #0]
 80043ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80043b0:	2c58      	cmp	r4, #88	; 0x58
 80043b2:	d14d      	bne.n	8004450 <_strtol_l.constprop.0+0xec>
 80043b4:	786c      	ldrb	r4, [r5, #1]
 80043b6:	2310      	movs	r3, #16
 80043b8:	3502      	adds	r5, #2
 80043ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80043be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80043c2:	f04f 0e00 	mov.w	lr, #0
 80043c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80043ca:	4676      	mov	r6, lr
 80043cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80043d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80043d4:	f1bc 0f09 	cmp.w	ip, #9
 80043d8:	d816      	bhi.n	8004408 <_strtol_l.constprop.0+0xa4>
 80043da:	4664      	mov	r4, ip
 80043dc:	42a3      	cmp	r3, r4
 80043de:	dd24      	ble.n	800442a <_strtol_l.constprop.0+0xc6>
 80043e0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80043e4:	d008      	beq.n	80043f8 <_strtol_l.constprop.0+0x94>
 80043e6:	45b1      	cmp	r9, r6
 80043e8:	d31c      	bcc.n	8004424 <_strtol_l.constprop.0+0xc0>
 80043ea:	d101      	bne.n	80043f0 <_strtol_l.constprop.0+0x8c>
 80043ec:	45a2      	cmp	sl, r4
 80043ee:	db19      	blt.n	8004424 <_strtol_l.constprop.0+0xc0>
 80043f0:	fb06 4603 	mla	r6, r6, r3, r4
 80043f4:	f04f 0e01 	mov.w	lr, #1
 80043f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043fc:	e7e8      	b.n	80043d0 <_strtol_l.constprop.0+0x6c>
 80043fe:	2c2b      	cmp	r4, #43	; 0x2b
 8004400:	bf04      	itt	eq
 8004402:	782c      	ldrbeq	r4, [r5, #0]
 8004404:	1cb5      	addeq	r5, r6, #2
 8004406:	e7ca      	b.n	800439e <_strtol_l.constprop.0+0x3a>
 8004408:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800440c:	f1bc 0f19 	cmp.w	ip, #25
 8004410:	d801      	bhi.n	8004416 <_strtol_l.constprop.0+0xb2>
 8004412:	3c37      	subs	r4, #55	; 0x37
 8004414:	e7e2      	b.n	80043dc <_strtol_l.constprop.0+0x78>
 8004416:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800441a:	f1bc 0f19 	cmp.w	ip, #25
 800441e:	d804      	bhi.n	800442a <_strtol_l.constprop.0+0xc6>
 8004420:	3c57      	subs	r4, #87	; 0x57
 8004422:	e7db      	b.n	80043dc <_strtol_l.constprop.0+0x78>
 8004424:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004428:	e7e6      	b.n	80043f8 <_strtol_l.constprop.0+0x94>
 800442a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800442e:	d105      	bne.n	800443c <_strtol_l.constprop.0+0xd8>
 8004430:	2322      	movs	r3, #34	; 0x22
 8004432:	6003      	str	r3, [r0, #0]
 8004434:	4646      	mov	r6, r8
 8004436:	b942      	cbnz	r2, 800444a <_strtol_l.constprop.0+0xe6>
 8004438:	4630      	mov	r0, r6
 800443a:	e79e      	b.n	800437a <_strtol_l.constprop.0+0x16>
 800443c:	b107      	cbz	r7, 8004440 <_strtol_l.constprop.0+0xdc>
 800443e:	4276      	negs	r6, r6
 8004440:	2a00      	cmp	r2, #0
 8004442:	d0f9      	beq.n	8004438 <_strtol_l.constprop.0+0xd4>
 8004444:	f1be 0f00 	cmp.w	lr, #0
 8004448:	d000      	beq.n	800444c <_strtol_l.constprop.0+0xe8>
 800444a:	1e69      	subs	r1, r5, #1
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	e7f3      	b.n	8004438 <_strtol_l.constprop.0+0xd4>
 8004450:	2430      	movs	r4, #48	; 0x30
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1b1      	bne.n	80043ba <_strtol_l.constprop.0+0x56>
 8004456:	2308      	movs	r3, #8
 8004458:	e7af      	b.n	80043ba <_strtol_l.constprop.0+0x56>
 800445a:	2c30      	cmp	r4, #48	; 0x30
 800445c:	d0a5      	beq.n	80043aa <_strtol_l.constprop.0+0x46>
 800445e:	230a      	movs	r3, #10
 8004460:	e7ab      	b.n	80043ba <_strtol_l.constprop.0+0x56>
 8004462:	bf00      	nop
 8004464:	0800538a 	.word	0x0800538a

08004468 <_strtol_r>:
 8004468:	f7ff bf7c 	b.w	8004364 <_strtol_l.constprop.0>

0800446c <_strtoul_l.constprop.0>:
 800446c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004470:	4f36      	ldr	r7, [pc, #216]	; (800454c <_strtoul_l.constprop.0+0xe0>)
 8004472:	4686      	mov	lr, r0
 8004474:	460d      	mov	r5, r1
 8004476:	4628      	mov	r0, r5
 8004478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800447c:	5d3e      	ldrb	r6, [r7, r4]
 800447e:	f016 0608 	ands.w	r6, r6, #8
 8004482:	d1f8      	bne.n	8004476 <_strtoul_l.constprop.0+0xa>
 8004484:	2c2d      	cmp	r4, #45	; 0x2d
 8004486:	d130      	bne.n	80044ea <_strtoul_l.constprop.0+0x7e>
 8004488:	782c      	ldrb	r4, [r5, #0]
 800448a:	2601      	movs	r6, #1
 800448c:	1c85      	adds	r5, r0, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d057      	beq.n	8004542 <_strtoul_l.constprop.0+0xd6>
 8004492:	2b10      	cmp	r3, #16
 8004494:	d109      	bne.n	80044aa <_strtoul_l.constprop.0+0x3e>
 8004496:	2c30      	cmp	r4, #48	; 0x30
 8004498:	d107      	bne.n	80044aa <_strtoul_l.constprop.0+0x3e>
 800449a:	7828      	ldrb	r0, [r5, #0]
 800449c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80044a0:	2858      	cmp	r0, #88	; 0x58
 80044a2:	d149      	bne.n	8004538 <_strtoul_l.constprop.0+0xcc>
 80044a4:	786c      	ldrb	r4, [r5, #1]
 80044a6:	2310      	movs	r3, #16
 80044a8:	3502      	adds	r5, #2
 80044aa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80044ae:	2700      	movs	r7, #0
 80044b0:	fbb8 f8f3 	udiv	r8, r8, r3
 80044b4:	fb03 f908 	mul.w	r9, r3, r8
 80044b8:	ea6f 0909 	mvn.w	r9, r9
 80044bc:	4638      	mov	r0, r7
 80044be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80044c2:	f1bc 0f09 	cmp.w	ip, #9
 80044c6:	d815      	bhi.n	80044f4 <_strtoul_l.constprop.0+0x88>
 80044c8:	4664      	mov	r4, ip
 80044ca:	42a3      	cmp	r3, r4
 80044cc:	dd23      	ble.n	8004516 <_strtoul_l.constprop.0+0xaa>
 80044ce:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80044d2:	d007      	beq.n	80044e4 <_strtoul_l.constprop.0+0x78>
 80044d4:	4580      	cmp	r8, r0
 80044d6:	d31b      	bcc.n	8004510 <_strtoul_l.constprop.0+0xa4>
 80044d8:	d101      	bne.n	80044de <_strtoul_l.constprop.0+0x72>
 80044da:	45a1      	cmp	r9, r4
 80044dc:	db18      	blt.n	8004510 <_strtoul_l.constprop.0+0xa4>
 80044de:	fb00 4003 	mla	r0, r0, r3, r4
 80044e2:	2701      	movs	r7, #1
 80044e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044e8:	e7e9      	b.n	80044be <_strtoul_l.constprop.0+0x52>
 80044ea:	2c2b      	cmp	r4, #43	; 0x2b
 80044ec:	bf04      	itt	eq
 80044ee:	782c      	ldrbeq	r4, [r5, #0]
 80044f0:	1c85      	addeq	r5, r0, #2
 80044f2:	e7cc      	b.n	800448e <_strtoul_l.constprop.0+0x22>
 80044f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80044f8:	f1bc 0f19 	cmp.w	ip, #25
 80044fc:	d801      	bhi.n	8004502 <_strtoul_l.constprop.0+0x96>
 80044fe:	3c37      	subs	r4, #55	; 0x37
 8004500:	e7e3      	b.n	80044ca <_strtoul_l.constprop.0+0x5e>
 8004502:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004506:	f1bc 0f19 	cmp.w	ip, #25
 800450a:	d804      	bhi.n	8004516 <_strtoul_l.constprop.0+0xaa>
 800450c:	3c57      	subs	r4, #87	; 0x57
 800450e:	e7dc      	b.n	80044ca <_strtoul_l.constprop.0+0x5e>
 8004510:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004514:	e7e6      	b.n	80044e4 <_strtoul_l.constprop.0+0x78>
 8004516:	1c7b      	adds	r3, r7, #1
 8004518:	d106      	bne.n	8004528 <_strtoul_l.constprop.0+0xbc>
 800451a:	2322      	movs	r3, #34	; 0x22
 800451c:	f8ce 3000 	str.w	r3, [lr]
 8004520:	4638      	mov	r0, r7
 8004522:	b932      	cbnz	r2, 8004532 <_strtoul_l.constprop.0+0xc6>
 8004524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004528:	b106      	cbz	r6, 800452c <_strtoul_l.constprop.0+0xc0>
 800452a:	4240      	negs	r0, r0
 800452c:	2a00      	cmp	r2, #0
 800452e:	d0f9      	beq.n	8004524 <_strtoul_l.constprop.0+0xb8>
 8004530:	b107      	cbz	r7, 8004534 <_strtoul_l.constprop.0+0xc8>
 8004532:	1e69      	subs	r1, r5, #1
 8004534:	6011      	str	r1, [r2, #0]
 8004536:	e7f5      	b.n	8004524 <_strtoul_l.constprop.0+0xb8>
 8004538:	2430      	movs	r4, #48	; 0x30
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1b5      	bne.n	80044aa <_strtoul_l.constprop.0+0x3e>
 800453e:	2308      	movs	r3, #8
 8004540:	e7b3      	b.n	80044aa <_strtoul_l.constprop.0+0x3e>
 8004542:	2c30      	cmp	r4, #48	; 0x30
 8004544:	d0a9      	beq.n	800449a <_strtoul_l.constprop.0+0x2e>
 8004546:	230a      	movs	r3, #10
 8004548:	e7af      	b.n	80044aa <_strtoul_l.constprop.0+0x3e>
 800454a:	bf00      	nop
 800454c:	0800538a 	.word	0x0800538a

08004550 <_strtoul_r>:
 8004550:	f7ff bf8c 	b.w	800446c <_strtoul_l.constprop.0>

08004554 <__submore>:
 8004554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004558:	460c      	mov	r4, r1
 800455a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800455c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004560:	4299      	cmp	r1, r3
 8004562:	d11d      	bne.n	80045a0 <__submore+0x4c>
 8004564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004568:	f7fe f838 	bl	80025dc <_malloc_r>
 800456c:	b918      	cbnz	r0, 8004576 <__submore+0x22>
 800456e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800457a:	63a3      	str	r3, [r4, #56]	; 0x38
 800457c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004580:	6360      	str	r0, [r4, #52]	; 0x34
 8004582:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004586:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800458a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800458e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004592:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004596:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800459a:	6020      	str	r0, [r4, #0]
 800459c:	2000      	movs	r0, #0
 800459e:	e7e8      	b.n	8004572 <__submore+0x1e>
 80045a0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80045a2:	0077      	lsls	r7, r6, #1
 80045a4:	463a      	mov	r2, r7
 80045a6:	f7ff f815 	bl	80035d4 <_realloc_r>
 80045aa:	4605      	mov	r5, r0
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d0de      	beq.n	800456e <__submore+0x1a>
 80045b0:	eb00 0806 	add.w	r8, r0, r6
 80045b4:	4601      	mov	r1, r0
 80045b6:	4632      	mov	r2, r6
 80045b8:	4640      	mov	r0, r8
 80045ba:	f7fd ffd9 	bl	8002570 <memcpy>
 80045be:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80045c2:	f8c4 8000 	str.w	r8, [r4]
 80045c6:	e7e9      	b.n	800459c <__submore+0x48>

080045c8 <_fstat_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d07      	ldr	r5, [pc, #28]	; (80045e8 <_fstat_r+0x20>)
 80045cc:	2300      	movs	r3, #0
 80045ce:	4604      	mov	r4, r0
 80045d0:	4608      	mov	r0, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	f000 f829 	bl	800462c <_fstat>
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	d102      	bne.n	80045e4 <_fstat_r+0x1c>
 80045de:	682b      	ldr	r3, [r5, #0]
 80045e0:	b103      	cbz	r3, 80045e4 <_fstat_r+0x1c>
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	bd38      	pop	{r3, r4, r5, pc}
 80045e6:	bf00      	nop
 80045e8:	20000d10 	.word	0x20000d10

080045ec <_isatty_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d06      	ldr	r5, [pc, #24]	; (8004608 <_isatty_r+0x1c>)
 80045f0:	2300      	movs	r3, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	f000 f828 	bl	800464c <_isatty>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_isatty_r+0x1a>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_isatty_r+0x1a>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	20000d10 	.word	0x20000d10

0800460c <_malloc_usable_size_r>:
 800460c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004610:	1f18      	subs	r0, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	bfbc      	itt	lt
 8004616:	580b      	ldrlt	r3, [r1, r0]
 8004618:	18c0      	addlt	r0, r0, r3
 800461a:	4770      	bx	lr

0800461c <_close>:
 800461c:	4b02      	ldr	r3, [pc, #8]	; (8004628 <_close+0xc>)
 800461e:	2258      	movs	r2, #88	; 0x58
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004626:	4770      	bx	lr
 8004628:	20000d10 	.word	0x20000d10

0800462c <_fstat>:
 800462c:	4b02      	ldr	r3, [pc, #8]	; (8004638 <_fstat+0xc>)
 800462e:	2258      	movs	r2, #88	; 0x58
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004636:	4770      	bx	lr
 8004638:	20000d10 	.word	0x20000d10

0800463c <_getpid>:
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <_getpid+0xc>)
 800463e:	2258      	movs	r2, #88	; 0x58
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004646:	4770      	bx	lr
 8004648:	20000d10 	.word	0x20000d10

0800464c <_isatty>:
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <_isatty+0xc>)
 800464e:	2258      	movs	r2, #88	; 0x58
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	2000      	movs	r0, #0
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000d10 	.word	0x20000d10

0800465c <_kill>:
 800465c:	4b02      	ldr	r3, [pc, #8]	; (8004668 <_kill+0xc>)
 800465e:	2258      	movs	r2, #88	; 0x58
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004666:	4770      	bx	lr
 8004668:	20000d10 	.word	0x20000d10

0800466c <_lseek>:
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <_lseek+0xc>)
 800466e:	2258      	movs	r2, #88	; 0x58
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004676:	4770      	bx	lr
 8004678:	20000d10 	.word	0x20000d10

0800467c <_read>:
 800467c:	4b02      	ldr	r3, [pc, #8]	; (8004688 <_read+0xc>)
 800467e:	2258      	movs	r2, #88	; 0x58
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004686:	4770      	bx	lr
 8004688:	20000d10 	.word	0x20000d10

0800468c <_sbrk>:
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <_sbrk+0x14>)
 800468e:	4905      	ldr	r1, [pc, #20]	; (80046a4 <_sbrk+0x18>)
 8004690:	6813      	ldr	r3, [r2, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	bf08      	it	eq
 8004696:	460b      	moveq	r3, r1
 8004698:	4418      	add	r0, r3
 800469a:	6010      	str	r0, [r2, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	4770      	bx	lr
 80046a0:	20000d14 	.word	0x20000d14
 80046a4:	20000d18 	.word	0x20000d18

080046a8 <_write>:
 80046a8:	4b02      	ldr	r3, [pc, #8]	; (80046b4 <_write+0xc>)
 80046aa:	2258      	movs	r2, #88	; 0x58
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b2:	4770      	bx	lr
 80046b4:	20000d10 	.word	0x20000d10

080046b8 <_exit>:
 80046b8:	e7fe      	b.n	80046b8 <_exit>
 80046ba:	bf00      	nop

080046bc <_init>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr

080046c8 <_fini>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr

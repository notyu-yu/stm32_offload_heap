
Debug/mcu_mdriver.elf:     file format elf32-littlearm
Debug/mcu_mdriver.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08002aa1

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00005ac8 memsz 0x00005ac8 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08005ac8 align 2**16
         filesz 0x000000c8 memsz 0x00000d1c flags rw-
    LOAD off    0x00000d1c vaddr 0x20000d1c paddr 0x08005b90 align 2**16
         filesz 0x00000000 memsz 0x00000604 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db4  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac0  08005ac0  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08005ac0  08005ac0  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ac0  08005ac0  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac0  08005ac0  00015ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08005ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  200000c8  08005b90  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d1c  08005b90  00020d1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d139  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c1f  00000000  00000000  0003d22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000b2c  00000000  00000000  00043e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  00044980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000300  00000000  00000000  00045588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa08  00000000  00000000  00045888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000318e  00000000  00000000  00050290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  0005341e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001904  00000000  00000000  0005345c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004362  00000000  00000000  00054d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000069b  00000000  00000000  000590c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ac  00000000  00000000  0005975d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .stab         000000cc  00000000  00000000  0005980c  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000001b9  00000000  00000000  000598d8  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08004d0c l    d  .rodata	00000000 .rodata
08005ac0 l    d  .ARM.extab	00000000 .ARM.extab
08005ac0 l    d  .ARM	00000000 .ARM
08005ac0 l    d  .preinit_array	00000000 .preinit_array
08005ac0 l    d  .init_array	00000000 .init_array
08005ac4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200000c8 l    d  .bss	00000000 .bss
20000d1c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32f411xe.o
08002ab4 l       .text	00000000 LoopCopyDataInit
08002aae l       .text	00000000 CopyDataInit
08002ac6 l       .text	00000000 LoopFillZerobss
08002ac2 l       .text	00000000 FillZerobss
08002af0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 crtstuff.c
08004cf4 l     O .text	00000000 __EH_FRAME_BEGIN__
08000a3c l     F .text	00000000 __do_global_dtors_aux
200000c8 l     O .bss	00000000 completed.1
08005ac4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000a60 l     F .text	00000000 frame_dummy
200000cc l     O .bss	00000000 object.0
08005ac0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_mdriver.c
200000e8 l     O .bss	00000004 errors
20000000 l     O .data	0000005c tracestr
08000a7c l     F .text	00000020 stack_test
08000a9c l     F .text	0000001a heap_test
200000ec l     O .bss	00000004 test_mem_use
08000eec l     F .text	0000046c read_trace
0800138c l     F .text	00000210 eval_mm_valid
0800159c l     F .text	000001e4 eval_mm_util
08001358 l     F .text	00000032 free_trace
08001780 l     F .text	00000268 printresults
08000d00 l     F .text	00000170 add_range
08001a50 l     F .text	00000048 malloc_error
08001a14 l     F .text	0000003c unix_error
0800522c l     O .rodata	0000000a __func__.0
08000e70 l     F .text	0000004a remove_range
08000eba l     F .text	00000032 clear_ranges
080019e8 l     F .text	0000002c app_error
00000000 l    df *ABS*	00000000 mcu_mlib.c
200004f0 l     O .bss	00000004 mem_start_brk
200004f4 l     O .bss	00000004 mem_brk
00000000 l    df *ABS*	00000000 mcu_mm.c
08001bac l     F .text	0000003c extend_heap
00000000 l    df *ABS*	00000000 mcu_timer.c
08001dec l     F .text	00000034 __NVIC_EnableIRQ
08001e20 l     F .text	00000050 __NVIC_SetPriority
200004f8 l     O .bss	00000004 systime
00000000 l    df *ABS*	00000000 mcu.c
200004fc l     O .bss	00000800 output_str
00000000 l    df *ABS*	00000000 mcu_request.c
08002018 l     F .text	0000001c send
08002034 l     F .text	0000001c receive
00000000 l    df *ABS*	00000000 uart.c
080020a8 l     F .text	00000054 uart_pin_setup
080020fc l     F .text	00000054 uart_enable
00000000 l    df *ABS*	00000000 uart_dma.c
08002164 l     F .text	00000034 __NVIC_EnableIRQ
08002198 l     F .text	00000050 __NVIC_SetPriority
20000d00 l     O .bss	00000004 receiving
20000d04 l     O .bss	00000004 transmitting
080021e8 l     F .text	00000058 uart_tx_setup
08002240 l     F .text	00000068 uart_rx_setup
00000000 l    df *ABS*	00000000 mcu_syscalls.c
00000000 l    df *ABS*	00000000 mcu_mpu.c
00000000 l    df *ABS*	00000000 mcu_init.c
080027e8 l     F .text	00000050 __NVIC_SetPriority
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
08002bd4 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08002cfc l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003848 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strtol.c
0800499c l     F .text	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 strtoul.c
08004aa4 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20000d18 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000068 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08005ac8 l       .fini_array	00000000 __fini_array_end
08005ac4 l       .fini_array	00000000 __fini_array_start
08005ac4 l       .init_array	00000000 __init_array_end
08005ac0 l       .preinit_array	00000000 __preinit_array_end
08005ac0 l       .init_array	00000000 __init_array_start
08005ac0 l       .preinit_array	00000000 __preinit_array_start
08002af0  w    F .text	00000002 RTC_Alarm_IRQHandler
08004c44 g     F .text	00000010 _malloc_usable_size_r
08002af0  w    F .text	00000002 EXTI2_IRQHandler
080045e0 g     F .text	000000b4 _scanf_chars
08002314 g     F .text	00000058 uart_rx_start
08004c24 g     F .text	00000020 _isatty_r
08004c74 g     F .text	00000010 _getpid
08003a38 g     F .text	00000024 _lseek_r
08002af0  w    F .text	00000002 DebugMon_Handler
08002af0  w    F .text	00000002 SPI4_IRQHandler
08002638 g     F .text	0000000c sys_free
0800056c g     F .text	0000005a .hidden __floatdidf
08004974 g     F .text	00000024 _kill_r
08002af0  w    F .text	00000002 TIM1_CC_IRQHandler
080030c2 g     F .text	00000024 __sseek
080038f8 g     F .text	00000070 __sinit
08002af0  w    F .text	00000002 DMA2_Stream5_IRQHandler
08002050 g     F .text	00000012 mem_req_setup
080034f0 g     F .text	000000a4 __swbuf_r
08002838 g     F .text	00000048 HardFault_Handler
0800389c g     F .text	0000002c __sfmoreglue
08002af0  w    F .text	00000002 DMA1_Stream5_IRQHandler
08003b68 g     F .text	0000000c __malloc_unlock
08002300 g     F .text	00000014 uart_tx_wait
00000400 g       *ABS*	00000000 _Min_Stack_Size
20000cfc g     O .bss	00000004 output_offset
080034d8 g     F .text	00000014 strerror
08002af0  w    F .text	00000002 SysTick_Handler
08002af0  w    F .text	00000002 PVD_IRQHandler
08002af0  w    F .text	00000002 SDIO_IRQHandler
08003b28 g     F .text	00000034 memmove
08002af0  w    F .text	00000002 TAMP_STAMP_IRQHandler
08005ac8 g       *ABS*	00000000 _sidata
08002af0  w    F .text	00000002 PendSV_Handler
08002af0  w    F .text	00000002 NMI_Handler
08005ac0 g       .ARM	00000000 __exidx_end
08001d34 g     F .text	0000008c mm_realloc
08002af0  w    F .text	00000002 EXTI3_IRQHandler
08002b30 g     F .text	0000000c __errno
08002af0  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08004c00 g     F .text	00000024 _fstat_r
20000d14 g     O .bss	00000004 errno
08004694 g     F .text	000001e8 _scanf_i
08003086 g     F .text	00000004 __seofread
08004d0c g       .text	00000000 _etext
200000c8 g       .bss	00000000 _sbss
08002af0  w    F .text	00000002 I2C3_ER_IRQHandler
08001fd8 g     F .text	0000000c loop
08001f14 g     F .text	0000000c get_time
08002ba8 g     F .text	0000001c memcpy
0800236c g     F .text	00000014 uart_rx_wait
200000e4 g     O .bss	00000004 verbose
08001c4c g     F .text	000000b8 mm_malloc
08003890 g     F .text	0000000c _cleanup_r
08003d20 g     F .text	000001fc _svfprintf_r
080004f4 g     F .text	00000022 .hidden __floatsidf
08002af0  w    F .text	00000002 EXTI0_IRQHandler
08002af0  w    F .text	00000002 I2C2_EV_IRQHandler
08002af0  w    F .text	00000002 DMA1_Stream2_IRQHandler
08002af0  w    F .text	00000002 FPU_IRQHandler
0800310c g     F .text	000003cc _strerror_r
20000060 g     O .data	00000004 SystemCoreClock
08004912 g     F .text	00000050 _raise_r
08004c64 g     F .text	00000010 _fstat
08002af4 g     F .text	0000003c __assert_func
08002af0  w    F .text	00000002 UsageFault_Handler
08002380 g     F .text	0000003c DMA2_Stream2_IRQHandler
08003f96 g     F .text	0000003a __ssrefill_r
08004998 g     F .text	00000004 _getpid_r
200000c8 g       .bss	00000000 __bss_start__
080004d4 g     F .text	0000001e .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
08002af0  w    F .text	00000002 SPI1_IRQHandler
08000250 g     F .text	00000000 .hidden __aeabi_drsub
08002fac g     F .text	00000020 _sbrk_r
08002084 g     F .text	00000022 req_receive
0800487c g     F .text	00000024 _read_r
200000f0 g     O .bss	00000400 msg
08002af0  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08000518 g     F .text	00000042 .hidden __extendsfdf2
08003fd0 g     F .text	000002f0 __ssvfscanf_r
0800081c g     F .text	000001d0 .hidden __aeabi_ddiv
0800025c g     F .text	00000276 .hidden __adddf3
08005ac0 g       .ARM	00000000 __exidx_start
08002af0  w    F .text	00000002 DMA2_Stream3_IRQHandler
080005c8 g     F .text	00000254 .hidden __aeabi_dmul
08004c84 g     F .text	00000010 _isatty
20000d12 g     O .bss	00000001 __lock___sinit_recursive_mutex
08005274 g     O .rodata	00000004 _global_impure_ptr
08003c0c g     F .text	0000005e _realloc_r
08002b60 g     F .text	00000048 __libc_init_array
08003694 g     F .text	0000000e abort
080004d4 g     F .text	0000001e .hidden __floatunsidf
08004cc4 g     F .text	0000001c _sbrk
08002af0  w    F .text	00000002 USART6_IRQHandler
08004cf4 g     F .text	00000000 _init
0800243c g     F .text	000001e8 SVC_Handler_Main
08001dc0 g     F .text	0000002c mm_finish
080022a8 g     F .text	00000058 uart_tx_start
08001fe4 g     F .text	00000034 var_print
20000d1c g       .bss	00000000 _ebss
08002aa0  w    F .text	00000038 Reset_Handler
080009ec g     F .text	0000004e .hidden __fixdfsi
08001aec g     F .text	00000090 mem_sbrk
08001a98 g     F .text	00000054 mem_init
08002062 g     F .text	00000022 req_send
20000d10 g     O .bss	00000001 __lock___malloc_recursive_mutex
08002af0  w    F .text	00000002 DMA2_Stream0_IRQHandler
08001f20 g     F .text	000000b8 timer_init
080028e0 g     F .text	00000028 led_on
08002b3c g     F .text	00000024 fprintf
08002af0  w    F .text	00000002 TIM4_IRQHandler
0800025c g     F .text	00000276 .hidden __aeabi_dadd
080030ee g     F .text	0000001e strcat
0800055c g     F .text	0000006a .hidden __aeabi_ul2d
08005920 g     O .rodata	00000020 __sf_fake_stderr
20000d20 g       ._user_heap_stack	00000000 end
080028c0 g     F .text	00000020 memfault_init
08002af0  w    F .text	00000002 I2C1_EV_IRQHandler
08003a36 g     F .text	00000002 __retarget_lock_release_recursive
08002af0  w    F .text	00000002 DMA1_Stream6_IRQHandler
08003c6a g     F .text	000000b4 __ssputs_r
08002af0  w    F .text	00000002 DMA1_Stream1_IRQHandler
08002d2a g     F .text	00000024 __sfputs_r
08002150 g     F .text	00000012 uart_init
080038c8 g     F .text	0000000c __sfp_lock_acquire
080001b0 g     F .text	00000000 memchr
20000d1c g       .bss	00000000 __bss_end__
08001b88 g     F .text	0000000c mem_heap_hi
08003b74 g     F .text	00000098 _free_r
08001eb0 g     F .text	00000064 TIM3_IRQHandler
08002af0  w    F .text	00000002 RCC_IRQHandler
2000005c g     O .data	00000004 sp_reset
00000200 g       *ABS*	00000000 _Min_Heap_Size
08003f1c g     F .text	0000007a _sungetc_r
08000258 g     F .text	0000027a .hidden __aeabi_dsub
08002af0 g       .text	00000002 Default_Handler
08002624 g     F .text	00000006 sys_mm_init
080034ec g     F .text	00000004 _user_strerror
0800055c g     F .text	0000006a .hidden __floatundidf
08004ca4 g     F .text	00000010 _lseek
08002af0  w    F .text	00000002 EXTI15_10_IRQHandler
08002af0  w    F .text	00000002 ADC_IRQHandler
08002af0  w    F .text	00000002 DMA1_Stream7_IRQHandler
08002af0  w    F .text	00000002 SPI5_IRQHandler
08004b88 g     F .text	00000004 _strtoul_r
080036a4 g     F .text	00000020 _close_r
080004f4 g     F .text	00000022 .hidden __aeabi_i2d
08002af0  w    F .text	00000002 TIM5_IRQHandler
0800265a g     F .text	00000008 sys_get_time
080023bc g     F .text	0000002c DMA2_Stream7_IRQHandler
08002af0  w    F .text	00000002 I2C3_EV_IRQHandler
08002644 g     F .text	00000010 sys_realloc
0800300c g     F .text	00000058 sscanf
080035b8 g     F .text	000000dc __swsetup_r
08002af0  w    F .text	00000002 EXTI9_5_IRQHandler
0800081c g     F .text	000001d0 .hidden __divdf3
08003968 g     F .text	0000008c __sfp
08002af0  w    F .text	00000002 RTC_WKUP_IRQHandler
080038ec g     F .text	0000000c __sinit_lock_release
080005c8 g     F .text	00000254 .hidden __muldf3
08003064 g     F .text	00000022 __sread
080023e8 g     F .text	0000003c uart_dma_init
08001be8 g     F .text	00000064 mm_init
08003b5c g     F .text	0000000c __malloc_lock
080037d0 g     F .text	00000078 _fflush_r
08001b94 g     F .text	00000018 mem_heapsize
08001d04 g     F .text	00000030 mm_free
08002af0  w    F .text	00000002 SPI2_IRQHandler
08005940 g     O .rodata	00000020 __sf_fake_stdin
08003a34 g     F .text	00000002 __retarget_lock_acquire_recursive
08002bc4 g     F .text	00000010 memset
08002880 g     F .text	00000040 MemManage_Handler
08000ab8 g     F .text	00000248 main
08002af0  w    F .text	00000002 DMA1_Stream0_IRQHandler
08003a32 g     F .text	00000002 __retarget_lock_init_recursive
08002424 g     F .text	00000016 SVC_Handler
080030e6 g     F .text	00000008 __sclose
0800296c g     F .text	00000018 mcu_init
0800262a g     F .text	0000000e sys_malloc
08004aa0 g     F .text	00000004 _strtol_r
08002c14 g     F .text	000000e8 _malloc_r
0800056c g     F .text	0000005a .hidden __aeabi_l2d
08004b8c g     F .text	00000074 __submore
08002af0  w    F .text	00000002 EXTI4_IRQHandler
0800300c g     F .text	00000058 siscanf
08002984 g     F .text	0000005c SystemInit
08004d00 g     F .text	00000000 _fini
08002fcc g     F .text	00000040 sprintf
08003594 g     F .text	00000024 _write_r
08002908 g     F .text	00000028 led_off
080042c0 g     F .text	000000da _printf_common
20000064 g     O .data	00000004 _impure_ptr
080036c4 g     F .text	0000010c __sflush_r
08003d20 g     F .text	000001fc _svfiprintf_r
08002af0  w    F .text	00000002 WWDG_IRQHandler
08002664 g     F .text	000000cc proc_update
08001e70 g     F .text	00000040 TIM2_IRQHandler
08002930 g     F .text	0000003c led_init
080029e0 g     F .text	000000c0 set_sysclk_to_100
08002730 g     F .text	000000b8 mpu_init
08002af0  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08002af0  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
08003fd0 g     F .text	000002f0 __ssvfiscanf_r
08003a5c g     F .text	0000004c __swhatbuf_r
20020000 g       .isr_vector	00000000 _estack
08002af0  w    F .text	00000002 EXTI1_IRQHandler
08004ce0 g     F .text	00000010 _write
200000c8 g       .data	00000000 _edata
08001b7c g     F .text	0000000c mem_heap_lo
08002af0  w    F .text	00000002 USART2_IRQHandler
0800308a g     F .text	00000038 __swrite
08002b3c g     F .text	00000024 fiprintf
08002d50 g     F .text	0000025c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080039f4 g     F .text	0000003e _fwalk_reent
080009ec g     F .text	0000004e .hidden __aeabi_d2iz
08004c94 g     F .text	00000010 _kill
08002654 g     F .text	00000006 sys_mm_finish
08002af0  w    F .text	00000002 I2C2_ER_IRQHandler
080038d4 g     F .text	0000000c __sfp_lock_release
08005960 g     O .rodata	00000020 __sf_fake_stdout
08002fcc g     F .text	00000040 siprintf
080048a0 g     F .text	00000072 __sccl
08002af0  w    F .text	00000002 DMA2_Stream1_IRQHandler
080059bd g     O .rodata	00000101 _ctype_
08004cb4 g     F .text	00000010 _read
08002af0  w    F .text	00000002 FLASH_IRQHandler
08004cf0 g     F .text	00000002 _exit
08002af0  w    F .text	00000002 DMA2_Stream4_IRQHandler
08002af0  w    F .text	00000002 BusFault_Handler
08002af0  w    F .text	00000002 USART1_IRQHandler
08003aa8 g     F .text	00000080 __smakebuf_r
080001a0 g     F .text	00000010 strlen
08002af0  w    F .text	00000002 OTG_FS_IRQHandler
0800439c g     F .text	00000244 _printf_i
08002af0  w    F .text	00000002 SPI3_IRQHandler
08002af0  w    F .text	00000002 DMA1_Stream4_IRQHandler
20000d0c g     O .bss	00000004 __malloc_sbrk_start
08002af0  w    F .text	00000002 I2C1_ER_IRQHandler
08000518 g     F .text	00000042 .hidden __aeabi_f2d
20000d08 g     O .bss	00000004 __malloc_free_list
08000258 g     F .text	0000027a .hidden __subdf3
08002d50 g     F .text	0000025c _vfprintf_r
08002af0  w    F .text	00000002 DMA2_Stream6_IRQHandler
08002af0  w    F .text	00000002 DMA1_Stream3_IRQHandler
20000d11 g     O .bss	00000001 __lock___sfp_recursive_mutex
08004c54 g     F .text	00000010 _close
08004964 g     F .text	00000010 raise
080038e0 g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2iz>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f4:	d215      	bcs.n	8000a22 <__aeabi_d2iz+0x36>
 80009f6:	d511      	bpl.n	8000a1c <__aeabi_d2iz+0x30>
 80009f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d912      	bls.n	8000a28 <__aeabi_d2iz+0x3c>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a12:	fa23 f002 	lsr.w	r0, r3, r2
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d105      	bne.n	8000a34 <__aeabi_d2iz+0x48>
 8000a28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	bf08      	it	eq
 8000a2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__do_global_dtors_aux>:
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	4c05      	ldr	r4, [pc, #20]	; (8000a54 <__do_global_dtors_aux+0x18>)
 8000a40:	7823      	ldrb	r3, [r4, #0]
 8000a42:	b933      	cbnz	r3, 8000a52 <__do_global_dtors_aux+0x16>
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__do_global_dtors_aux+0x1c>)
 8000a46:	b113      	cbz	r3, 8000a4e <__do_global_dtors_aux+0x12>
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <__do_global_dtors_aux+0x20>)
 8000a4a:	f3af 8000 	nop.w
 8000a4e:	2301      	movs	r3, #1
 8000a50:	7023      	strb	r3, [r4, #0]
 8000a52:	bd10      	pop	{r4, pc}
 8000a54:	200000c8 	.word	0x200000c8
 8000a58:	00000000 	.word	0x00000000
 8000a5c:	08004cf4 	.word	0x08004cf4

08000a60 <frame_dummy>:
 8000a60:	b508      	push	{r3, lr}
 8000a62:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <frame_dummy+0x10>)
 8000a64:	b11b      	cbz	r3, 8000a6e <frame_dummy+0xe>
 8000a66:	4903      	ldr	r1, [pc, #12]	; (8000a74 <frame_dummy+0x14>)
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <frame_dummy+0x18>)
 8000a6a:	f3af 8000 	nop.w
 8000a6e:	bd08      	pop	{r3, pc}
 8000a70:	00000000 	.word	0x00000000
 8000a74:	200000cc 	.word	0x200000cc
 8000a78:	08004cf4 	.word	0x08004cf4

08000a7c <stack_test>:

// Test file string
static char tracestr[] = TESTSTRING;

// Test for stack overflow
static void stack_test(void) {
 8000a7c:	b500      	push	{lr}
 8000a7e:	b0a1      	sub	sp, #132	; 0x84
	char buffer_array[KB/8] = {0};
 8000a80:	2300      	movs	r3, #0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	ab01      	add	r3, sp, #4
 8000a86:	227c      	movs	r2, #124	; 0x7c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 f89a 	bl	8002bc4 <memset>
	stack_test();
 8000a90:	f7ff fff4 	bl	8000a7c <stack_test>
}
 8000a94:	bf00      	nop
 8000a96:	b021      	add	sp, #132	; 0x84
 8000a98:	f85d fb04 	ldr.w	pc, [sp], #4

08000a9c <heap_test>:

// Test for stack overflow
static void heap_test(void) {
 8000a9c:	b508      	push	{r3, lr}
	while(1) {
		if(!sys_malloc(10*KB)){
 8000a9e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8000aa2:	f001 fdc2 	bl	800262a <sys_malloc>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f8      	bne.n	8000a9e <heap_test+0x2>
			sys_mm_finish();
 8000aac:	f001 fdd2 	bl	8002654 <sys_mm_finish>
			loop();
 8000ab0:	f001 fa92 	bl	8001fd8 <loop>
		if(!sys_malloc(10*KB)){
 8000ab4:	e7f3      	b.n	8000a9e <heap_test+0x2>
	...

08000ab8 <main>:

/**************
 * Main routine
 **************/
int main(void)
{
 8000ab8:	b500      	push	{lr}
 8000aba:	b0a3      	sub	sp, #140	; 0x8c
    int i=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	9320      	str	r3, [sp, #128]	; 0x80
    int num_tracefiles = 0;    /* the number of traces in that array */
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	931f      	str	r3, [sp, #124]	; 0x7c
    trace_t *trace = NULL;     /* stores a single trace file in memory */
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	931e      	str	r3, [sp, #120]	; 0x78
    range_t *ranges = NULL;    /* keeps track of block extents for one trace */
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9308      	str	r3, [sp, #32]
    //speed_t speed_params;      /* input parameters to the xx_speed routines */ 
	
	// Test start and end time
	size_t start_time, end_time;

    int autograder = 0;  /* If set, emit summary info for autograder (-g) */
 8000acc:	2300      	movs	r3, #0
 8000ace:	931d      	str	r3, [sp, #116]	; 0x74
	int p1_int;
	int p2_int;
	int perfindex_int;

    /* Initialize the simulated memory system in memlib.c */
	sys_mm_init();
 8000ad0:	f001 fda8 	bl	8002624 <sys_mm_init>
	start_time = sys_get_time();
 8000ad4:	f001 fdc1 	bl	800265a <sys_get_time>
 8000ad8:	901c      	str	r0, [sp, #112]	; 0x70

    /* Evaluate student's mm malloc package using the K-best scheme */
	trace = read_trace();
 8000ada:	f000 fa07 	bl	8000eec <read_trace>
 8000ade:	901e      	str	r0, [sp, #120]	; 0x78
	mm_stats.ops = trace->num_ops;
 8000ae0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd05 	bl	80004f4 <__aeabi_i2d>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	e9cd 2300 	strd	r2, r3, [sp]
	if (verbose > 1) {
 8000af2:	4b75      	ldr	r3, [pc, #468]	; (8000cc8 <main+0x210>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	dd06      	ble.n	8000b08 <main+0x50>
	    sprintf(msg, "Checking sys_malloc for correctness, ");
 8000afa:	4974      	ldr	r1, [pc, #464]	; (8000ccc <main+0x214>)
 8000afc:	4874      	ldr	r0, [pc, #464]	; (8000cd0 <main+0x218>)
 8000afe:	f002 fa65 	bl	8002fcc <siprintf>
		var_print(msg);
 8000b02:	4873      	ldr	r0, [pc, #460]	; (8000cd0 <main+0x218>)
 8000b04:	f001 fa6e 	bl	8001fe4 <var_print>
	}
	mm_stats.valid = eval_mm_valid(trace, i, &ranges);
 8000b08:	ab08      	add	r3, sp, #32
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b0e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b10:	f000 fc3c 	bl	800138c <eval_mm_valid>
 8000b14:	4603      	mov	r3, r0
 8000b16:	9302      	str	r3, [sp, #8]
	if (mm_stats.valid) {
 8000b18:	9b02      	ldr	r3, [sp, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d035      	beq.n	8000b8a <main+0xd2>
	    if (verbose > 1) {
 8000b1e:	4b6a      	ldr	r3, [pc, #424]	; (8000cc8 <main+0x210>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	dd06      	ble.n	8000b34 <main+0x7c>
			sprintf(msg, "efficiency, ");
 8000b26:	496b      	ldr	r1, [pc, #428]	; (8000cd4 <main+0x21c>)
 8000b28:	4869      	ldr	r0, [pc, #420]	; (8000cd0 <main+0x218>)
 8000b2a:	f002 fa4f 	bl	8002fcc <siprintf>
			var_print(msg);
 8000b2e:	4868      	ldr	r0, [pc, #416]	; (8000cd0 <main+0x218>)
 8000b30:	f001 fa58 	bl	8001fe4 <var_print>
		}
	    mm_stats.util = eval_mm_util(trace, i, &ranges);
 8000b34:	ab08      	add	r3, sp, #32
 8000b36:	461a      	mov	r2, r3
 8000b38:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b3a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b3c:	f000 fd2e 	bl	800159c <eval_mm_util>
 8000b40:	4602      	mov	r2, r0
 8000b42:	460b      	mov	r3, r1
 8000b44:	e9cd 2306 	strd	r2, r3, [sp, #24]
	    if (verbose > 1) {
 8000b48:	4b5f      	ldr	r3, [pc, #380]	; (8000cc8 <main+0x210>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	dd06      	ble.n	8000b5e <main+0xa6>
			sprintf(msg, "and performance.\n");
 8000b50:	4961      	ldr	r1, [pc, #388]	; (8000cd8 <main+0x220>)
 8000b52:	485f      	ldr	r0, [pc, #380]	; (8000cd0 <main+0x218>)
 8000b54:	f002 fa3a 	bl	8002fcc <siprintf>
			var_print(msg);
 8000b58:	485d      	ldr	r0, [pc, #372]	; (8000cd0 <main+0x218>)
 8000b5a:	f001 fa43 	bl	8001fe4 <var_print>
		}
		end_time = sys_get_time();
 8000b5e:	f001 fd7c 	bl	800265a <sys_get_time>
 8000b62:	901b      	str	r0, [sp, #108]	; 0x6c
		mm_stats.secs = (end_time-start_time)/1000.0f;
 8000b64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000b66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	ee07 3a90 	vmov	s15, r3
 8000b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b72:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000cdc <main+0x224>
 8000b76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b7a:	ee16 0a90 	vmov	r0, s13
 8000b7e:	f7ff fccb 	bl	8000518 <__aeabi_f2d>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	e9cd 2304 	strd	r2, r3, [sp, #16]
	}
	free_trace(trace);
 8000b8a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b8c:	f000 fbe4 	bl	8001358 <free_trace>

    /* Display the mm results in a compact table */
    if (verbose) {
 8000b90:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <main+0x210>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d012      	beq.n	8000bbe <main+0x106>
		sprintf(msg, "\nResults for mm malloc:\n");
 8000b98:	4951      	ldr	r1, [pc, #324]	; (8000ce0 <main+0x228>)
 8000b9a:	484d      	ldr	r0, [pc, #308]	; (8000cd0 <main+0x218>)
 8000b9c:	f002 fa16 	bl	8002fcc <siprintf>
		var_print(msg);
 8000ba0:	484b      	ldr	r0, [pc, #300]	; (8000cd0 <main+0x218>)
 8000ba2:	f001 fa1f 	bl	8001fe4 <var_print>
		printresults(num_tracefiles, &mm_stats);
 8000ba6:	466b      	mov	r3, sp
 8000ba8:	4619      	mov	r1, r3
 8000baa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8000bac:	f000 fde8 	bl	8001780 <printresults>
		sprintf(msg, "\n");
 8000bb0:	494c      	ldr	r1, [pc, #304]	; (8000ce4 <main+0x22c>)
 8000bb2:	4847      	ldr	r0, [pc, #284]	; (8000cd0 <main+0x218>)
 8000bb4:	f002 fa0a 	bl	8002fcc <siprintf>
		var_print(msg);
 8000bb8:	4845      	ldr	r0, [pc, #276]	; (8000cd0 <main+0x218>)
 8000bba:	f001 fa13 	bl	8001fe4 <var_print>
    }

    /* 
     * Accumulate the aggregate statistics for the student's mm package 
     */
    secs = 0;
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	f04f 0300 	mov.w	r3, #0
 8000bc6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    ops = 0;
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    util = 0;
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	f04f 0300 	mov.w	r3, #0
 8000bde:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    numcorrect = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	9321      	str	r3, [sp, #132]	; 0x84
	secs = mm_stats.secs;
 8000be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000bea:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	ops = mm_stats.ops;
 8000bee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000bf2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	util = mm_stats.util;
 8000bf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000bfa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	if (mm_stats.valid)
 8000bfe:	9b02      	ldr	r3, [sp, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <main+0x152>
	    numcorrect++;
 8000c04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000c06:	3301      	adds	r3, #1
 8000c08:	9321      	str	r3, [sp, #132]	; 0x84
    avg_mm_util = util;
 8000c0a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8000c0e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48

    /* 
     * Compute and print the performance index 
     */
    if (errors == 0) {
 8000c12:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <main+0x230>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d130      	bne.n	8000c7c <main+0x1c4>
	avg_mm_throughput = ops/secs;
 8000c1a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8000c1e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8000c22:	f7ff fdfb 	bl	800081c <__aeabi_ddiv>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40

	p1 = avg_mm_util;
 8000c2e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000c32:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	p2 = avg_mm_throughput;
 8000c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000c3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30

	p1_int = p1*100;
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <main+0x234>)
 8000c44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000c48:	f7ff fcbe 	bl	80005c8 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f7ff feca 	bl	80009ec <__aeabi_d2iz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	930b      	str	r3, [sp, #44]	; 0x2c
	p2_int = (int)p2;
 8000c5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000c60:	f7ff fec4 	bl	80009ec <__aeabi_d2iz>
 8000c64:	4603      	mov	r3, r0
 8000c66:	930a      	str	r3, [sp, #40]	; 0x28

	sprintf(msg, "Utilization: %d%%. Throughput: %d\n",
 8000c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000c6c:	4920      	ldr	r1, [pc, #128]	; (8000cf0 <main+0x238>)
 8000c6e:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <main+0x218>)
 8000c70:	f002 f9ac 	bl	8002fcc <siprintf>
	       p1_int, 
	       p2_int);
	
	var_print(msg);
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <main+0x218>)
 8000c76:	f001 f9b5 	bl	8001fe4 <var_print>
 8000c7a:	e009      	b.n	8000c90 <main+0x1d8>
    }
    else { /* There were errors */
	sprintf(msg, "Terminated with %d errors\n", errors);
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <main+0x230>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	491c      	ldr	r1, [pc, #112]	; (8000cf4 <main+0x23c>)
 8000c84:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <main+0x218>)
 8000c86:	f002 f9a1 	bl	8002fcc <siprintf>
	var_print(msg);
 8000c8a:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <main+0x218>)
 8000c8c:	f001 f9aa 	bl	8001fe4 <var_print>
    }

    if (autograder) {
 8000c90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00f      	beq.n	8000cb6 <main+0x1fe>
	sprintf(msg, "correct:%d\n", numcorrect);
 8000c96:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8000c98:	4917      	ldr	r1, [pc, #92]	; (8000cf8 <main+0x240>)
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <main+0x218>)
 8000c9c:	f002 f996 	bl	8002fcc <siprintf>
	var_print(msg);
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <main+0x218>)
 8000ca2:	f001 f99f 	bl	8001fe4 <var_print>
	sprintf(msg, "perfidx:%d\n", perfindex_int);
 8000ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ca8:	4914      	ldr	r1, [pc, #80]	; (8000cfc <main+0x244>)
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <main+0x218>)
 8000cac:	f002 f98e 	bl	8002fcc <siprintf>
	var_print(msg);
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <main+0x218>)
 8000cb2:	f001 f997 	bl	8001fe4 <var_print>
    }

	sys_mm_finish();
 8000cb6:	f001 fccd 	bl	8002654 <sys_mm_finish>

	loop();
 8000cba:	f001 f98d 	bl	8001fd8 <loop>
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	b023      	add	sp, #140	; 0x8c
 8000cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cc8:	200000e4 	.word	0x200000e4
 8000ccc:	08004d0c 	.word	0x08004d0c
 8000cd0:	200000f0 	.word	0x200000f0
 8000cd4:	08004d34 	.word	0x08004d34
 8000cd8:	08004d44 	.word	0x08004d44
 8000cdc:	447a0000 	.word	0x447a0000
 8000ce0:	08004d58 	.word	0x08004d58
 8000ce4:	08004d74 	.word	0x08004d74
 8000ce8:	200000e8 	.word	0x200000e8
 8000cec:	40590000 	.word	0x40590000
 8000cf0:	08004d78 	.word	0x08004d78
 8000cf4:	08004d9c 	.word	0x08004d9c
 8000cf8:	08004db8 	.word	0x08004db8
 8000cfc:	08004dc4 	.word	0x08004dc4

08000d00 <add_range>:
 *     size bytes at addr lo. After checking the block for correctness,
 *     we create a range struct for this block and add it to the range list. 
 */
static int add_range(range_t **ranges, char *lo, int size, 
		     int tracenum, int opnum)
{
 8000d00:	b510      	push	{r4, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	9005      	str	r0, [sp, #20]
 8000d06:	9104      	str	r1, [sp, #16]
 8000d08:	9203      	str	r2, [sp, #12]
 8000d0a:	9302      	str	r3, [sp, #8]
    char *hi = lo + size - 1;
 8000d0c:	9b03      	ldr	r3, [sp, #12]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	9a04      	ldr	r2, [sp, #16]
 8000d12:	4413      	add	r3, r2
 8000d14:	9306      	str	r3, [sp, #24]
    range_t *p;

    assert(size > 0);
 8000d16:	9b03      	ldr	r3, [sp, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dc06      	bgt.n	8000d2a <add_range+0x2a>
 8000d1c:	4b4b      	ldr	r3, [pc, #300]	; (8000e4c <add_range+0x14c>)
 8000d1e:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <add_range+0x150>)
 8000d20:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8000d24:	484b      	ldr	r0, [pc, #300]	; (8000e54 <add_range+0x154>)
 8000d26:	f001 fee5 	bl	8002af4 <__assert_func>

    /* Payload addresses must be ALIGNMENT-byte aligned */
    if (!IS_ALIGNED(lo)) {
 8000d2a:	9b04      	ldr	r3, [sp, #16]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00c      	beq.n	8000d4e <add_range+0x4e>
	sprintf(msg, "Payload address (%p) not aligned to %d bytes", 
 8000d34:	2304      	movs	r3, #4
 8000d36:	9a04      	ldr	r2, [sp, #16]
 8000d38:	4947      	ldr	r1, [pc, #284]	; (8000e58 <add_range+0x158>)
 8000d3a:	4848      	ldr	r0, [pc, #288]	; (8000e5c <add_range+0x15c>)
 8000d3c:	f002 f946 	bl	8002fcc <siprintf>
		lo, ALIGNMENT);
        malloc_error(tracenum, opnum, msg);
 8000d40:	4a46      	ldr	r2, [pc, #280]	; (8000e5c <add_range+0x15c>)
 8000d42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d44:	9802      	ldr	r0, [sp, #8]
 8000d46:	f000 fe83 	bl	8001a50 <malloc_error>
        return 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e07b      	b.n	8000e46 <add_range+0x146>
    }

    /* The payload must lie within the extent of the heap */
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d4e:	f000 ff15 	bl	8001b7c <mem_heap_lo>
 8000d52:	4602      	mov	r2, r0
 8000d54:	9b04      	ldr	r3, [sp, #16]
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d311      	bcc.n	8000d7e <add_range+0x7e>
 8000d5a:	f000 ff15 	bl	8001b88 <mem_heap_hi>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	9b04      	ldr	r3, [sp, #16]
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d80b      	bhi.n	8000d7e <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d66:	f000 ff09 	bl	8001b7c <mem_heap_lo>
 8000d6a:	4602      	mov	r2, r0
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d6c:	9b06      	ldr	r3, [sp, #24]
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d305      	bcc.n	8000d7e <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d72:	f000 ff09 	bl	8001b88 <mem_heap_hi>
 8000d76:	4602      	mov	r2, r0
 8000d78:	9b06      	ldr	r3, [sp, #24]
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d914      	bls.n	8000da8 <add_range+0xa8>
	sprintf(msg, "Payload (%p:%p) lies outside heap (%p:%p)",
 8000d7e:	f000 fefd 	bl	8001b7c <mem_heap_lo>
 8000d82:	4604      	mov	r4, r0
 8000d84:	f000 ff00 	bl	8001b88 <mem_heap_hi>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	9400      	str	r4, [sp, #0]
 8000d8e:	9b06      	ldr	r3, [sp, #24]
 8000d90:	9a04      	ldr	r2, [sp, #16]
 8000d92:	4933      	ldr	r1, [pc, #204]	; (8000e60 <add_range+0x160>)
 8000d94:	4831      	ldr	r0, [pc, #196]	; (8000e5c <add_range+0x15c>)
 8000d96:	f002 f919 	bl	8002fcc <siprintf>
		lo, hi, mem_heap_lo(), mem_heap_hi());
	malloc_error(tracenum, opnum, msg);
 8000d9a:	4a30      	ldr	r2, [pc, #192]	; (8000e5c <add_range+0x15c>)
 8000d9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d9e:	9802      	ldr	r0, [sp, #8]
 8000da0:	f000 fe56 	bl	8001a50 <malloc_error>
        return 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	e04e      	b.n	8000e46 <add_range+0x146>
    }

    /* The payload must not overlap any other payloads */
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000da8:	9b05      	ldr	r3, [sp, #20]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	9307      	str	r3, [sp, #28]
 8000dae:	e029      	b.n	8000e04 <add_range+0x104>
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000db0:	9b07      	ldr	r3, [sp, #28]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	9a04      	ldr	r2, [sp, #16]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d304      	bcc.n	8000dc4 <add_range+0xc4>
 8000dba:	9b07      	ldr	r3, [sp, #28]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	9a04      	ldr	r2, [sp, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d909      	bls.n	8000dd8 <add_range+0xd8>
            (hi >= p->lo && hi <= p->hi)) {
 8000dc4:	9b07      	ldr	r3, [sp, #28]
 8000dc6:	681b      	ldr	r3, [r3, #0]
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000dc8:	9a06      	ldr	r2, [sp, #24]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d317      	bcc.n	8000dfe <add_range+0xfe>
            (hi >= p->lo && hi <= p->hi)) {
 8000dce:	9b07      	ldr	r3, [sp, #28]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	9a06      	ldr	r2, [sp, #24]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d812      	bhi.n	8000dfe <add_range+0xfe>
	    sprintf(msg, "Payload (%p:%p) overlaps another payload (%p:%p)\n",
 8000dd8:	9b07      	ldr	r3, [sp, #28]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	9a07      	ldr	r2, [sp, #28]
 8000dde:	6852      	ldr	r2, [r2, #4]
 8000de0:	9201      	str	r2, [sp, #4]
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	9b06      	ldr	r3, [sp, #24]
 8000de6:	9a04      	ldr	r2, [sp, #16]
 8000de8:	491e      	ldr	r1, [pc, #120]	; (8000e64 <add_range+0x164>)
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <add_range+0x15c>)
 8000dec:	f002 f8ee 	bl	8002fcc <siprintf>
		    lo, hi, p->lo, p->hi);
	    malloc_error(tracenum, opnum, msg);
 8000df0:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <add_range+0x15c>)
 8000df2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000df4:	9802      	ldr	r0, [sp, #8]
 8000df6:	f000 fe2b 	bl	8001a50 <malloc_error>
	    return 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e023      	b.n	8000e46 <add_range+0x146>
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000dfe:	9b07      	ldr	r3, [sp, #28]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	9307      	str	r3, [sp, #28]
 8000e04:	9b07      	ldr	r3, [sp, #28]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1d2      	bne.n	8000db0 <add_range+0xb0>

    /* 
     * Everything looks OK, so remember the extent of this block 
     * by creating a range struct and adding it the range list.
     */
    if ((p = (range_t *)sys_malloc(sizeof(range_t))) == NULL)
 8000e0a:	200c      	movs	r0, #12
 8000e0c:	f001 fc0d 	bl	800262a <sys_malloc>
 8000e10:	9007      	str	r0, [sp, #28]
 8000e12:	9b07      	ldr	r3, [sp, #28]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <add_range+0x11e>
		unix_error("malloc error in add_range");
 8000e18:	4813      	ldr	r0, [pc, #76]	; (8000e68 <add_range+0x168>)
 8000e1a:	f000 fdfb 	bl	8001a14 <unix_error>
	test_mem_use += sizeof(range_t);
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <add_range+0x16c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	330c      	adds	r3, #12
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <add_range+0x16c>)
 8000e28:	601a      	str	r2, [r3, #0]
    p->next = *ranges;
 8000e2a:	9b05      	ldr	r3, [sp, #20]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	9b07      	ldr	r3, [sp, #28]
 8000e30:	609a      	str	r2, [r3, #8]
    p->lo = lo;
 8000e32:	9b07      	ldr	r3, [sp, #28]
 8000e34:	9a04      	ldr	r2, [sp, #16]
 8000e36:	601a      	str	r2, [r3, #0]
    p->hi = hi;
 8000e38:	9b07      	ldr	r3, [sp, #28]
 8000e3a:	9a06      	ldr	r2, [sp, #24]
 8000e3c:	605a      	str	r2, [r3, #4]
    *ranges = p;
 8000e3e:	9b05      	ldr	r3, [sp, #20]
 8000e40:	9a07      	ldr	r2, [sp, #28]
 8000e42:	601a      	str	r2, [r3, #0]
    return 1;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	b008      	add	sp, #32
 8000e4a:	bd10      	pop	{r4, pc}
 8000e4c:	08004dd0 	.word	0x08004dd0
 8000e50:	0800522c 	.word	0x0800522c
 8000e54:	08004ddc 	.word	0x08004ddc
 8000e58:	08004df4 	.word	0x08004df4
 8000e5c:	200000f0 	.word	0x200000f0
 8000e60:	08004e24 	.word	0x08004e24
 8000e64:	08004e50 	.word	0x08004e50
 8000e68:	08004e84 	.word	0x08004e84
 8000e6c:	200000ec 	.word	0x200000ec

08000e70 <remove_range>:

/* 
 * remove_range - Free the range record of block whose payload starts at lo 
 */
static void remove_range(range_t **ranges, char *lo)
{
 8000e70:	b500      	push	{lr}
 8000e72:	b085      	sub	sp, #20
 8000e74:	9001      	str	r0, [sp, #4]
 8000e76:	9100      	str	r1, [sp, #0]
    range_t *p;
    range_t **prevpp = ranges;
 8000e78:	9b01      	ldr	r3, [sp, #4]
 8000e7a:	9302      	str	r3, [sp, #8]

    for (p = *ranges;  p != NULL; p = p->next) {
 8000e7c:	9b01      	ldr	r3, [sp, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	9303      	str	r3, [sp, #12]
 8000e82:	e012      	b.n	8000eaa <remove_range+0x3a>
        if (p->lo == lo) {
 8000e84:	9b03      	ldr	r3, [sp, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	9a00      	ldr	r2, [sp, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d107      	bne.n	8000e9e <remove_range+0x2e>
	    *prevpp = p->next;
 8000e8e:	9b03      	ldr	r3, [sp, #12]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	9b02      	ldr	r3, [sp, #8]
 8000e94:	601a      	str	r2, [r3, #0]
            sys_free(p);
 8000e96:	9803      	ldr	r0, [sp, #12]
 8000e98:	f001 fbce 	bl	8002638 <sys_free>
            break;
 8000e9c:	e009      	b.n	8000eb2 <remove_range+0x42>
        }
        prevpp = &(p->next);
 8000e9e:	9b03      	ldr	r3, [sp, #12]
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	9302      	str	r3, [sp, #8]
    for (p = *ranges;  p != NULL; p = p->next) {
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	9303      	str	r3, [sp, #12]
 8000eaa:	9b03      	ldr	r3, [sp, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e9      	bne.n	8000e84 <remove_range+0x14>
    }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	b005      	add	sp, #20
 8000eb6:	f85d fb04 	ldr.w	pc, [sp], #4

08000eba <clear_ranges>:

/*
 * clear_ranges - free all of the range records for a trace 
 */
static void clear_ranges(range_t **ranges)
{
 8000eba:	b500      	push	{lr}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	9001      	str	r0, [sp, #4]
    range_t *p;
    range_t *pnext;

    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	9303      	str	r3, [sp, #12]
 8000ec6:	e007      	b.n	8000ed8 <clear_ranges+0x1e>
        pnext = p->next;
 8000ec8:	9b03      	ldr	r3, [sp, #12]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	9302      	str	r3, [sp, #8]
        sys_free(p);
 8000ece:	9803      	ldr	r0, [sp, #12]
 8000ed0:	f001 fbb2 	bl	8002638 <sys_free>
    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ed4:	9b02      	ldr	r3, [sp, #8]
 8000ed6:	9303      	str	r3, [sp, #12]
 8000ed8:	9b03      	ldr	r3, [sp, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f4      	bne.n	8000ec8 <clear_ranges+0xe>
    }
    *ranges = NULL;
 8000ede:	9b01      	ldr	r3, [sp, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	b005      	add	sp, #20
 8000ee8:	f85d fb04 	ldr.w	pc, [sp], #4

08000eec <read_trace>:

/*
 * read_trace - read a trace file and store it in memory
 */
static trace_t *read_trace()
{
 8000eec:	b500      	push	{lr}
 8000eee:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
    trace_t *trace;
    char type[MAXLINE];
    char path[MAXLINE];
    unsigned index, size;
    unsigned max_index = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
    unsigned op_index;
	char * scanptr = tracestr;
 8000ef8:	4bac      	ldr	r3, [pc, #688]	; (80011ac <read_trace+0x2c0>)
 8000efa:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
	int bytes_scanned = 0;
 8000efe:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f02:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]

    /* Allocate the trace record */
    if ((trace = (trace_t *) sys_malloc(sizeof(trace_t))) == NULL)
 8000f0a:	201c      	movs	r0, #28
 8000f0c:	f001 fb8d 	bl	800262a <sys_malloc>
 8000f10:	f8cd 0818 	str.w	r0, [sp, #2072]	; 0x818
 8000f14:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <read_trace+0x36>
		unix_error("malloc 1 failed in read_trance");
 8000f1c:	48a4      	ldr	r0, [pc, #656]	; (80011b0 <read_trace+0x2c4>)
 8000f1e:	f000 fd79 	bl	8001a14 <unix_error>
	test_mem_use += sizeof(trace_t);
 8000f22:	4ba4      	ldr	r3, [pc, #656]	; (80011b4 <read_trace+0x2c8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	331c      	adds	r3, #28
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4ba2      	ldr	r3, [pc, #648]	; (80011b4 <read_trace+0x2c8>)
 8000f2c:	601a      	str	r2, [r3, #0]
    /* Read the trace file header */
    //if ((tracefile = fmemopen(tracestr, strlen(tracestr), "r")) == NULL) {
	//sprintf(msg, "Could not open %s in read_trace", path);
	//unix_error(msg);
    //}
    sscanf(scanptr, "%d%n", &(trace->sugg_heapsize), &bytes_scanned); /* not used */
 8000f2e:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
 8000f32:	ab03      	add	r3, sp, #12
 8000f34:	49a0      	ldr	r1, [pc, #640]	; (80011b8 <read_trace+0x2cc>)
 8000f36:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f3a:	f002 f867 	bl	800300c <siscanf>
	scanptr += bytes_scanned;
 8000f3e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f42:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f4e:	4413      	add	r3, r2
 8000f50:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ids), &bytes_scanned);     
 8000f54:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f58:	1d1a      	adds	r2, r3, #4
 8000f5a:	ab03      	add	r3, sp, #12
 8000f5c:	4996      	ldr	r1, [pc, #600]	; (80011b8 <read_trace+0x2cc>)
 8000f5e:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f62:	f002 f853 	bl	800300c <siscanf>
	scanptr += bytes_scanned;
 8000f66:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f6a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f76:	4413      	add	r3, r2
 8000f78:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ops), &bytes_scanned);     
 8000f7c:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f80:	f103 0208 	add.w	r2, r3, #8
 8000f84:	ab03      	add	r3, sp, #12
 8000f86:	498c      	ldr	r1, [pc, #560]	; (80011b8 <read_trace+0x2cc>)
 8000f88:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f8c:	f002 f83e 	bl	800300c <siscanf>
	scanptr += bytes_scanned;
 8000f90:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f94:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->weight), &bytes_scanned);        /* not used */
 8000fa6:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000faa:	f103 020c 	add.w	r2, r3, #12
 8000fae:	ab03      	add	r3, sp, #12
 8000fb0:	4981      	ldr	r1, [pc, #516]	; (80011b8 <read_trace+0x2cc>)
 8000fb2:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000fb6:	f002 f829 	bl	800300c <siscanf>
	scanptr += bytes_scanned;
 8000fba:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000fbe:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fca:	4413      	add	r3, r2
 8000fcc:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    
    /* We'll store each request line in the trace in this array */
    if ((trace->ops = 
	 (traceop_t *)sys_malloc(trace->num_ops * sizeof(traceop_t))) == NULL)
 8000fd0:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fb22 	bl	800262a <sys_malloc>
 8000fe6:	4602      	mov	r2, r0
    if ((trace->ops = 
 8000fe8:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <read_trace+0x112>
		unix_error("malloc 2 failed in read_trace");
 8000ff8:	4870      	ldr	r0, [pc, #448]	; (80011bc <read_trace+0x2d0>)
 8000ffa:	f000 fd0b 	bl	8001a14 <unix_error>
	test_mem_use += sizeof(traceop_t);
 8000ffe:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <read_trace+0x2c8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	330c      	adds	r3, #12
 8001004:	461a      	mov	r2, r3
 8001006:	4b6b      	ldr	r3, [pc, #428]	; (80011b4 <read_trace+0x2c8>)
 8001008:	601a      	str	r2, [r3, #0]

    /* We'll keep an array of pointers to the allocated blocks here... */
    if ((trace->blocks = 
	 (char **)sys_malloc(trace->num_ids * sizeof(char *))) == NULL)
 800100a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fb09 	bl	800262a <sys_malloc>
 8001018:	4602      	mov	r2, r0
    if ((trace->blocks = 
 800101a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <read_trace+0x144>
		unix_error("malloc 3 failed in read_trace");
 800102a:	4865      	ldr	r0, [pc, #404]	; (80011c0 <read_trace+0x2d4>)
 800102c:	f000 fcf2 	bl	8001a14 <unix_error>
	test_mem_use += trace->num_ids * sizeof(char *);
 8001030:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4a5e      	ldr	r2, [pc, #376]	; (80011b4 <read_trace+0x2c8>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	4413      	add	r3, r2
 800103e:	461a      	mov	r2, r3
 8001040:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <read_trace+0x2c8>)
 8001042:	601a      	str	r2, [r3, #0]

    /* ... along with the corresponding byte sizes of each block */
    if ((trace->block_sizes = 
	 (size_t *)sys_malloc(trace->num_ids * sizeof(size_t))) == NULL)
 8001044:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4618      	mov	r0, r3
 800104e:	f001 faec 	bl	800262a <sys_malloc>
 8001052:	4602      	mov	r2, r0
    if ((trace->block_sizes = 
 8001054:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001058:	619a      	str	r2, [r3, #24]
 800105a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <read_trace+0x17e>
		unix_error("malloc 4 failed in read_trace");
 8001064:	4857      	ldr	r0, [pc, #348]	; (80011c4 <read_trace+0x2d8>)
 8001066:	f000 fcd5 	bl	8001a14 <unix_error>
	test_mem_use += trace->num_ids * sizeof(size_t);
 800106a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <read_trace+0x2c8>)
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	4413      	add	r3, r2
 8001078:	461a      	mov	r2, r3
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <read_trace+0x2c8>)
 800107c:	601a      	str	r2, [r3, #0]
    
    /* read every request line in the trace file */
    index = 0;
 800107e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001082:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    op_index = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 8001090:	e143      	b.n	800131a <read_trace+0x42e>
		scanptr += bytes_scanned;
 8001092:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001096:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80010a2:	4413      	add	r3, r2
 80010a4:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
		switch(type[0]) {
 80010a8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010ac:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	3b61      	subs	r3, #97	; 0x61
 80010b4:	2b12      	cmp	r3, #18
 80010b6:	f200 810f 	bhi.w	80012d8 <read_trace+0x3ec>
 80010ba:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <read_trace+0x1d4>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	0800110d 	.word	0x0800110d
 80010c4:	080012d9 	.word	0x080012d9
 80010c8:	080012d9 	.word	0x080012d9
 80010cc:	080012d9 	.word	0x080012d9
 80010d0:	080012d9 	.word	0x080012d9
 80010d4:	0800126d 	.word	0x0800126d
 80010d8:	080012d9 	.word	0x080012d9
 80010dc:	080012d3 	.word	0x080012d3
 80010e0:	080012d9 	.word	0x080012d9
 80010e4:	080012d9 	.word	0x080012d9
 80010e8:	080012d9 	.word	0x080012d9
 80010ec:	080012d9 	.word	0x080012d9
 80010f0:	080012d9 	.word	0x080012d9
 80010f4:	080012d9 	.word	0x080012d9
 80010f8:	080012d9 	.word	0x080012d9
 80010fc:	080012d9 	.word	0x080012d9
 8001100:	080012d9 	.word	0x080012d9
 8001104:	080011cd 	.word	0x080011cd
 8001108:	080012cd 	.word	0x080012cd
		case 'a':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 800110c:	a904      	add	r1, sp, #16
 800110e:	aa05      	add	r2, sp, #20
 8001110:	ab03      	add	r3, sp, #12
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	460b      	mov	r3, r1
 8001116:	492c      	ldr	r1, [pc, #176]	; (80011c8 <read_trace+0x2dc>)
 8001118:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 800111c:	f001 ff76 	bl	800300c <siscanf>
			scanptr += bytes_scanned;
 8001120:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001124:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8001130:	4413      	add	r3, r2
 8001132:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = ALLOC;
 8001136:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800113a:	6919      	ldr	r1, [r3, #16]
 800113c:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 800114e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001152:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800115c:	6919      	ldr	r1, [r3, #16]
 800115e:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	4602      	mov	r2, r0
 800116e:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 8001170:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001174:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800117e:	6919      	ldr	r1, [r3, #16]
 8001180:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	4602      	mov	r2, r0
 8001190:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 8001192:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001196:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf38      	it	cc
 80011a4:	4613      	movcc	r3, r2
 80011a6:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 80011aa:	e0b1      	b.n	8001310 <read_trace+0x424>
 80011ac:	20000000 	.word	0x20000000
 80011b0:	08004ea0 	.word	0x08004ea0
 80011b4:	200000ec 	.word	0x200000ec
 80011b8:	08004ec0 	.word	0x08004ec0
 80011bc:	08004ec8 	.word	0x08004ec8
 80011c0:	08004ee8 	.word	0x08004ee8
 80011c4:	08004f08 	.word	0x08004f08
 80011c8:	08004f28 	.word	0x08004f28
		case 'r':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 80011cc:	a904      	add	r1, sp, #16
 80011ce:	aa05      	add	r2, sp, #20
 80011d0:	ab03      	add	r3, sp, #12
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	460b      	mov	r3, r1
 80011d6:	495b      	ldr	r1, [pc, #364]	; (8001344 <read_trace+0x458>)
 80011d8:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 80011dc:	f001 ff16 	bl	800300c <siscanf>
			scanptr += bytes_scanned;
 80011e0:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011e4:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80011f0:	4413      	add	r3, r2
 80011f2:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = REALLOC;
 80011f6:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80011fa:	6919      	ldr	r1, [r3, #16]
 80011fc:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	2202      	movs	r2, #2
 800120c:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 800120e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001212:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800121c:	6919      	ldr	r1, [r3, #16]
 800121e:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	4602      	mov	r2, r0
 800122e:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 8001230:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001234:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800123e:	6919      	ldr	r1, [r3, #16]
 8001240:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	4602      	mov	r2, r0
 8001250:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 8001252:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001256:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 8001260:	4293      	cmp	r3, r2
 8001262:	bf38      	it	cc
 8001264:	4613      	movcc	r3, r2
 8001266:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 800126a:	e051      	b.n	8001310 <read_trace+0x424>
		case 'f':
			sscanf(scanptr, "%u%n", &index, &bytes_scanned);
 800126c:	ab03      	add	r3, sp, #12
 800126e:	aa05      	add	r2, sp, #20
 8001270:	4935      	ldr	r1, [pc, #212]	; (8001348 <read_trace+0x45c>)
 8001272:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001276:	f001 fec9 	bl	800300c <siscanf>
			scanptr += bytes_scanned;
 800127a:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800127e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 800128a:	4413      	add	r3, r2
 800128c:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = FREE;
 8001290:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001294:	6919      	ldr	r1, [r3, #16]
 8001296:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 80012a8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012ac:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	4602      	mov	r2, r0
 80012c8:	605a      	str	r2, [r3, #4]
			break;
 80012ca:	e021      	b.n	8001310 <read_trace+0x424>
		case 's':
			stack_test();
 80012cc:	f7ff fbd6 	bl	8000a7c <stack_test>
			break;
 80012d0:	e01e      	b.n	8001310 <read_trace+0x424>
		case 'h':
			heap_test();
 80012d2:	f7ff fbe3 	bl	8000a9c <heap_test>
			break;
 80012d6:	e01b      	b.n	8001310 <read_trace+0x424>
		default:
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
			   type[0], scanptr-bytes_scanned, path);
 80012d8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012dc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80012e0:	781b      	ldrb	r3, [r3, #0]
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 80012e2:	4619      	mov	r1, r3
			   type[0], scanptr-bytes_scanned, path);
 80012e4:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012e8:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	425b      	negs	r3, r3
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 80012f0:	f8dd 281c 	ldr.w	r2, [sp, #2076]	; 0x81c
 80012f4:	441a      	add	r2, r3
 80012f6:	ab06      	add	r3, sp, #24
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	4613      	mov	r3, r2
 80012fc:	460a      	mov	r2, r1
 80012fe:	4913      	ldr	r1, [pc, #76]	; (800134c <read_trace+0x460>)
 8001300:	4813      	ldr	r0, [pc, #76]	; (8001350 <read_trace+0x464>)
 8001302:	f001 fe63 	bl	8002fcc <siprintf>
			var_print(msg);
 8001306:	4812      	ldr	r0, [pc, #72]	; (8001350 <read_trace+0x464>)
 8001308:	f000 fe6c 	bl	8001fe4 <var_print>
			loop();
 800130c:	f000 fe64 	bl	8001fd8 <loop>
		}
		op_index++;
 8001310:	f8dd 3820 	ldr.w	r3, [sp, #2080]	; 0x820
 8001314:	3301      	adds	r3, #1
 8001316:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 800131a:	ab03      	add	r3, sp, #12
 800131c:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <read_trace+0x468>)
 8001322:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001326:	f001 fe71 	bl	800300c <siscanf>
 800132a:	4603      	mov	r3, r0
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001330:	f47f aeaf 	bne.w	8001092 <read_trace+0x1a6>
    }
	// Removed to allow shortened trace files
    //assert(max_index == trace->num_ids - 1);
    //assert(trace->num_ops == op_index);
    
    return trace;
 8001334:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
}
 8001338:	4618      	mov	r0, r3
 800133a:	f60d 0d2c 	addw	sp, sp, #2092	; 0x82c
 800133e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001342:	bf00      	nop
 8001344:	08004f28 	.word	0x08004f28
 8001348:	08004f30 	.word	0x08004f30
 800134c:	08004f38 	.word	0x08004f38
 8001350:	200000f0 	.word	0x200000f0
 8001354:	08004f74 	.word	0x08004f74

08001358 <free_trace>:
/*
 * free_trace - Free the trace record and the three arrays it points
 *              to, all of which were allocated in read_trace().
 */
void free_trace(trace_t *trace)
{
 8001358:	b500      	push	{lr}
 800135a:	b083      	sub	sp, #12
 800135c:	9001      	str	r0, [sp, #4]
    sys_free(trace->ops);         /* free the three arrays... */
 800135e:	9b01      	ldr	r3, [sp, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4618      	mov	r0, r3
 8001364:	f001 f968 	bl	8002638 <sys_free>
    sys_free(trace->blocks);      
 8001368:	9b01      	ldr	r3, [sp, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4618      	mov	r0, r3
 800136e:	f001 f963 	bl	8002638 <sys_free>
    sys_free(trace->block_sizes);
 8001372:	9b01      	ldr	r3, [sp, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4618      	mov	r0, r3
 8001378:	f001 f95e 	bl	8002638 <sys_free>
    sys_free(trace);              /* and the trace record itself... */
 800137c:	9801      	ldr	r0, [sp, #4]
 800137e:	f001 f95b 	bl	8002638 <sys_free>
}
 8001382:	bf00      	nop
 8001384:	b003      	add	sp, #12
 8001386:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800138c <eval_mm_valid>:

/*
 * eval_mm_valid - Check the mm malloc package for correctness
 */
static int eval_mm_valid(trace_t *trace, int tracenum, range_t **ranges) 
{
 800138c:	b500      	push	{lr}
 800138e:	b08f      	sub	sp, #60	; 0x3c
 8001390:	9005      	str	r0, [sp, #20]
 8001392:	9104      	str	r1, [sp, #16]
 8001394:	9203      	str	r2, [sp, #12]
    char *newp;
    char *oldp;
    char *p;
    
    /* Reset the heap and free any records in the range list */
    clear_ranges(ranges);
 8001396:	9803      	ldr	r0, [sp, #12]
 8001398:	f7ff fd8f 	bl	8000eba <clear_ranges>
	return 0;
    }
	*/

    /* Interpret each operation in the trace in order */
    for (i = 0;  i < trace->num_ops;  i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	930d      	str	r3, [sp, #52]	; 0x34
 80013a0:	e0e4      	b.n	800156c <eval_mm_valid+0x1e0>
	index = trace->ops[i].index;
 80013a2:	9b05      	ldr	r3, [sp, #20]
 80013a4:	6919      	ldr	r1, [r3, #16]
 80013a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	930a      	str	r3, [sp, #40]	; 0x28
	size = trace->ops[i].size;
 80013b6:	9b05      	ldr	r3, [sp, #20]
 80013b8:	6919      	ldr	r1, [r3, #16]
 80013ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	9309      	str	r3, [sp, #36]	; 0x24

        switch (trace->ops[i].type) {
 80013ca:	9b05      	ldr	r3, [sp, #20]
 80013cc:	6919      	ldr	r1, [r3, #16]
 80013ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d03a      	beq.n	8001456 <eval_mm_valid+0xca>
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	f300 80ac 	bgt.w	800153e <eval_mm_valid+0x1b2>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <eval_mm_valid+0x66>
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	f000 8098 	beq.w	8001520 <eval_mm_valid+0x194>
 80013f0:	e0a5      	b.n	800153e <eval_mm_valid+0x1b2>

        case ALLOC: /* sys_malloc */

	    /* Call the student's malloc */
	    if ((p = sys_malloc(size)) == NULL) {
 80013f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 f918 	bl	800262a <sys_malloc>
 80013fa:	9006      	str	r0, [sp, #24]
 80013fc:	9b06      	ldr	r3, [sp, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <eval_mm_valid+0x84>
		malloc_error(tracenum, i, "sys_malloc failed.");
 8001402:	4a60      	ldr	r2, [pc, #384]	; (8001584 <eval_mm_valid+0x1f8>)
 8001404:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001406:	9804      	ldr	r0, [sp, #16]
 8001408:	f000 fb22 	bl	8001a50 <malloc_error>
		return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e0b4      	b.n	800157a <eval_mm_valid+0x1ee>
	    /* 
	     * Test the range of the new block for correctness and add it 
	     * to the range list if OK. The block must be  be aligned properly,
	     * and must not overlap any currently allocated block. 
	     */ 
	    if (add_range(ranges, p, size, tracenum, i) == 0)
 8001410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	9b04      	ldr	r3, [sp, #16]
 8001416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001418:	9906      	ldr	r1, [sp, #24]
 800141a:	9803      	ldr	r0, [sp, #12]
 800141c:	f7ff fc70 	bl	8000d00 <add_range>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <eval_mm_valid+0x9e>
		return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	e0a7      	b.n	800157a <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * fill range with low byte of index.  This will be used later
	     * if we realloc the block and wish to make sure that the old
	     * data was copied to the new block
	     */
	    memset(p, index & 0xFF, size);
 800142a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800142c:	b2db      	uxtb	r3, r3
 800142e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	9806      	ldr	r0, [sp, #24]
 8001434:	f001 fbc6 	bl	8002bc4 <memset>

	    /* Remember region */
	    trace->blocks[index] = p;
 8001438:	9b05      	ldr	r3, [sp, #20]
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	9a06      	ldr	r2, [sp, #24]
 8001444:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001446:	9b05      	ldr	r3, [sp, #20]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001452:	601a      	str	r2, [r3, #0]
	    break;
 8001454:	e087      	b.n	8001566 <eval_mm_valid+0x1da>

        case REALLOC: /* sys_realloc */
	    
	    /* Call the student's realloc */
	    oldp = trace->blocks[index];
 8001456:	9b05      	ldr	r3, [sp, #20]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	9308      	str	r3, [sp, #32]
	    if ((newp = sys_realloc(oldp, size)) == NULL) {
 8001464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	9808      	ldr	r0, [sp, #32]
 800146a:	f001 f8eb 	bl	8002644 <sys_realloc>
 800146e:	9007      	str	r0, [sp, #28]
 8001470:	9b07      	ldr	r3, [sp, #28]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <eval_mm_valid+0xf8>
		malloc_error(tracenum, i, "sys_realloc failed.");
 8001476:	4a44      	ldr	r2, [pc, #272]	; (8001588 <eval_mm_valid+0x1fc>)
 8001478:	990d      	ldr	r1, [sp, #52]	; 0x34
 800147a:	9804      	ldr	r0, [sp, #16]
 800147c:	f000 fae8 	bl	8001a50 <malloc_error>
		return 0;
 8001480:	2300      	movs	r3, #0
 8001482:	e07a      	b.n	800157a <eval_mm_valid+0x1ee>
	    }
	    
	    /* Remove the old region from the range list */
	    remove_range(ranges, oldp);
 8001484:	9908      	ldr	r1, [sp, #32]
 8001486:	9803      	ldr	r0, [sp, #12]
 8001488:	f7ff fcf2 	bl	8000e70 <remove_range>
	    
	    /* Check new block for correctness and add it to range list */
	    if (add_range(ranges, newp, size, tracenum, i) == 0)
 800148c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	9b04      	ldr	r3, [sp, #16]
 8001492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001494:	9907      	ldr	r1, [sp, #28]
 8001496:	9803      	ldr	r0, [sp, #12]
 8001498:	f7ff fc32 	bl	8000d00 <add_range>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <eval_mm_valid+0x11a>
		return 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e069      	b.n	800157a <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * Make sure that the new block contains the data from the old 
	     * block and then fill in the new block with the low order byte
	     * of the new index
	     */
	    oldsize = trace->block_sizes[index];
 80014a6:	9b05      	ldr	r3, [sp, #20]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	930b      	str	r3, [sp, #44]	; 0x2c
	    if (size < oldsize) oldsize = size;
 80014b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014b8:	429a      	cmp	r2, r3
 80014ba:	da01      	bge.n	80014c0 <eval_mm_valid+0x134>
 80014bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014be:	930b      	str	r3, [sp, #44]	; 0x2c
	    for (j = 0; j < oldsize; j++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	930c      	str	r3, [sp, #48]	; 0x30
 80014c4:	e012      	b.n	80014ec <eval_mm_valid+0x160>
	      if (newp[j] != (index & 0xFF)) {
 80014c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014c8:	9a07      	ldr	r2, [sp, #28]
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d006      	beq.n	80014e6 <eval_mm_valid+0x15a>
		malloc_error(tracenum, i, "sys_realloc did not preserve the "
 80014d8:	4a2c      	ldr	r2, [pc, #176]	; (800158c <eval_mm_valid+0x200>)
 80014da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80014dc:	9804      	ldr	r0, [sp, #16]
 80014de:	f000 fab7 	bl	8001a50 <malloc_error>
			     "data from old block");
		return 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e049      	b.n	800157a <eval_mm_valid+0x1ee>
	    for (j = 0; j < oldsize; j++) {
 80014e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014e8:	3301      	adds	r3, #1
 80014ea:	930c      	str	r3, [sp, #48]	; 0x30
 80014ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80014ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbe8      	blt.n	80014c6 <eval_mm_valid+0x13a>
	      }
	    }
	    memset(newp, index & 0xFF, size);
 80014f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	9807      	ldr	r0, [sp, #28]
 80014fe:	f001 fb61 	bl	8002bc4 <memset>

	    /* Remember region */
	    trace->blocks[index] = newp;
 8001502:	9b05      	ldr	r3, [sp, #20]
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	9a07      	ldr	r2, [sp, #28]
 800150e:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001510:	9b05      	ldr	r3, [sp, #20]
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800151c:	601a      	str	r2, [r3, #0]
	    break;
 800151e:	e022      	b.n	8001566 <eval_mm_valid+0x1da>

        case FREE: /* sys_free */
	    
	    /* Remove region from list and call student's free function */
	    p = trace->blocks[index];
 8001520:	9b05      	ldr	r3, [sp, #20]
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	9306      	str	r3, [sp, #24]
	    remove_range(ranges, p);
 800152e:	9906      	ldr	r1, [sp, #24]
 8001530:	9803      	ldr	r0, [sp, #12]
 8001532:	f7ff fc9d 	bl	8000e70 <remove_range>
	    sys_free(p);
 8001536:	9806      	ldr	r0, [sp, #24]
 8001538:	f001 f87e 	bl	8002638 <sys_free>
	    break;
 800153c:	e013      	b.n	8001566 <eval_mm_valid+0x1da>

	default:
		sprintf(msg, "Type %d", trace->ops[i].type);
 800153e:	9b05      	ldr	r3, [sp, #20]
 8001540:	6919      	ldr	r1, [r3, #16]
 8001542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	490f      	ldr	r1, [pc, #60]	; (8001590 <eval_mm_valid+0x204>)
 8001554:	480f      	ldr	r0, [pc, #60]	; (8001594 <eval_mm_valid+0x208>)
 8001556:	f001 fd39 	bl	8002fcc <siprintf>
		var_print(msg);
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <eval_mm_valid+0x208>)
 800155c:	f000 fd42 	bl	8001fe4 <var_print>
	    app_error("Nonexistent request type in eval_mm_valid");
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <eval_mm_valid+0x20c>)
 8001562:	f000 fa41 	bl	80019e8 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 8001566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001568:	3301      	adds	r3, #1
 800156a:	930d      	str	r3, [sp, #52]	; 0x34
 800156c:	9b05      	ldr	r3, [sp, #20]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001572:	429a      	cmp	r2, r3
 8001574:	f6ff af15 	blt.w	80013a2 <eval_mm_valid+0x16>
        }

    }

    /* As far as we know, this is a valid malloc package */
    return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	b00f      	add	sp, #60	; 0x3c
 800157e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001582:	bf00      	nop
 8001584:	08004f7c 	.word	0x08004f7c
 8001588:	08004f90 	.word	0x08004f90
 800158c:	08004fa4 	.word	0x08004fa4
 8001590:	08004fdc 	.word	0x08004fdc
 8001594:	200000f0 	.word	0x200000f0
 8001598:	08004fe4 	.word	0x08004fe4

0800159c <eval_mm_util>:
 *   doesn't allow the students to decrement the brk pointer, so brk
 *   is always the high water mark of the heap. 
 *   
 */
static double eval_mm_util(trace_t *trace, int tracenum, range_t **ranges)
{   
 800159c:	b530      	push	{r4, r5, lr}
 800159e:	b08f      	sub	sp, #60	; 0x3c
 80015a0:	9003      	str	r0, [sp, #12]
 80015a2:	9102      	str	r1, [sp, #8]
 80015a4:	9201      	str	r2, [sp, #4]
    int i;
    int index;
    int size, newsize, oldsize;
    int max_total_size = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	930c      	str	r3, [sp, #48]	; 0x30
    int total_size = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	930b      	str	r3, [sp, #44]	; 0x2c
    /* initialize the heap and the mm malloc package */
    //mem_reset_brk();
    //if (mm_init() < 0)
	//app_error("mm_init failed in eval_mm_util");

    for (i = 0;  i < trace->num_ops;  i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	930d      	str	r3, [sp, #52]	; 0x34
 80015b2:	e0ba      	b.n	800172a <eval_mm_util+0x18e>
        switch (trace->ops[i].type) {
 80015b4:	9b03      	ldr	r3, [sp, #12]
 80015b6:	6919      	ldr	r1, [r3, #16]
 80015b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d040      	beq.n	800164c <eval_mm_util+0xb0>
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	f300 80a7 	bgt.w	800171e <eval_mm_util+0x182>
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <eval_mm_util+0x40>
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f000 8082 	beq.w	80016de <eval_mm_util+0x142>
 80015da:	e0a0      	b.n	800171e <eval_mm_util+0x182>

        case ALLOC: /* mm_alloc */
	    index = trace->ops[i].index;
 80015dc:	9b03      	ldr	r3, [sp, #12]
 80015de:	6919      	ldr	r1, [r3, #16]
 80015e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->ops[i].size;
 80015f0:	9b03      	ldr	r3, [sp, #12]
 80015f2:	6919      	ldr	r1, [r3, #16]
 80015f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	9305      	str	r3, [sp, #20]

	    if ((p = sys_malloc(size)) == NULL) 
 8001604:	9b05      	ldr	r3, [sp, #20]
 8001606:	4618      	mov	r0, r3
 8001608:	f001 f80f 	bl	800262a <sys_malloc>
 800160c:	9004      	str	r0, [sp, #16]
 800160e:	9b04      	ldr	r3, [sp, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <eval_mm_util+0x7e>
			app_error("sys_malloc failed in eval_mm_util");
 8001614:	4856      	ldr	r0, [pc, #344]	; (8001770 <eval_mm_util+0x1d4>)
 8001616:	f000 f9e7 	bl	80019e8 <app_error>
	    
	    /* Remember region and size */
	    trace->blocks[index] = p;
 800161a:	9b03      	ldr	r3, [sp, #12]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	9a04      	ldr	r2, [sp, #16]
 8001626:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001628:	9b03      	ldr	r3, [sp, #12]
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	9a05      	ldr	r2, [sp, #20]
 8001634:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += size;
 8001636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001638:	9b05      	ldr	r3, [sp, #20]
 800163a:	4413      	add	r3, r2
 800163c:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 800163e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001642:	4293      	cmp	r3, r2
 8001644:	bfb8      	it	lt
 8001646:	4613      	movlt	r3, r2
 8001648:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 800164a:	e06b      	b.n	8001724 <eval_mm_util+0x188>

	case REALLOC: /* sys_realloc */
	    index = trace->ops[i].index;
 800164c:	9b03      	ldr	r3, [sp, #12]
 800164e:	6919      	ldr	r1, [r3, #16]
 8001650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	930a      	str	r3, [sp, #40]	; 0x28
	    newsize = trace->ops[i].size;
 8001660:	9b03      	ldr	r3, [sp, #12]
 8001662:	6919      	ldr	r1, [r3, #16]
 8001664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	9309      	str	r3, [sp, #36]	; 0x24
	    oldsize = trace->block_sizes[index];
 8001674:	9b03      	ldr	r3, [sp, #12]
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	9308      	str	r3, [sp, #32]

	    oldp = trace->blocks[index];
 8001682:	9b03      	ldr	r3, [sp, #12]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	9307      	str	r3, [sp, #28]
	    if ((newp = sys_realloc(oldp,newsize)) == NULL)
 8001690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001692:	4619      	mov	r1, r3
 8001694:	9807      	ldr	r0, [sp, #28]
 8001696:	f000 ffd5 	bl	8002644 <sys_realloc>
 800169a:	9006      	str	r0, [sp, #24]
 800169c:	9b06      	ldr	r3, [sp, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <eval_mm_util+0x10c>
		app_error("sys_realloc failed in eval_mm_util");
 80016a2:	4834      	ldr	r0, [pc, #208]	; (8001774 <eval_mm_util+0x1d8>)
 80016a4:	f000 f9a0 	bl	80019e8 <app_error>

	    /* Remember region and size */
	    trace->blocks[index] = newp;
 80016a8:	9b03      	ldr	r3, [sp, #12]
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	9a06      	ldr	r2, [sp, #24]
 80016b4:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = newsize;
 80016b6:	9b03      	ldr	r3, [sp, #12]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016c2:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += (newsize - oldsize);
 80016c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016c6:	9b08      	ldr	r3, [sp, #32]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80016cc:	4413      	add	r3, r2
 80016ce:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 80016d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80016d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016d4:	4293      	cmp	r3, r2
 80016d6:	bfb8      	it	lt
 80016d8:	4613      	movlt	r3, r2
 80016da:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 80016dc:	e022      	b.n	8001724 <eval_mm_util+0x188>

        case FREE: /* sys_free */
	    index = trace->ops[i].index;
 80016de:	9b03      	ldr	r3, [sp, #12]
 80016e0:	6919      	ldr	r1, [r3, #16]
 80016e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->block_sizes[index];
 80016f2:	9b03      	ldr	r3, [sp, #12]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	9305      	str	r3, [sp, #20]
	    p = trace->blocks[index];
 8001700:	9b03      	ldr	r3, [sp, #12]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	9304      	str	r3, [sp, #16]
	    
	    sys_free(p);
 800170e:	9804      	ldr	r0, [sp, #16]
 8001710:	f000 ff92 	bl	8002638 <sys_free>
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size -= size;
 8001714:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001716:	9b05      	ldr	r3, [sp, #20]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    break;
 800171c:	e002      	b.n	8001724 <eval_mm_util+0x188>

	default:
	    app_error("Nonexistent request type in eval_mm_util");
 800171e:	4816      	ldr	r0, [pc, #88]	; (8001778 <eval_mm_util+0x1dc>)
 8001720:	f000 f962 	bl	80019e8 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 8001724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001726:	3301      	adds	r3, #1
 8001728:	930d      	str	r3, [sp, #52]	; 0x34
 800172a:	9b03      	ldr	r3, [sp, #12]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001730:	429a      	cmp	r2, r3
 8001732:	f6ff af3f 	blt.w	80015b4 <eval_mm_util+0x18>

        }
    }

	max_total_size += test_mem_use;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <eval_mm_util+0x1e0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800173c:	4413      	add	r3, r2
 800173e:	930c      	str	r3, [sp, #48]	; 0x30

    return ((double)max_total_size  / (double)mem_heapsize());
 8001740:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001742:	f7fe fed7 	bl	80004f4 <__aeabi_i2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	f000 fa23 	bl	8001b94 <mem_heapsize>
 800174e:	4603      	mov	r3, r0
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe febf 	bl	80004d4 <__aeabi_ui2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7ff f85d 	bl	800081c <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
}
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	b00f      	add	sp, #60	; 0x3c
 800176c:	bd30      	pop	{r4, r5, pc}
 800176e:	bf00      	nop
 8001770:	08005010 	.word	0x08005010
 8001774:	08005034 	.word	0x08005034
 8001778:	08005058 	.word	0x08005058
 800177c:	200000ec 	.word	0x200000ec

08001780 <printresults>:

/*
 * printresults - prints a performance summary for some malloc package
 */
static void printresults(int n, stats_t *stats) 
{
 8001780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001784:	b093      	sub	sp, #76	; 0x4c
 8001786:	9009      	str	r0, [sp, #36]	; 0x24
 8001788:	9108      	str	r1, [sp, #32]
    int i;
    double secs = 0;
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    double ops = 0;
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    double util = 0;
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

    /* Print the individual results for each trace */
    sprintf(msg, "%5s%7s %5s%8s%10s%6s\n", 
 80017ae:	4b7b      	ldr	r3, [pc, #492]	; (800199c <printresults+0x21c>)
 80017b0:	9303      	str	r3, [sp, #12]
 80017b2:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <printresults+0x220>)
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	4b7b      	ldr	r3, [pc, #492]	; (80019a4 <printresults+0x224>)
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	4b7b      	ldr	r3, [pc, #492]	; (80019a8 <printresults+0x228>)
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4b7b      	ldr	r3, [pc, #492]	; (80019ac <printresults+0x22c>)
 80017c0:	4a7b      	ldr	r2, [pc, #492]	; (80019b0 <printresults+0x230>)
 80017c2:	497c      	ldr	r1, [pc, #496]	; (80019b4 <printresults+0x234>)
 80017c4:	487c      	ldr	r0, [pc, #496]	; (80019b8 <printresults+0x238>)
 80017c6:	f001 fc01 	bl	8002fcc <siprintf>
	   "trace", " valid", "util", "ops", "secs", "Kops");
	var_print(msg);
 80017ca:	487b      	ldr	r0, [pc, #492]	; (80019b8 <printresults+0x238>)
 80017cc:	f000 fc0a 	bl	8001fe4 <var_print>
    for (i=0; i < n; i++) {
 80017d0:	2300      	movs	r3, #0
 80017d2:	9311      	str	r3, [sp, #68]	; 0x44
 80017d4:	e08a      	b.n	80018ec <printresults+0x16c>
	if (stats[i].valid) {
 80017d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017d8:	015b      	lsls	r3, r3, #5
 80017da:	9a08      	ldr	r2, [sp, #32]
 80017dc:	4413      	add	r3, r2
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d06f      	beq.n	80018c4 <printresults+0x144>
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
		   i,
		   "yes",
		   stats[i].util*100.0,
 80017e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017e6:	015b      	lsls	r3, r3, #5
 80017e8:	9a08      	ldr	r2, [sp, #32]
 80017ea:	4413      	add	r3, r2
 80017ec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	4b71      	ldr	r3, [pc, #452]	; (80019bc <printresults+0x23c>)
 80017f6:	f7fe fee7 	bl	80005c8 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4690      	mov	r8, r2
 8001800:	4699      	mov	r9, r3
		   stats[i].ops,
 8001802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001804:	015b      	lsls	r3, r3, #5
 8001806:	9a08      	ldr	r2, [sp, #32]
 8001808:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 800180a:	e9d3 4500 	ldrd	r4, r5, [r3]
		   stats[i].secs,
 800180e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001810:	015b      	lsls	r3, r3, #5
 8001812:	9a08      	ldr	r2, [sp, #32]
 8001814:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001816:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
		   (stats[i].ops/1e3)/stats[i].secs);
 800181a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	9a08      	ldr	r2, [sp, #32]
 8001820:	4413      	add	r3, r2
 8001822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <printresults+0x240>)
 800182c:	f7fe fff6 	bl	800081c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800183a:	015b      	lsls	r3, r3, #5
 800183c:	9a08      	ldr	r2, [sp, #32]
 800183e:	4413      	add	r3, r2
 8001840:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001844:	f7fe ffea 	bl	800081c <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001850:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001854:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001858:	e9cd 8900 	strd	r8, r9, [sp]
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <printresults+0x244>)
 800185e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001860:	4959      	ldr	r1, [pc, #356]	; (80019c8 <printresults+0x248>)
 8001862:	4855      	ldr	r0, [pc, #340]	; (80019b8 <printresults+0x238>)
 8001864:	f001 fbb2 	bl	8002fcc <siprintf>
		var_print(msg);
 8001868:	4853      	ldr	r0, [pc, #332]	; (80019b8 <printresults+0x238>)
 800186a:	f000 fbbb 	bl	8001fe4 <var_print>
	    secs += stats[i].secs;
 800186e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	9a08      	ldr	r2, [sp, #32]
 8001874:	4413      	add	r3, r2
 8001876:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800187a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800187e:	f7fe fced 	bl	800025c <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	    ops += stats[i].ops;
 800188a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800188c:	015b      	lsls	r3, r3, #5
 800188e:	9a08      	ldr	r2, [sp, #32]
 8001890:	4413      	add	r3, r2
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800189a:	f7fe fcdf 	bl	800025c <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	    util += stats[i].util;
 80018a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018a8:	015b      	lsls	r3, r3, #5
 80018aa:	9a08      	ldr	r2, [sp, #32]
 80018ac:	4413      	add	r3, r2
 80018ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80018b6:	f7fe fcd1 	bl	800025c <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80018c2:	e010      	b.n	80018e6 <printresults+0x166>
	}
	else {
	    sprintf(msg,"%2d%10s%6s%8s%10s%6s\n", 
 80018c4:	4b41      	ldr	r3, [pc, #260]	; (80019cc <printresults+0x24c>)
 80018c6:	9303      	str	r3, [sp, #12]
 80018c8:	4b40      	ldr	r3, [pc, #256]	; (80019cc <printresults+0x24c>)
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <printresults+0x24c>)
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <printresults+0x24c>)
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <printresults+0x250>)
 80018d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018d8:	493e      	ldr	r1, [pc, #248]	; (80019d4 <printresults+0x254>)
 80018da:	4837      	ldr	r0, [pc, #220]	; (80019b8 <printresults+0x238>)
 80018dc:	f001 fb76 	bl	8002fcc <siprintf>
		   "no",
		   "-",
		   "-",
		   "-",
		   "-");
		var_print(msg);
 80018e0:	4835      	ldr	r0, [pc, #212]	; (80019b8 <printresults+0x238>)
 80018e2:	f000 fb7f 	bl	8001fe4 <var_print>
    for (i=0; i < n; i++) {
 80018e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018e8:	3301      	adds	r3, #1
 80018ea:	9311      	str	r3, [sp, #68]	; 0x44
 80018ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f6ff af70 	blt.w	80017d6 <printresults+0x56>
	}
    }

    /* Print the aggregate results for the set of traces */
    if (errors == 0) {
 80018f6:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <printresults+0x258>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d13b      	bne.n	8001976 <printresults+0x1f6>
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
	       "Total       ",
	       (util/n)*100.0,
 80018fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001900:	f7fe fdf8 	bl	80004f4 <__aeabi_i2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800190c:	f7fe ff86 	bl	800081c <__aeabi_ddiv>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <printresults+0x23c>)
 800191e:	f7fe fe53 	bl	80005c8 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4614      	mov	r4, r2
 8001928:	461d      	mov	r5, r3
	       ops, 
	       secs,
	       (ops/1e3)/secs);
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <printresults+0x240>)
 8001930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001934:	f7fe ff72 	bl	800081c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001940:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001944:	f7fe ff6a 	bl	800081c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001954:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001958:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800195c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001960:	e9cd 4500 	strd	r4, r5, [sp]
 8001964:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <printresults+0x25c>)
 8001966:	491e      	ldr	r1, [pc, #120]	; (80019e0 <printresults+0x260>)
 8001968:	4813      	ldr	r0, [pc, #76]	; (80019b8 <printresults+0x238>)
 800196a:	f001 fb2f 	bl	8002fcc <siprintf>
	var_print(msg);
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <printresults+0x238>)
 8001970:	f000 fb38 	bl	8001fe4 <var_print>
	       "-", 
	       "-");
	var_print(msg);
    }

}
 8001974:	e00e      	b.n	8001994 <printresults+0x214>
	sprintf(msg, "%12s%6s%8s%10s%6s\n", 
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <printresults+0x24c>)
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <printresults+0x24c>)
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <printresults+0x24c>)
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <printresults+0x24c>)
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <printresults+0x25c>)
 8001986:	4917      	ldr	r1, [pc, #92]	; (80019e4 <printresults+0x264>)
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <printresults+0x238>)
 800198a:	f001 fb1f 	bl	8002fcc <siprintf>
	var_print(msg);
 800198e:	480a      	ldr	r0, [pc, #40]	; (80019b8 <printresults+0x238>)
 8001990:	f000 fb28 	bl	8001fe4 <var_print>
}
 8001994:	bf00      	nop
 8001996:	b013      	add	sp, #76	; 0x4c
 8001998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800199c:	080050ac 	.word	0x080050ac
 80019a0:	080050b4 	.word	0x080050b4
 80019a4:	080050bc 	.word	0x080050bc
 80019a8:	080050c0 	.word	0x080050c0
 80019ac:	08005084 	.word	0x08005084
 80019b0:	0800508c 	.word	0x0800508c
 80019b4:	08005094 	.word	0x08005094
 80019b8:	200000f0 	.word	0x200000f0
 80019bc:	40590000 	.word	0x40590000
 80019c0:	408f4000 	.word	0x408f4000
 80019c4:	080050c8 	.word	0x080050c8
 80019c8:	080050cc 	.word	0x080050cc
 80019cc:	08005108 	.word	0x08005108
 80019d0:	080050ec 	.word	0x080050ec
 80019d4:	080050f0 	.word	0x080050f0
 80019d8:	200000e8 	.word	0x200000e8
 80019dc:	0800510c 	.word	0x0800510c
 80019e0:	0800511c 	.word	0x0800511c
 80019e4:	0800513c 	.word	0x0800513c

080019e8 <app_error>:

/* 
 * app_error - Report an arbitrary application error
 */
void app_error(char * err_msg) 
{
 80019e8:	b500      	push	{lr}
 80019ea:	b083      	sub	sp, #12
 80019ec:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s\n", err_msg);
 80019ee:	9a01      	ldr	r2, [sp, #4]
 80019f0:	4906      	ldr	r1, [pc, #24]	; (8001a0c <app_error+0x24>)
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <app_error+0x28>)
 80019f4:	f001 faea 	bl	8002fcc <siprintf>
	var_print(msg);
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <app_error+0x28>)
 80019fa:	f000 faf3 	bl	8001fe4 <var_print>
	loop();
 80019fe:	f000 faeb 	bl	8001fd8 <loop>
}
 8001a02:	bf00      	nop
 8001a04:	b003      	add	sp, #12
 8001a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a0a:	bf00      	nop
 8001a0c:	08005150 	.word	0x08005150
 8001a10:	200000f0 	.word	0x200000f0

08001a14 <unix_error>:

/* 
 * unix_error - Report a Unix-style error
 */
void unix_error(char * err_msg) 
{
 8001a14:	b500      	push	{lr}
 8001a16:	b083      	sub	sp, #12
 8001a18:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s: %s\n", err_msg, strerror(errno));
 8001a1a:	f001 f889 	bl	8002b30 <__errno>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 fd58 	bl	80034d8 <strerror>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	9a01      	ldr	r2, [sp, #4]
 8001a2c:	4906      	ldr	r1, [pc, #24]	; (8001a48 <unix_error+0x34>)
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <unix_error+0x38>)
 8001a30:	f001 facc 	bl	8002fcc <siprintf>
	var_print(msg);
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <unix_error+0x38>)
 8001a36:	f000 fad5 	bl	8001fe4 <var_print>
	loop();
 8001a3a:	f000 facd 	bl	8001fd8 <loop>
}
 8001a3e:	bf00      	nop
 8001a40:	b003      	add	sp, #12
 8001a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a46:	bf00      	nop
 8001a48:	08005154 	.word	0x08005154
 8001a4c:	200000f0 	.word	0x200000f0

08001a50 <malloc_error>:

/*
 * malloc_error - Report an error returned by the sys_malloc package
 */
void malloc_error(int tracenum, int opnum, char *err_msg)
{
 8001a50:	b500      	push	{lr}
 8001a52:	b087      	sub	sp, #28
 8001a54:	9005      	str	r0, [sp, #20]
 8001a56:	9104      	str	r1, [sp, #16]
 8001a58:	9203      	str	r2, [sp, #12]
    errors++;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <malloc_error+0x3c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <malloc_error+0x3c>)
 8001a62:	6013      	str	r3, [r2, #0]
    sprintf(msg, "ERROR [trace %d, line %d]: %s\n", tracenum, LINENUM(opnum), err_msg);
 8001a64:	9b04      	ldr	r3, [sp, #16]
 8001a66:	1d5a      	adds	r2, r3, #5
 8001a68:	9b03      	ldr	r3, [sp, #12]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	9a05      	ldr	r2, [sp, #20]
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <malloc_error+0x40>)
 8001a72:	4808      	ldr	r0, [pc, #32]	; (8001a94 <malloc_error+0x44>)
 8001a74:	f001 faaa 	bl	8002fcc <siprintf>
	var_print(msg);
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <malloc_error+0x44>)
 8001a7a:	f000 fab3 	bl	8001fe4 <var_print>
	loop();
 8001a7e:	f000 faab 	bl	8001fd8 <loop>
}
 8001a82:	bf00      	nop
 8001a84:	b007      	add	sp, #28
 8001a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a8a:	bf00      	nop
 8001a8c:	200000e8 	.word	0x200000e8
 8001a90:	0800515c 	.word	0x0800515c
 8001a94:	200000f0 	.word	0x200000f0

08001a98 <mem_init>:

/* 
 * mem_init - initialize the memory system model
 */
void mem_init(void)
{
 8001a98:	b500      	push	{lr}
 8001a9a:	b085      	sub	sp, #20
	mem_request req;
	mem_start_brk = (char *)ALIGN((size_t)(&__malloc_sbrk_start));
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <mem_init+0x48>)
 8001a9e:	3303      	adds	r3, #3
 8001aa0:	f023 0307 	bic.w	r3, r3, #7
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <mem_init+0x4c>)
 8001aa8:	601a      	str	r2, [r3, #0]
    mem_brk = mem_start_brk;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <mem_init+0x4c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <mem_init+0x50>)
 8001ab0:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, ptr set to heap start
	req = (mem_request){.request=SBRK, .size=0, .ptr=mem_brk};
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <mem_init+0x50>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001aba:	f043 0303 	orr.w	r3, r3, #3
 8001abe:	f88d 3008 	strb.w	r3, [sp, #8]
 8001ac2:	9b02      	ldr	r3, [sp, #8]
 8001ac4:	f36f 039f 	bfc	r3, #2, #30
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	9203      	str	r2, [sp, #12]
	req_send(&req);
 8001acc:	ab02      	add	r3, sp, #8
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fac7 	bl	8002062 <req_send>
	proc_update();
 8001ad4:	f000 fdc6 	bl	8002664 <proc_update>
}
 8001ad8:	bf00      	nop
 8001ada:	b005      	add	sp, #20
 8001adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ae0:	20000d0c 	.word	0x20000d0c
 8001ae4:	200004f0 	.word	0x200004f0
 8001ae8:	200004f4 	.word	0x200004f4

08001aec <mem_sbrk>:
 * mem_sbrk - simple model of the sbrk function. Extends the heap 
 *    by incr bytes and returns the start address of the new area. In
 *    this model, the heap cannot be shrunk.
 */
void *mem_sbrk(unsigned int incr) 
{
 8001aec:	b530      	push	{r4, r5, lr}
 8001aee:	b09b      	sub	sp, #108	; 0x6c
 8001af0:	9001      	str	r0, [sp, #4]
    char *old_brk = mem_brk;
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <mem_sbrk+0x88>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	9319      	str	r3, [sp, #100]	; 0x64
	// Special incr cases
	if (incr < 0) {
		char output_str[] = "Negative incr not supported";
		var_print(output_str);
		return (void *)-1;
	} else if (incr == 0) {
 8001af8:	9b01      	ldr	r3, [sp, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <mem_sbrk+0x18>
		return mem_brk;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <mem_sbrk+0x88>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e034      	b.n	8001b6e <mem_sbrk+0x82>
	}

	// Check if there is enough memory
    if (((mem_brk + incr) > (char *)(stack_top))) {
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <mem_sbrk+0x88>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	9b01      	ldr	r3, [sp, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	466a      	mov	r2, sp
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d911      	bls.n	8001b36 <mem_sbrk+0x4a>
		char output_str[] = "ERROR: mem_sbrk failed. Ran out of memory...\n";
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <mem_sbrk+0x8c>)
 8001b14:	ac02      	add	r4, sp, #8
 8001b16:	461d      	mov	r5, r3
 8001b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b24:	c407      	stmia	r4!, {r0, r1, r2}
 8001b26:	8023      	strh	r3, [r4, #0]
		var_print(output_str);
 8001b28:	ab02      	add	r3, sp, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fa5a 	bl	8001fe4 <var_print>
		return (void *)-1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b34:	e01b      	b.n	8001b6e <mem_sbrk+0x82>
    }
    mem_brk += incr;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <mem_sbrk+0x88>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <mem_sbrk+0x88>)
 8001b40:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, size=1 for sbrk move
	req = (mem_request){.request = SBRK, .size=incr, .ptr=0};
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001b48:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8001b4c:	f043 0303 	orr.w	r3, r3, #3
 8001b50:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8001b54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001b56:	f362 039f 	bfi	r3, r2, #2, #30
 8001b5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9318      	str	r3, [sp, #96]	; 0x60
	req_send(&req);
 8001b60:	ab17      	add	r3, sp, #92	; 0x5c
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fa7d 	bl	8002062 <req_send>
	proc_update();
 8001b68:	f000 fd7c 	bl	8002664 <proc_update>
    return (void *)old_brk;
 8001b6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	b01b      	add	sp, #108	; 0x6c
 8001b72:	bd30      	pop	{r4, r5, pc}
 8001b74:	200004f4 	.word	0x200004f4
 8001b78:	0800517c 	.word	0x0800517c

08001b7c <mem_heap_lo>:
/*
 * mem_heap_lo - return address of the first heap byte
 */
void *mem_heap_lo()
{
    return (void *)mem_start_brk;
 8001b7c:	4b01      	ldr	r3, [pc, #4]	; (8001b84 <mem_heap_lo+0x8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	4770      	bx	lr
 8001b84:	200004f0 	.word	0x200004f0

08001b88 <mem_heap_hi>:
/* 
 * mem_heap_hi - return address of last heap byte
 */
void *mem_heap_hi()
{
    return (void *)(mem_brk);
 8001b88:	4b01      	ldr	r3, [pc, #4]	; (8001b90 <mem_heap_hi+0x8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	4770      	bx	lr
 8001b90:	200004f4 	.word	0x200004f4

08001b94 <mem_heapsize>:
/*
 * mem_heapsize() - returns the heap size in bytes
 */
size_t mem_heapsize() 
{
    return (size_t)(mem_brk - mem_start_brk);
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <mem_heapsize+0x10>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <mem_heapsize+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	1ad3      	subs	r3, r2, r3
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	200004f4 	.word	0x200004f4
 8001ba8:	200004f0 	.word	0x200004f0

08001bac <extend_heap>:
#define CHUNKSIZE (1<<12) // Heap request chunk

#define MAX(x,y) ((x) > (y) ? (x) : (y))

// Extend heap by words * WSIZE with alignment, return 1 on success 0 on fail
static int extend_heap(size_t words) {
 8001bac:	b500      	push	{lr}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	9001      	str	r0, [sp, #4]
	char * bp;
	size_t size;

	size = (words % 2) ? (words+1) * WSIZE : words * WSIZE; // Maintain double word alignment
 8001bb2:	9b01      	ldr	r3, [sp, #4]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <extend_heap+0x18>
 8001bbc:	9b01      	ldr	r3, [sp, #4]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	e001      	b.n	8001bc8 <extend_heap+0x1c>
 8001bc4:	9b01      	ldr	r3, [sp, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	9303      	str	r3, [sp, #12]
	if ((long)(bp = mem_sbrk(size)) == -1) {
 8001bca:	9803      	ldr	r0, [sp, #12]
 8001bcc:	f7ff ff8e 	bl	8001aec <mem_sbrk>
 8001bd0:	9002      	str	r0, [sp, #8]
 8001bd2:	9b02      	ldr	r3, [sp, #8]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd8:	d101      	bne.n	8001bde <extend_heap+0x32>
		return 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <extend_heap+0x34>
	} else {
		return 1;
 8001bde:	2301      	movs	r3, #1
	}
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	b005      	add	sp, #20
 8001be4:	f85d fb04 	ldr.w	pc, [sp], #4

08001be8 <mm_init>:

// Initialize memory request communication
int mm_init(void)
{
 8001be8:	b500      	push	{lr}
 8001bea:	b083      	sub	sp, #12
	void * response = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]

	mem_req_setup();
 8001bf0:	f000 fa2e 	bl	8002050 <mem_req_setup>
	mpu_init();
 8001bf4:	f000 fd9c 	bl	8002730 <mpu_init>

	// Receive starting singal of 1 in every field
	led_on(BLUE);
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	f000 fe71 	bl	80028e0 <led_on>
	req_receive(&response);
 8001bfe:	ab01      	add	r3, sp, #4
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fa3f 	bl	8002084 <req_receive>
	if (response==(void *)1) {
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10c      	bne.n	8001c26 <mm_init+0x3e>
		// Signal correct - sbrk start chunk
		led_off(BLUE);
 8001c0c:	200f      	movs	r0, #15
 8001c0e:	f000 fe7b 	bl	8002908 <led_off>
		mem_init();
 8001c12:	f7ff ff41 	bl	8001a98 <mem_init>
		extend_heap(4096/WSIZE);
 8001c16:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c1a:	f7ff ffc7 	bl	8001bac <extend_heap>
		timer_init();
 8001c1e:	f000 f97f 	bl	8001f20 <timer_init>
		return 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e00b      	b.n	8001c3e <mm_init+0x56>
	} else {
		// Signal incorrect - Throw error
		led_off(BLUE);
 8001c26:	200f      	movs	r0, #15
 8001c28:	f000 fe6e 	bl	8002908 <led_off>
		led_on(RED);
 8001c2c:	200e      	movs	r0, #14
 8001c2e:	f000 fe57 	bl	80028e0 <led_on>
		var_print("Start signal incorrect");
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <mm_init+0x60>)
 8001c34:	f000 f9d6 	bl	8001fe4 <var_print>
		loop();
 8001c38:	f000 f9ce 	bl	8001fd8 <loop>
		return 1;
 8001c3c:	2301      	movs	r3, #1
	}
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	b003      	add	sp, #12
 8001c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c46:	bf00      	nop
 8001c48:	080051ac 	.word	0x080051ac

08001c4c <mm_malloc>:

// Malloc: sends request and return PC's response, calls sbrk if needed
void *mm_malloc(size_t size)
{
 8001c4c:	b500      	push	{lr}
 8001c4e:	b08d      	sub	sp, #52	; 0x34
 8001c50:	9001      	str	r0, [sp, #4]
	size_t asize, extendsize;	
	mem_request req;	
	void * response;

	// Ignore 0 size
	if (size == 0) {
 8001c52:	9b01      	ldr	r3, [sp, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <mm_malloc+0x10>
		return NULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e04f      	b.n	8001cfc <mm_malloc+0xb0>
	}

	// Send malloc request to server
	req = (mem_request){.request = MALLOC, .size = size, .ptr=NULL};
 8001c5c:	9b01      	ldr	r3, [sp, #4]
 8001c5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001c62:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001c66:	f36f 0301 	bfc	r3, #0, #2
 8001c6a:	f88d 3020 	strb.w	r3, [sp, #32]
 8001c6e:	9b08      	ldr	r3, [sp, #32]
 8001c70:	f362 039f 	bfi	r3, r2, #2, #30
 8001c74:	9308      	str	r3, [sp, #32]
 8001c76:	2300      	movs	r3, #0
 8001c78:	9309      	str	r3, [sp, #36]	; 0x24
	req_send(&req);
 8001c7a:	ab08      	add	r3, sp, #32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f9f0 	bl	8002062 <req_send>
	req_receive(&response);
 8001c82:	ab07      	add	r3, sp, #28
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f9fd 	bl	8002084 <req_receive>

	if (response) {
 8001c8a:	9b07      	ldr	r3, [sp, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <mm_malloc+0x48>
		return response;
 8001c90:	9b07      	ldr	r3, [sp, #28]
 8001c92:	e033      	b.n	8001cfc <mm_malloc+0xb0>
	} else {
		// Need to extend heap
		// Add overhead and alignment to block size
		if (size <= WSIZE) {
 8001c94:	9b01      	ldr	r3, [sp, #4]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d802      	bhi.n	8001ca0 <mm_malloc+0x54>
			asize = WSIZE;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c9e:	e004      	b.n	8001caa <mm_malloc+0x5e>
		} else {
			asize = WSIZE * ((size + (WSIZE) + (WSIZE-1))/WSIZE); // Add overhead and make rounding floor
 8001ca0:	9b01      	ldr	r3, [sp, #4]
 8001ca2:	3307      	adds	r3, #7
 8001ca4:	f023 0303 	bic.w	r3, r3, #3
 8001ca8:	930b      	str	r3, [sp, #44]	; 0x2c
		}
		extendsize = MAX(asize, CHUNKSIZE);
 8001caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb0:	bf38      	it	cc
 8001cb2:	f44f 5380 	movcc.w	r3, #4096	; 0x1000
 8001cb6:	930a      	str	r3, [sp, #40]	; 0x28

		if (extend_heap(extendsize/WSIZE)) {
 8001cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff75 	bl	8001bac <extend_heap>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d018      	beq.n	8001cfa <mm_malloc+0xae>
			// Resend malloc request
			// Send malloc request to server
			req = (mem_request){.request = MALLOC, .size = size, .ptr=NULL};
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001cce:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001cd2:	f36f 0301 	bfc	r3, #0, #2
 8001cd6:	f88d 3020 	strb.w	r3, [sp, #32]
 8001cda:	9b08      	ldr	r3, [sp, #32]
 8001cdc:	f362 039f 	bfi	r3, r2, #2, #30
 8001ce0:	9308      	str	r3, [sp, #32]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9309      	str	r3, [sp, #36]	; 0x24
			req_send(&req);
 8001ce6:	ab08      	add	r3, sp, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f9ba 	bl	8002062 <req_send>
			req_receive(&response);
 8001cee:	ab07      	add	r3, sp, #28
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f9c7 	bl	8002084 <req_receive>
			
			return(response);
 8001cf6:	9b07      	ldr	r3, [sp, #28]
 8001cf8:	e000      	b.n	8001cfc <mm_malloc+0xb0>
		} else {
			// Not enough memory
			return NULL;
 8001cfa:	2300      	movs	r3, #0
		}
	}
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	b00d      	add	sp, #52	; 0x34
 8001d00:	f85d fb04 	ldr.w	pc, [sp], #4

08001d04 <mm_free>:

// Free: Send request to pc
void mm_free(void *ptr)
{
 8001d04:	b500      	push	{lr}
 8001d06:	b085      	sub	sp, #20
 8001d08:	9001      	str	r0, [sp, #4]
	mem_request req = {.request=FREE, .size=0, .ptr=ptr};
 8001d0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f362 0301 	bfi	r3, r2, #0, #2
 8001d14:	f88d 3008 	strb.w	r3, [sp, #8]
 8001d18:	9b02      	ldr	r3, [sp, #8]
 8001d1a:	f36f 039f 	bfc	r3, #2, #30
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	9b01      	ldr	r3, [sp, #4]
 8001d22:	9303      	str	r3, [sp, #12]
	req_send(&req);
 8001d24:	ab02      	add	r3, sp, #8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f99b 	bl	8002062 <req_send>
}
 8001d2c:	bf00      	nop
 8001d2e:	b005      	add	sp, #20
 8001d30:	f85d fb04 	ldr.w	pc, [sp], #4

08001d34 <mm_realloc>:

// Realloc: Send request to PC and return response, calls malloc if needed
void *mm_realloc(void *ptr, size_t size)
{
 8001d34:	b500      	push	{lr}
 8001d36:	b08b      	sub	sp, #44	; 0x2c
 8001d38:	9001      	str	r0, [sp, #4]
 8001d3a:	9100      	str	r1, [sp, #0]
    void *oldptr = ptr;
 8001d3c:	9b01      	ldr	r3, [sp, #4]
 8001d3e:	9309      	str	r3, [sp, #36]	; 0x24
    void *newptr;
	mem_request req;
	void * response;

	// Special cases
	if (ptr == NULL) {
 8001d40:	9b01      	ldr	r3, [sp, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <mm_realloc+0x1e>
		newptr = mm_malloc(size);
 8001d46:	9800      	ldr	r0, [sp, #0]
 8001d48:	f7ff ff80 	bl	8001c4c <mm_malloc>
 8001d4c:	9008      	str	r0, [sp, #32]
		return newptr;
 8001d4e:	9b08      	ldr	r3, [sp, #32]
 8001d50:	e032      	b.n	8001db8 <mm_realloc+0x84>
	}
	if (size == 0) {
 8001d52:	9b00      	ldr	r3, [sp, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <mm_realloc+0x2e>
		mm_free(ptr);
 8001d58:	9801      	ldr	r0, [sp, #4]
 8001d5a:	f7ff ffd3 	bl	8001d04 <mm_free>
		return ptr;
 8001d5e:	9b01      	ldr	r3, [sp, #4]
 8001d60:	e02a      	b.n	8001db8 <mm_realloc+0x84>
	}

	// Send realloc request to server
	req = (mem_request){.request = REALLOC, .size = size, .ptr=ptr};
 8001d62:	9b00      	ldr	r3, [sp, #0]
 8001d64:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001d68:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	f361 0301 	bfi	r3, r1, #0, #2
 8001d72:	f88d 3018 	strb.w	r3, [sp, #24]
 8001d76:	9b06      	ldr	r3, [sp, #24]
 8001d78:	f362 039f 	bfi	r3, r2, #2, #30
 8001d7c:	9306      	str	r3, [sp, #24]
 8001d7e:	9b01      	ldr	r3, [sp, #4]
 8001d80:	9307      	str	r3, [sp, #28]
	req_send(&req);
 8001d82:	ab06      	add	r3, sp, #24
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f96c 	bl	8002062 <req_send>
	req_receive(&response);
 8001d8a:	ab05      	add	r3, sp, #20
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f979 	bl	8002084 <req_receive>

	if (response == oldptr) {
 8001d92:	9b05      	ldr	r3, [sp, #20]
 8001d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d101      	bne.n	8001d9e <mm_realloc+0x6a>
		// Address stays the same
		return response;
 8001d9a:	9b05      	ldr	r3, [sp, #20]
 8001d9c:	e00c      	b.n	8001db8 <mm_realloc+0x84>
	} else {
		// Need to copy to new location
		newptr = mm_malloc(size);
 8001d9e:	9800      	ldr	r0, [sp, #0]
 8001da0:	f7ff ff54 	bl	8001c4c <mm_malloc>
 8001da4:	9008      	str	r0, [sp, #32]
		memcpy(newptr, oldptr, size);
 8001da6:	9a00      	ldr	r2, [sp, #0]
 8001da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001daa:	9808      	ldr	r0, [sp, #32]
 8001dac:	f000 fefc 	bl	8002ba8 <memcpy>
		mm_free(oldptr);
 8001db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001db2:	f7ff ffa7 	bl	8001d04 <mm_free>
		return newptr;
 8001db6:	9b08      	ldr	r3, [sp, #32]
	}
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	b00b      	add	sp, #44	; 0x2c
 8001dbc:	f85d fb04 	ldr.w	pc, [sp], #4

08001dc0 <mm_finish>:

// Tell server to end session
void mm_finish(void) {
 8001dc0:	b500      	push	{lr}
 8001dc2:	b083      	sub	sp, #12
	mem_request req = {.request=SBRK, .size=0, .ptr=0};
 8001dc4:	f89d 3000 	ldrb.w	r3, [sp]
 8001dc8:	f043 0303 	orr.w	r3, r3, #3
 8001dcc:	f88d 3000 	strb.w	r3, [sp]
 8001dd0:	9b00      	ldr	r3, [sp, #0]
 8001dd2:	f36f 039f 	bfc	r3, #2, #30
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9301      	str	r3, [sp, #4]
	req_send(&req);
 8001ddc:	466b      	mov	r3, sp
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f93f 	bl	8002062 <req_send>
}
 8001de4:	bf00      	nop
 8001de6:	b003      	add	sp, #12
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b082      	sub	sp, #8
 8001dee:	4603      	mov	r3, r0
 8001df0:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0c      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4905      	ldr	r1, [pc, #20]	; (8001e1c <__NVIC_EnableIRQ+0x30>)
 8001e06:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	b002      	add	sp, #8
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b082      	sub	sp, #8
 8001e22:	4603      	mov	r3, r0
 8001e24:	9100      	str	r1, [sp, #0]
 8001e26:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0a      	blt.n	8001e48 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	9b00      	ldr	r3, [sp, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x48>)
 8001e38:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e46:	e00b      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	9b00      	ldr	r3, [sp, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	b002      	add	sp, #8
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <TIM2_IRQHandler>:
static size_t systime = 0;

// TIM2 interrupt handler - Update system time
void TIM2_IRQHandler(void)
{
	systime++;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <TIM2_IRQHandler+0x3c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <TIM2_IRQHandler+0x3c>)
 8001e78:	6013      	str	r3, [r2, #0]

	// Reset watchdog bits
	// WWDG->CR |= 0x7F;

    // clear interrupt status
    if (TIM2->DIER & 0x01) {
 8001e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00e      	beq.n	8001ea6 <TIM2_IRQHandler+0x36>
        if (TIM2->SR & 0x01) {
 8001e88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <TIM2_IRQHandler+0x36>
            TIM2->SR &= ~(1U << 0);
 8001e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6113      	str	r3, [r2, #16]
        }
    }
}
 8001ea6:	bf00      	nop
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200004f8 	.word	0x200004f8

08001eb0 <TIM3_IRQHandler>:

// TIM3 interrupt handler - Check for stack overflow
void TIM3_IRQHandler(void)
{
 8001eb0:	b530      	push	{r4, r5, lr}
 8001eb2:	b087      	sub	sp, #28
	// Check for stack overflow
	register size_t * stack_top asm("sp");

	// Stall if stack is overflowing to heap
	if (mem_heap_hi() > (void *)(stack_top)) {
 8001eb4:	f7ff fe68 	bl	8001b88 <mem_heap_hi>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	466b      	mov	r3, sp
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d910      	bls.n	8001ee2 <TIM3_IRQHandler+0x32>
		char err[] = "Stack overflow detected";
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <TIM3_IRQHandler+0x5c>)
 8001ec2:	466c      	mov	r4, sp
 8001ec4:	461d      	mov	r5, r3
 8001ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ece:	e884 0003 	stmia.w	r4, {r0, r1}
		var_print(err);
 8001ed2:	466b      	mov	r3, sp
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f885 	bl	8001fe4 <var_print>
		mm_finish();
 8001eda:	f7ff ff71 	bl	8001dc0 <mm_finish>
		loop();
 8001ede:	f000 f87b 	bl	8001fd8 <loop>
	}	

    // clear interrupt status
    if (TIM3->DIER & 0x01) {
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <TIM3_IRQHandler+0x60>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <TIM3_IRQHandler+0x56>
        if (TIM3->SR & 0x01) {
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <TIM3_IRQHandler+0x60>)
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <TIM3_IRQHandler+0x56>
            TIM3->SR &= ~(1U << 0);
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <TIM3_IRQHandler+0x60>)
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <TIM3_IRQHandler+0x60>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6113      	str	r3, [r2, #16]
        }
    }

}
 8001f06:	bf00      	nop
 8001f08:	b007      	add	sp, #28
 8001f0a:	bd30      	pop	{r4, r5, pc}
 8001f0c:	080051c4 	.word	0x080051c4
 8001f10:	40000400 	.word	0x40000400

08001f14 <get_time>:

// Returns system time in 0.1 ms
size_t get_time(void) {
	return systime;
 8001f14:	4b01      	ldr	r3, [pc, #4]	; (8001f1c <get_time+0x8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	4770      	bx	lr
 8001f1c:	200004f8 	.word	0x200004f8

08001f20 <timer_init>:

// Initialize timers
void timer_init(void)
{
 8001f20:	b508      	push	{r3, lr}
	// TIM2 - Keeps track of system time

    // enable TIM2 clock (bit0)
    RCC->APB1ENR |= (1 << 0);
 8001f22:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <timer_init+0xb0>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a2a      	ldr	r2, [pc, #168]	; (8001fd0 <timer_init+0xb0>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
	// For STM32F411: 100M/4*2 = 50M, 50M/(4999+1) = 10 khz clock speed
    TIM2->PSC = 4999;
 8001f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f32:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
	// Set auto reload value to 10 to give 1ms timer interrupts
    TIM2->ARR = 10;
 8001f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f3c:	220a      	movs	r2, #10
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    // Update Interrupt Enable
    TIM2->DIER |= (1 << 0);
 8001f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM2_IRQn, 35);
 8001f50:	2123      	movs	r1, #35	; 0x23
 8001f52:	201c      	movs	r0, #28
 8001f54:	f7ff ff64 	bl	8001e20 <__NVIC_SetPriority>
    // enable TIM2 IRQ from NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8001f58:	201c      	movs	r0, #28
 8001f5a:	f7ff ff47 	bl	8001dec <__NVIC_EnableIRQ>
	// Set to upcounting mode
	TIM2->CR1 &= ~(1 << 4);
 8001f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f68:	f023 0310 	bic.w	r3, r3, #16
 8001f6c:	6013      	str	r3, [r2, #0]
    // Enable Timer 2 module (CEN, bit0)
    TIM2->CR1 |= (1 << 0);
 8001f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]

	// TIM3 - Checks for stack overflow
    
	// Enable TIM3 clock (bit1)
    RCC->APB1ENR |= (1 << 1);
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <timer_init+0xb0>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <timer_init+0xb0>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
	// For STM32F411: 100M/4*2 = 50M, 50M/4999+1 = 10 khz clock speed
    TIM3->PSC = 4999;
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <timer_init+0xb4>)
 8001f8c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
	// Set auto reload value to 100 to give 10 ms timer interrupts
    TIM3->ARR = 100;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <timer_init+0xb4>)
 8001f94:	2264      	movs	r2, #100	; 0x64
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
    // Update Interrupt Enable
    TIM3->DIER |= (1 << 0);
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <timer_init+0xb4>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <timer_init+0xb4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM3_IRQn, 36);
 8001fa4:	2124      	movs	r1, #36	; 0x24
 8001fa6:	201d      	movs	r0, #29
 8001fa8:	f7ff ff3a 	bl	8001e20 <__NVIC_SetPriority>
    // enable TIM3 IRQ from NVIC
    NVIC_EnableIRQ(TIM3_IRQn);
 8001fac:	201d      	movs	r0, #29
 8001fae:	f7ff ff1d 	bl	8001dec <__NVIC_EnableIRQ>
	// Set to upcounting mode
	TIM3->CR1 &= ~(1 << 4);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <timer_init+0xb4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <timer_init+0xb4>)
 8001fb8:	f023 0310 	bic.w	r3, r3, #16
 8001fbc:	6013      	str	r3, [r2, #0]
    // Enable Timer 3 module (CEN, bit0)
    TIM3->CR1 |= (1 << 0);
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <timer_init+0xb4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <timer_init+0xb4>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6013      	str	r3, [r2, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	bd08      	pop	{r3, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <loop>:

static char output_str[MAXLINE*2];
size_t output_offset=0;
void * sp_reset = (void *)0x20005000;

void loop() {
 8001fd8:	b508      	push	{r3, lr}
	led_on(ORANGE);
 8001fda:	200d      	movs	r0, #13
 8001fdc:	f000 fc80 	bl	80028e0 <led_on>
	while(1) {}
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <loop+0x8>

08001fe4 <var_print>:
}

// Append printed output to output_str
void var_print(char * str) {
 8001fe4:	b500      	push	{lr}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	9001      	str	r0, [sp, #4]
	if (output_offset + strlen(str) <= MAXLINE*2) {
 8001fea:	9801      	ldr	r0, [sp, #4]
 8001fec:	f7fe f8d8 	bl	80001a0 <strlen>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <var_print+0x2c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ffc:	d804      	bhi.n	8002008 <var_print+0x24>
		strcat(output_str, str);
 8001ffe:	9901      	ldr	r1, [sp, #4]
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <var_print+0x30>)
 8002002:	f001 f874 	bl	80030ee <strcat>
	} else {
		while(1){}
	}
}
 8002006:	e000      	b.n	800200a <var_print+0x26>
		while(1){}
 8002008:	e7fe      	b.n	8002008 <var_print+0x24>
}
 800200a:	b003      	add	sp, #12
 800200c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002010:	20000cfc 	.word	0x20000cfc
 8002014:	200004fc 	.word	0x200004fc

08002018 <send>:

// Temporary buffer for tx dma optimization
static char tx_buffer[16] = {0};

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 8002018:	b500      	push	{lr}
 800201a:	b083      	sub	sp, #12
 800201c:	9001      	str	r0, [sp, #4]
 800201e:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_start(data, size);
 8002020:	9900      	ldr	r1, [sp, #0]
 8002022:	9801      	ldr	r0, [sp, #4]
 8002024:	f000 f940 	bl	80022a8 <uart_tx_start>
		uart_tx_wait();
 8002028:	f000 f96a 	bl	8002300 <uart_tx_wait>
	} else {
		uart_send(data, size);
	}
}
 800202c:	bf00      	nop
 800202e:	b003      	add	sp, #12
 8002030:	f85d fb04 	ldr.w	pc, [sp], #4

08002034 <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 8002034:	b500      	push	{lr}
 8002036:	b083      	sub	sp, #12
 8002038:	9001      	str	r0, [sp, #4]
 800203a:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_rx_start(buffer, size);
 800203c:	9900      	ldr	r1, [sp, #0]
 800203e:	9801      	ldr	r0, [sp, #4]
 8002040:	f000 f968 	bl	8002314 <uart_rx_start>
		uart_rx_wait();
 8002044:	f000 f992 	bl	800236c <uart_rx_wait>
	} else {
		uart_receive(buffer, size);
	}
}
 8002048:	bf00      	nop
 800204a:	b003      	add	sp, #12
 800204c:	f85d fb04 	ldr.w	pc, [sp], #4

08002050 <mem_req_setup>:

// Initialize request communication
void mem_req_setup(void) {
 8002050:	b508      	push	{r3, lr}
	mcu_init();
 8002052:	f000 fc8b 	bl	800296c <mcu_init>
	uart_init();
 8002056:	f000 f87b 	bl	8002150 <uart_init>
	uart_dma_init();
 800205a:	f000 f9c5 	bl	80023e8 <uart_dma_init>
}
 800205e:	bf00      	nop
 8002060:	bd08      	pop	{r3, pc}

08002062 <req_send>:

// Send request
void req_send(mem_request * buffer) {
 8002062:	b500      	push	{lr}
 8002064:	b083      	sub	sp, #12
 8002066:	9001      	str	r0, [sp, #4]
	led_on(GREEN);
 8002068:	200c      	movs	r0, #12
 800206a:	f000 fc39 	bl	80028e0 <led_on>
	send(buffer, sizeof(mem_request));
 800206e:	2108      	movs	r1, #8
 8002070:	9801      	ldr	r0, [sp, #4]
 8002072:	f7ff ffd1 	bl	8002018 <send>
	led_off(GREEN);
 8002076:	200c      	movs	r0, #12
 8002078:	f000 fc46 	bl	8002908 <led_off>
}
 800207c:	bf00      	nop
 800207e:	b003      	add	sp, #12
 8002080:	f85d fb04 	ldr.w	pc, [sp], #4

08002084 <req_receive>:

// Wait for response
void req_receive(void ** buffer) {
 8002084:	b500      	push	{lr}
 8002086:	b083      	sub	sp, #12
 8002088:	9001      	str	r0, [sp, #4]
	led_on(GREEN);
 800208a:	200c      	movs	r0, #12
 800208c:	f000 fc28 	bl	80028e0 <led_on>
	receive(buffer, sizeof(void *));
 8002090:	2104      	movs	r1, #4
 8002092:	9801      	ldr	r0, [sp, #4]
 8002094:	f7ff ffce 	bl	8002034 <receive>
	led_off(GREEN);
 8002098:	200c      	movs	r0, #12
 800209a:	f000 fc35 	bl	8002908 <led_off>
}
 800209e:	bf00      	nop
 80020a0:	b003      	add	sp, #12
 80020a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080020a8 <uart_pin_setup>:
}

// Setup GPIO B6 and B7 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOB clock, bit 0 on AHB1ENR
    RCC->AHB1ENR |= (1 << 1);
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <uart_pin_setup+0x4c>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <uart_pin_setup+0x4c>)
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30

    // Set pin modes as alternate mode (pins 6 and 7)
    // USART1 TX and RX pins are PB6 and PB7 respectively
    GPIOB->MODER &= ~(0xFU << 12); // Reset bits
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <uart_pin_setup+0x50>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <uart_pin_setup+0x50>)
 80020ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020be:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xAU << 12); // Set to alternate function mode
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <uart_pin_setup+0x50>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <uart_pin_setup+0x50>)
 80020c6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80020ca:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOB->OSPEEDR |= (0xFU << 12);
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <uart_pin_setup+0x50>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <uart_pin_setup+0x50>)
 80020d2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80020d6:	6093      	str	r3, [r2, #8]

    // Choose AF7 for USART1 in Alternate Function registers
    GPIOB->AFR[0] |= (0x7 << 24);
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <uart_pin_setup+0x50>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <uart_pin_setup+0x50>)
 80020de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020e2:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (0x7 << 28);
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <uart_pin_setup+0x50>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <uart_pin_setup+0x50>)
 80020ea:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 80020ee:	6213      	str	r3, [r2, #32]
}
 80020f0:	bf00      	nop
 80020f2:	4770      	bx	lr
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020400 	.word	0x40020400

080020fc <uart_enable>:

// Initialize UART 1
static void uart_enable(void) {
	// Enable clock: bit 4 on APB2ENR
    RCC->APB2ENR |= (1 << 4);
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <uart_enable+0x4c>)
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <uart_enable+0x4c>)
 8002102:	f043 0310 	orr.w	r3, r3, #16
 8002106:	6453      	str	r3, [r2, #68]	; 0x44

    // USART1 RX enable, RE bit 2
    USART1->CR1 |= (1 << 2);
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <uart_enable+0x50>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <uart_enable+0x50>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	60d3      	str	r3, [r2, #12]
    // USART1 TX enable, TE bit 3
    USART1->CR1 |= (1 << 3);
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <uart_enable+0x50>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a0c      	ldr	r2, [pc, #48]	; (800214c <uart_enable+0x50>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	60d3      	str	r3, [r2, #12]

    // Enable usart1 - UE, bit 13
    USART1->CR1 |= (1 << 13);
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <uart_enable+0x50>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a09      	ldr	r2, [pc, #36]	; (800214c <uart_enable+0x50>)
 8002126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800212a:	60d3      	str	r3, [r2, #12]
	// For STM32F411: fCK = 100 Mhz (Sysclk/4), Baudrate = 4000000, OVER8 = 0
	// USARTDIV = fCK / baud / 8 * (2-OVER8)
	// USARTDIV = 100M / 4000000 / 16 = 1.5625
	// Fraction: 0.5624*16 = 9
	// Mantissa: 1
    USART1->BRR |= (1 << 4); // Mantissa
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <uart_enable+0x50>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a06      	ldr	r2, [pc, #24]	; (800214c <uart_enable+0x50>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	6093      	str	r3, [r2, #8]
    USART1->BRR |= 9; // Fraction
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <uart_enable+0x50>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a03      	ldr	r2, [pc, #12]	; (800214c <uart_enable+0x50>)
 800213e:	f043 0309 	orr.w	r3, r3, #9
 8002142:	6093      	str	r3, [r2, #8]
}
 8002144:	bf00      	nop
 8002146:	4770      	bx	lr
 8002148:	40023800 	.word	0x40023800
 800214c:	40011000 	.word	0x40011000

08002150 <uart_init>:

void uart_init(void)
{
 8002150:	b508      	push	{r3, lr}
    /* set system clock to 100 Mhz */
    set_sysclk_to_100();
 8002152:	f000 fc45 	bl	80029e0 <set_sysclk_to_100>

	uart_pin_setup();
 8002156:	f7ff ffa7 	bl	80020a8 <uart_pin_setup>
	uart_enable();
 800215a:	f7ff ffcf 	bl	80020fc <uart_enable>
}
 800215e:	bf00      	nop
 8002160:	bd08      	pop	{r3, pc}
	...

08002164 <__NVIC_EnableIRQ>:
{
 8002164:	b082      	sub	sp, #8
 8002166:	4603      	mov	r3, r0
 8002168:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0c      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002174:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4905      	ldr	r1, [pc, #20]	; (8002194 <__NVIC_EnableIRQ+0x30>)
 800217e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800218e:	bf00      	nop
 8002190:	b002      	add	sp, #8
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_SetPriority>:
{
 8002198:	b082      	sub	sp, #8
 800219a:	4603      	mov	r3, r0
 800219c:	9100      	str	r1, [sp, #0]
 800219e:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0a      	blt.n	80021c0 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	9b00      	ldr	r3, [sp, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x48>)
 80021b0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021be:	e00b      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	9b00      	ldr	r3, [sp, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4907      	ldr	r1, [pc, #28]	; (80021e4 <__NVIC_SetPriority+0x4c>)
 80021c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	b002      	add	sp, #8
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <uart_tx_setup>:
static int transmitting=0;

// Setup uart transmission
static void uart_tx_setup(void) {
	// Clear control register
	DMA2_Stream7->CR = 0;
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <uart_tx_setup+0x54>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
	// Wait for DMA to disable
	while(DMA2_Stream7->CR & (1<<0));
 80021ee:	bf00      	nop
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <uart_tx_setup+0x54>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f9      	bne.n	80021f0 <uart_tx_setup+0x8>
	// Select channel 4 for usart1_tx
	DMA2_Stream7->CR |= (0x4<<25);
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <uart_tx_setup+0x54>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <uart_tx_setup+0x54>)
 8002202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002206:	6013      	str	r3, [r2, #0]
	// Enable tx complete interrupt
	DMA2_Stream7->CR |= DMA_SxCR_TCIE;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <uart_tx_setup+0x54>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <uart_tx_setup+0x54>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	6013      	str	r3, [r2, #0]
	// Enable memory increment mode
	DMA2_Stream7->CR |= DMA_SxCR_MINC;
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <uart_tx_setup+0x54>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a08      	ldr	r2, [pc, #32]	; (800223c <uart_tx_setup+0x54>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221e:	6013      	str	r3, [r2, #0]
	// Priority level high
	DMA2_Stream7->CR |= (0x2<<16);
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <uart_tx_setup+0x54>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <uart_tx_setup+0x54>)
 8002226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222a:	6013      	str	r3, [r2, #0]
	// DIR bit set to 01: source SxM0AR, dest SxPAR
	DMA2_Stream7->CR |= (0x1 << 6);
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <uart_tx_setup+0x54>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a02      	ldr	r2, [pc, #8]	; (800223c <uart_tx_setup+0x54>)
 8002232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	4770      	bx	lr
 800223c:	400264b8 	.word	0x400264b8

08002240 <uart_rx_setup>:

// Setup uart reception
static void uart_rx_setup(void) {
	// Enable receive DMA
	USART1->CR3 |= USART_CR3_DMAR;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <uart_rx_setup+0x60>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <uart_rx_setup+0x60>)
 8002246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800224a:	6153      	str	r3, [r2, #20]
	// Clear control register
	DMA2_Stream2->CR = 0;
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <uart_rx_setup+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
	// Wait for DMA to disable
	while(DMA2_Stream2->CR & (1<<0));
 8002252:	bf00      	nop
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <uart_rx_setup+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f9      	bne.n	8002254 <uart_rx_setup+0x14>
	// Select channel 4 for usart1_rx
	DMA2_Stream2->CR |= (0x4<<25);
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <uart_rx_setup+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <uart_rx_setup+0x64>)
 8002266:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800226a:	6013      	str	r3, [r2, #0]
	// Enable rx complete interrupt
	DMA2_Stream2->CR |= DMA_SxCR_TCIE;
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <uart_rx_setup+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <uart_rx_setup+0x64>)
 8002272:	f043 0310 	orr.w	r3, r3, #16
 8002276:	6013      	str	r3, [r2, #0]
	// Enable memory increment mode
	DMA2_Stream2->CR |= DMA_SxCR_MINC;
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <uart_rx_setup+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <uart_rx_setup+0x64>)
 800227e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002282:	6013      	str	r3, [r2, #0]
	// Priority level high
	DMA2_Stream2->CR |= (0x2<<16);
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <uart_rx_setup+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <uart_rx_setup+0x64>)
 800228a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228e:	6013      	str	r3, [r2, #0]
	// DIR bit set to 00: source SxPAR, dest SxM0AR
	DMA2_Stream2->CR &= ~(0xC << 6);
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <uart_rx_setup+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a03      	ldr	r2, [pc, #12]	; (80022a4 <uart_rx_setup+0x64>)
 8002296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	4770      	bx	lr
 80022a0:	40011000 	.word	0x40011000
 80022a4:	40026440 	.word	0x40026440

080022a8 <uart_tx_start>:

// Start uart transmission of size bytes of data
void uart_tx_start(void * data, size_t size) {
 80022a8:	b500      	push	{lr}
 80022aa:	b083      	sub	sp, #12
 80022ac:	9001      	str	r0, [sp, #4]
 80022ae:	9100      	str	r1, [sp, #0]
	uart_tx_wait();
 80022b0:	f000 f826 	bl	8002300 <uart_tx_wait>
	uart_tx_setup();
 80022b4:	f7ff ff98 	bl	80021e8 <uart_tx_setup>

	// Source memory address
	DMA2_Stream7->M0AR = (uint32_t)data;
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <uart_tx_start+0x4c>)
 80022ba:	9b01      	ldr	r3, [sp, #4]
 80022bc:	60d3      	str	r3, [r2, #12]
	// Destination memory address
	DMA2_Stream7->PAR = (uint32_t)&(USART1->DR);
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <uart_tx_start+0x4c>)
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <uart_tx_start+0x50>)
 80022c2:	609a      	str	r2, [r3, #8]
	// Transfer size
	DMA2_Stream7->NDTR = size;
 80022c4:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <uart_tx_start+0x4c>)
 80022c6:	9b00      	ldr	r3, [sp, #0]
 80022c8:	6053      	str	r3, [r2, #4]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA2_Stream7_IRQn, 77);
 80022ca:	214d      	movs	r1, #77	; 0x4d
 80022cc:	2046      	movs	r0, #70	; 0x46
 80022ce:	f7ff ff63 	bl	8002198 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80022d2:	2046      	movs	r0, #70	; 0x46
 80022d4:	f7ff ff46 	bl	8002164 <__NVIC_EnableIRQ>

	// Enable DMA
	DMA2_Stream7->CR |= DMA_SxCR_EN;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <uart_tx_start+0x4c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <uart_tx_start+0x4c>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6013      	str	r3, [r2, #0]

	transmitting=1;
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <uart_tx_start+0x54>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	bf00      	nop
 80022ec:	b003      	add	sp, #12
 80022ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80022f2:	bf00      	nop
 80022f4:	400264b8 	.word	0x400264b8
 80022f8:	40011004 	.word	0x40011004
 80022fc:	20000d04 	.word	0x20000d04

08002300 <uart_tx_wait>:

// Wait for uart transmission to finish
void uart_tx_wait(void) {
	while (transmitting);
 8002300:	bf00      	nop
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <uart_tx_wait+0x10>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1fb      	bne.n	8002302 <uart_tx_wait+0x2>
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	4770      	bx	lr
 8002310:	20000d04 	.word	0x20000d04

08002314 <uart_rx_start>:

// Start uart reception of size bytes of data into buffer
void uart_rx_start(void * buffer, size_t size) {
 8002314:	b500      	push	{lr}
 8002316:	b083      	sub	sp, #12
 8002318:	9001      	str	r0, [sp, #4]
 800231a:	9100      	str	r1, [sp, #0]
	uart_rx_wait();
 800231c:	f000 f826 	bl	800236c <uart_rx_wait>
	uart_rx_setup();
 8002320:	f7ff ff8e 	bl	8002240 <uart_rx_setup>

	// Source memory address
	DMA2_Stream2->PAR = (uint32_t)&(USART1->DR);
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <uart_rx_start+0x4c>)
 8002326:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <uart_rx_start+0x50>)
 8002328:	609a      	str	r2, [r3, #8]
	// Destination memory address
	DMA2_Stream2->M0AR = (uint32_t)buffer;
 800232a:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <uart_rx_start+0x4c>)
 800232c:	9b01      	ldr	r3, [sp, #4]
 800232e:	60d3      	str	r3, [r2, #12]
	// Transfer size
	DMA2_Stream2->NDTR = size;
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <uart_rx_start+0x4c>)
 8002332:	9b00      	ldr	r3, [sp, #0]
 8002334:	6053      	str	r3, [r2, #4]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA2_Stream2_IRQn, 65);
 8002336:	2141      	movs	r1, #65	; 0x41
 8002338:	203a      	movs	r0, #58	; 0x3a
 800233a:	f7ff ff2d 	bl	8002198 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800233e:	203a      	movs	r0, #58	; 0x3a
 8002340:	f7ff ff10 	bl	8002164 <__NVIC_EnableIRQ>

	// Enable DMA
	DMA2_Stream2->CR |= DMA_SxCR_EN;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <uart_rx_start+0x4c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a05      	ldr	r2, [pc, #20]	; (8002360 <uart_rx_start+0x4c>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6013      	str	r3, [r2, #0]

	receiving=1;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <uart_rx_start+0x54>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	b003      	add	sp, #12
 800235a:	f85d fb04 	ldr.w	pc, [sp], #4
 800235e:	bf00      	nop
 8002360:	40026440 	.word	0x40026440
 8002364:	40011004 	.word	0x40011004
 8002368:	20000d00 	.word	0x20000d00

0800236c <uart_rx_wait>:

// Wait for uart reception to finish
void uart_rx_wait(void) {
	while (receiving);
 800236c:	bf00      	nop
 800236e:	4b03      	ldr	r3, [pc, #12]	; (800237c <uart_rx_wait+0x10>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1fb      	bne.n	800236e <uart_rx_wait+0x2>
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	4770      	bx	lr
 800237c:	20000d00 	.word	0x20000d00

08002380 <DMA2_Stream2_IRQHandler>:

// UART reception finish interrupt
void DMA2_Stream2_IRQHandler(void)
{
    // clear stream receive complete interrupt - bit11 for stream 5
    if (DMA2->LISR & DMA_LISR_TCIF2) {
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <DMA2_Stream2_IRQHandler+0x30>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <DMA2_Stream2_IRQHandler+0x2a>
        // clear interrupt
        DMA2->LIFCR |= DMA_LISR_TCIF2;
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <DMA2_Stream2_IRQHandler+0x30>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <DMA2_Stream2_IRQHandler+0x30>)
 8002392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002396:	6093      	str	r3, [r2, #8]
		receiving = 0;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <DMA2_Stream2_IRQHandler+0x34>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
		// Disable receive DMA
		USART1->CR3 &= ~USART_CR3_DMAR;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <DMA2_Stream2_IRQHandler+0x38>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <DMA2_Stream2_IRQHandler+0x38>)
 80023a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a8:	6153      	str	r3, [r2, #20]
    }
}
 80023aa:	bf00      	nop
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40026400 	.word	0x40026400
 80023b4:	20000d00 	.word	0x20000d00
 80023b8:	40011000 	.word	0x40011000

080023bc <DMA2_Stream7_IRQHandler>:

// UART transmission finish interrupt
void DMA2_Stream7_IRQHandler(void)
{
    // clear stream transfer complete interrupt - bit21 for stream 6
    if (DMA2->HISR & DMA_HISR_TCIF7) {
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <DMA2_Stream7_IRQHandler+0x24>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <DMA2_Stream7_IRQHandler+0x1e>
        // clear interrupt
        DMA2->HIFCR |= DMA_HISR_TCIF7;
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <DMA2_Stream7_IRQHandler+0x24>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <DMA2_Stream7_IRQHandler+0x24>)
 80023ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023d2:	60d3      	str	r3, [r2, #12]
		transmitting = 0;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <DMA2_Stream7_IRQHandler+0x28>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    }
}
 80023da:	bf00      	nop
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40026400 	.word	0x40026400
 80023e4:	20000d04 	.word	0x20000d04

080023e8 <uart_dma_init>:

// Setup UART DMA
void uart_dma_init(void) {
	// Enable transmit DMA
	USART1->CR3 |= USART_CR3_DMAT;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <uart_dma_init+0x34>)
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <uart_dma_init+0x34>)
 80023ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f2:	6153      	str	r3, [r2, #20]
	// Enable receive DMA
	USART1->CR3 |= USART_CR3_DMAR;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <uart_dma_init+0x34>)
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	4a08      	ldr	r2, [pc, #32]	; (800241c <uart_dma_init+0x34>)
 80023fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023fe:	6153      	str	r3, [r2, #20]
	// Clear TC bit
	USART1->SR &= ~USART_SR_TC;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <uart_dma_init+0x34>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a05      	ldr	r2, [pc, #20]	; (800241c <uart_dma_init+0x34>)
 8002406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800240a:	6013      	str	r3, [r2, #0]
	// Enable DMA2 clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <uart_dma_init+0x38>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	4a03      	ldr	r2, [pc, #12]	; (8002420 <uart_dma_init+0x38>)
 8002412:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002418:	bf00      	nop
 800241a:	4770      	bx	lr
 800241c:	40011000 	.word	0x40011000
 8002420:	40023800 	.word	0x40023800

08002424 <SVC_Handler>:
#include "mcu_mm.h"
#include "mcu_mpu.h"
#include "mcu_timer.h"

void SVC_Handler(void) {
	__asm (
 8002424:	f01e 0f04 	tst.w	lr, #4
 8002428:	bf0c      	ite	eq
 800242a:	f3ef 8008 	mrseq	r0, MSP
 800242e:	f3ef 8009 	mrsne	r0, PSP
 8002432:	f000 b803 	b.w	800243c <SVC_Handler_Main>
			"ITE EQ\n"
			"MRSEQ r0, MSP\n"
			"MRSNE r0, PSP\n" // Check to use msp or psp
			"B SVC_Handler_Main\n" // Go to the C handler function
	);
}
 8002436:	bf00      	nop
 8002438:	4770      	bx	lr
	...

0800243c <SVC_Handler_Main>:

void SVC_Handler_Main(unsigned int * svc_args) {
 800243c:	b500      	push	{lr}
 800243e:	b09d      	sub	sp, #116	; 0x74
 8002440:	9001      	str	r0, [sp, #4]
	// Stack frame contents: r0-r3, LR, PC, and xPSR
	// Correspond with svc_args[0 to 7]
	// First registers are arguments and return values

	uint32_t svc_number = ((char *)svc_args[6])[-2];
 8002442:	9b01      	ldr	r3, [sp, #4]
 8002444:	3318      	adds	r3, #24
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3b02      	subs	r3, #2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	931b      	str	r3, [sp, #108]	; 0x6c
	switch(svc_number) {
 800244e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002450:	2b05      	cmp	r3, #5
 8002452:	f200 80e2 	bhi.w	800261a <SVC_Handler_Main+0x1de>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <SVC_Handler_Main+0x20>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	08002475 	.word	0x08002475
 8002460:	080024b3 	.word	0x080024b3
 8002464:	080024ff 	.word	0x080024ff
 8002468:	08002543 	.word	0x08002543
 800246c:	08002599 	.word	0x08002599
 8002470:	080025d7 	.word	0x080025d7
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002474:	f3ef 8314 	mrs	r3, CONTROL
 8002478:	9317      	str	r3, [sp, #92]	; 0x5c
  return(result);
 800247a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		case 0: // mm_init
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk); // Enable privileged mode
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	9318      	str	r3, [sp, #96]	; 0x60
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002482:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002484:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002488:	f3bf 8f6f 	isb	sy
}
 800248c:	bf00      	nop
  __ISB();
}
 800248e:	bf00      	nop
			mm_init();
 8002490:	f7ff fbaa 	bl	8001be8 <mm_init>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002494:	f3ef 8314 	mrs	r3, CONTROL
 8002498:	9319      	str	r3, [sp, #100]	; 0x64
  return(result);
 800249a:	9b19      	ldr	r3, [sp, #100]	; 0x64
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk); // Disable privileged mode
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	931a      	str	r3, [sp, #104]	; 0x68
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80024a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80024a4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80024a8:	f3bf 8f6f 	isb	sy
}
 80024ac:	bf00      	nop
}
 80024ae:	bf00      	nop
			break;
 80024b0:	e0b4      	b.n	800261c <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80024b2:	f3ef 8314 	mrs	r3, CONTROL
 80024b6:	9313      	str	r3, [sp, #76]	; 0x4c
  return(result);
 80024b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		case 1: // mm_malloc
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk); // Enable privileged mode
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	9314      	str	r3, [sp, #80]	; 0x50
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80024c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80024c2:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80024c6:	f3bf 8f6f 	isb	sy
}
 80024ca:	bf00      	nop
}
 80024cc:	bf00      	nop
			svc_args[0] = (uint32_t)mm_malloc(svc_args[0]);
 80024ce:	9b01      	ldr	r3, [sp, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fbba 	bl	8001c4c <mm_malloc>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	9b01      	ldr	r3, [sp, #4]
 80024de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80024e0:	f3ef 8314 	mrs	r3, CONTROL
 80024e4:	9315      	str	r3, [sp, #84]	; 0x54
  return(result);
 80024e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk); // Disable privileged mode
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	9316      	str	r3, [sp, #88]	; 0x58
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80024ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80024f0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80024f4:	f3bf 8f6f 	isb	sy
}
 80024f8:	bf00      	nop
}
 80024fa:	bf00      	nop
			break;
 80024fc:	e08e      	b.n	800261c <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80024fe:	f3ef 8314 	mrs	r3, CONTROL
 8002502:	930f      	str	r3, [sp, #60]	; 0x3c
  return(result);
 8002504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		case 2: // mm_free
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk); // Enable privileged mode
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800250c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800250e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002512:	f3bf 8f6f 	isb	sy
}
 8002516:	bf00      	nop
}
 8002518:	bf00      	nop
			mm_free((void *)(svc_args[0]));
 800251a:	9b01      	ldr	r3, [sp, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fbf0 	bl	8001d04 <mm_free>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002524:	f3ef 8314 	mrs	r3, CONTROL
 8002528:	9311      	str	r3, [sp, #68]	; 0x44
  return(result);
 800252a:	9b11      	ldr	r3, [sp, #68]	; 0x44
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk); // Disable privileged mode
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	9312      	str	r3, [sp, #72]	; 0x48
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002532:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002534:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002538:	f3bf 8f6f 	isb	sy
}
 800253c:	bf00      	nop
}
 800253e:	bf00      	nop
			break;
 8002540:	e06c      	b.n	800261c <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002542:	f3ef 8314 	mrs	r3, CONTROL
 8002546:	930b      	str	r3, [sp, #44]	; 0x2c
  return(result);
 8002548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		case 3: // mm_realloc
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk); // Enable privileged mode
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	930c      	str	r3, [sp, #48]	; 0x30
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002552:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002556:	f3bf 8f6f 	isb	sy
}
 800255a:	bf00      	nop
}
 800255c:	bf00      	nop
			svc_args[0] = (uint32_t)mm_realloc((void *)svc_args[0], svc_args[1]);
 800255e:	9b01      	ldr	r3, [sp, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	9b01      	ldr	r3, [sp, #4]
 8002566:	3304      	adds	r3, #4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f7ff fbe1 	bl	8001d34 <mm_realloc>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	9b01      	ldr	r3, [sp, #4]
 8002578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800257a:	f3ef 8314 	mrs	r3, CONTROL
 800257e:	930d      	str	r3, [sp, #52]	; 0x34
  return(result);
 8002580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk); // Disable privileged mode
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	930e      	str	r3, [sp, #56]	; 0x38
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800258a:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 800258e:	f3bf 8f6f 	isb	sy
}
 8002592:	bf00      	nop
}
 8002594:	bf00      	nop
			break;
 8002596:	e041      	b.n	800261c <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002598:	f3ef 8314 	mrs	r3, CONTROL
 800259c:	9307      	str	r3, [sp, #28]
  return(result);
 800259e:	9b07      	ldr	r3, [sp, #28]
		case 4: // mm_finish
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk); // Enable privileged mode
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	9308      	str	r3, [sp, #32]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80025a6:	9b08      	ldr	r3, [sp, #32]
 80025a8:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80025ac:	f3bf 8f6f 	isb	sy
}
 80025b0:	bf00      	nop
}
 80025b2:	bf00      	nop
			mm_finish();
 80025b4:	f7ff fc04 	bl	8001dc0 <mm_finish>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80025b8:	f3ef 8314 	mrs	r3, CONTROL
 80025bc:	9309      	str	r3, [sp, #36]	; 0x24
  return(result);
 80025be:	9b09      	ldr	r3, [sp, #36]	; 0x24
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk); // Disable privileged mode
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	930a      	str	r3, [sp, #40]	; 0x28
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80025c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025c8:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80025cc:	f3bf 8f6f 	isb	sy
}
 80025d0:	bf00      	nop
}
 80025d2:	bf00      	nop
			break;
 80025d4:	e022      	b.n	800261c <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80025d6:	f3ef 8314 	mrs	r3, CONTROL
 80025da:	9303      	str	r3, [sp, #12]
  return(result);
 80025dc:	9b03      	ldr	r3, [sp, #12]
		case 5: // get_time
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk); // Enable privileged mode
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80025e4:	9b04      	ldr	r3, [sp, #16]
 80025e6:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80025ea:	f3bf 8f6f 	isb	sy
}
 80025ee:	bf00      	nop
}
 80025f0:	bf00      	nop
			svc_args[0] = get_time();
 80025f2:	f7ff fc8f 	bl	8001f14 <get_time>
 80025f6:	4602      	mov	r2, r0
 80025f8:	9b01      	ldr	r3, [sp, #4]
 80025fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80025fc:	f3ef 8314 	mrs	r3, CONTROL
 8002600:	9305      	str	r3, [sp, #20]
  return(result);
 8002602:	9b05      	ldr	r3, [sp, #20]
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk); // Disable privileged mode
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	9306      	str	r3, [sp, #24]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800260a:	9b06      	ldr	r3, [sp, #24]
 800260c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002610:	f3bf 8f6f 	isb	sy
}
 8002614:	bf00      	nop
}
 8002616:	bf00      	nop
			break;
 8002618:	e000      	b.n	800261c <SVC_Handler_Main+0x1e0>
		default:
			break;
 800261a:	bf00      	nop
	}
}
 800261c:	bf00      	nop
 800261e:	b01d      	add	sp, #116	; 0x74
 8002620:	f85d fb04 	ldr.w	pc, [sp], #4

08002624 <sys_mm_init>:
	__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk);
}

// Initialize malloc library
void sys_mm_init(void) {
	asm volatile ("svc #0");
 8002624:	df00      	svc	0
}
 8002626:	bf00      	nop
 8002628:	4770      	bx	lr

0800262a <sys_malloc>:

// Malloc size bytes of memory
void * sys_malloc(size_t size) {
 800262a:	b082      	sub	sp, #8
 800262c:	9001      	str	r0, [sp, #4]
	asm volatile ("svc #1");
 800262e:	df01      	svc	1
	register uint32_t * ret_val asm("r0");
	return (void *)ret_val;
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	b002      	add	sp, #8
 8002636:	4770      	bx	lr

08002638 <sys_free>:

// Free memory region at pointer
void sys_free(void * ptr) {
 8002638:	b082      	sub	sp, #8
 800263a:	9001      	str	r0, [sp, #4]
	asm volatile ("svc #2");
 800263c:	df02      	svc	2
}
 800263e:	bf00      	nop
 8002640:	b002      	add	sp, #8
 8002642:	4770      	bx	lr

08002644 <sys_realloc>:

// Reallocate ptr to a size byte region and return the new pointer
void * sys_realloc(void * ptr, size_t size) {
 8002644:	b082      	sub	sp, #8
 8002646:	9001      	str	r0, [sp, #4]
 8002648:	9100      	str	r1, [sp, #0]
	asm volatile ("svc #3");
 800264a:	df03      	svc	3
	register uint32_t * ret_val asm("r0");
	return (void *) ret_val;
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	b002      	add	sp, #8
 8002652:	4770      	bx	lr

08002654 <sys_mm_finish>:

// End communication session with server
void sys_mm_finish(void) {
	asm volatile ("svc #4");
 8002654:	df04      	svc	4
}
 8002656:	bf00      	nop
 8002658:	4770      	bx	lr

0800265a <sys_get_time>:

// Return current time in ms
size_t sys_get_time(void) {
	asm volatile ("svc #5");
 800265a:	df05      	svc	5
	register uint32_t * ret_val asm("r0");
	return (size_t) ret_val;
 800265c:	4603      	mov	r3, r0
}
 800265e:	4618      	mov	r0, r3
 8002660:	4770      	bx	lr
	...

08002664 <proc_update>:
#include "mcu_mpu.h"
#include "memlib.h"

// Update mpu settings with new heap top
void proc_update(void) {
 8002664:	b510      	push	{r4, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
	uint32_t mpu_cfg_rbar[4] = {
 8002668:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800266c:	9304      	str	r3, [sp, #16]
 800266e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002672:	9305      	str	r3, [sp, #20]
 8002674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002678:	9306      	str	r3, [sp, #24]
		// SRAM - Region 1
		0x20000000,
		// Peripherals - Region 2
		PERIPH_BASE,
		// Heap top plus 32 bytes ceiling aligned - Region 3
		(((uint32_t)mem_heap_hi() + 64 + 31)/32)*32,
 800267a:	f7ff fa85 	bl	8001b88 <mem_heap_hi>
 800267e:	4603      	mov	r3, r0
 8002680:	335f      	adds	r3, #95	; 0x5f
 8002682:	f023 031f 	bic.w	r3, r3, #31
	uint32_t mpu_cfg_rbar[4] = {
 8002686:	9307      	str	r3, [sp, #28]
	};

	uint32_t mpu_cfg_rasr[4] = {
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <proc_update+0xc4>)
 800268a:	466c      	mov	r4, sp
 800268c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800268e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		(MPU_DEFS_RASR_SIZE_4GB | MPU_DEFS_SHARED_DEVICE | MPU_DEFS_RASE_AP_FULL_ACCESS | MPU_RASR_ENABLE_Msk),
		// Stack/heap overflow protection
		(MPU_DEFS_RASR_SIZE_32B | MPU_DEFS_NORMAL_SHARED_MEMORY_WT | MPU_DEFS_RASE_AP_NO_ACCESS | MPU_RASR_ENABLE_Msk),
	};

	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't exist)
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <proc_update+0xc8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d042      	beq.n	8002720 <proc_update+0xbc>
  __ASM volatile ("dmb 0xF":::"memory");
 800269a:	f3bf 8f5f 	dmb	sy
}
 800269e:	bf00      	nop
	__DMB(); // Finish outstanding transfers

	MPU->CTRL = 0; // Disable first
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <proc_update+0xc8>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	605a      	str	r2, [r3, #4]

	for (size_t i=0; i<4; i++) {
 80026a6:	2300      	movs	r3, #0
 80026a8:	9309      	str	r3, [sp, #36]	; 0x24
 80026aa:	e015      	b.n	80026d8 <proc_update+0x74>
		MPU->RNR = i; // Select region
 80026ac:	4a1f      	ldr	r2, [pc, #124]	; (800272c <proc_update+0xc8>)
 80026ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026b0:	6093      	str	r3, [r2, #8]
		MPU->RBAR = mpu_cfg_rbar[i]; // Write base address register
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <proc_update+0xc8>)
 80026b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	3328      	adds	r3, #40	; 0x28
 80026ba:	446b      	add	r3, sp
 80026bc:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80026c0:	60d3      	str	r3, [r2, #12]
		MPU->RASR = mpu_cfg_rasr[i]; // Region attribute and size register
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <proc_update+0xc8>)
 80026c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	3328      	adds	r3, #40	; 0x28
 80026ca:	446b      	add	r3, sp
 80026cc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80026d0:	6113      	str	r3, [r2, #16]
	for (size_t i=0; i<4; i++) {
 80026d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026d4:	3301      	adds	r3, #1
 80026d6:	9309      	str	r3, [sp, #36]	; 0x24
 80026d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d9e6      	bls.n	80026ac <proc_update+0x48>
	}

	for (size_t i=4; i<8; i++) {
 80026de:	2304      	movs	r3, #4
 80026e0:	9308      	str	r3, [sp, #32]
 80026e2:	e00b      	b.n	80026fc <proc_update+0x98>
		// Disable unused regions
		MPU->RNR = i; // Select region
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <proc_update+0xc8>)
 80026e6:	9b08      	ldr	r3, [sp, #32]
 80026e8:	6093      	str	r3, [r2, #8]
		MPU->RBAR = 0; // Base address
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <proc_update+0xc8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
		MPU->RASR = 0; // Region attribute and size register
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <proc_update+0xc8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
	for (size_t i=4; i<8; i++) {
 80026f6:	9b08      	ldr	r3, [sp, #32]
 80026f8:	3301      	adds	r3, #1
 80026fa:	9308      	str	r3, [sp, #32]
 80026fc:	9b08      	ldr	r3, [sp, #32]
 80026fe:	2b07      	cmp	r3, #7
 8002700:	d9f0      	bls.n	80026e4 <proc_update+0x80>
	}

	MPU->CTRL |= 1<<2; // Enable privileged background region
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <proc_update+0xc8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <proc_update+0xc8>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6053      	str	r3, [r2, #4]

	MPU->CTRL = MPU_CTRL_ENABLE_Msk; // Enable MPU
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <proc_update+0xc8>)
 8002710:	2201      	movs	r2, #1
 8002712:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8002714:	f3bf 8f4f 	dsb	sy
}
 8002718:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800271a:	f3bf 8f6f 	isb	sy
}
 800271e:	e000      	b.n	8002722 <proc_update+0xbe>
	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't exist)
 8002720:	bf00      	nop

	__DSB(); // Memory barrier for subsequence data & instruction
	__ISB(); // Transfers using updated MPU settings
}
 8002722:	b00a      	add	sp, #40	; 0x28
 8002724:	bd10      	pop	{r4, pc}
 8002726:	bf00      	nop
 8002728:	080051dc 	.word	0x080051dc
 800272c:	e000ed90 	.word	0xe000ed90

08002730 <mpu_init>:

void mpu_init(void) {
 8002730:	b088      	sub	sp, #32
	uint32_t mpu_cfg_rbar[3] = {
 8002732:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <mpu_init+0xac>)
 8002734:	ab03      	add	r3, sp, #12
 8002736:	ca07      	ldmia	r2, {r0, r1, r2}
 8002738:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		0x20000000,
		// Peripherals - Region 2
		PERIPH_BASE,
	};

	uint32_t mpu_cfg_rasr[3] = {
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <mpu_init+0xb0>)
 800273e:	466b      	mov	r3, sp
 8002740:	ca07      	ldmia	r2, {r0, r1, r2}
 8002742:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(MPU_DEFS_RASR_SIZE_128KB | MPU_DEFS_NORMAL_SHARED_MEMORY_WT | MPU_DEFS_RASE_AP_FULL_ACCESS | MPU_RASR_ENABLE_Msk),
		// Peripherals
		(MPU_DEFS_RASR_SIZE_4GB | MPU_DEFS_SHARED_DEVICE | MPU_DEFS_RASE_AP_FULL_ACCESS | MPU_RASR_ENABLE_Msk),
	};

	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't existPB1PERIPH_BASE + 0x4400U)
 8002746:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <mpu_init+0xb4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d042      	beq.n	80027d4 <mpu_init+0xa4>
  __ASM volatile ("dmb 0xF":::"memory");
 800274e:	f3bf 8f5f 	dmb	sy
}
 8002752:	bf00      	nop
	__DMB(); // Finish outstanding transfers

	MPU->CTRL = 0; // Disable first
 8002754:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <mpu_init+0xb4>)
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]

	for (size_t i=0; i<3; i++) {
 800275a:	2300      	movs	r3, #0
 800275c:	9307      	str	r3, [sp, #28]
 800275e:	e015      	b.n	800278c <mpu_init+0x5c>
		MPU->RNR = i; // Select region
 8002760:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <mpu_init+0xb4>)
 8002762:	9b07      	ldr	r3, [sp, #28]
 8002764:	6093      	str	r3, [r2, #8]
		MPU->RBAR = mpu_cfg_rbar[i]; // Write base address register
 8002766:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <mpu_init+0xb4>)
 8002768:	9b07      	ldr	r3, [sp, #28]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	3320      	adds	r3, #32
 800276e:	446b      	add	r3, sp
 8002770:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002774:	60d3      	str	r3, [r2, #12]
		MPU->RASR = mpu_cfg_rasr[i]; // Region attribute and size register
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <mpu_init+0xb4>)
 8002778:	9b07      	ldr	r3, [sp, #28]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	3320      	adds	r3, #32
 800277e:	446b      	add	r3, sp
 8002780:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002784:	6113      	str	r3, [r2, #16]
	for (size_t i=0; i<3; i++) {
 8002786:	9b07      	ldr	r3, [sp, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	9307      	str	r3, [sp, #28]
 800278c:	9b07      	ldr	r3, [sp, #28]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d9e6      	bls.n	8002760 <mpu_init+0x30>
	}

	for (size_t i=3; i<8; i++) {
 8002792:	2303      	movs	r3, #3
 8002794:	9306      	str	r3, [sp, #24]
 8002796:	e00b      	b.n	80027b0 <mpu_init+0x80>
		// Disable unused regions
		MPU->RNR = i; // Select region
 8002798:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <mpu_init+0xb4>)
 800279a:	9b06      	ldr	r3, [sp, #24]
 800279c:	6093      	str	r3, [r2, #8]
		MPU->RBAR = 0; // Base address
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <mpu_init+0xb4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
		MPU->RASR = 0; // Region attribute and size register
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <mpu_init+0xb4>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
	for (size_t i=3; i<8; i++) {
 80027aa:	9b06      	ldr	r3, [sp, #24]
 80027ac:	3301      	adds	r3, #1
 80027ae:	9306      	str	r3, [sp, #24]
 80027b0:	9b06      	ldr	r3, [sp, #24]
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	d9f0      	bls.n	8002798 <mpu_init+0x68>
	}

	MPU->CTRL |= 1<<2; // Enable privileged background region
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <mpu_init+0xb4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <mpu_init+0xb4>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	6053      	str	r3, [r2, #4]

	MPU->CTRL = MPU_CTRL_ENABLE_Msk; // Enable MPU
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <mpu_init+0xb4>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80027c8:	f3bf 8f4f 	dsb	sy
}
 80027cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027ce:	f3bf 8f6f 	isb	sy
}
 80027d2:	e000      	b.n	80027d6 <mpu_init+0xa6>
	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't existPB1PERIPH_BASE + 0x4400U)
 80027d4:	bf00      	nop

	__DSB(); // Memory barrier for subsequence data & instruction
	__ISB(); // Transfers using updated MPU settings
}
 80027d6:	b008      	add	sp, #32
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	080051ec 	.word	0x080051ec
 80027e0:	080051f8 	.word	0x080051f8
 80027e4:	e000ed90 	.word	0xe000ed90

080027e8 <__NVIC_SetPriority>:
{
 80027e8:	b082      	sub	sp, #8
 80027ea:	4603      	mov	r3, r0
 80027ec:	9100      	str	r1, [sp, #0]
 80027ee:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db0a      	blt.n	8002810 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fa:	9b00      	ldr	r3, [sp, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x48>)
 8002800:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800280e:	e00b      	b.n	8002828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	9b00      	ldr	r3, [sp, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <__NVIC_SetPriority+0x4c>)
 8002816:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	3b04      	subs	r3, #4
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	440b      	add	r3, r1
 8002826:	761a      	strb	r2, [r3, #24]
}
 8002828:	bf00      	nop
 800282a:	b002      	add	sp, #8
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <HardFault_Handler>:
#include "mcu_init.h"
#include "mcu_mm.h"
#include "mcu_timer.h"

// Hardfault Handler - Send exit signal
void HardFault_Handler(void) {
 8002838:	b500      	push	{lr}
 800283a:	b085      	sub	sp, #20
	// Force reset stack pointer in case of overflow
	sp_reset = (void *)0x20005000;
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HardFault_Handler+0x3c>)
 800283e:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HardFault_Handler+0x40>)
 8002840:	601a      	str	r2, [r3, #0]
	asm volatile ("mov sp, %0" : "+r" (sp_reset));
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <HardFault_Handler+0x3c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	469d      	mov	sp, r3
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HardFault_Handler+0x3c>)
 800284a:	6013      	str	r3, [r2, #0]

	char err[] = "Hard Fault";
 800284c:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HardFault_Handler+0x44>)
 800284e:	ab01      	add	r3, sp, #4
 8002850:	ca07      	ldmia	r2, {r0, r1, r2}
 8002852:	c303      	stmia	r3!, {r0, r1}
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	3302      	adds	r3, #2
 8002858:	0c12      	lsrs	r2, r2, #16
 800285a:	701a      	strb	r2, [r3, #0]
	var_print(err);
 800285c:	ab01      	add	r3, sp, #4
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fbc0 	bl	8001fe4 <var_print>
	mm_finish();
 8002864:	f7ff faac 	bl	8001dc0 <mm_finish>
	loop();
 8002868:	f7ff fbb6 	bl	8001fd8 <loop>
}
 800286c:	bf00      	nop
 800286e:	b005      	add	sp, #20
 8002870:	f85d fb04 	ldr.w	pc, [sp], #4
 8002874:	2000005c 	.word	0x2000005c
 8002878:	20005000 	.word	0x20005000
 800287c:	08005204 	.word	0x08005204

08002880 <MemManage_Handler>:
	loop();
}
*/

// Memory fault handler -  Send exit signal
void MemManage_Handler(void) {
 8002880:	b510      	push	{r4, lr}
 8002882:	b084      	sub	sp, #16
	// Force reset stack pointer in case of overflow
	sp_reset = (void *)0x20005000;
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <MemManage_Handler+0x34>)
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <MemManage_Handler+0x38>)
 8002888:	601a      	str	r2, [r3, #0]
	asm volatile ("mov sp, %0" : "+r" (sp_reset));
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <MemManage_Handler+0x34>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	469d      	mov	sp, r3
 8002890:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <MemManage_Handler+0x34>)
 8002892:	6013      	str	r3, [r2, #0]

	char err[] = "Memory error";
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MemManage_Handler+0x3c>)
 8002896:	466c      	mov	r4, sp
 8002898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289a:	c407      	stmia	r4!, {r0, r1, r2}
 800289c:	7023      	strb	r3, [r4, #0]
	var_print(err);
 800289e:	466b      	mov	r3, sp
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fb9f 	bl	8001fe4 <var_print>
	mm_finish();
 80028a6:	f7ff fa8b 	bl	8001dc0 <mm_finish>
	loop();
 80028aa:	f7ff fb95 	bl	8001fd8 <loop>
}
 80028ae:	bf00      	nop
 80028b0:	b004      	add	sp, #16
 80028b2:	bd10      	pop	{r4, pc}
 80028b4:	2000005c 	.word	0x2000005c
 80028b8:	20005000 	.word	0x20005000
 80028bc:	08005210 	.word	0x08005210

080028c0 <memfault_init>:
	NVIC_EnableIRQ(WWDG_IRQn);
}
*/

// Initialize memory fault handler
void memfault_init(void) {
 80028c0:	b508      	push	{r3, lr}
	SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk; // Enable memfault, bit 16
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <memfault_init+0x1c>)
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <memfault_init+0x1c>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6253      	str	r3, [r2, #36]	; 0x24
	NVIC_SetPriority(MemoryManagement_IRQn, 0);
 80028ce:	2100      	movs	r1, #0
 80028d0:	f06f 000b 	mvn.w	r0, #11
 80028d4:	f7ff ff88 	bl	80027e8 <__NVIC_SetPriority>
}
 80028d8:	bf00      	nop
 80028da:	bd08      	pop	{r3, pc}
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <led_on>:

// Turn on LED
void led_on(led l) {
 80028e0:	b082      	sub	sp, #8
 80028e2:	4603      	mov	r3, r0
 80028e4:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR |= (1U<<l);
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <led_on+0x24>)
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	4903      	ldr	r1, [pc, #12]	; (8002904 <led_on+0x24>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	614b      	str	r3, [r1, #20]
}
 80028fc:	bf00      	nop
 80028fe:	b002      	add	sp, #8
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40020c00 	.word	0x40020c00

08002908 <led_off>:

// Turn off LED
void led_off(led l) {
 8002908:	b082      	sub	sp, #8
 800290a:	4603      	mov	r3, r0
 800290c:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR &= ~(1U<<l);
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <led_off+0x24>)
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002918:	2101      	movs	r1, #1
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	4902      	ldr	r1, [pc, #8]	; (800292c <led_off+0x24>)
 8002922:	4013      	ands	r3, r2
 8002924:	614b      	str	r3, [r1, #20]
}
 8002926:	bf00      	nop
 8002928:	b002      	add	sp, #8
 800292a:	4770      	bx	lr
 800292c:	40020c00 	.word	0x40020c00

08002930 <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOD clock
	RCC->AHB1ENR |= 0x00000008;
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <led_init+0x34>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <led_init+0x34>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6313      	str	r3, [r2, #48]	; 0x30

	// Turn on output mode
	GPIOD->MODER &= 0x00FFFFFF;
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <led_init+0x38>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a09      	ldr	r2, [pc, #36]	; (8002968 <led_init+0x38>)
 8002942:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002946:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0x55000000;
 8002948:	4b07      	ldr	r3, [pc, #28]	; (8002968 <led_init+0x38>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a06      	ldr	r2, [pc, #24]	; (8002968 <led_init+0x38>)
 800294e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8002952:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOD->ODR &= 0x0FFF;
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <led_init+0x38>)
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	4a03      	ldr	r2, [pc, #12]	; (8002968 <led_init+0x38>)
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	6153      	str	r3, [r2, #20]
}
 8002960:	bf00      	nop
 8002962:	4770      	bx	lr
 8002964:	40023800 	.word	0x40023800
 8002968:	40020c00 	.word	0x40020c00

0800296c <mcu_init>:

// Set up LED and fault handlers
void mcu_init(void) {
 800296c:	b508      	push	{r3, lr}
	//wwdg_init();
	memfault_init();
 800296e:	f7ff ffa7 	bl	80028c0 <memfault_init>
	led_init();
 8002972:	f7ff ffdd 	bl	8002930 <led_init>
	// Make SVC call priority 3
	NVIC_SetPriority(SVCall_IRQn, 3);
 8002976:	2103      	movs	r1, #3
 8002978:	f06f 0004 	mvn.w	r0, #4
 800297c:	f7ff ff34 	bl	80027e8 <__NVIC_SetPriority>
}
 8002980:	bf00      	nop
 8002982:	bd08      	pop	{r3, pc}

08002984 <SystemInit>:
*************************************************/
void SystemInit(void)
{
	/* FPU settings, can be enabled from project makefile */
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <SystemInit+0x50>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <SystemInit+0x50>)
 800298c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <SystemInit+0x54>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <SystemInit+0x54>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <SystemInit+0x54>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <SystemInit+0x54>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <SystemInit+0x54>)
 80029ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <SystemInit+0x54>)
 80029b8:	4a08      	ldr	r2, [pc, #32]	; (80029dc <SystemInit+0x58>)
 80029ba:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <SystemInit+0x54>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <SystemInit+0x54>)
 80029c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c6:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <SystemInit+0x54>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
}
 80029ce:	bf00      	nop
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	24003010 	.word	0x24003010

080029e0 <set_sysclk_to_100>:
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_100(void)
{
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 80029e0:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <set_sysclk_to_100+0xa8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a28      	ldr	r2, [pc, #160]	; (8002a88 <set_sysclk_to_100+0xa8>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 80029ec:	bf00      	nop
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <set_sysclk_to_100+0xa8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f9      	beq.n	80029ee <set_sysclk_to_100+0xe>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 80029fa:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <set_sysclk_to_100+0xa8>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 8002a06:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <set_sysclk_to_100+0xac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a20      	ldr	r2, [pc, #128]	; (8002a8c <set_sysclk_to_100+0xac>)
 8002a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a10:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a14:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a20:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002a24:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /1 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (0 << 13);
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a28:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a30:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <set_sysclk_to_100+0xb0>)
 8002a32:	605a      	str	r2, [r3, #4]
	               (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 8002a40:	bf00      	nop
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f9      	beq.n	8002a42 <set_sysclk_to_100+0x62>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <set_sysclk_to_100+0xb4>)
 8002a50:	f240 7205 	movw	r2, #1797	; 0x705
 8002a54:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a5c:	f023 0303 	bic.w	r3, r3, #3
 8002a60:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 8002a6e:	bf00      	nop
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <set_sysclk_to_100+0xa8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f9      	beq.n	8002a70 <set_sysclk_to_100+0x90>

	// update SystemCoreClock variable
	SystemCoreClock = 100000000;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <set_sysclk_to_100+0xb8>)
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <set_sysclk_to_100+0xbc>)
 8002a80:	601a      	str	r2, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	08416408 	.word	0x08416408
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	20000060 	.word	0x20000060
 8002a9c:	05f5e100 	.word	0x05f5e100

08002aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa4:	480d      	ldr	r0, [pc, #52]	; (8002adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aa6:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002aa8:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aac:	e002      	b.n	8002ab4 <LoopCopyDataInit>

08002aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab2:	3304      	adds	r3, #4

08002ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab8:	d3f9      	bcc.n	8002aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002abc:	4c0b      	ldr	r4, [pc, #44]	; (8002aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac0:	e001      	b.n	8002ac6 <LoopFillZerobss>

08002ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac4:	3204      	adds	r2, #4

08002ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac8:	d3fb      	bcc.n	8002ac2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aca:	f7ff ff5b 	bl	8002984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ace:	f000 f847 	bl	8002b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ad2:	f7fd fff1 	bl	8000ab8 <main>
  bx  lr    
 8002ad6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae0:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002ae4:	08005ac8 	.word	0x08005ac8
  ldr r2, =_sbss
 8002ae8:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002aec:	20000d1c 	.word	0x20000d1c

08002af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af0:	e7fe      	b.n	8002af0 <ADC_IRQHandler>
	...

08002af4 <__assert_func>:
 8002af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002af6:	4614      	mov	r4, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <__assert_func+0x2c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4605      	mov	r5, r0
 8002b00:	68d8      	ldr	r0, [r3, #12]
 8002b02:	b14c      	cbz	r4, 8002b18 <__assert_func+0x24>
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <__assert_func+0x30>)
 8002b06:	9100      	str	r1, [sp, #0]
 8002b08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b0c:	4906      	ldr	r1, [pc, #24]	; (8002b28 <__assert_func+0x34>)
 8002b0e:	462b      	mov	r3, r5
 8002b10:	f000 f814 	bl	8002b3c <fiprintf>
 8002b14:	f000 fdbe 	bl	8003694 <abort>
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <__assert_func+0x38>)
 8002b1a:	461c      	mov	r4, r3
 8002b1c:	e7f3      	b.n	8002b06 <__assert_func+0x12>
 8002b1e:	bf00      	nop
 8002b20:	20000064 	.word	0x20000064
 8002b24:	08005236 	.word	0x08005236
 8002b28:	08005243 	.word	0x08005243
 8002b2c:	08005271 	.word	0x08005271

08002b30 <__errno>:
 8002b30:	4b01      	ldr	r3, [pc, #4]	; (8002b38 <__errno+0x8>)
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000064 	.word	0x20000064

08002b3c <fiprintf>:
 8002b3c:	b40e      	push	{r1, r2, r3}
 8002b3e:	b503      	push	{r0, r1, lr}
 8002b40:	4601      	mov	r1, r0
 8002b42:	ab03      	add	r3, sp, #12
 8002b44:	4805      	ldr	r0, [pc, #20]	; (8002b5c <fiprintf+0x20>)
 8002b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b4a:	6800      	ldr	r0, [r0, #0]
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	f000 f8ff 	bl	8002d50 <_vfiprintf_r>
 8002b52:	b002      	add	sp, #8
 8002b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b58:	b003      	add	sp, #12
 8002b5a:	4770      	bx	lr
 8002b5c:	20000064 	.word	0x20000064

08002b60 <__libc_init_array>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4d0d      	ldr	r5, [pc, #52]	; (8002b98 <__libc_init_array+0x38>)
 8002b64:	4c0d      	ldr	r4, [pc, #52]	; (8002b9c <__libc_init_array+0x3c>)
 8002b66:	1b64      	subs	r4, r4, r5
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	42a6      	cmp	r6, r4
 8002b6e:	d109      	bne.n	8002b84 <__libc_init_array+0x24>
 8002b70:	4d0b      	ldr	r5, [pc, #44]	; (8002ba0 <__libc_init_array+0x40>)
 8002b72:	4c0c      	ldr	r4, [pc, #48]	; (8002ba4 <__libc_init_array+0x44>)
 8002b74:	f002 f8be 	bl	8004cf4 <_init>
 8002b78:	1b64      	subs	r4, r4, r5
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	42a6      	cmp	r6, r4
 8002b80:	d105      	bne.n	8002b8e <__libc_init_array+0x2e>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b88:	4798      	blx	r3
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	e7ee      	b.n	8002b6c <__libc_init_array+0xc>
 8002b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b92:	4798      	blx	r3
 8002b94:	3601      	adds	r6, #1
 8002b96:	e7f2      	b.n	8002b7e <__libc_init_array+0x1e>
 8002b98:	08005ac0 	.word	0x08005ac0
 8002b9c:	08005ac0 	.word	0x08005ac0
 8002ba0:	08005ac0 	.word	0x08005ac0
 8002ba4:	08005ac4 	.word	0x08005ac4

08002ba8 <memcpy>:
 8002ba8:	440a      	add	r2, r1
 8002baa:	4291      	cmp	r1, r2
 8002bac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002bb0:	d100      	bne.n	8002bb4 <memcpy+0xc>
 8002bb2:	4770      	bx	lr
 8002bb4:	b510      	push	{r4, lr}
 8002bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bbe:	4291      	cmp	r1, r2
 8002bc0:	d1f9      	bne.n	8002bb6 <memcpy+0xe>
 8002bc2:	bd10      	pop	{r4, pc}

08002bc4 <memset>:
 8002bc4:	4402      	add	r2, r0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d100      	bne.n	8002bce <memset+0xa>
 8002bcc:	4770      	bx	lr
 8002bce:	f803 1b01 	strb.w	r1, [r3], #1
 8002bd2:	e7f9      	b.n	8002bc8 <memset+0x4>

08002bd4 <sbrk_aligned>:
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	4e0e      	ldr	r6, [pc, #56]	; (8002c10 <sbrk_aligned+0x3c>)
 8002bd8:	460c      	mov	r4, r1
 8002bda:	6831      	ldr	r1, [r6, #0]
 8002bdc:	4605      	mov	r5, r0
 8002bde:	b911      	cbnz	r1, 8002be6 <sbrk_aligned+0x12>
 8002be0:	f000 f9e4 	bl	8002fac <_sbrk_r>
 8002be4:	6030      	str	r0, [r6, #0]
 8002be6:	4621      	mov	r1, r4
 8002be8:	4628      	mov	r0, r5
 8002bea:	f000 f9df 	bl	8002fac <_sbrk_r>
 8002bee:	1c43      	adds	r3, r0, #1
 8002bf0:	d00a      	beq.n	8002c08 <sbrk_aligned+0x34>
 8002bf2:	1cc4      	adds	r4, r0, #3
 8002bf4:	f024 0403 	bic.w	r4, r4, #3
 8002bf8:	42a0      	cmp	r0, r4
 8002bfa:	d007      	beq.n	8002c0c <sbrk_aligned+0x38>
 8002bfc:	1a21      	subs	r1, r4, r0
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f000 f9d4 	bl	8002fac <_sbrk_r>
 8002c04:	3001      	adds	r0, #1
 8002c06:	d101      	bne.n	8002c0c <sbrk_aligned+0x38>
 8002c08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
 8002c10:	20000d0c 	.word	0x20000d0c

08002c14 <_malloc_r>:
 8002c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c18:	1ccd      	adds	r5, r1, #3
 8002c1a:	f025 0503 	bic.w	r5, r5, #3
 8002c1e:	3508      	adds	r5, #8
 8002c20:	2d0c      	cmp	r5, #12
 8002c22:	bf38      	it	cc
 8002c24:	250c      	movcc	r5, #12
 8002c26:	2d00      	cmp	r5, #0
 8002c28:	4607      	mov	r7, r0
 8002c2a:	db01      	blt.n	8002c30 <_malloc_r+0x1c>
 8002c2c:	42a9      	cmp	r1, r5
 8002c2e:	d905      	bls.n	8002c3c <_malloc_r+0x28>
 8002c30:	230c      	movs	r3, #12
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	2600      	movs	r6, #0
 8002c36:	4630      	mov	r0, r6
 8002c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c3c:	4e2e      	ldr	r6, [pc, #184]	; (8002cf8 <_malloc_r+0xe4>)
 8002c3e:	f000 ff8d 	bl	8003b5c <__malloc_lock>
 8002c42:	6833      	ldr	r3, [r6, #0]
 8002c44:	461c      	mov	r4, r3
 8002c46:	bb34      	cbnz	r4, 8002c96 <_malloc_r+0x82>
 8002c48:	4629      	mov	r1, r5
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	f7ff ffc2 	bl	8002bd4 <sbrk_aligned>
 8002c50:	1c43      	adds	r3, r0, #1
 8002c52:	4604      	mov	r4, r0
 8002c54:	d14d      	bne.n	8002cf2 <_malloc_r+0xde>
 8002c56:	6834      	ldr	r4, [r6, #0]
 8002c58:	4626      	mov	r6, r4
 8002c5a:	2e00      	cmp	r6, #0
 8002c5c:	d140      	bne.n	8002ce0 <_malloc_r+0xcc>
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	4631      	mov	r1, r6
 8002c62:	4638      	mov	r0, r7
 8002c64:	eb04 0803 	add.w	r8, r4, r3
 8002c68:	f000 f9a0 	bl	8002fac <_sbrk_r>
 8002c6c:	4580      	cmp	r8, r0
 8002c6e:	d13a      	bne.n	8002ce6 <_malloc_r+0xd2>
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	3503      	adds	r5, #3
 8002c74:	1aed      	subs	r5, r5, r3
 8002c76:	f025 0503 	bic.w	r5, r5, #3
 8002c7a:	3508      	adds	r5, #8
 8002c7c:	2d0c      	cmp	r5, #12
 8002c7e:	bf38      	it	cc
 8002c80:	250c      	movcc	r5, #12
 8002c82:	4629      	mov	r1, r5
 8002c84:	4638      	mov	r0, r7
 8002c86:	f7ff ffa5 	bl	8002bd4 <sbrk_aligned>
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d02b      	beq.n	8002ce6 <_malloc_r+0xd2>
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	442b      	add	r3, r5
 8002c92:	6023      	str	r3, [r4, #0]
 8002c94:	e00e      	b.n	8002cb4 <_malloc_r+0xa0>
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	1b52      	subs	r2, r2, r5
 8002c9a:	d41e      	bmi.n	8002cda <_malloc_r+0xc6>
 8002c9c:	2a0b      	cmp	r2, #11
 8002c9e:	d916      	bls.n	8002cce <_malloc_r+0xba>
 8002ca0:	1961      	adds	r1, r4, r5
 8002ca2:	42a3      	cmp	r3, r4
 8002ca4:	6025      	str	r5, [r4, #0]
 8002ca6:	bf18      	it	ne
 8002ca8:	6059      	strne	r1, [r3, #4]
 8002caa:	6863      	ldr	r3, [r4, #4]
 8002cac:	bf08      	it	eq
 8002cae:	6031      	streq	r1, [r6, #0]
 8002cb0:	5162      	str	r2, [r4, r5]
 8002cb2:	604b      	str	r3, [r1, #4]
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	f104 060b 	add.w	r6, r4, #11
 8002cba:	f000 ff55 	bl	8003b68 <__malloc_unlock>
 8002cbe:	f026 0607 	bic.w	r6, r6, #7
 8002cc2:	1d23      	adds	r3, r4, #4
 8002cc4:	1af2      	subs	r2, r6, r3
 8002cc6:	d0b6      	beq.n	8002c36 <_malloc_r+0x22>
 8002cc8:	1b9b      	subs	r3, r3, r6
 8002cca:	50a3      	str	r3, [r4, r2]
 8002ccc:	e7b3      	b.n	8002c36 <_malloc_r+0x22>
 8002cce:	6862      	ldr	r2, [r4, #4]
 8002cd0:	42a3      	cmp	r3, r4
 8002cd2:	bf0c      	ite	eq
 8002cd4:	6032      	streq	r2, [r6, #0]
 8002cd6:	605a      	strne	r2, [r3, #4]
 8002cd8:	e7ec      	b.n	8002cb4 <_malloc_r+0xa0>
 8002cda:	4623      	mov	r3, r4
 8002cdc:	6864      	ldr	r4, [r4, #4]
 8002cde:	e7b2      	b.n	8002c46 <_malloc_r+0x32>
 8002ce0:	4634      	mov	r4, r6
 8002ce2:	6876      	ldr	r6, [r6, #4]
 8002ce4:	e7b9      	b.n	8002c5a <_malloc_r+0x46>
 8002ce6:	230c      	movs	r3, #12
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	4638      	mov	r0, r7
 8002cec:	f000 ff3c 	bl	8003b68 <__malloc_unlock>
 8002cf0:	e7a1      	b.n	8002c36 <_malloc_r+0x22>
 8002cf2:	6025      	str	r5, [r4, #0]
 8002cf4:	e7de      	b.n	8002cb4 <_malloc_r+0xa0>
 8002cf6:	bf00      	nop
 8002cf8:	20000d08 	.word	0x20000d08

08002cfc <__sfputc_r>:
 8002cfc:	6893      	ldr	r3, [r2, #8]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	b410      	push	{r4}
 8002d04:	6093      	str	r3, [r2, #8]
 8002d06:	da08      	bge.n	8002d1a <__sfputc_r+0x1e>
 8002d08:	6994      	ldr	r4, [r2, #24]
 8002d0a:	42a3      	cmp	r3, r4
 8002d0c:	db01      	blt.n	8002d12 <__sfputc_r+0x16>
 8002d0e:	290a      	cmp	r1, #10
 8002d10:	d103      	bne.n	8002d1a <__sfputc_r+0x1e>
 8002d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d16:	f000 bbeb 	b.w	80034f0 <__swbuf_r>
 8002d1a:	6813      	ldr	r3, [r2, #0]
 8002d1c:	1c58      	adds	r0, r3, #1
 8002d1e:	6010      	str	r0, [r2, #0]
 8002d20:	7019      	strb	r1, [r3, #0]
 8002d22:	4608      	mov	r0, r1
 8002d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <__sfputs_r>:
 8002d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2c:	4606      	mov	r6, r0
 8002d2e:	460f      	mov	r7, r1
 8002d30:	4614      	mov	r4, r2
 8002d32:	18d5      	adds	r5, r2, r3
 8002d34:	42ac      	cmp	r4, r5
 8002d36:	d101      	bne.n	8002d3c <__sfputs_r+0x12>
 8002d38:	2000      	movs	r0, #0
 8002d3a:	e007      	b.n	8002d4c <__sfputs_r+0x22>
 8002d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d40:	463a      	mov	r2, r7
 8002d42:	4630      	mov	r0, r6
 8002d44:	f7ff ffda 	bl	8002cfc <__sfputc_r>
 8002d48:	1c43      	adds	r3, r0, #1
 8002d4a:	d1f3      	bne.n	8002d34 <__sfputs_r+0xa>
 8002d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d50 <_vfiprintf_r>:
 8002d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d54:	460d      	mov	r5, r1
 8002d56:	b09d      	sub	sp, #116	; 0x74
 8002d58:	4614      	mov	r4, r2
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4606      	mov	r6, r0
 8002d5e:	b118      	cbz	r0, 8002d68 <_vfiprintf_r+0x18>
 8002d60:	6983      	ldr	r3, [r0, #24]
 8002d62:	b90b      	cbnz	r3, 8002d68 <_vfiprintf_r+0x18>
 8002d64:	f000 fdc8 	bl	80038f8 <__sinit>
 8002d68:	4b88      	ldr	r3, [pc, #544]	; (8002f8c <_vfiprintf_r+0x23c>)
 8002d6a:	429d      	cmp	r5, r3
 8002d6c:	d11b      	bne.n	8002da6 <_vfiprintf_r+0x56>
 8002d6e:	6875      	ldr	r5, [r6, #4]
 8002d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d72:	07d9      	lsls	r1, r3, #31
 8002d74:	d405      	bmi.n	8002d82 <_vfiprintf_r+0x32>
 8002d76:	89ab      	ldrh	r3, [r5, #12]
 8002d78:	059a      	lsls	r2, r3, #22
 8002d7a:	d402      	bmi.n	8002d82 <_vfiprintf_r+0x32>
 8002d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d7e:	f000 fe59 	bl	8003a34 <__retarget_lock_acquire_recursive>
 8002d82:	89ab      	ldrh	r3, [r5, #12]
 8002d84:	071b      	lsls	r3, r3, #28
 8002d86:	d501      	bpl.n	8002d8c <_vfiprintf_r+0x3c>
 8002d88:	692b      	ldr	r3, [r5, #16]
 8002d8a:	b9eb      	cbnz	r3, 8002dc8 <_vfiprintf_r+0x78>
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	4630      	mov	r0, r6
 8002d90:	f000 fc12 	bl	80035b8 <__swsetup_r>
 8002d94:	b1c0      	cbz	r0, 8002dc8 <_vfiprintf_r+0x78>
 8002d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d98:	07dc      	lsls	r4, r3, #31
 8002d9a:	d50e      	bpl.n	8002dba <_vfiprintf_r+0x6a>
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002da0:	b01d      	add	sp, #116	; 0x74
 8002da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002da6:	4b7a      	ldr	r3, [pc, #488]	; (8002f90 <_vfiprintf_r+0x240>)
 8002da8:	429d      	cmp	r5, r3
 8002daa:	d101      	bne.n	8002db0 <_vfiprintf_r+0x60>
 8002dac:	68b5      	ldr	r5, [r6, #8]
 8002dae:	e7df      	b.n	8002d70 <_vfiprintf_r+0x20>
 8002db0:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <_vfiprintf_r+0x244>)
 8002db2:	429d      	cmp	r5, r3
 8002db4:	bf08      	it	eq
 8002db6:	68f5      	ldreq	r5, [r6, #12]
 8002db8:	e7da      	b.n	8002d70 <_vfiprintf_r+0x20>
 8002dba:	89ab      	ldrh	r3, [r5, #12]
 8002dbc:	0598      	lsls	r0, r3, #22
 8002dbe:	d4ed      	bmi.n	8002d9c <_vfiprintf_r+0x4c>
 8002dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dc2:	f000 fe38 	bl	8003a36 <__retarget_lock_release_recursive>
 8002dc6:	e7e9      	b.n	8002d9c <_vfiprintf_r+0x4c>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9309      	str	r3, [sp, #36]	; 0x24
 8002dcc:	2320      	movs	r3, #32
 8002dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dd6:	2330      	movs	r3, #48	; 0x30
 8002dd8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002f98 <_vfiprintf_r+0x248>
 8002ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002de0:	f04f 0901 	mov.w	r9, #1
 8002de4:	4623      	mov	r3, r4
 8002de6:	469a      	mov	sl, r3
 8002de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dec:	b10a      	cbz	r2, 8002df2 <_vfiprintf_r+0xa2>
 8002dee:	2a25      	cmp	r2, #37	; 0x25
 8002df0:	d1f9      	bne.n	8002de6 <_vfiprintf_r+0x96>
 8002df2:	ebba 0b04 	subs.w	fp, sl, r4
 8002df6:	d00b      	beq.n	8002e10 <_vfiprintf_r+0xc0>
 8002df8:	465b      	mov	r3, fp
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f7ff ff93 	bl	8002d2a <__sfputs_r>
 8002e04:	3001      	adds	r0, #1
 8002e06:	f000 80a9 	beq.w	8002f5c <_vfiprintf_r+0x20c>
 8002e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e0c:	445a      	add	r2, fp
 8002e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8002e10:	f89a 3000 	ldrb.w	r3, [sl]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a1 	beq.w	8002f5c <_vfiprintf_r+0x20c>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e24:	f10a 0a01 	add.w	sl, sl, #1
 8002e28:	9304      	str	r3, [sp, #16]
 8002e2a:	9307      	str	r3, [sp, #28]
 8002e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e30:	931a      	str	r3, [sp, #104]	; 0x68
 8002e32:	4654      	mov	r4, sl
 8002e34:	2205      	movs	r2, #5
 8002e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e3a:	4857      	ldr	r0, [pc, #348]	; (8002f98 <_vfiprintf_r+0x248>)
 8002e3c:	f7fd f9b8 	bl	80001b0 <memchr>
 8002e40:	9a04      	ldr	r2, [sp, #16]
 8002e42:	b9d8      	cbnz	r0, 8002e7c <_vfiprintf_r+0x12c>
 8002e44:	06d1      	lsls	r1, r2, #27
 8002e46:	bf44      	itt	mi
 8002e48:	2320      	movmi	r3, #32
 8002e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e4e:	0713      	lsls	r3, r2, #28
 8002e50:	bf44      	itt	mi
 8002e52:	232b      	movmi	r3, #43	; 0x2b
 8002e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e58:	f89a 3000 	ldrb.w	r3, [sl]
 8002e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e5e:	d015      	beq.n	8002e8c <_vfiprintf_r+0x13c>
 8002e60:	9a07      	ldr	r2, [sp, #28]
 8002e62:	4654      	mov	r4, sl
 8002e64:	2000      	movs	r0, #0
 8002e66:	f04f 0c0a 	mov.w	ip, #10
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e70:	3b30      	subs	r3, #48	; 0x30
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	d94d      	bls.n	8002f12 <_vfiprintf_r+0x1c2>
 8002e76:	b1b0      	cbz	r0, 8002ea6 <_vfiprintf_r+0x156>
 8002e78:	9207      	str	r2, [sp, #28]
 8002e7a:	e014      	b.n	8002ea6 <_vfiprintf_r+0x156>
 8002e7c:	eba0 0308 	sub.w	r3, r0, r8
 8002e80:	fa09 f303 	lsl.w	r3, r9, r3
 8002e84:	4313      	orrs	r3, r2
 8002e86:	9304      	str	r3, [sp, #16]
 8002e88:	46a2      	mov	sl, r4
 8002e8a:	e7d2      	b.n	8002e32 <_vfiprintf_r+0xe2>
 8002e8c:	9b03      	ldr	r3, [sp, #12]
 8002e8e:	1d19      	adds	r1, r3, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	9103      	str	r1, [sp, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bfbb      	ittet	lt
 8002e98:	425b      	neglt	r3, r3
 8002e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8002e9e:	9307      	strge	r3, [sp, #28]
 8002ea0:	9307      	strlt	r3, [sp, #28]
 8002ea2:	bfb8      	it	lt
 8002ea4:	9204      	strlt	r2, [sp, #16]
 8002ea6:	7823      	ldrb	r3, [r4, #0]
 8002ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eaa:	d10c      	bne.n	8002ec6 <_vfiprintf_r+0x176>
 8002eac:	7863      	ldrb	r3, [r4, #1]
 8002eae:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb0:	d134      	bne.n	8002f1c <_vfiprintf_r+0x1cc>
 8002eb2:	9b03      	ldr	r3, [sp, #12]
 8002eb4:	1d1a      	adds	r2, r3, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	9203      	str	r2, [sp, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bfb8      	it	lt
 8002ebe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ec2:	3402      	adds	r4, #2
 8002ec4:	9305      	str	r3, [sp, #20]
 8002ec6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8002fa8 <_vfiprintf_r+0x258>
 8002eca:	7821      	ldrb	r1, [r4, #0]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	4650      	mov	r0, sl
 8002ed0:	f7fd f96e 	bl	80001b0 <memchr>
 8002ed4:	b138      	cbz	r0, 8002ee6 <_vfiprintf_r+0x196>
 8002ed6:	9b04      	ldr	r3, [sp, #16]
 8002ed8:	eba0 000a 	sub.w	r0, r0, sl
 8002edc:	2240      	movs	r2, #64	; 0x40
 8002ede:	4082      	lsls	r2, r0
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	3401      	adds	r4, #1
 8002ee4:	9304      	str	r3, [sp, #16]
 8002ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eea:	482c      	ldr	r0, [pc, #176]	; (8002f9c <_vfiprintf_r+0x24c>)
 8002eec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ef0:	2206      	movs	r2, #6
 8002ef2:	f7fd f95d 	bl	80001b0 <memchr>
 8002ef6:	2800      	cmp	r0, #0
 8002ef8:	d03f      	beq.n	8002f7a <_vfiprintf_r+0x22a>
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <_vfiprintf_r+0x250>)
 8002efc:	bb1b      	cbnz	r3, 8002f46 <_vfiprintf_r+0x1f6>
 8002efe:	9b03      	ldr	r3, [sp, #12]
 8002f00:	3307      	adds	r3, #7
 8002f02:	f023 0307 	bic.w	r3, r3, #7
 8002f06:	3308      	adds	r3, #8
 8002f08:	9303      	str	r3, [sp, #12]
 8002f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f0c:	443b      	add	r3, r7
 8002f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f10:	e768      	b.n	8002de4 <_vfiprintf_r+0x94>
 8002f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f16:	460c      	mov	r4, r1
 8002f18:	2001      	movs	r0, #1
 8002f1a:	e7a6      	b.n	8002e6a <_vfiprintf_r+0x11a>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	3401      	adds	r4, #1
 8002f20:	9305      	str	r3, [sp, #20]
 8002f22:	4619      	mov	r1, r3
 8002f24:	f04f 0c0a 	mov.w	ip, #10
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f2e:	3a30      	subs	r2, #48	; 0x30
 8002f30:	2a09      	cmp	r2, #9
 8002f32:	d903      	bls.n	8002f3c <_vfiprintf_r+0x1ec>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0c6      	beq.n	8002ec6 <_vfiprintf_r+0x176>
 8002f38:	9105      	str	r1, [sp, #20]
 8002f3a:	e7c4      	b.n	8002ec6 <_vfiprintf_r+0x176>
 8002f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f40:	4604      	mov	r4, r0
 8002f42:	2301      	movs	r3, #1
 8002f44:	e7f0      	b.n	8002f28 <_vfiprintf_r+0x1d8>
 8002f46:	ab03      	add	r3, sp, #12
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	462a      	mov	r2, r5
 8002f4c:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <_vfiprintf_r+0x254>)
 8002f4e:	a904      	add	r1, sp, #16
 8002f50:	4630      	mov	r0, r6
 8002f52:	f3af 8000 	nop.w
 8002f56:	4607      	mov	r7, r0
 8002f58:	1c78      	adds	r0, r7, #1
 8002f5a:	d1d6      	bne.n	8002f0a <_vfiprintf_r+0x1ba>
 8002f5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f5e:	07d9      	lsls	r1, r3, #31
 8002f60:	d405      	bmi.n	8002f6e <_vfiprintf_r+0x21e>
 8002f62:	89ab      	ldrh	r3, [r5, #12]
 8002f64:	059a      	lsls	r2, r3, #22
 8002f66:	d402      	bmi.n	8002f6e <_vfiprintf_r+0x21e>
 8002f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f6a:	f000 fd64 	bl	8003a36 <__retarget_lock_release_recursive>
 8002f6e:	89ab      	ldrh	r3, [r5, #12]
 8002f70:	065b      	lsls	r3, r3, #25
 8002f72:	f53f af13 	bmi.w	8002d9c <_vfiprintf_r+0x4c>
 8002f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f78:	e712      	b.n	8002da0 <_vfiprintf_r+0x50>
 8002f7a:	ab03      	add	r3, sp, #12
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	462a      	mov	r2, r5
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <_vfiprintf_r+0x254>)
 8002f82:	a904      	add	r1, sp, #16
 8002f84:	4630      	mov	r0, r6
 8002f86:	f001 fa09 	bl	800439c <_printf_i>
 8002f8a:	e7e4      	b.n	8002f56 <_vfiprintf_r+0x206>
 8002f8c:	08005940 	.word	0x08005940
 8002f90:	08005960 	.word	0x08005960
 8002f94:	08005920 	.word	0x08005920
 8002f98:	08005278 	.word	0x08005278
 8002f9c:	08005282 	.word	0x08005282
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	08002d2b 	.word	0x08002d2b
 8002fa8:	0800527e 	.word	0x0800527e

08002fac <_sbrk_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4d06      	ldr	r5, [pc, #24]	; (8002fc8 <_sbrk_r+0x1c>)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	602b      	str	r3, [r5, #0]
 8002fb8:	f001 fe84 	bl	8004cc4 <_sbrk>
 8002fbc:	1c43      	adds	r3, r0, #1
 8002fbe:	d102      	bne.n	8002fc6 <_sbrk_r+0x1a>
 8002fc0:	682b      	ldr	r3, [r5, #0]
 8002fc2:	b103      	cbz	r3, 8002fc6 <_sbrk_r+0x1a>
 8002fc4:	6023      	str	r3, [r4, #0]
 8002fc6:	bd38      	pop	{r3, r4, r5, pc}
 8002fc8:	20000d14 	.word	0x20000d14

08002fcc <siprintf>:
 8002fcc:	b40e      	push	{r1, r2, r3}
 8002fce:	b500      	push	{lr}
 8002fd0:	b09c      	sub	sp, #112	; 0x70
 8002fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8002fd4:	9002      	str	r0, [sp, #8]
 8002fd6:	9006      	str	r0, [sp, #24]
 8002fd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fdc:	4809      	ldr	r0, [pc, #36]	; (8003004 <siprintf+0x38>)
 8002fde:	9107      	str	r1, [sp, #28]
 8002fe0:	9104      	str	r1, [sp, #16]
 8002fe2:	4909      	ldr	r1, [pc, #36]	; (8003008 <siprintf+0x3c>)
 8002fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fe8:	9105      	str	r1, [sp, #20]
 8002fea:	6800      	ldr	r0, [r0, #0]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	a902      	add	r1, sp, #8
 8002ff0:	f000 fe96 	bl	8003d20 <_svfiprintf_r>
 8002ff4:	9b02      	ldr	r3, [sp, #8]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	b01c      	add	sp, #112	; 0x70
 8002ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003000:	b003      	add	sp, #12
 8003002:	4770      	bx	lr
 8003004:	20000064 	.word	0x20000064
 8003008:	ffff0208 	.word	0xffff0208

0800300c <siscanf>:
 800300c:	b40e      	push	{r1, r2, r3}
 800300e:	b510      	push	{r4, lr}
 8003010:	b09f      	sub	sp, #124	; 0x7c
 8003012:	ac21      	add	r4, sp, #132	; 0x84
 8003014:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003018:	f854 2b04 	ldr.w	r2, [r4], #4
 800301c:	9201      	str	r2, [sp, #4]
 800301e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003022:	9004      	str	r0, [sp, #16]
 8003024:	9008      	str	r0, [sp, #32]
 8003026:	f7fd f8bb 	bl	80001a0 <strlen>
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <siscanf+0x50>)
 800302c:	9005      	str	r0, [sp, #20]
 800302e:	9009      	str	r0, [sp, #36]	; 0x24
 8003030:	930d      	str	r3, [sp, #52]	; 0x34
 8003032:	480b      	ldr	r0, [pc, #44]	; (8003060 <siscanf+0x54>)
 8003034:	9a01      	ldr	r2, [sp, #4]
 8003036:	6800      	ldr	r0, [r0, #0]
 8003038:	9403      	str	r4, [sp, #12]
 800303a:	2300      	movs	r3, #0
 800303c:	9311      	str	r3, [sp, #68]	; 0x44
 800303e:	9316      	str	r3, [sp, #88]	; 0x58
 8003040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003044:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003048:	a904      	add	r1, sp, #16
 800304a:	4623      	mov	r3, r4
 800304c:	f000 ffc0 	bl	8003fd0 <__ssvfiscanf_r>
 8003050:	b01f      	add	sp, #124	; 0x7c
 8003052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003056:	b003      	add	sp, #12
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	08003087 	.word	0x08003087
 8003060:	20000064 	.word	0x20000064

08003064 <__sread>:
 8003064:	b510      	push	{r4, lr}
 8003066:	460c      	mov	r4, r1
 8003068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800306c:	f001 fc06 	bl	800487c <_read_r>
 8003070:	2800      	cmp	r0, #0
 8003072:	bfab      	itete	ge
 8003074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003076:	89a3      	ldrhlt	r3, [r4, #12]
 8003078:	181b      	addge	r3, r3, r0
 800307a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800307e:	bfac      	ite	ge
 8003080:	6563      	strge	r3, [r4, #84]	; 0x54
 8003082:	81a3      	strhlt	r3, [r4, #12]
 8003084:	bd10      	pop	{r4, pc}

08003086 <__seofread>:
 8003086:	2000      	movs	r0, #0
 8003088:	4770      	bx	lr

0800308a <__swrite>:
 800308a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800308e:	461f      	mov	r7, r3
 8003090:	898b      	ldrh	r3, [r1, #12]
 8003092:	05db      	lsls	r3, r3, #23
 8003094:	4605      	mov	r5, r0
 8003096:	460c      	mov	r4, r1
 8003098:	4616      	mov	r6, r2
 800309a:	d505      	bpl.n	80030a8 <__swrite+0x1e>
 800309c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a0:	2302      	movs	r3, #2
 80030a2:	2200      	movs	r2, #0
 80030a4:	f000 fcc8 	bl	8003a38 <_lseek_r>
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030b2:	81a3      	strh	r3, [r4, #12]
 80030b4:	4632      	mov	r2, r6
 80030b6:	463b      	mov	r3, r7
 80030b8:	4628      	mov	r0, r5
 80030ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030be:	f000 ba69 	b.w	8003594 <_write_r>

080030c2 <__sseek>:
 80030c2:	b510      	push	{r4, lr}
 80030c4:	460c      	mov	r4, r1
 80030c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ca:	f000 fcb5 	bl	8003a38 <_lseek_r>
 80030ce:	1c43      	adds	r3, r0, #1
 80030d0:	89a3      	ldrh	r3, [r4, #12]
 80030d2:	bf15      	itete	ne
 80030d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80030d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030de:	81a3      	strheq	r3, [r4, #12]
 80030e0:	bf18      	it	ne
 80030e2:	81a3      	strhne	r3, [r4, #12]
 80030e4:	bd10      	pop	{r4, pc}

080030e6 <__sclose>:
 80030e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ea:	f000 badb 	b.w	80036a4 <_close_r>

080030ee <strcat>:
 80030ee:	b510      	push	{r4, lr}
 80030f0:	4602      	mov	r2, r0
 80030f2:	7814      	ldrb	r4, [r2, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	3201      	adds	r2, #1
 80030f8:	2c00      	cmp	r4, #0
 80030fa:	d1fa      	bne.n	80030f2 <strcat+0x4>
 80030fc:	3b01      	subs	r3, #1
 80030fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003102:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003106:	2a00      	cmp	r2, #0
 8003108:	d1f9      	bne.n	80030fe <strcat+0x10>
 800310a:	bd10      	pop	{r4, pc}

0800310c <_strerror_r>:
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
 8003110:	4608      	mov	r0, r1
 8003112:	4611      	mov	r1, r2
 8003114:	288e      	cmp	r0, #142	; 0x8e
 8003116:	f200 8130 	bhi.w	800337a <_strerror_r+0x26e>
 800311a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800311e:	0139      	.short	0x0139
 8003120:	0092008f 	.word	0x0092008f
 8003124:	00960094 	.word	0x00960094
 8003128:	009a0098 	.word	0x009a0098
 800312c:	009e009c 	.word	0x009e009c
 8003130:	00a400a2 	.word	0x00a400a2
 8003134:	00aa00a8 	.word	0x00aa00a8
 8003138:	00ae00ac 	.word	0x00ae00ac
 800313c:	00b0012e 	.word	0x00b0012e
 8003140:	00b400b2 	.word	0x00b400b2
 8003144:	00b800b6 	.word	0x00b800b6
 8003148:	00c000be 	.word	0x00c000be
 800314c:	00c800c6 	.word	0x00c800c6
 8003150:	00cc00ca 	.word	0x00cc00ca
 8003154:	00d200ce 	.word	0x00d200ce
 8003158:	00d800d6 	.word	0x00d800d6
 800315c:	00dc00da 	.word	0x00dc00da
 8003160:	00e000de 	.word	0x00e000de
 8003164:	00e400e2 	.word	0x00e400e2
 8003168:	012e012e 	.word	0x012e012e
 800316c:	012e012e 	.word	0x012e012e
 8003170:	012e012e 	.word	0x012e012e
 8003174:	012e012e 	.word	0x012e012e
 8003178:	00ec00e8 	.word	0x00ec00e8
 800317c:	012e012e 	.word	0x012e012e
 8003180:	012e012e 	.word	0x012e012e
 8003184:	012e012e 	.word	0x012e012e
 8003188:	012e012e 	.word	0x012e012e
 800318c:	012e012e 	.word	0x012e012e
 8003190:	012e012e 	.word	0x012e012e
 8003194:	00ee012e 	.word	0x00ee012e
 8003198:	00f00108 	.word	0x00f00108
 800319c:	012e00f2 	.word	0x012e00f2
 80031a0:	012e012e 	.word	0x012e012e
 80031a4:	012e00f4 	.word	0x012e00f4
 80031a8:	012e012e 	.word	0x012e012e
 80031ac:	012e00f6 	.word	0x012e00f6
 80031b0:	00fa012e 	.word	0x00fa012e
 80031b4:	012e012e 	.word	0x012e012e
 80031b8:	012e00fc 	.word	0x012e00fc
 80031bc:	012e012e 	.word	0x012e012e
 80031c0:	012e012e 	.word	0x012e012e
 80031c4:	012e012e 	.word	0x012e012e
 80031c8:	012e012e 	.word	0x012e012e
 80031cc:	00fe012e 	.word	0x00fe012e
 80031d0:	0100012e 	.word	0x0100012e
 80031d4:	01040102 	.word	0x01040102
 80031d8:	012e012e 	.word	0x012e012e
 80031dc:	012e0126 	.word	0x012e0126
 80031e0:	012e012e 	.word	0x012e012e
 80031e4:	012e012e 	.word	0x012e012e
 80031e8:	012e012e 	.word	0x012e012e
 80031ec:	0114012e 	.word	0x0114012e
 80031f0:	010a0106 	.word	0x010a0106
 80031f4:	010e010c 	.word	0x010e010c
 80031f8:	012e0110 	.word	0x012e0110
 80031fc:	01160112 	.word	0x01160112
 8003200:	00ea011a 	.word	0x00ea011a
 8003204:	012c00c2 	.word	0x012c00c2
 8003208:	00d000ba 	.word	0x00d000ba
 800320c:	00a000bc 	.word	0x00a000bc
 8003210:	012a00a6 	.word	0x012a00a6
 8003214:	012e00f8 	.word	0x012e00f8
 8003218:	00c40118 	.word	0x00c40118
 800321c:	011c011e 	.word	0x011c011e
 8003220:	012e012e 	.word	0x012e012e
 8003224:	012e012e 	.word	0x012e012e
 8003228:	00d4012e 	.word	0x00d4012e
 800322c:	012e012e 	.word	0x012e012e
 8003230:	00e6012e 	.word	0x00e6012e
 8003234:	01200128 	.word	0x01200128
 8003238:	01240122 	.word	0x01240122
 800323c:	4b55      	ldr	r3, [pc, #340]	; (8003394 <_strerror_r+0x288>)
 800323e:	4618      	mov	r0, r3
 8003240:	bd10      	pop	{r4, pc}
 8003242:	4b55      	ldr	r3, [pc, #340]	; (8003398 <_strerror_r+0x28c>)
 8003244:	e7fb      	b.n	800323e <_strerror_r+0x132>
 8003246:	4b55      	ldr	r3, [pc, #340]	; (800339c <_strerror_r+0x290>)
 8003248:	e7f9      	b.n	800323e <_strerror_r+0x132>
 800324a:	4b55      	ldr	r3, [pc, #340]	; (80033a0 <_strerror_r+0x294>)
 800324c:	e7f7      	b.n	800323e <_strerror_r+0x132>
 800324e:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <_strerror_r+0x298>)
 8003250:	e7f5      	b.n	800323e <_strerror_r+0x132>
 8003252:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <_strerror_r+0x29c>)
 8003254:	e7f3      	b.n	800323e <_strerror_r+0x132>
 8003256:	4b55      	ldr	r3, [pc, #340]	; (80033ac <_strerror_r+0x2a0>)
 8003258:	e7f1      	b.n	800323e <_strerror_r+0x132>
 800325a:	4b55      	ldr	r3, [pc, #340]	; (80033b0 <_strerror_r+0x2a4>)
 800325c:	e7ef      	b.n	800323e <_strerror_r+0x132>
 800325e:	4b55      	ldr	r3, [pc, #340]	; (80033b4 <_strerror_r+0x2a8>)
 8003260:	e7ed      	b.n	800323e <_strerror_r+0x132>
 8003262:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <_strerror_r+0x2ac>)
 8003264:	e7eb      	b.n	800323e <_strerror_r+0x132>
 8003266:	4b55      	ldr	r3, [pc, #340]	; (80033bc <_strerror_r+0x2b0>)
 8003268:	e7e9      	b.n	800323e <_strerror_r+0x132>
 800326a:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <_strerror_r+0x2b4>)
 800326c:	e7e7      	b.n	800323e <_strerror_r+0x132>
 800326e:	4b55      	ldr	r3, [pc, #340]	; (80033c4 <_strerror_r+0x2b8>)
 8003270:	e7e5      	b.n	800323e <_strerror_r+0x132>
 8003272:	4b55      	ldr	r3, [pc, #340]	; (80033c8 <_strerror_r+0x2bc>)
 8003274:	e7e3      	b.n	800323e <_strerror_r+0x132>
 8003276:	4b55      	ldr	r3, [pc, #340]	; (80033cc <_strerror_r+0x2c0>)
 8003278:	e7e1      	b.n	800323e <_strerror_r+0x132>
 800327a:	4b55      	ldr	r3, [pc, #340]	; (80033d0 <_strerror_r+0x2c4>)
 800327c:	e7df      	b.n	800323e <_strerror_r+0x132>
 800327e:	4b55      	ldr	r3, [pc, #340]	; (80033d4 <_strerror_r+0x2c8>)
 8003280:	e7dd      	b.n	800323e <_strerror_r+0x132>
 8003282:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <_strerror_r+0x2cc>)
 8003284:	e7db      	b.n	800323e <_strerror_r+0x132>
 8003286:	4b55      	ldr	r3, [pc, #340]	; (80033dc <_strerror_r+0x2d0>)
 8003288:	e7d9      	b.n	800323e <_strerror_r+0x132>
 800328a:	4b55      	ldr	r3, [pc, #340]	; (80033e0 <_strerror_r+0x2d4>)
 800328c:	e7d7      	b.n	800323e <_strerror_r+0x132>
 800328e:	4b55      	ldr	r3, [pc, #340]	; (80033e4 <_strerror_r+0x2d8>)
 8003290:	e7d5      	b.n	800323e <_strerror_r+0x132>
 8003292:	4b55      	ldr	r3, [pc, #340]	; (80033e8 <_strerror_r+0x2dc>)
 8003294:	e7d3      	b.n	800323e <_strerror_r+0x132>
 8003296:	4b55      	ldr	r3, [pc, #340]	; (80033ec <_strerror_r+0x2e0>)
 8003298:	e7d1      	b.n	800323e <_strerror_r+0x132>
 800329a:	4b55      	ldr	r3, [pc, #340]	; (80033f0 <_strerror_r+0x2e4>)
 800329c:	e7cf      	b.n	800323e <_strerror_r+0x132>
 800329e:	4b55      	ldr	r3, [pc, #340]	; (80033f4 <_strerror_r+0x2e8>)
 80032a0:	e7cd      	b.n	800323e <_strerror_r+0x132>
 80032a2:	4b55      	ldr	r3, [pc, #340]	; (80033f8 <_strerror_r+0x2ec>)
 80032a4:	e7cb      	b.n	800323e <_strerror_r+0x132>
 80032a6:	4b55      	ldr	r3, [pc, #340]	; (80033fc <_strerror_r+0x2f0>)
 80032a8:	e7c9      	b.n	800323e <_strerror_r+0x132>
 80032aa:	4b55      	ldr	r3, [pc, #340]	; (8003400 <_strerror_r+0x2f4>)
 80032ac:	e7c7      	b.n	800323e <_strerror_r+0x132>
 80032ae:	4b55      	ldr	r3, [pc, #340]	; (8003404 <_strerror_r+0x2f8>)
 80032b0:	e7c5      	b.n	800323e <_strerror_r+0x132>
 80032b2:	4b55      	ldr	r3, [pc, #340]	; (8003408 <_strerror_r+0x2fc>)
 80032b4:	e7c3      	b.n	800323e <_strerror_r+0x132>
 80032b6:	4b55      	ldr	r3, [pc, #340]	; (800340c <_strerror_r+0x300>)
 80032b8:	e7c1      	b.n	800323e <_strerror_r+0x132>
 80032ba:	4b55      	ldr	r3, [pc, #340]	; (8003410 <_strerror_r+0x304>)
 80032bc:	e7bf      	b.n	800323e <_strerror_r+0x132>
 80032be:	4b55      	ldr	r3, [pc, #340]	; (8003414 <_strerror_r+0x308>)
 80032c0:	e7bd      	b.n	800323e <_strerror_r+0x132>
 80032c2:	4b55      	ldr	r3, [pc, #340]	; (8003418 <_strerror_r+0x30c>)
 80032c4:	e7bb      	b.n	800323e <_strerror_r+0x132>
 80032c6:	4b55      	ldr	r3, [pc, #340]	; (800341c <_strerror_r+0x310>)
 80032c8:	e7b9      	b.n	800323e <_strerror_r+0x132>
 80032ca:	4b55      	ldr	r3, [pc, #340]	; (8003420 <_strerror_r+0x314>)
 80032cc:	e7b7      	b.n	800323e <_strerror_r+0x132>
 80032ce:	4b55      	ldr	r3, [pc, #340]	; (8003424 <_strerror_r+0x318>)
 80032d0:	e7b5      	b.n	800323e <_strerror_r+0x132>
 80032d2:	4b55      	ldr	r3, [pc, #340]	; (8003428 <_strerror_r+0x31c>)
 80032d4:	e7b3      	b.n	800323e <_strerror_r+0x132>
 80032d6:	4b55      	ldr	r3, [pc, #340]	; (800342c <_strerror_r+0x320>)
 80032d8:	e7b1      	b.n	800323e <_strerror_r+0x132>
 80032da:	4b55      	ldr	r3, [pc, #340]	; (8003430 <_strerror_r+0x324>)
 80032dc:	e7af      	b.n	800323e <_strerror_r+0x132>
 80032de:	4b55      	ldr	r3, [pc, #340]	; (8003434 <_strerror_r+0x328>)
 80032e0:	e7ad      	b.n	800323e <_strerror_r+0x132>
 80032e2:	4b55      	ldr	r3, [pc, #340]	; (8003438 <_strerror_r+0x32c>)
 80032e4:	e7ab      	b.n	800323e <_strerror_r+0x132>
 80032e6:	4b55      	ldr	r3, [pc, #340]	; (800343c <_strerror_r+0x330>)
 80032e8:	e7a9      	b.n	800323e <_strerror_r+0x132>
 80032ea:	4b55      	ldr	r3, [pc, #340]	; (8003440 <_strerror_r+0x334>)
 80032ec:	e7a7      	b.n	800323e <_strerror_r+0x132>
 80032ee:	4b55      	ldr	r3, [pc, #340]	; (8003444 <_strerror_r+0x338>)
 80032f0:	e7a5      	b.n	800323e <_strerror_r+0x132>
 80032f2:	4b55      	ldr	r3, [pc, #340]	; (8003448 <_strerror_r+0x33c>)
 80032f4:	e7a3      	b.n	800323e <_strerror_r+0x132>
 80032f6:	4b55      	ldr	r3, [pc, #340]	; (800344c <_strerror_r+0x340>)
 80032f8:	e7a1      	b.n	800323e <_strerror_r+0x132>
 80032fa:	4b55      	ldr	r3, [pc, #340]	; (8003450 <_strerror_r+0x344>)
 80032fc:	e79f      	b.n	800323e <_strerror_r+0x132>
 80032fe:	4b55      	ldr	r3, [pc, #340]	; (8003454 <_strerror_r+0x348>)
 8003300:	e79d      	b.n	800323e <_strerror_r+0x132>
 8003302:	4b55      	ldr	r3, [pc, #340]	; (8003458 <_strerror_r+0x34c>)
 8003304:	e79b      	b.n	800323e <_strerror_r+0x132>
 8003306:	4b55      	ldr	r3, [pc, #340]	; (800345c <_strerror_r+0x350>)
 8003308:	e799      	b.n	800323e <_strerror_r+0x132>
 800330a:	4b55      	ldr	r3, [pc, #340]	; (8003460 <_strerror_r+0x354>)
 800330c:	e797      	b.n	800323e <_strerror_r+0x132>
 800330e:	4b55      	ldr	r3, [pc, #340]	; (8003464 <_strerror_r+0x358>)
 8003310:	e795      	b.n	800323e <_strerror_r+0x132>
 8003312:	4b55      	ldr	r3, [pc, #340]	; (8003468 <_strerror_r+0x35c>)
 8003314:	e793      	b.n	800323e <_strerror_r+0x132>
 8003316:	4b55      	ldr	r3, [pc, #340]	; (800346c <_strerror_r+0x360>)
 8003318:	e791      	b.n	800323e <_strerror_r+0x132>
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <_strerror_r+0x364>)
 800331c:	e78f      	b.n	800323e <_strerror_r+0x132>
 800331e:	4b55      	ldr	r3, [pc, #340]	; (8003474 <_strerror_r+0x368>)
 8003320:	e78d      	b.n	800323e <_strerror_r+0x132>
 8003322:	4b55      	ldr	r3, [pc, #340]	; (8003478 <_strerror_r+0x36c>)
 8003324:	e78b      	b.n	800323e <_strerror_r+0x132>
 8003326:	4b55      	ldr	r3, [pc, #340]	; (800347c <_strerror_r+0x370>)
 8003328:	e789      	b.n	800323e <_strerror_r+0x132>
 800332a:	4b55      	ldr	r3, [pc, #340]	; (8003480 <_strerror_r+0x374>)
 800332c:	e787      	b.n	800323e <_strerror_r+0x132>
 800332e:	4b55      	ldr	r3, [pc, #340]	; (8003484 <_strerror_r+0x378>)
 8003330:	e785      	b.n	800323e <_strerror_r+0x132>
 8003332:	4b55      	ldr	r3, [pc, #340]	; (8003488 <_strerror_r+0x37c>)
 8003334:	e783      	b.n	800323e <_strerror_r+0x132>
 8003336:	4b55      	ldr	r3, [pc, #340]	; (800348c <_strerror_r+0x380>)
 8003338:	e781      	b.n	800323e <_strerror_r+0x132>
 800333a:	4b55      	ldr	r3, [pc, #340]	; (8003490 <_strerror_r+0x384>)
 800333c:	e77f      	b.n	800323e <_strerror_r+0x132>
 800333e:	4b55      	ldr	r3, [pc, #340]	; (8003494 <_strerror_r+0x388>)
 8003340:	e77d      	b.n	800323e <_strerror_r+0x132>
 8003342:	4b55      	ldr	r3, [pc, #340]	; (8003498 <_strerror_r+0x38c>)
 8003344:	e77b      	b.n	800323e <_strerror_r+0x132>
 8003346:	4b55      	ldr	r3, [pc, #340]	; (800349c <_strerror_r+0x390>)
 8003348:	e779      	b.n	800323e <_strerror_r+0x132>
 800334a:	4b55      	ldr	r3, [pc, #340]	; (80034a0 <_strerror_r+0x394>)
 800334c:	e777      	b.n	800323e <_strerror_r+0x132>
 800334e:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <_strerror_r+0x398>)
 8003350:	e775      	b.n	800323e <_strerror_r+0x132>
 8003352:	4b55      	ldr	r3, [pc, #340]	; (80034a8 <_strerror_r+0x39c>)
 8003354:	e773      	b.n	800323e <_strerror_r+0x132>
 8003356:	4b55      	ldr	r3, [pc, #340]	; (80034ac <_strerror_r+0x3a0>)
 8003358:	e771      	b.n	800323e <_strerror_r+0x132>
 800335a:	4b55      	ldr	r3, [pc, #340]	; (80034b0 <_strerror_r+0x3a4>)
 800335c:	e76f      	b.n	800323e <_strerror_r+0x132>
 800335e:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <_strerror_r+0x3a8>)
 8003360:	e76d      	b.n	800323e <_strerror_r+0x132>
 8003362:	4b55      	ldr	r3, [pc, #340]	; (80034b8 <_strerror_r+0x3ac>)
 8003364:	e76b      	b.n	800323e <_strerror_r+0x132>
 8003366:	4b55      	ldr	r3, [pc, #340]	; (80034bc <_strerror_r+0x3b0>)
 8003368:	e769      	b.n	800323e <_strerror_r+0x132>
 800336a:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <_strerror_r+0x3b4>)
 800336c:	e767      	b.n	800323e <_strerror_r+0x132>
 800336e:	4b55      	ldr	r3, [pc, #340]	; (80034c4 <_strerror_r+0x3b8>)
 8003370:	e765      	b.n	800323e <_strerror_r+0x132>
 8003372:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <_strerror_r+0x3bc>)
 8003374:	e763      	b.n	800323e <_strerror_r+0x132>
 8003376:	4b55      	ldr	r3, [pc, #340]	; (80034cc <_strerror_r+0x3c0>)
 8003378:	e761      	b.n	800323e <_strerror_r+0x132>
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf14      	ite	ne
 800337e:	461a      	movne	r2, r3
 8003380:	4622      	moveq	r2, r4
 8003382:	f000 f8b3 	bl	80034ec <_user_strerror>
 8003386:	4b52      	ldr	r3, [pc, #328]	; (80034d0 <_strerror_r+0x3c4>)
 8003388:	2800      	cmp	r0, #0
 800338a:	bf18      	it	ne
 800338c:	4603      	movne	r3, r0
 800338e:	e756      	b.n	800323e <_strerror_r+0x132>
 8003390:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <_strerror_r+0x3c8>)
 8003392:	e754      	b.n	800323e <_strerror_r+0x132>
 8003394:	08005291 	.word	0x08005291
 8003398:	0800529b 	.word	0x0800529b
 800339c:	080052b5 	.word	0x080052b5
 80033a0:	080052c5 	.word	0x080052c5
 80033a4:	080052dd 	.word	0x080052dd
 80033a8:	080052e7 	.word	0x080052e7
 80033ac:	08005301 	.word	0x08005301
 80033b0:	08005313 	.word	0x08005313
 80033b4:	08005325 	.word	0x08005325
 80033b8:	0800533e 	.word	0x0800533e
 80033bc:	0800534e 	.word	0x0800534e
 80033c0:	0800535a 	.word	0x0800535a
 80033c4:	08005377 	.word	0x08005377
 80033c8:	08005389 	.word	0x08005389
 80033cc:	0800539a 	.word	0x0800539a
 80033d0:	080053ac 	.word	0x080053ac
 80033d4:	080053b8 	.word	0x080053b8
 80033d8:	080053d0 	.word	0x080053d0
 80033dc:	080053dc 	.word	0x080053dc
 80033e0:	080053ee 	.word	0x080053ee
 80033e4:	080053fd 	.word	0x080053fd
 80033e8:	0800540d 	.word	0x0800540d
 80033ec:	0800541a 	.word	0x0800541a
 80033f0:	08005439 	.word	0x08005439
 80033f4:	08005448 	.word	0x08005448
 80033f8:	08005459 	.word	0x08005459
 80033fc:	0800547d 	.word	0x0800547d
 8003400:	0800549b 	.word	0x0800549b
 8003404:	080054b9 	.word	0x080054b9
 8003408:	080054d9 	.word	0x080054d9
 800340c:	080054f0 	.word	0x080054f0
 8003410:	080054ff 	.word	0x080054ff
 8003414:	0800550e 	.word	0x0800550e
 8003418:	08005522 	.word	0x08005522
 800341c:	0800553a 	.word	0x0800553a
 8003420:	08005548 	.word	0x08005548
 8003424:	08005555 	.word	0x08005555
 8003428:	0800556b 	.word	0x0800556b
 800342c:	0800557a 	.word	0x0800557a
 8003430:	08005586 	.word	0x08005586
 8003434:	080055b5 	.word	0x080055b5
 8003438:	080055c6 	.word	0x080055c6
 800343c:	080055e1 	.word	0x080055e1
 8003440:	080055f4 	.word	0x080055f4
 8003444:	0800560a 	.word	0x0800560a
 8003448:	08005613 	.word	0x08005613
 800344c:	0800562a 	.word	0x0800562a
 8003450:	08005632 	.word	0x08005632
 8003454:	0800563f 	.word	0x0800563f
 8003458:	08005654 	.word	0x08005654
 800345c:	08005668 	.word	0x08005668
 8003460:	08005680 	.word	0x08005680
 8003464:	0800568f 	.word	0x0800568f
 8003468:	080056a0 	.word	0x080056a0
 800346c:	080056b3 	.word	0x080056b3
 8003470:	080056bf 	.word	0x080056bf
 8003474:	080056d8 	.word	0x080056d8
 8003478:	080056ec 	.word	0x080056ec
 800347c:	08005707 	.word	0x08005707
 8003480:	0800571f 	.word	0x0800571f
 8003484:	08005739 	.word	0x08005739
 8003488:	08005741 	.word	0x08005741
 800348c:	08005771 	.word	0x08005771
 8003490:	08005790 	.word	0x08005790
 8003494:	080057af 	.word	0x080057af
 8003498:	080057c6 	.word	0x080057c6
 800349c:	080057d9 	.word	0x080057d9
 80034a0:	080057f2 	.word	0x080057f2
 80034a4:	08005809 	.word	0x08005809
 80034a8:	0800581f 	.word	0x0800581f
 80034ac:	08005840 	.word	0x08005840
 80034b0:	08005858 	.word	0x08005858
 80034b4:	08005874 	.word	0x08005874
 80034b8:	08005887 	.word	0x08005887
 80034bc:	0800589d 	.word	0x0800589d
 80034c0:	080058b1 	.word	0x080058b1
 80034c4:	080058d3 	.word	0x080058d3
 80034c8:	080058f9 	.word	0x080058f9
 80034cc:	0800590a 	.word	0x0800590a
 80034d0:	08005271 	.word	0x08005271
 80034d4:	08005289 	.word	0x08005289

080034d8 <strerror>:
 80034d8:	4601      	mov	r1, r0
 80034da:	4803      	ldr	r0, [pc, #12]	; (80034e8 <strerror+0x10>)
 80034dc:	2300      	movs	r3, #0
 80034de:	6800      	ldr	r0, [r0, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f7ff be13 	b.w	800310c <_strerror_r>
 80034e6:	bf00      	nop
 80034e8:	20000064 	.word	0x20000064

080034ec <_user_strerror>:
 80034ec:	2000      	movs	r0, #0
 80034ee:	4770      	bx	lr

080034f0 <__swbuf_r>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	460e      	mov	r6, r1
 80034f4:	4614      	mov	r4, r2
 80034f6:	4605      	mov	r5, r0
 80034f8:	b118      	cbz	r0, 8003502 <__swbuf_r+0x12>
 80034fa:	6983      	ldr	r3, [r0, #24]
 80034fc:	b90b      	cbnz	r3, 8003502 <__swbuf_r+0x12>
 80034fe:	f000 f9fb 	bl	80038f8 <__sinit>
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <__swbuf_r+0x98>)
 8003504:	429c      	cmp	r4, r3
 8003506:	d12b      	bne.n	8003560 <__swbuf_r+0x70>
 8003508:	686c      	ldr	r4, [r5, #4]
 800350a:	69a3      	ldr	r3, [r4, #24]
 800350c:	60a3      	str	r3, [r4, #8]
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	071a      	lsls	r2, r3, #28
 8003512:	d52f      	bpl.n	8003574 <__swbuf_r+0x84>
 8003514:	6923      	ldr	r3, [r4, #16]
 8003516:	b36b      	cbz	r3, 8003574 <__swbuf_r+0x84>
 8003518:	6923      	ldr	r3, [r4, #16]
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	1ac0      	subs	r0, r0, r3
 800351e:	6963      	ldr	r3, [r4, #20]
 8003520:	b2f6      	uxtb	r6, r6
 8003522:	4283      	cmp	r3, r0
 8003524:	4637      	mov	r7, r6
 8003526:	dc04      	bgt.n	8003532 <__swbuf_r+0x42>
 8003528:	4621      	mov	r1, r4
 800352a:	4628      	mov	r0, r5
 800352c:	f000 f950 	bl	80037d0 <_fflush_r>
 8003530:	bb30      	cbnz	r0, 8003580 <__swbuf_r+0x90>
 8003532:	68a3      	ldr	r3, [r4, #8]
 8003534:	3b01      	subs	r3, #1
 8003536:	60a3      	str	r3, [r4, #8]
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	6022      	str	r2, [r4, #0]
 800353e:	701e      	strb	r6, [r3, #0]
 8003540:	6963      	ldr	r3, [r4, #20]
 8003542:	3001      	adds	r0, #1
 8003544:	4283      	cmp	r3, r0
 8003546:	d004      	beq.n	8003552 <__swbuf_r+0x62>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	07db      	lsls	r3, r3, #31
 800354c:	d506      	bpl.n	800355c <__swbuf_r+0x6c>
 800354e:	2e0a      	cmp	r6, #10
 8003550:	d104      	bne.n	800355c <__swbuf_r+0x6c>
 8003552:	4621      	mov	r1, r4
 8003554:	4628      	mov	r0, r5
 8003556:	f000 f93b 	bl	80037d0 <_fflush_r>
 800355a:	b988      	cbnz	r0, 8003580 <__swbuf_r+0x90>
 800355c:	4638      	mov	r0, r7
 800355e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <__swbuf_r+0x9c>)
 8003562:	429c      	cmp	r4, r3
 8003564:	d101      	bne.n	800356a <__swbuf_r+0x7a>
 8003566:	68ac      	ldr	r4, [r5, #8]
 8003568:	e7cf      	b.n	800350a <__swbuf_r+0x1a>
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <__swbuf_r+0xa0>)
 800356c:	429c      	cmp	r4, r3
 800356e:	bf08      	it	eq
 8003570:	68ec      	ldreq	r4, [r5, #12]
 8003572:	e7ca      	b.n	800350a <__swbuf_r+0x1a>
 8003574:	4621      	mov	r1, r4
 8003576:	4628      	mov	r0, r5
 8003578:	f000 f81e 	bl	80035b8 <__swsetup_r>
 800357c:	2800      	cmp	r0, #0
 800357e:	d0cb      	beq.n	8003518 <__swbuf_r+0x28>
 8003580:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003584:	e7ea      	b.n	800355c <__swbuf_r+0x6c>
 8003586:	bf00      	nop
 8003588:	08005940 	.word	0x08005940
 800358c:	08005960 	.word	0x08005960
 8003590:	08005920 	.word	0x08005920

08003594 <_write_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	4d07      	ldr	r5, [pc, #28]	; (80035b4 <_write_r+0x20>)
 8003598:	4604      	mov	r4, r0
 800359a:	4608      	mov	r0, r1
 800359c:	4611      	mov	r1, r2
 800359e:	2200      	movs	r2, #0
 80035a0:	602a      	str	r2, [r5, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f001 fb9c 	bl	8004ce0 <_write>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_write_r+0x1e>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_write_r+0x1e>
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	20000d14 	.word	0x20000d14

080035b8 <__swsetup_r>:
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <__swsetup_r+0xcc>)
 80035ba:	b570      	push	{r4, r5, r6, lr}
 80035bc:	681d      	ldr	r5, [r3, #0]
 80035be:	4606      	mov	r6, r0
 80035c0:	460c      	mov	r4, r1
 80035c2:	b125      	cbz	r5, 80035ce <__swsetup_r+0x16>
 80035c4:	69ab      	ldr	r3, [r5, #24]
 80035c6:	b913      	cbnz	r3, 80035ce <__swsetup_r+0x16>
 80035c8:	4628      	mov	r0, r5
 80035ca:	f000 f995 	bl	80038f8 <__sinit>
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <__swsetup_r+0xd0>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	d10f      	bne.n	80035f4 <__swsetup_r+0x3c>
 80035d4:	686c      	ldr	r4, [r5, #4]
 80035d6:	89a3      	ldrh	r3, [r4, #12]
 80035d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035dc:	0719      	lsls	r1, r3, #28
 80035de:	d42c      	bmi.n	800363a <__swsetup_r+0x82>
 80035e0:	06dd      	lsls	r5, r3, #27
 80035e2:	d411      	bmi.n	8003608 <__swsetup_r+0x50>
 80035e4:	2309      	movs	r3, #9
 80035e6:	6033      	str	r3, [r6, #0]
 80035e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035f2:	e03e      	b.n	8003672 <__swsetup_r+0xba>
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <__swsetup_r+0xd4>)
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d101      	bne.n	80035fe <__swsetup_r+0x46>
 80035fa:	68ac      	ldr	r4, [r5, #8]
 80035fc:	e7eb      	b.n	80035d6 <__swsetup_r+0x1e>
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <__swsetup_r+0xd8>)
 8003600:	429c      	cmp	r4, r3
 8003602:	bf08      	it	eq
 8003604:	68ec      	ldreq	r4, [r5, #12]
 8003606:	e7e6      	b.n	80035d6 <__swsetup_r+0x1e>
 8003608:	0758      	lsls	r0, r3, #29
 800360a:	d512      	bpl.n	8003632 <__swsetup_r+0x7a>
 800360c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800360e:	b141      	cbz	r1, 8003622 <__swsetup_r+0x6a>
 8003610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003614:	4299      	cmp	r1, r3
 8003616:	d002      	beq.n	800361e <__swsetup_r+0x66>
 8003618:	4630      	mov	r0, r6
 800361a:	f000 faab 	bl	8003b74 <_free_r>
 800361e:	2300      	movs	r3, #0
 8003620:	6363      	str	r3, [r4, #52]	; 0x34
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003628:	81a3      	strh	r3, [r4, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	6063      	str	r3, [r4, #4]
 800362e:	6923      	ldr	r3, [r4, #16]
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	6923      	ldr	r3, [r4, #16]
 800363c:	b94b      	cbnz	r3, 8003652 <__swsetup_r+0x9a>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d003      	beq.n	8003652 <__swsetup_r+0x9a>
 800364a:	4621      	mov	r1, r4
 800364c:	4630      	mov	r0, r6
 800364e:	f000 fa2b 	bl	8003aa8 <__smakebuf_r>
 8003652:	89a0      	ldrh	r0, [r4, #12]
 8003654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003658:	f010 0301 	ands.w	r3, r0, #1
 800365c:	d00a      	beq.n	8003674 <__swsetup_r+0xbc>
 800365e:	2300      	movs	r3, #0
 8003660:	60a3      	str	r3, [r4, #8]
 8003662:	6963      	ldr	r3, [r4, #20]
 8003664:	425b      	negs	r3, r3
 8003666:	61a3      	str	r3, [r4, #24]
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	b943      	cbnz	r3, 800367e <__swsetup_r+0xc6>
 800366c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003670:	d1ba      	bne.n	80035e8 <__swsetup_r+0x30>
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	0781      	lsls	r1, r0, #30
 8003676:	bf58      	it	pl
 8003678:	6963      	ldrpl	r3, [r4, #20]
 800367a:	60a3      	str	r3, [r4, #8]
 800367c:	e7f4      	b.n	8003668 <__swsetup_r+0xb0>
 800367e:	2000      	movs	r0, #0
 8003680:	e7f7      	b.n	8003672 <__swsetup_r+0xba>
 8003682:	bf00      	nop
 8003684:	20000064 	.word	0x20000064
 8003688:	08005940 	.word	0x08005940
 800368c:	08005960 	.word	0x08005960
 8003690:	08005920 	.word	0x08005920

08003694 <abort>:
 8003694:	b508      	push	{r3, lr}
 8003696:	2006      	movs	r0, #6
 8003698:	f001 f964 	bl	8004964 <raise>
 800369c:	2001      	movs	r0, #1
 800369e:	f001 fb27 	bl	8004cf0 <_exit>
	...

080036a4 <_close_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4d06      	ldr	r5, [pc, #24]	; (80036c0 <_close_r+0x1c>)
 80036a8:	2300      	movs	r3, #0
 80036aa:	4604      	mov	r4, r0
 80036ac:	4608      	mov	r0, r1
 80036ae:	602b      	str	r3, [r5, #0]
 80036b0:	f001 fad0 	bl	8004c54 <_close>
 80036b4:	1c43      	adds	r3, r0, #1
 80036b6:	d102      	bne.n	80036be <_close_r+0x1a>
 80036b8:	682b      	ldr	r3, [r5, #0]
 80036ba:	b103      	cbz	r3, 80036be <_close_r+0x1a>
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	bd38      	pop	{r3, r4, r5, pc}
 80036c0:	20000d14 	.word	0x20000d14

080036c4 <__sflush_r>:
 80036c4:	898a      	ldrh	r2, [r1, #12]
 80036c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ca:	4605      	mov	r5, r0
 80036cc:	0710      	lsls	r0, r2, #28
 80036ce:	460c      	mov	r4, r1
 80036d0:	d458      	bmi.n	8003784 <__sflush_r+0xc0>
 80036d2:	684b      	ldr	r3, [r1, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	dc05      	bgt.n	80036e4 <__sflush_r+0x20>
 80036d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	dc02      	bgt.n	80036e4 <__sflush_r+0x20>
 80036de:	2000      	movs	r0, #0
 80036e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036e6:	2e00      	cmp	r6, #0
 80036e8:	d0f9      	beq.n	80036de <__sflush_r+0x1a>
 80036ea:	2300      	movs	r3, #0
 80036ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036f0:	682f      	ldr	r7, [r5, #0]
 80036f2:	6a21      	ldr	r1, [r4, #32]
 80036f4:	602b      	str	r3, [r5, #0]
 80036f6:	d032      	beq.n	800375e <__sflush_r+0x9a>
 80036f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	075a      	lsls	r2, r3, #29
 80036fe:	d505      	bpl.n	800370c <__sflush_r+0x48>
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	1ac0      	subs	r0, r0, r3
 8003704:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003706:	b10b      	cbz	r3, 800370c <__sflush_r+0x48>
 8003708:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800370a:	1ac0      	subs	r0, r0, r3
 800370c:	2300      	movs	r3, #0
 800370e:	4602      	mov	r2, r0
 8003710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003712:	6a21      	ldr	r1, [r4, #32]
 8003714:	4628      	mov	r0, r5
 8003716:	47b0      	blx	r6
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	d106      	bne.n	800372c <__sflush_r+0x68>
 800371e:	6829      	ldr	r1, [r5, #0]
 8003720:	291d      	cmp	r1, #29
 8003722:	d82b      	bhi.n	800377c <__sflush_r+0xb8>
 8003724:	4a29      	ldr	r2, [pc, #164]	; (80037cc <__sflush_r+0x108>)
 8003726:	410a      	asrs	r2, r1
 8003728:	07d6      	lsls	r6, r2, #31
 800372a:	d427      	bmi.n	800377c <__sflush_r+0xb8>
 800372c:	2200      	movs	r2, #0
 800372e:	6062      	str	r2, [r4, #4]
 8003730:	04d9      	lsls	r1, r3, #19
 8003732:	6922      	ldr	r2, [r4, #16]
 8003734:	6022      	str	r2, [r4, #0]
 8003736:	d504      	bpl.n	8003742 <__sflush_r+0x7e>
 8003738:	1c42      	adds	r2, r0, #1
 800373a:	d101      	bne.n	8003740 <__sflush_r+0x7c>
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	b903      	cbnz	r3, 8003742 <__sflush_r+0x7e>
 8003740:	6560      	str	r0, [r4, #84]	; 0x54
 8003742:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003744:	602f      	str	r7, [r5, #0]
 8003746:	2900      	cmp	r1, #0
 8003748:	d0c9      	beq.n	80036de <__sflush_r+0x1a>
 800374a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800374e:	4299      	cmp	r1, r3
 8003750:	d002      	beq.n	8003758 <__sflush_r+0x94>
 8003752:	4628      	mov	r0, r5
 8003754:	f000 fa0e 	bl	8003b74 <_free_r>
 8003758:	2000      	movs	r0, #0
 800375a:	6360      	str	r0, [r4, #52]	; 0x34
 800375c:	e7c0      	b.n	80036e0 <__sflush_r+0x1c>
 800375e:	2301      	movs	r3, #1
 8003760:	4628      	mov	r0, r5
 8003762:	47b0      	blx	r6
 8003764:	1c41      	adds	r1, r0, #1
 8003766:	d1c8      	bne.n	80036fa <__sflush_r+0x36>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0c5      	beq.n	80036fa <__sflush_r+0x36>
 800376e:	2b1d      	cmp	r3, #29
 8003770:	d001      	beq.n	8003776 <__sflush_r+0xb2>
 8003772:	2b16      	cmp	r3, #22
 8003774:	d101      	bne.n	800377a <__sflush_r+0xb6>
 8003776:	602f      	str	r7, [r5, #0]
 8003778:	e7b1      	b.n	80036de <__sflush_r+0x1a>
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	e7ad      	b.n	80036e0 <__sflush_r+0x1c>
 8003784:	690f      	ldr	r7, [r1, #16]
 8003786:	2f00      	cmp	r7, #0
 8003788:	d0a9      	beq.n	80036de <__sflush_r+0x1a>
 800378a:	0793      	lsls	r3, r2, #30
 800378c:	680e      	ldr	r6, [r1, #0]
 800378e:	bf08      	it	eq
 8003790:	694b      	ldreq	r3, [r1, #20]
 8003792:	600f      	str	r7, [r1, #0]
 8003794:	bf18      	it	ne
 8003796:	2300      	movne	r3, #0
 8003798:	eba6 0807 	sub.w	r8, r6, r7
 800379c:	608b      	str	r3, [r1, #8]
 800379e:	f1b8 0f00 	cmp.w	r8, #0
 80037a2:	dd9c      	ble.n	80036de <__sflush_r+0x1a>
 80037a4:	6a21      	ldr	r1, [r4, #32]
 80037a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037a8:	4643      	mov	r3, r8
 80037aa:	463a      	mov	r2, r7
 80037ac:	4628      	mov	r0, r5
 80037ae:	47b0      	blx	r6
 80037b0:	2800      	cmp	r0, #0
 80037b2:	dc06      	bgt.n	80037c2 <__sflush_r+0xfe>
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ba:	81a3      	strh	r3, [r4, #12]
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037c0:	e78e      	b.n	80036e0 <__sflush_r+0x1c>
 80037c2:	4407      	add	r7, r0
 80037c4:	eba8 0800 	sub.w	r8, r8, r0
 80037c8:	e7e9      	b.n	800379e <__sflush_r+0xda>
 80037ca:	bf00      	nop
 80037cc:	dfbffffe 	.word	0xdfbffffe

080037d0 <_fflush_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	690b      	ldr	r3, [r1, #16]
 80037d4:	4605      	mov	r5, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	b913      	cbnz	r3, 80037e0 <_fflush_r+0x10>
 80037da:	2500      	movs	r5, #0
 80037dc:	4628      	mov	r0, r5
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	b118      	cbz	r0, 80037ea <_fflush_r+0x1a>
 80037e2:	6983      	ldr	r3, [r0, #24]
 80037e4:	b90b      	cbnz	r3, 80037ea <_fflush_r+0x1a>
 80037e6:	f000 f887 	bl	80038f8 <__sinit>
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <_fflush_r+0x6c>)
 80037ec:	429c      	cmp	r4, r3
 80037ee:	d11b      	bne.n	8003828 <_fflush_r+0x58>
 80037f0:	686c      	ldr	r4, [r5, #4]
 80037f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0ef      	beq.n	80037da <_fflush_r+0xa>
 80037fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037fc:	07d0      	lsls	r0, r2, #31
 80037fe:	d404      	bmi.n	800380a <_fflush_r+0x3a>
 8003800:	0599      	lsls	r1, r3, #22
 8003802:	d402      	bmi.n	800380a <_fflush_r+0x3a>
 8003804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003806:	f000 f915 	bl	8003a34 <__retarget_lock_acquire_recursive>
 800380a:	4628      	mov	r0, r5
 800380c:	4621      	mov	r1, r4
 800380e:	f7ff ff59 	bl	80036c4 <__sflush_r>
 8003812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003814:	07da      	lsls	r2, r3, #31
 8003816:	4605      	mov	r5, r0
 8003818:	d4e0      	bmi.n	80037dc <_fflush_r+0xc>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	059b      	lsls	r3, r3, #22
 800381e:	d4dd      	bmi.n	80037dc <_fflush_r+0xc>
 8003820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003822:	f000 f908 	bl	8003a36 <__retarget_lock_release_recursive>
 8003826:	e7d9      	b.n	80037dc <_fflush_r+0xc>
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <_fflush_r+0x70>)
 800382a:	429c      	cmp	r4, r3
 800382c:	d101      	bne.n	8003832 <_fflush_r+0x62>
 800382e:	68ac      	ldr	r4, [r5, #8]
 8003830:	e7df      	b.n	80037f2 <_fflush_r+0x22>
 8003832:	4b04      	ldr	r3, [pc, #16]	; (8003844 <_fflush_r+0x74>)
 8003834:	429c      	cmp	r4, r3
 8003836:	bf08      	it	eq
 8003838:	68ec      	ldreq	r4, [r5, #12]
 800383a:	e7da      	b.n	80037f2 <_fflush_r+0x22>
 800383c:	08005940 	.word	0x08005940
 8003840:	08005960 	.word	0x08005960
 8003844:	08005920 	.word	0x08005920

08003848 <std>:
 8003848:	2300      	movs	r3, #0
 800384a:	b510      	push	{r4, lr}
 800384c:	4604      	mov	r4, r0
 800384e:	e9c0 3300 	strd	r3, r3, [r0]
 8003852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003856:	6083      	str	r3, [r0, #8]
 8003858:	8181      	strh	r1, [r0, #12]
 800385a:	6643      	str	r3, [r0, #100]	; 0x64
 800385c:	81c2      	strh	r2, [r0, #14]
 800385e:	6183      	str	r3, [r0, #24]
 8003860:	4619      	mov	r1, r3
 8003862:	2208      	movs	r2, #8
 8003864:	305c      	adds	r0, #92	; 0x5c
 8003866:	f7ff f9ad 	bl	8002bc4 <memset>
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <std+0x38>)
 800386c:	6263      	str	r3, [r4, #36]	; 0x24
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <std+0x3c>)
 8003870:	62a3      	str	r3, [r4, #40]	; 0x28
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <std+0x40>)
 8003874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <std+0x44>)
 8003878:	6224      	str	r4, [r4, #32]
 800387a:	6323      	str	r3, [r4, #48]	; 0x30
 800387c:	bd10      	pop	{r4, pc}
 800387e:	bf00      	nop
 8003880:	08003065 	.word	0x08003065
 8003884:	0800308b 	.word	0x0800308b
 8003888:	080030c3 	.word	0x080030c3
 800388c:	080030e7 	.word	0x080030e7

08003890 <_cleanup_r>:
 8003890:	4901      	ldr	r1, [pc, #4]	; (8003898 <_cleanup_r+0x8>)
 8003892:	f000 b8af 	b.w	80039f4 <_fwalk_reent>
 8003896:	bf00      	nop
 8003898:	080037d1 	.word	0x080037d1

0800389c <__sfmoreglue>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	2368      	movs	r3, #104	; 0x68
 80038a0:	1e4d      	subs	r5, r1, #1
 80038a2:	435d      	muls	r5, r3
 80038a4:	460e      	mov	r6, r1
 80038a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038aa:	f7ff f9b3 	bl	8002c14 <_malloc_r>
 80038ae:	4604      	mov	r4, r0
 80038b0:	b140      	cbz	r0, 80038c4 <__sfmoreglue+0x28>
 80038b2:	2100      	movs	r1, #0
 80038b4:	e9c0 1600 	strd	r1, r6, [r0]
 80038b8:	300c      	adds	r0, #12
 80038ba:	60a0      	str	r0, [r4, #8]
 80038bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038c0:	f7ff f980 	bl	8002bc4 <memset>
 80038c4:	4620      	mov	r0, r4
 80038c6:	bd70      	pop	{r4, r5, r6, pc}

080038c8 <__sfp_lock_acquire>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <__sfp_lock_acquire+0x8>)
 80038ca:	f000 b8b3 	b.w	8003a34 <__retarget_lock_acquire_recursive>
 80038ce:	bf00      	nop
 80038d0:	20000d11 	.word	0x20000d11

080038d4 <__sfp_lock_release>:
 80038d4:	4801      	ldr	r0, [pc, #4]	; (80038dc <__sfp_lock_release+0x8>)
 80038d6:	f000 b8ae 	b.w	8003a36 <__retarget_lock_release_recursive>
 80038da:	bf00      	nop
 80038dc:	20000d11 	.word	0x20000d11

080038e0 <__sinit_lock_acquire>:
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <__sinit_lock_acquire+0x8>)
 80038e2:	f000 b8a7 	b.w	8003a34 <__retarget_lock_acquire_recursive>
 80038e6:	bf00      	nop
 80038e8:	20000d12 	.word	0x20000d12

080038ec <__sinit_lock_release>:
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <__sinit_lock_release+0x8>)
 80038ee:	f000 b8a2 	b.w	8003a36 <__retarget_lock_release_recursive>
 80038f2:	bf00      	nop
 80038f4:	20000d12 	.word	0x20000d12

080038f8 <__sinit>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
 80038fc:	f7ff fff0 	bl	80038e0 <__sinit_lock_acquire>
 8003900:	69a3      	ldr	r3, [r4, #24]
 8003902:	b11b      	cbz	r3, 800390c <__sinit+0x14>
 8003904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003908:	f7ff bff0 	b.w	80038ec <__sinit_lock_release>
 800390c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003910:	6523      	str	r3, [r4, #80]	; 0x50
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <__sinit+0x68>)
 8003914:	4a13      	ldr	r2, [pc, #76]	; (8003964 <__sinit+0x6c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	62a2      	str	r2, [r4, #40]	; 0x28
 800391a:	42a3      	cmp	r3, r4
 800391c:	bf04      	itt	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	61a3      	streq	r3, [r4, #24]
 8003922:	4620      	mov	r0, r4
 8003924:	f000 f820 	bl	8003968 <__sfp>
 8003928:	6060      	str	r0, [r4, #4]
 800392a:	4620      	mov	r0, r4
 800392c:	f000 f81c 	bl	8003968 <__sfp>
 8003930:	60a0      	str	r0, [r4, #8]
 8003932:	4620      	mov	r0, r4
 8003934:	f000 f818 	bl	8003968 <__sfp>
 8003938:	2200      	movs	r2, #0
 800393a:	60e0      	str	r0, [r4, #12]
 800393c:	2104      	movs	r1, #4
 800393e:	6860      	ldr	r0, [r4, #4]
 8003940:	f7ff ff82 	bl	8003848 <std>
 8003944:	68a0      	ldr	r0, [r4, #8]
 8003946:	2201      	movs	r2, #1
 8003948:	2109      	movs	r1, #9
 800394a:	f7ff ff7d 	bl	8003848 <std>
 800394e:	68e0      	ldr	r0, [r4, #12]
 8003950:	2202      	movs	r2, #2
 8003952:	2112      	movs	r1, #18
 8003954:	f7ff ff78 	bl	8003848 <std>
 8003958:	2301      	movs	r3, #1
 800395a:	61a3      	str	r3, [r4, #24]
 800395c:	e7d2      	b.n	8003904 <__sinit+0xc>
 800395e:	bf00      	nop
 8003960:	08005274 	.word	0x08005274
 8003964:	08003891 	.word	0x08003891

08003968 <__sfp>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	4607      	mov	r7, r0
 800396c:	f7ff ffac 	bl	80038c8 <__sfp_lock_acquire>
 8003970:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <__sfp+0x84>)
 8003972:	681e      	ldr	r6, [r3, #0]
 8003974:	69b3      	ldr	r3, [r6, #24]
 8003976:	b913      	cbnz	r3, 800397e <__sfp+0x16>
 8003978:	4630      	mov	r0, r6
 800397a:	f7ff ffbd 	bl	80038f8 <__sinit>
 800397e:	3648      	adds	r6, #72	; 0x48
 8003980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003984:	3b01      	subs	r3, #1
 8003986:	d503      	bpl.n	8003990 <__sfp+0x28>
 8003988:	6833      	ldr	r3, [r6, #0]
 800398a:	b30b      	cbz	r3, 80039d0 <__sfp+0x68>
 800398c:	6836      	ldr	r6, [r6, #0]
 800398e:	e7f7      	b.n	8003980 <__sfp+0x18>
 8003990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003994:	b9d5      	cbnz	r5, 80039cc <__sfp+0x64>
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <__sfp+0x88>)
 8003998:	60e3      	str	r3, [r4, #12]
 800399a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800399e:	6665      	str	r5, [r4, #100]	; 0x64
 80039a0:	f000 f847 	bl	8003a32 <__retarget_lock_init_recursive>
 80039a4:	f7ff ff96 	bl	80038d4 <__sfp_lock_release>
 80039a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039b0:	6025      	str	r5, [r4, #0]
 80039b2:	61a5      	str	r5, [r4, #24]
 80039b4:	2208      	movs	r2, #8
 80039b6:	4629      	mov	r1, r5
 80039b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039bc:	f7ff f902 	bl	8002bc4 <memset>
 80039c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039c8:	4620      	mov	r0, r4
 80039ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039cc:	3468      	adds	r4, #104	; 0x68
 80039ce:	e7d9      	b.n	8003984 <__sfp+0x1c>
 80039d0:	2104      	movs	r1, #4
 80039d2:	4638      	mov	r0, r7
 80039d4:	f7ff ff62 	bl	800389c <__sfmoreglue>
 80039d8:	4604      	mov	r4, r0
 80039da:	6030      	str	r0, [r6, #0]
 80039dc:	2800      	cmp	r0, #0
 80039de:	d1d5      	bne.n	800398c <__sfp+0x24>
 80039e0:	f7ff ff78 	bl	80038d4 <__sfp_lock_release>
 80039e4:	230c      	movs	r3, #12
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	e7ee      	b.n	80039c8 <__sfp+0x60>
 80039ea:	bf00      	nop
 80039ec:	08005274 	.word	0x08005274
 80039f0:	ffff0001 	.word	0xffff0001

080039f4 <_fwalk_reent>:
 80039f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f8:	4606      	mov	r6, r0
 80039fa:	4688      	mov	r8, r1
 80039fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a00:	2700      	movs	r7, #0
 8003a02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a06:	f1b9 0901 	subs.w	r9, r9, #1
 8003a0a:	d505      	bpl.n	8003a18 <_fwalk_reent+0x24>
 8003a0c:	6824      	ldr	r4, [r4, #0]
 8003a0e:	2c00      	cmp	r4, #0
 8003a10:	d1f7      	bne.n	8003a02 <_fwalk_reent+0xe>
 8003a12:	4638      	mov	r0, r7
 8003a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a18:	89ab      	ldrh	r3, [r5, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d907      	bls.n	8003a2e <_fwalk_reent+0x3a>
 8003a1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a22:	3301      	adds	r3, #1
 8003a24:	d003      	beq.n	8003a2e <_fwalk_reent+0x3a>
 8003a26:	4629      	mov	r1, r5
 8003a28:	4630      	mov	r0, r6
 8003a2a:	47c0      	blx	r8
 8003a2c:	4307      	orrs	r7, r0
 8003a2e:	3568      	adds	r5, #104	; 0x68
 8003a30:	e7e9      	b.n	8003a06 <_fwalk_reent+0x12>

08003a32 <__retarget_lock_init_recursive>:
 8003a32:	4770      	bx	lr

08003a34 <__retarget_lock_acquire_recursive>:
 8003a34:	4770      	bx	lr

08003a36 <__retarget_lock_release_recursive>:
 8003a36:	4770      	bx	lr

08003a38 <_lseek_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4d07      	ldr	r5, [pc, #28]	; (8003a58 <_lseek_r+0x20>)
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	4608      	mov	r0, r1
 8003a40:	4611      	mov	r1, r2
 8003a42:	2200      	movs	r2, #0
 8003a44:	602a      	str	r2, [r5, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f001 f92c 	bl	8004ca4 <_lseek>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d102      	bne.n	8003a56 <_lseek_r+0x1e>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	b103      	cbz	r3, 8003a56 <_lseek_r+0x1e>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	20000d14 	.word	0x20000d14

08003a5c <__swhatbuf_r>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	460c      	mov	r4, r1
 8003a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a64:	2900      	cmp	r1, #0
 8003a66:	b096      	sub	sp, #88	; 0x58
 8003a68:	4615      	mov	r5, r2
 8003a6a:	461e      	mov	r6, r3
 8003a6c:	da0d      	bge.n	8003a8a <__swhatbuf_r+0x2e>
 8003a6e:	89a3      	ldrh	r3, [r4, #12]
 8003a70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003a74:	f04f 0100 	mov.w	r1, #0
 8003a78:	bf0c      	ite	eq
 8003a7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003a7e:	2340      	movne	r3, #64	; 0x40
 8003a80:	2000      	movs	r0, #0
 8003a82:	6031      	str	r1, [r6, #0]
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	b016      	add	sp, #88	; 0x58
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
 8003a8a:	466a      	mov	r2, sp
 8003a8c:	f001 f8b8 	bl	8004c00 <_fstat_r>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	dbec      	blt.n	8003a6e <__swhatbuf_r+0x12>
 8003a94:	9901      	ldr	r1, [sp, #4]
 8003a96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003a9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003a9e:	4259      	negs	r1, r3
 8003aa0:	4159      	adcs	r1, r3
 8003aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa6:	e7eb      	b.n	8003a80 <__swhatbuf_r+0x24>

08003aa8 <__smakebuf_r>:
 8003aa8:	898b      	ldrh	r3, [r1, #12]
 8003aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003aac:	079d      	lsls	r5, r3, #30
 8003aae:	4606      	mov	r6, r0
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	d507      	bpl.n	8003ac4 <__smakebuf_r+0x1c>
 8003ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	6123      	str	r3, [r4, #16]
 8003abc:	2301      	movs	r3, #1
 8003abe:	6163      	str	r3, [r4, #20]
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	ab01      	add	r3, sp, #4
 8003ac6:	466a      	mov	r2, sp
 8003ac8:	f7ff ffc8 	bl	8003a5c <__swhatbuf_r>
 8003acc:	9900      	ldr	r1, [sp, #0]
 8003ace:	4605      	mov	r5, r0
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f7ff f89f 	bl	8002c14 <_malloc_r>
 8003ad6:	b948      	cbnz	r0, 8003aec <__smakebuf_r+0x44>
 8003ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003adc:	059a      	lsls	r2, r3, #22
 8003ade:	d4ef      	bmi.n	8003ac0 <__smakebuf_r+0x18>
 8003ae0:	f023 0303 	bic.w	r3, r3, #3
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	81a3      	strh	r3, [r4, #12]
 8003aea:	e7e3      	b.n	8003ab4 <__smakebuf_r+0xc>
 8003aec:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <__smakebuf_r+0x7c>)
 8003aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	6020      	str	r0, [r4, #0]
 8003af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	9b00      	ldr	r3, [sp, #0]
 8003afc:	6163      	str	r3, [r4, #20]
 8003afe:	9b01      	ldr	r3, [sp, #4]
 8003b00:	6120      	str	r0, [r4, #16]
 8003b02:	b15b      	cbz	r3, 8003b1c <__smakebuf_r+0x74>
 8003b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f001 f88b 	bl	8004c24 <_isatty_r>
 8003b0e:	b128      	cbz	r0, 8003b1c <__smakebuf_r+0x74>
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	89a3      	ldrh	r3, [r4, #12]
 8003b1e:	431d      	orrs	r5, r3
 8003b20:	81a5      	strh	r5, [r4, #12]
 8003b22:	e7cd      	b.n	8003ac0 <__smakebuf_r+0x18>
 8003b24:	08003891 	.word	0x08003891

08003b28 <memmove>:
 8003b28:	4288      	cmp	r0, r1
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	eb01 0402 	add.w	r4, r1, r2
 8003b30:	d902      	bls.n	8003b38 <memmove+0x10>
 8003b32:	4284      	cmp	r4, r0
 8003b34:	4623      	mov	r3, r4
 8003b36:	d807      	bhi.n	8003b48 <memmove+0x20>
 8003b38:	1e43      	subs	r3, r0, #1
 8003b3a:	42a1      	cmp	r1, r4
 8003b3c:	d008      	beq.n	8003b50 <memmove+0x28>
 8003b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b46:	e7f8      	b.n	8003b3a <memmove+0x12>
 8003b48:	4402      	add	r2, r0
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	428a      	cmp	r2, r1
 8003b4e:	d100      	bne.n	8003b52 <memmove+0x2a>
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b5a:	e7f7      	b.n	8003b4c <memmove+0x24>

08003b5c <__malloc_lock>:
 8003b5c:	4801      	ldr	r0, [pc, #4]	; (8003b64 <__malloc_lock+0x8>)
 8003b5e:	f7ff bf69 	b.w	8003a34 <__retarget_lock_acquire_recursive>
 8003b62:	bf00      	nop
 8003b64:	20000d10 	.word	0x20000d10

08003b68 <__malloc_unlock>:
 8003b68:	4801      	ldr	r0, [pc, #4]	; (8003b70 <__malloc_unlock+0x8>)
 8003b6a:	f7ff bf64 	b.w	8003a36 <__retarget_lock_release_recursive>
 8003b6e:	bf00      	nop
 8003b70:	20000d10 	.word	0x20000d10

08003b74 <_free_r>:
 8003b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b76:	2900      	cmp	r1, #0
 8003b78:	d044      	beq.n	8003c04 <_free_r+0x90>
 8003b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b7e:	9001      	str	r0, [sp, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f1a1 0404 	sub.w	r4, r1, #4
 8003b86:	bfb8      	it	lt
 8003b88:	18e4      	addlt	r4, r4, r3
 8003b8a:	f7ff ffe7 	bl	8003b5c <__malloc_lock>
 8003b8e:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <_free_r+0x94>)
 8003b90:	9801      	ldr	r0, [sp, #4]
 8003b92:	6813      	ldr	r3, [r2, #0]
 8003b94:	b933      	cbnz	r3, 8003ba4 <_free_r+0x30>
 8003b96:	6063      	str	r3, [r4, #4]
 8003b98:	6014      	str	r4, [r2, #0]
 8003b9a:	b003      	add	sp, #12
 8003b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ba0:	f7ff bfe2 	b.w	8003b68 <__malloc_unlock>
 8003ba4:	42a3      	cmp	r3, r4
 8003ba6:	d908      	bls.n	8003bba <_free_r+0x46>
 8003ba8:	6825      	ldr	r5, [r4, #0]
 8003baa:	1961      	adds	r1, r4, r5
 8003bac:	428b      	cmp	r3, r1
 8003bae:	bf01      	itttt	eq
 8003bb0:	6819      	ldreq	r1, [r3, #0]
 8003bb2:	685b      	ldreq	r3, [r3, #4]
 8003bb4:	1949      	addeq	r1, r1, r5
 8003bb6:	6021      	streq	r1, [r4, #0]
 8003bb8:	e7ed      	b.n	8003b96 <_free_r+0x22>
 8003bba:	461a      	mov	r2, r3
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b10b      	cbz	r3, 8003bc4 <_free_r+0x50>
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	d9fa      	bls.n	8003bba <_free_r+0x46>
 8003bc4:	6811      	ldr	r1, [r2, #0]
 8003bc6:	1855      	adds	r5, r2, r1
 8003bc8:	42a5      	cmp	r5, r4
 8003bca:	d10b      	bne.n	8003be4 <_free_r+0x70>
 8003bcc:	6824      	ldr	r4, [r4, #0]
 8003bce:	4421      	add	r1, r4
 8003bd0:	1854      	adds	r4, r2, r1
 8003bd2:	42a3      	cmp	r3, r4
 8003bd4:	6011      	str	r1, [r2, #0]
 8003bd6:	d1e0      	bne.n	8003b9a <_free_r+0x26>
 8003bd8:	681c      	ldr	r4, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	6053      	str	r3, [r2, #4]
 8003bde:	440c      	add	r4, r1
 8003be0:	6014      	str	r4, [r2, #0]
 8003be2:	e7da      	b.n	8003b9a <_free_r+0x26>
 8003be4:	d902      	bls.n	8003bec <_free_r+0x78>
 8003be6:	230c      	movs	r3, #12
 8003be8:	6003      	str	r3, [r0, #0]
 8003bea:	e7d6      	b.n	8003b9a <_free_r+0x26>
 8003bec:	6825      	ldr	r5, [r4, #0]
 8003bee:	1961      	adds	r1, r4, r5
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	bf04      	itt	eq
 8003bf4:	6819      	ldreq	r1, [r3, #0]
 8003bf6:	685b      	ldreq	r3, [r3, #4]
 8003bf8:	6063      	str	r3, [r4, #4]
 8003bfa:	bf04      	itt	eq
 8003bfc:	1949      	addeq	r1, r1, r5
 8003bfe:	6021      	streq	r1, [r4, #0]
 8003c00:	6054      	str	r4, [r2, #4]
 8003c02:	e7ca      	b.n	8003b9a <_free_r+0x26>
 8003c04:	b003      	add	sp, #12
 8003c06:	bd30      	pop	{r4, r5, pc}
 8003c08:	20000d08 	.word	0x20000d08

08003c0c <_realloc_r>:
 8003c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c10:	4680      	mov	r8, r0
 8003c12:	4614      	mov	r4, r2
 8003c14:	460e      	mov	r6, r1
 8003c16:	b921      	cbnz	r1, 8003c22 <_realloc_r+0x16>
 8003c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	f7fe bff9 	b.w	8002c14 <_malloc_r>
 8003c22:	b92a      	cbnz	r2, 8003c30 <_realloc_r+0x24>
 8003c24:	f7ff ffa6 	bl	8003b74 <_free_r>
 8003c28:	4625      	mov	r5, r4
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c30:	f001 f808 	bl	8004c44 <_malloc_usable_size_r>
 8003c34:	4284      	cmp	r4, r0
 8003c36:	4607      	mov	r7, r0
 8003c38:	d802      	bhi.n	8003c40 <_realloc_r+0x34>
 8003c3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c3e:	d812      	bhi.n	8003c66 <_realloc_r+0x5a>
 8003c40:	4621      	mov	r1, r4
 8003c42:	4640      	mov	r0, r8
 8003c44:	f7fe ffe6 	bl	8002c14 <_malloc_r>
 8003c48:	4605      	mov	r5, r0
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d0ed      	beq.n	8003c2a <_realloc_r+0x1e>
 8003c4e:	42bc      	cmp	r4, r7
 8003c50:	4622      	mov	r2, r4
 8003c52:	4631      	mov	r1, r6
 8003c54:	bf28      	it	cs
 8003c56:	463a      	movcs	r2, r7
 8003c58:	f7fe ffa6 	bl	8002ba8 <memcpy>
 8003c5c:	4631      	mov	r1, r6
 8003c5e:	4640      	mov	r0, r8
 8003c60:	f7ff ff88 	bl	8003b74 <_free_r>
 8003c64:	e7e1      	b.n	8003c2a <_realloc_r+0x1e>
 8003c66:	4635      	mov	r5, r6
 8003c68:	e7df      	b.n	8003c2a <_realloc_r+0x1e>

08003c6a <__ssputs_r>:
 8003c6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6e:	688e      	ldr	r6, [r1, #8]
 8003c70:	461f      	mov	r7, r3
 8003c72:	42be      	cmp	r6, r7
 8003c74:	680b      	ldr	r3, [r1, #0]
 8003c76:	4682      	mov	sl, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	d82c      	bhi.n	8003cd8 <__ssputs_r+0x6e>
 8003c7e:	898a      	ldrh	r2, [r1, #12]
 8003c80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c84:	d026      	beq.n	8003cd4 <__ssputs_r+0x6a>
 8003c86:	6965      	ldr	r5, [r4, #20]
 8003c88:	6909      	ldr	r1, [r1, #16]
 8003c8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c8e:	eba3 0901 	sub.w	r9, r3, r1
 8003c92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c96:	1c7b      	adds	r3, r7, #1
 8003c98:	444b      	add	r3, r9
 8003c9a:	106d      	asrs	r5, r5, #1
 8003c9c:	429d      	cmp	r5, r3
 8003c9e:	bf38      	it	cc
 8003ca0:	461d      	movcc	r5, r3
 8003ca2:	0553      	lsls	r3, r2, #21
 8003ca4:	d527      	bpl.n	8003cf6 <__ssputs_r+0x8c>
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	f7fe ffb4 	bl	8002c14 <_malloc_r>
 8003cac:	4606      	mov	r6, r0
 8003cae:	b360      	cbz	r0, 8003d0a <__ssputs_r+0xa0>
 8003cb0:	6921      	ldr	r1, [r4, #16]
 8003cb2:	464a      	mov	r2, r9
 8003cb4:	f7fe ff78 	bl	8002ba8 <memcpy>
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc2:	81a3      	strh	r3, [r4, #12]
 8003cc4:	6126      	str	r6, [r4, #16]
 8003cc6:	6165      	str	r5, [r4, #20]
 8003cc8:	444e      	add	r6, r9
 8003cca:	eba5 0509 	sub.w	r5, r5, r9
 8003cce:	6026      	str	r6, [r4, #0]
 8003cd0:	60a5      	str	r5, [r4, #8]
 8003cd2:	463e      	mov	r6, r7
 8003cd4:	42be      	cmp	r6, r7
 8003cd6:	d900      	bls.n	8003cda <__ssputs_r+0x70>
 8003cd8:	463e      	mov	r6, r7
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	4632      	mov	r2, r6
 8003cde:	4641      	mov	r1, r8
 8003ce0:	f7ff ff22 	bl	8003b28 <memmove>
 8003ce4:	68a3      	ldr	r3, [r4, #8]
 8003ce6:	1b9b      	subs	r3, r3, r6
 8003ce8:	60a3      	str	r3, [r4, #8]
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	4433      	add	r3, r6
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf6:	462a      	mov	r2, r5
 8003cf8:	f7ff ff88 	bl	8003c0c <_realloc_r>
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d1e0      	bne.n	8003cc4 <__ssputs_r+0x5a>
 8003d02:	6921      	ldr	r1, [r4, #16]
 8003d04:	4650      	mov	r0, sl
 8003d06:	f7ff ff35 	bl	8003b74 <_free_r>
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	f8ca 3000 	str.w	r3, [sl]
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d1c:	e7e9      	b.n	8003cf2 <__ssputs_r+0x88>
	...

08003d20 <_svfiprintf_r>:
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	4698      	mov	r8, r3
 8003d26:	898b      	ldrh	r3, [r1, #12]
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	b09d      	sub	sp, #116	; 0x74
 8003d2c:	4607      	mov	r7, r0
 8003d2e:	460d      	mov	r5, r1
 8003d30:	4614      	mov	r4, r2
 8003d32:	d50e      	bpl.n	8003d52 <_svfiprintf_r+0x32>
 8003d34:	690b      	ldr	r3, [r1, #16]
 8003d36:	b963      	cbnz	r3, 8003d52 <_svfiprintf_r+0x32>
 8003d38:	2140      	movs	r1, #64	; 0x40
 8003d3a:	f7fe ff6b 	bl	8002c14 <_malloc_r>
 8003d3e:	6028      	str	r0, [r5, #0]
 8003d40:	6128      	str	r0, [r5, #16]
 8003d42:	b920      	cbnz	r0, 8003d4e <_svfiprintf_r+0x2e>
 8003d44:	230c      	movs	r3, #12
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d4c:	e0d0      	b.n	8003ef0 <_svfiprintf_r+0x1d0>
 8003d4e:	2340      	movs	r3, #64	; 0x40
 8003d50:	616b      	str	r3, [r5, #20]
 8003d52:	2300      	movs	r3, #0
 8003d54:	9309      	str	r3, [sp, #36]	; 0x24
 8003d56:	2320      	movs	r3, #32
 8003d58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d60:	2330      	movs	r3, #48	; 0x30
 8003d62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f08 <_svfiprintf_r+0x1e8>
 8003d66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d6a:	f04f 0901 	mov.w	r9, #1
 8003d6e:	4623      	mov	r3, r4
 8003d70:	469a      	mov	sl, r3
 8003d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d76:	b10a      	cbz	r2, 8003d7c <_svfiprintf_r+0x5c>
 8003d78:	2a25      	cmp	r2, #37	; 0x25
 8003d7a:	d1f9      	bne.n	8003d70 <_svfiprintf_r+0x50>
 8003d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d80:	d00b      	beq.n	8003d9a <_svfiprintf_r+0x7a>
 8003d82:	465b      	mov	r3, fp
 8003d84:	4622      	mov	r2, r4
 8003d86:	4629      	mov	r1, r5
 8003d88:	4638      	mov	r0, r7
 8003d8a:	f7ff ff6e 	bl	8003c6a <__ssputs_r>
 8003d8e:	3001      	adds	r0, #1
 8003d90:	f000 80a9 	beq.w	8003ee6 <_svfiprintf_r+0x1c6>
 8003d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d96:	445a      	add	r2, fp
 8003d98:	9209      	str	r2, [sp, #36]	; 0x24
 8003d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80a1 	beq.w	8003ee6 <_svfiprintf_r+0x1c6>
 8003da4:	2300      	movs	r3, #0
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dae:	f10a 0a01 	add.w	sl, sl, #1
 8003db2:	9304      	str	r3, [sp, #16]
 8003db4:	9307      	str	r3, [sp, #28]
 8003db6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dba:	931a      	str	r3, [sp, #104]	; 0x68
 8003dbc:	4654      	mov	r4, sl
 8003dbe:	2205      	movs	r2, #5
 8003dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc4:	4850      	ldr	r0, [pc, #320]	; (8003f08 <_svfiprintf_r+0x1e8>)
 8003dc6:	f7fc f9f3 	bl	80001b0 <memchr>
 8003dca:	9a04      	ldr	r2, [sp, #16]
 8003dcc:	b9d8      	cbnz	r0, 8003e06 <_svfiprintf_r+0xe6>
 8003dce:	06d0      	lsls	r0, r2, #27
 8003dd0:	bf44      	itt	mi
 8003dd2:	2320      	movmi	r3, #32
 8003dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dd8:	0711      	lsls	r1, r2, #28
 8003dda:	bf44      	itt	mi
 8003ddc:	232b      	movmi	r3, #43	; 0x2b
 8003dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003de2:	f89a 3000 	ldrb.w	r3, [sl]
 8003de6:	2b2a      	cmp	r3, #42	; 0x2a
 8003de8:	d015      	beq.n	8003e16 <_svfiprintf_r+0xf6>
 8003dea:	9a07      	ldr	r2, [sp, #28]
 8003dec:	4654      	mov	r4, sl
 8003dee:	2000      	movs	r0, #0
 8003df0:	f04f 0c0a 	mov.w	ip, #10
 8003df4:	4621      	mov	r1, r4
 8003df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dfa:	3b30      	subs	r3, #48	; 0x30
 8003dfc:	2b09      	cmp	r3, #9
 8003dfe:	d94d      	bls.n	8003e9c <_svfiprintf_r+0x17c>
 8003e00:	b1b0      	cbz	r0, 8003e30 <_svfiprintf_r+0x110>
 8003e02:	9207      	str	r2, [sp, #28]
 8003e04:	e014      	b.n	8003e30 <_svfiprintf_r+0x110>
 8003e06:	eba0 0308 	sub.w	r3, r0, r8
 8003e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	9304      	str	r3, [sp, #16]
 8003e12:	46a2      	mov	sl, r4
 8003e14:	e7d2      	b.n	8003dbc <_svfiprintf_r+0x9c>
 8003e16:	9b03      	ldr	r3, [sp, #12]
 8003e18:	1d19      	adds	r1, r3, #4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	9103      	str	r1, [sp, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bfbb      	ittet	lt
 8003e22:	425b      	neglt	r3, r3
 8003e24:	f042 0202 	orrlt.w	r2, r2, #2
 8003e28:	9307      	strge	r3, [sp, #28]
 8003e2a:	9307      	strlt	r3, [sp, #28]
 8003e2c:	bfb8      	it	lt
 8003e2e:	9204      	strlt	r2, [sp, #16]
 8003e30:	7823      	ldrb	r3, [r4, #0]
 8003e32:	2b2e      	cmp	r3, #46	; 0x2e
 8003e34:	d10c      	bne.n	8003e50 <_svfiprintf_r+0x130>
 8003e36:	7863      	ldrb	r3, [r4, #1]
 8003e38:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3a:	d134      	bne.n	8003ea6 <_svfiprintf_r+0x186>
 8003e3c:	9b03      	ldr	r3, [sp, #12]
 8003e3e:	1d1a      	adds	r2, r3, #4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	9203      	str	r2, [sp, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bfb8      	it	lt
 8003e48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e4c:	3402      	adds	r4, #2
 8003e4e:	9305      	str	r3, [sp, #20]
 8003e50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003f18 <_svfiprintf_r+0x1f8>
 8003e54:	7821      	ldrb	r1, [r4, #0]
 8003e56:	2203      	movs	r2, #3
 8003e58:	4650      	mov	r0, sl
 8003e5a:	f7fc f9a9 	bl	80001b0 <memchr>
 8003e5e:	b138      	cbz	r0, 8003e70 <_svfiprintf_r+0x150>
 8003e60:	9b04      	ldr	r3, [sp, #16]
 8003e62:	eba0 000a 	sub.w	r0, r0, sl
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	4082      	lsls	r2, r0
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	3401      	adds	r4, #1
 8003e6e:	9304      	str	r3, [sp, #16]
 8003e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e74:	4825      	ldr	r0, [pc, #148]	; (8003f0c <_svfiprintf_r+0x1ec>)
 8003e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e7a:	2206      	movs	r2, #6
 8003e7c:	f7fc f998 	bl	80001b0 <memchr>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d038      	beq.n	8003ef6 <_svfiprintf_r+0x1d6>
 8003e84:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <_svfiprintf_r+0x1f0>)
 8003e86:	bb1b      	cbnz	r3, 8003ed0 <_svfiprintf_r+0x1b0>
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	3307      	adds	r3, #7
 8003e8c:	f023 0307 	bic.w	r3, r3, #7
 8003e90:	3308      	adds	r3, #8
 8003e92:	9303      	str	r3, [sp, #12]
 8003e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e96:	4433      	add	r3, r6
 8003e98:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9a:	e768      	b.n	8003d6e <_svfiprintf_r+0x4e>
 8003e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	e7a6      	b.n	8003df4 <_svfiprintf_r+0xd4>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	3401      	adds	r4, #1
 8003eaa:	9305      	str	r3, [sp, #20]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f04f 0c0a 	mov.w	ip, #10
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eb8:	3a30      	subs	r2, #48	; 0x30
 8003eba:	2a09      	cmp	r2, #9
 8003ebc:	d903      	bls.n	8003ec6 <_svfiprintf_r+0x1a6>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0c6      	beq.n	8003e50 <_svfiprintf_r+0x130>
 8003ec2:	9105      	str	r1, [sp, #20]
 8003ec4:	e7c4      	b.n	8003e50 <_svfiprintf_r+0x130>
 8003ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eca:	4604      	mov	r4, r0
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e7f0      	b.n	8003eb2 <_svfiprintf_r+0x192>
 8003ed0:	ab03      	add	r3, sp, #12
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	462a      	mov	r2, r5
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <_svfiprintf_r+0x1f4>)
 8003ed8:	a904      	add	r1, sp, #16
 8003eda:	4638      	mov	r0, r7
 8003edc:	f3af 8000 	nop.w
 8003ee0:	1c42      	adds	r2, r0, #1
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	d1d6      	bne.n	8003e94 <_svfiprintf_r+0x174>
 8003ee6:	89ab      	ldrh	r3, [r5, #12]
 8003ee8:	065b      	lsls	r3, r3, #25
 8003eea:	f53f af2d 	bmi.w	8003d48 <_svfiprintf_r+0x28>
 8003eee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ef0:	b01d      	add	sp, #116	; 0x74
 8003ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef6:	ab03      	add	r3, sp, #12
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	462a      	mov	r2, r5
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <_svfiprintf_r+0x1f4>)
 8003efe:	a904      	add	r1, sp, #16
 8003f00:	4638      	mov	r0, r7
 8003f02:	f000 fa4b 	bl	800439c <_printf_i>
 8003f06:	e7eb      	b.n	8003ee0 <_svfiprintf_r+0x1c0>
 8003f08:	08005278 	.word	0x08005278
 8003f0c:	08005282 	.word	0x08005282
 8003f10:	00000000 	.word	0x00000000
 8003f14:	08003c6b 	.word	0x08003c6b
 8003f18:	0800527e 	.word	0x0800527e

08003f1c <_sungetc_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	1c4b      	adds	r3, r1, #1
 8003f20:	4614      	mov	r4, r2
 8003f22:	d103      	bne.n	8003f2c <_sungetc_r+0x10>
 8003f24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003f28:	4628      	mov	r0, r5
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	8993      	ldrh	r3, [r2, #12]
 8003f2e:	f023 0320 	bic.w	r3, r3, #32
 8003f32:	8193      	strh	r3, [r2, #12]
 8003f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f36:	6852      	ldr	r2, [r2, #4]
 8003f38:	b2cd      	uxtb	r5, r1
 8003f3a:	b18b      	cbz	r3, 8003f60 <_sungetc_r+0x44>
 8003f3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	dd08      	ble.n	8003f54 <_sungetc_r+0x38>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	1e5a      	subs	r2, r3, #1
 8003f46:	6022      	str	r2, [r4, #0]
 8003f48:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	6063      	str	r3, [r4, #4]
 8003f52:	e7e9      	b.n	8003f28 <_sungetc_r+0xc>
 8003f54:	4621      	mov	r1, r4
 8003f56:	f000 fe19 	bl	8004b8c <__submore>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d0f1      	beq.n	8003f42 <_sungetc_r+0x26>
 8003f5e:	e7e1      	b.n	8003f24 <_sungetc_r+0x8>
 8003f60:	6921      	ldr	r1, [r4, #16]
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	b151      	cbz	r1, 8003f7c <_sungetc_r+0x60>
 8003f66:	4299      	cmp	r1, r3
 8003f68:	d208      	bcs.n	8003f7c <_sungetc_r+0x60>
 8003f6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003f6e:	42a9      	cmp	r1, r5
 8003f70:	d104      	bne.n	8003f7c <_sungetc_r+0x60>
 8003f72:	3b01      	subs	r3, #1
 8003f74:	3201      	adds	r2, #1
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	6062      	str	r2, [r4, #4]
 8003f7a:	e7d5      	b.n	8003f28 <_sungetc_r+0xc>
 8003f7c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f84:	6363      	str	r3, [r4, #52]	; 0x34
 8003f86:	2303      	movs	r3, #3
 8003f88:	63a3      	str	r3, [r4, #56]	; 0x38
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	2301      	movs	r3, #1
 8003f94:	e7dc      	b.n	8003f50 <_sungetc_r+0x34>

08003f96 <__ssrefill_r>:
 8003f96:	b510      	push	{r4, lr}
 8003f98:	460c      	mov	r4, r1
 8003f9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003f9c:	b169      	cbz	r1, 8003fba <__ssrefill_r+0x24>
 8003f9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	d001      	beq.n	8003faa <__ssrefill_r+0x14>
 8003fa6:	f7ff fde5 	bl	8003b74 <_free_r>
 8003faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fac:	6063      	str	r3, [r4, #4]
 8003fae:	2000      	movs	r0, #0
 8003fb0:	6360      	str	r0, [r4, #52]	; 0x34
 8003fb2:	b113      	cbz	r3, 8003fba <__ssrefill_r+0x24>
 8003fb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	6923      	ldr	r3, [r4, #16]
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6063      	str	r3, [r4, #4]
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f043 0320 	orr.w	r3, r3, #32
 8003fc8:	81a3      	strh	r3, [r4, #12]
 8003fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fce:	e7f3      	b.n	8003fb8 <__ssrefill_r+0x22>

08003fd0 <__ssvfiscanf_r>:
 8003fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003fda:	2100      	movs	r1, #0
 8003fdc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003fe0:	49a6      	ldr	r1, [pc, #664]	; (800427c <__ssvfiscanf_r+0x2ac>)
 8003fe2:	91a0      	str	r1, [sp, #640]	; 0x280
 8003fe4:	f10d 0804 	add.w	r8, sp, #4
 8003fe8:	49a5      	ldr	r1, [pc, #660]	; (8004280 <__ssvfiscanf_r+0x2b0>)
 8003fea:	4fa6      	ldr	r7, [pc, #664]	; (8004284 <__ssvfiscanf_r+0x2b4>)
 8003fec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004288 <__ssvfiscanf_r+0x2b8>
 8003ff0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	91a1      	str	r1, [sp, #644]	; 0x284
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	7813      	ldrb	r3, [r2, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 815a 	beq.w	80042b6 <__ssvfiscanf_r+0x2e6>
 8004002:	5cf9      	ldrb	r1, [r7, r3]
 8004004:	f011 0108 	ands.w	r1, r1, #8
 8004008:	f102 0501 	add.w	r5, r2, #1
 800400c:	d019      	beq.n	8004042 <__ssvfiscanf_r+0x72>
 800400e:	6863      	ldr	r3, [r4, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	dd0f      	ble.n	8004034 <__ssvfiscanf_r+0x64>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	781a      	ldrb	r2, [r3, #0]
 8004018:	5cba      	ldrb	r2, [r7, r2]
 800401a:	0712      	lsls	r2, r2, #28
 800401c:	d401      	bmi.n	8004022 <__ssvfiscanf_r+0x52>
 800401e:	462a      	mov	r2, r5
 8004020:	e7eb      	b.n	8003ffa <__ssvfiscanf_r+0x2a>
 8004022:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004024:	3201      	adds	r2, #1
 8004026:	9245      	str	r2, [sp, #276]	; 0x114
 8004028:	6862      	ldr	r2, [r4, #4]
 800402a:	3301      	adds	r3, #1
 800402c:	3a01      	subs	r2, #1
 800402e:	6062      	str	r2, [r4, #4]
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	e7ec      	b.n	800400e <__ssvfiscanf_r+0x3e>
 8004034:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004036:	4621      	mov	r1, r4
 8004038:	4630      	mov	r0, r6
 800403a:	4798      	blx	r3
 800403c:	2800      	cmp	r0, #0
 800403e:	d0e9      	beq.n	8004014 <__ssvfiscanf_r+0x44>
 8004040:	e7ed      	b.n	800401e <__ssvfiscanf_r+0x4e>
 8004042:	2b25      	cmp	r3, #37	; 0x25
 8004044:	d012      	beq.n	800406c <__ssvfiscanf_r+0x9c>
 8004046:	469a      	mov	sl, r3
 8004048:	6863      	ldr	r3, [r4, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f340 8091 	ble.w	8004172 <__ssvfiscanf_r+0x1a2>
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	7813      	ldrb	r3, [r2, #0]
 8004054:	4553      	cmp	r3, sl
 8004056:	f040 812e 	bne.w	80042b6 <__ssvfiscanf_r+0x2e6>
 800405a:	6863      	ldr	r3, [r4, #4]
 800405c:	3b01      	subs	r3, #1
 800405e:	6063      	str	r3, [r4, #4]
 8004060:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004062:	3201      	adds	r2, #1
 8004064:	3301      	adds	r3, #1
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	9345      	str	r3, [sp, #276]	; 0x114
 800406a:	e7d8      	b.n	800401e <__ssvfiscanf_r+0x4e>
 800406c:	9141      	str	r1, [sp, #260]	; 0x104
 800406e:	9143      	str	r1, [sp, #268]	; 0x10c
 8004070:	7853      	ldrb	r3, [r2, #1]
 8004072:	2b2a      	cmp	r3, #42	; 0x2a
 8004074:	bf02      	ittt	eq
 8004076:	2310      	moveq	r3, #16
 8004078:	1c95      	addeq	r5, r2, #2
 800407a:	9341      	streq	r3, [sp, #260]	; 0x104
 800407c:	220a      	movs	r2, #10
 800407e:	46aa      	mov	sl, r5
 8004080:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004084:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004088:	2b09      	cmp	r3, #9
 800408a:	d91c      	bls.n	80040c6 <__ssvfiscanf_r+0xf6>
 800408c:	487e      	ldr	r0, [pc, #504]	; (8004288 <__ssvfiscanf_r+0x2b8>)
 800408e:	2203      	movs	r2, #3
 8004090:	f7fc f88e 	bl	80001b0 <memchr>
 8004094:	b138      	cbz	r0, 80040a6 <__ssvfiscanf_r+0xd6>
 8004096:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004098:	eba0 0009 	sub.w	r0, r0, r9
 800409c:	2301      	movs	r3, #1
 800409e:	4083      	lsls	r3, r0
 80040a0:	4313      	orrs	r3, r2
 80040a2:	9341      	str	r3, [sp, #260]	; 0x104
 80040a4:	4655      	mov	r5, sl
 80040a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80040aa:	2b78      	cmp	r3, #120	; 0x78
 80040ac:	d806      	bhi.n	80040bc <__ssvfiscanf_r+0xec>
 80040ae:	2b57      	cmp	r3, #87	; 0x57
 80040b0:	d810      	bhi.n	80040d4 <__ssvfiscanf_r+0x104>
 80040b2:	2b25      	cmp	r3, #37	; 0x25
 80040b4:	d0c7      	beq.n	8004046 <__ssvfiscanf_r+0x76>
 80040b6:	d857      	bhi.n	8004168 <__ssvfiscanf_r+0x198>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d065      	beq.n	8004188 <__ssvfiscanf_r+0x1b8>
 80040bc:	2303      	movs	r3, #3
 80040be:	9347      	str	r3, [sp, #284]	; 0x11c
 80040c0:	230a      	movs	r3, #10
 80040c2:	9342      	str	r3, [sp, #264]	; 0x108
 80040c4:	e076      	b.n	80041b4 <__ssvfiscanf_r+0x1e4>
 80040c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80040c8:	fb02 1103 	mla	r1, r2, r3, r1
 80040cc:	3930      	subs	r1, #48	; 0x30
 80040ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80040d0:	4655      	mov	r5, sl
 80040d2:	e7d4      	b.n	800407e <__ssvfiscanf_r+0xae>
 80040d4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80040d8:	2a20      	cmp	r2, #32
 80040da:	d8ef      	bhi.n	80040bc <__ssvfiscanf_r+0xec>
 80040dc:	a101      	add	r1, pc, #4	; (adr r1, 80040e4 <__ssvfiscanf_r+0x114>)
 80040de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	08004197 	.word	0x08004197
 80040e8:	080040bd 	.word	0x080040bd
 80040ec:	080040bd 	.word	0x080040bd
 80040f0:	080041f5 	.word	0x080041f5
 80040f4:	080040bd 	.word	0x080040bd
 80040f8:	080040bd 	.word	0x080040bd
 80040fc:	080040bd 	.word	0x080040bd
 8004100:	080040bd 	.word	0x080040bd
 8004104:	080040bd 	.word	0x080040bd
 8004108:	080040bd 	.word	0x080040bd
 800410c:	080040bd 	.word	0x080040bd
 8004110:	0800420b 	.word	0x0800420b
 8004114:	080041f1 	.word	0x080041f1
 8004118:	0800416f 	.word	0x0800416f
 800411c:	0800416f 	.word	0x0800416f
 8004120:	0800416f 	.word	0x0800416f
 8004124:	080040bd 	.word	0x080040bd
 8004128:	080041ad 	.word	0x080041ad
 800412c:	080040bd 	.word	0x080040bd
 8004130:	080040bd 	.word	0x080040bd
 8004134:	080040bd 	.word	0x080040bd
 8004138:	080040bd 	.word	0x080040bd
 800413c:	0800421b 	.word	0x0800421b
 8004140:	080041e9 	.word	0x080041e9
 8004144:	0800418f 	.word	0x0800418f
 8004148:	080040bd 	.word	0x080040bd
 800414c:	080040bd 	.word	0x080040bd
 8004150:	08004217 	.word	0x08004217
 8004154:	080040bd 	.word	0x080040bd
 8004158:	080041f1 	.word	0x080041f1
 800415c:	080040bd 	.word	0x080040bd
 8004160:	080040bd 	.word	0x080040bd
 8004164:	08004197 	.word	0x08004197
 8004168:	3b45      	subs	r3, #69	; 0x45
 800416a:	2b02      	cmp	r3, #2
 800416c:	d8a6      	bhi.n	80040bc <__ssvfiscanf_r+0xec>
 800416e:	2305      	movs	r3, #5
 8004170:	e01f      	b.n	80041b2 <__ssvfiscanf_r+0x1e2>
 8004172:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004174:	4621      	mov	r1, r4
 8004176:	4630      	mov	r0, r6
 8004178:	4798      	blx	r3
 800417a:	2800      	cmp	r0, #0
 800417c:	f43f af68 	beq.w	8004050 <__ssvfiscanf_r+0x80>
 8004180:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004182:	2800      	cmp	r0, #0
 8004184:	f040 808d 	bne.w	80042a2 <__ssvfiscanf_r+0x2d2>
 8004188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800418c:	e08f      	b.n	80042ae <__ssvfiscanf_r+0x2de>
 800418e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004190:	f042 0220 	orr.w	r2, r2, #32
 8004194:	9241      	str	r2, [sp, #260]	; 0x104
 8004196:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419c:	9241      	str	r2, [sp, #260]	; 0x104
 800419e:	2210      	movs	r2, #16
 80041a0:	2b6f      	cmp	r3, #111	; 0x6f
 80041a2:	9242      	str	r2, [sp, #264]	; 0x108
 80041a4:	bf34      	ite	cc
 80041a6:	2303      	movcc	r3, #3
 80041a8:	2304      	movcs	r3, #4
 80041aa:	e002      	b.n	80041b2 <__ssvfiscanf_r+0x1e2>
 80041ac:	2300      	movs	r3, #0
 80041ae:	9342      	str	r3, [sp, #264]	; 0x108
 80041b0:	2303      	movs	r3, #3
 80041b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	dd3d      	ble.n	8004236 <__ssvfiscanf_r+0x266>
 80041ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80041bc:	0659      	lsls	r1, r3, #25
 80041be:	d404      	bmi.n	80041ca <__ssvfiscanf_r+0x1fa>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	781a      	ldrb	r2, [r3, #0]
 80041c4:	5cba      	ldrb	r2, [r7, r2]
 80041c6:	0712      	lsls	r2, r2, #28
 80041c8:	d43c      	bmi.n	8004244 <__ssvfiscanf_r+0x274>
 80041ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	dc4b      	bgt.n	8004268 <__ssvfiscanf_r+0x298>
 80041d0:	466b      	mov	r3, sp
 80041d2:	4622      	mov	r2, r4
 80041d4:	a941      	add	r1, sp, #260	; 0x104
 80041d6:	4630      	mov	r0, r6
 80041d8:	f000 fa02 	bl	80045e0 <_scanf_chars>
 80041dc:	2801      	cmp	r0, #1
 80041de:	d06a      	beq.n	80042b6 <__ssvfiscanf_r+0x2e6>
 80041e0:	2802      	cmp	r0, #2
 80041e2:	f47f af1c 	bne.w	800401e <__ssvfiscanf_r+0x4e>
 80041e6:	e7cb      	b.n	8004180 <__ssvfiscanf_r+0x1b0>
 80041e8:	2308      	movs	r3, #8
 80041ea:	9342      	str	r3, [sp, #264]	; 0x108
 80041ec:	2304      	movs	r3, #4
 80041ee:	e7e0      	b.n	80041b2 <__ssvfiscanf_r+0x1e2>
 80041f0:	220a      	movs	r2, #10
 80041f2:	e7d5      	b.n	80041a0 <__ssvfiscanf_r+0x1d0>
 80041f4:	4629      	mov	r1, r5
 80041f6:	4640      	mov	r0, r8
 80041f8:	f000 fb52 	bl	80048a0 <__sccl>
 80041fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80041fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004202:	9341      	str	r3, [sp, #260]	; 0x104
 8004204:	4605      	mov	r5, r0
 8004206:	2301      	movs	r3, #1
 8004208:	e7d3      	b.n	80041b2 <__ssvfiscanf_r+0x1e2>
 800420a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800420c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004210:	9341      	str	r3, [sp, #260]	; 0x104
 8004212:	2300      	movs	r3, #0
 8004214:	e7cd      	b.n	80041b2 <__ssvfiscanf_r+0x1e2>
 8004216:	2302      	movs	r3, #2
 8004218:	e7cb      	b.n	80041b2 <__ssvfiscanf_r+0x1e2>
 800421a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800421c:	06c3      	lsls	r3, r0, #27
 800421e:	f53f aefe 	bmi.w	800401e <__ssvfiscanf_r+0x4e>
 8004222:	9b00      	ldr	r3, [sp, #0]
 8004224:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004226:	1d19      	adds	r1, r3, #4
 8004228:	9100      	str	r1, [sp, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	07c0      	lsls	r0, r0, #31
 800422e:	bf4c      	ite	mi
 8004230:	801a      	strhmi	r2, [r3, #0]
 8004232:	601a      	strpl	r2, [r3, #0]
 8004234:	e6f3      	b.n	800401e <__ssvfiscanf_r+0x4e>
 8004236:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004238:	4621      	mov	r1, r4
 800423a:	4630      	mov	r0, r6
 800423c:	4798      	blx	r3
 800423e:	2800      	cmp	r0, #0
 8004240:	d0bb      	beq.n	80041ba <__ssvfiscanf_r+0x1ea>
 8004242:	e79d      	b.n	8004180 <__ssvfiscanf_r+0x1b0>
 8004244:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004246:	3201      	adds	r2, #1
 8004248:	9245      	str	r2, [sp, #276]	; 0x114
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	3a01      	subs	r2, #1
 800424e:	2a00      	cmp	r2, #0
 8004250:	6062      	str	r2, [r4, #4]
 8004252:	dd02      	ble.n	800425a <__ssvfiscanf_r+0x28a>
 8004254:	3301      	adds	r3, #1
 8004256:	6023      	str	r3, [r4, #0]
 8004258:	e7b2      	b.n	80041c0 <__ssvfiscanf_r+0x1f0>
 800425a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800425c:	4621      	mov	r1, r4
 800425e:	4630      	mov	r0, r6
 8004260:	4798      	blx	r3
 8004262:	2800      	cmp	r0, #0
 8004264:	d0ac      	beq.n	80041c0 <__ssvfiscanf_r+0x1f0>
 8004266:	e78b      	b.n	8004180 <__ssvfiscanf_r+0x1b0>
 8004268:	2b04      	cmp	r3, #4
 800426a:	dc0f      	bgt.n	800428c <__ssvfiscanf_r+0x2bc>
 800426c:	466b      	mov	r3, sp
 800426e:	4622      	mov	r2, r4
 8004270:	a941      	add	r1, sp, #260	; 0x104
 8004272:	4630      	mov	r0, r6
 8004274:	f000 fa0e 	bl	8004694 <_scanf_i>
 8004278:	e7b0      	b.n	80041dc <__ssvfiscanf_r+0x20c>
 800427a:	bf00      	nop
 800427c:	08003f1d 	.word	0x08003f1d
 8004280:	08003f97 	.word	0x08003f97
 8004284:	080059be 	.word	0x080059be
 8004288:	0800527e 	.word	0x0800527e
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <__ssvfiscanf_r+0x2ec>)
 800428e:	2b00      	cmp	r3, #0
 8004290:	f43f aec5 	beq.w	800401e <__ssvfiscanf_r+0x4e>
 8004294:	466b      	mov	r3, sp
 8004296:	4622      	mov	r2, r4
 8004298:	a941      	add	r1, sp, #260	; 0x104
 800429a:	4630      	mov	r0, r6
 800429c:	f3af 8000 	nop.w
 80042a0:	e79c      	b.n	80041dc <__ssvfiscanf_r+0x20c>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042a8:	bf18      	it	ne
 80042aa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80042ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80042b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80042b8:	e7f9      	b.n	80042ae <__ssvfiscanf_r+0x2de>
 80042ba:	bf00      	nop
 80042bc:	00000000 	.word	0x00000000

080042c0 <_printf_common>:
 80042c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c4:	4616      	mov	r6, r2
 80042c6:	4699      	mov	r9, r3
 80042c8:	688a      	ldr	r2, [r1, #8]
 80042ca:	690b      	ldr	r3, [r1, #16]
 80042cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042d0:	4293      	cmp	r3, r2
 80042d2:	bfb8      	it	lt
 80042d4:	4613      	movlt	r3, r2
 80042d6:	6033      	str	r3, [r6, #0]
 80042d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042dc:	4607      	mov	r7, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	b10a      	cbz	r2, 80042e6 <_printf_common+0x26>
 80042e2:	3301      	adds	r3, #1
 80042e4:	6033      	str	r3, [r6, #0]
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	0699      	lsls	r1, r3, #26
 80042ea:	bf42      	ittt	mi
 80042ec:	6833      	ldrmi	r3, [r6, #0]
 80042ee:	3302      	addmi	r3, #2
 80042f0:	6033      	strmi	r3, [r6, #0]
 80042f2:	6825      	ldr	r5, [r4, #0]
 80042f4:	f015 0506 	ands.w	r5, r5, #6
 80042f8:	d106      	bne.n	8004308 <_printf_common+0x48>
 80042fa:	f104 0a19 	add.w	sl, r4, #25
 80042fe:	68e3      	ldr	r3, [r4, #12]
 8004300:	6832      	ldr	r2, [r6, #0]
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	42ab      	cmp	r3, r5
 8004306:	dc26      	bgt.n	8004356 <_printf_common+0x96>
 8004308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800430c:	1e13      	subs	r3, r2, #0
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	bf18      	it	ne
 8004312:	2301      	movne	r3, #1
 8004314:	0692      	lsls	r2, r2, #26
 8004316:	d42b      	bmi.n	8004370 <_printf_common+0xb0>
 8004318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800431c:	4649      	mov	r1, r9
 800431e:	4638      	mov	r0, r7
 8004320:	47c0      	blx	r8
 8004322:	3001      	adds	r0, #1
 8004324:	d01e      	beq.n	8004364 <_printf_common+0xa4>
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	6922      	ldr	r2, [r4, #16]
 800432a:	f003 0306 	and.w	r3, r3, #6
 800432e:	2b04      	cmp	r3, #4
 8004330:	bf02      	ittt	eq
 8004332:	68e5      	ldreq	r5, [r4, #12]
 8004334:	6833      	ldreq	r3, [r6, #0]
 8004336:	1aed      	subeq	r5, r5, r3
 8004338:	68a3      	ldr	r3, [r4, #8]
 800433a:	bf0c      	ite	eq
 800433c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004340:	2500      	movne	r5, #0
 8004342:	4293      	cmp	r3, r2
 8004344:	bfc4      	itt	gt
 8004346:	1a9b      	subgt	r3, r3, r2
 8004348:	18ed      	addgt	r5, r5, r3
 800434a:	2600      	movs	r6, #0
 800434c:	341a      	adds	r4, #26
 800434e:	42b5      	cmp	r5, r6
 8004350:	d11a      	bne.n	8004388 <_printf_common+0xc8>
 8004352:	2000      	movs	r0, #0
 8004354:	e008      	b.n	8004368 <_printf_common+0xa8>
 8004356:	2301      	movs	r3, #1
 8004358:	4652      	mov	r2, sl
 800435a:	4649      	mov	r1, r9
 800435c:	4638      	mov	r0, r7
 800435e:	47c0      	blx	r8
 8004360:	3001      	adds	r0, #1
 8004362:	d103      	bne.n	800436c <_printf_common+0xac>
 8004364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800436c:	3501      	adds	r5, #1
 800436e:	e7c6      	b.n	80042fe <_printf_common+0x3e>
 8004370:	18e1      	adds	r1, r4, r3
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	2030      	movs	r0, #48	; 0x30
 8004376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800437a:	4422      	add	r2, r4
 800437c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004384:	3302      	adds	r3, #2
 8004386:	e7c7      	b.n	8004318 <_printf_common+0x58>
 8004388:	2301      	movs	r3, #1
 800438a:	4622      	mov	r2, r4
 800438c:	4649      	mov	r1, r9
 800438e:	4638      	mov	r0, r7
 8004390:	47c0      	blx	r8
 8004392:	3001      	adds	r0, #1
 8004394:	d0e6      	beq.n	8004364 <_printf_common+0xa4>
 8004396:	3601      	adds	r6, #1
 8004398:	e7d9      	b.n	800434e <_printf_common+0x8e>
	...

0800439c <_printf_i>:
 800439c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	7e0f      	ldrb	r7, [r1, #24]
 80043a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043a4:	2f78      	cmp	r7, #120	; 0x78
 80043a6:	4691      	mov	r9, r2
 80043a8:	4680      	mov	r8, r0
 80043aa:	460c      	mov	r4, r1
 80043ac:	469a      	mov	sl, r3
 80043ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043b2:	d807      	bhi.n	80043c4 <_printf_i+0x28>
 80043b4:	2f62      	cmp	r7, #98	; 0x62
 80043b6:	d80a      	bhi.n	80043ce <_printf_i+0x32>
 80043b8:	2f00      	cmp	r7, #0
 80043ba:	f000 80d4 	beq.w	8004566 <_printf_i+0x1ca>
 80043be:	2f58      	cmp	r7, #88	; 0x58
 80043c0:	f000 80c0 	beq.w	8004544 <_printf_i+0x1a8>
 80043c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043cc:	e03a      	b.n	8004444 <_printf_i+0xa8>
 80043ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043d2:	2b15      	cmp	r3, #21
 80043d4:	d8f6      	bhi.n	80043c4 <_printf_i+0x28>
 80043d6:	a101      	add	r1, pc, #4	; (adr r1, 80043dc <_printf_i+0x40>)
 80043d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043dc:	08004435 	.word	0x08004435
 80043e0:	08004449 	.word	0x08004449
 80043e4:	080043c5 	.word	0x080043c5
 80043e8:	080043c5 	.word	0x080043c5
 80043ec:	080043c5 	.word	0x080043c5
 80043f0:	080043c5 	.word	0x080043c5
 80043f4:	08004449 	.word	0x08004449
 80043f8:	080043c5 	.word	0x080043c5
 80043fc:	080043c5 	.word	0x080043c5
 8004400:	080043c5 	.word	0x080043c5
 8004404:	080043c5 	.word	0x080043c5
 8004408:	0800454d 	.word	0x0800454d
 800440c:	08004475 	.word	0x08004475
 8004410:	08004507 	.word	0x08004507
 8004414:	080043c5 	.word	0x080043c5
 8004418:	080043c5 	.word	0x080043c5
 800441c:	0800456f 	.word	0x0800456f
 8004420:	080043c5 	.word	0x080043c5
 8004424:	08004475 	.word	0x08004475
 8004428:	080043c5 	.word	0x080043c5
 800442c:	080043c5 	.word	0x080043c5
 8004430:	0800450f 	.word	0x0800450f
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	1d1a      	adds	r2, r3, #4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	602a      	str	r2, [r5, #0]
 800443c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004444:	2301      	movs	r3, #1
 8004446:	e09f      	b.n	8004588 <_printf_i+0x1ec>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	682b      	ldr	r3, [r5, #0]
 800444c:	0607      	lsls	r7, r0, #24
 800444e:	f103 0104 	add.w	r1, r3, #4
 8004452:	6029      	str	r1, [r5, #0]
 8004454:	d501      	bpl.n	800445a <_printf_i+0xbe>
 8004456:	681e      	ldr	r6, [r3, #0]
 8004458:	e003      	b.n	8004462 <_printf_i+0xc6>
 800445a:	0646      	lsls	r6, r0, #25
 800445c:	d5fb      	bpl.n	8004456 <_printf_i+0xba>
 800445e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004462:	2e00      	cmp	r6, #0
 8004464:	da03      	bge.n	800446e <_printf_i+0xd2>
 8004466:	232d      	movs	r3, #45	; 0x2d
 8004468:	4276      	negs	r6, r6
 800446a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800446e:	485a      	ldr	r0, [pc, #360]	; (80045d8 <_printf_i+0x23c>)
 8004470:	230a      	movs	r3, #10
 8004472:	e012      	b.n	800449a <_printf_i+0xfe>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	6820      	ldr	r0, [r4, #0]
 8004478:	1d19      	adds	r1, r3, #4
 800447a:	6029      	str	r1, [r5, #0]
 800447c:	0605      	lsls	r5, r0, #24
 800447e:	d501      	bpl.n	8004484 <_printf_i+0xe8>
 8004480:	681e      	ldr	r6, [r3, #0]
 8004482:	e002      	b.n	800448a <_printf_i+0xee>
 8004484:	0641      	lsls	r1, r0, #25
 8004486:	d5fb      	bpl.n	8004480 <_printf_i+0xe4>
 8004488:	881e      	ldrh	r6, [r3, #0]
 800448a:	4853      	ldr	r0, [pc, #332]	; (80045d8 <_printf_i+0x23c>)
 800448c:	2f6f      	cmp	r7, #111	; 0x6f
 800448e:	bf0c      	ite	eq
 8004490:	2308      	moveq	r3, #8
 8004492:	230a      	movne	r3, #10
 8004494:	2100      	movs	r1, #0
 8004496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800449a:	6865      	ldr	r5, [r4, #4]
 800449c:	60a5      	str	r5, [r4, #8]
 800449e:	2d00      	cmp	r5, #0
 80044a0:	bfa2      	ittt	ge
 80044a2:	6821      	ldrge	r1, [r4, #0]
 80044a4:	f021 0104 	bicge.w	r1, r1, #4
 80044a8:	6021      	strge	r1, [r4, #0]
 80044aa:	b90e      	cbnz	r6, 80044b0 <_printf_i+0x114>
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	d04b      	beq.n	8004548 <_printf_i+0x1ac>
 80044b0:	4615      	mov	r5, r2
 80044b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80044b6:	fb03 6711 	mls	r7, r3, r1, r6
 80044ba:	5dc7      	ldrb	r7, [r0, r7]
 80044bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044c0:	4637      	mov	r7, r6
 80044c2:	42bb      	cmp	r3, r7
 80044c4:	460e      	mov	r6, r1
 80044c6:	d9f4      	bls.n	80044b2 <_printf_i+0x116>
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d10b      	bne.n	80044e4 <_printf_i+0x148>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	07de      	lsls	r6, r3, #31
 80044d0:	d508      	bpl.n	80044e4 <_printf_i+0x148>
 80044d2:	6923      	ldr	r3, [r4, #16]
 80044d4:	6861      	ldr	r1, [r4, #4]
 80044d6:	4299      	cmp	r1, r3
 80044d8:	bfde      	ittt	le
 80044da:	2330      	movle	r3, #48	; 0x30
 80044dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80044e4:	1b52      	subs	r2, r2, r5
 80044e6:	6122      	str	r2, [r4, #16]
 80044e8:	f8cd a000 	str.w	sl, [sp]
 80044ec:	464b      	mov	r3, r9
 80044ee:	aa03      	add	r2, sp, #12
 80044f0:	4621      	mov	r1, r4
 80044f2:	4640      	mov	r0, r8
 80044f4:	f7ff fee4 	bl	80042c0 <_printf_common>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d14a      	bne.n	8004592 <_printf_i+0x1f6>
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004500:	b004      	add	sp, #16
 8004502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	f043 0320 	orr.w	r3, r3, #32
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	4833      	ldr	r0, [pc, #204]	; (80045dc <_printf_i+0x240>)
 8004510:	2778      	movs	r7, #120	; 0x78
 8004512:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	6829      	ldr	r1, [r5, #0]
 800451a:	061f      	lsls	r7, r3, #24
 800451c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004520:	d402      	bmi.n	8004528 <_printf_i+0x18c>
 8004522:	065f      	lsls	r7, r3, #25
 8004524:	bf48      	it	mi
 8004526:	b2b6      	uxthmi	r6, r6
 8004528:	07df      	lsls	r7, r3, #31
 800452a:	bf48      	it	mi
 800452c:	f043 0320 	orrmi.w	r3, r3, #32
 8004530:	6029      	str	r1, [r5, #0]
 8004532:	bf48      	it	mi
 8004534:	6023      	strmi	r3, [r4, #0]
 8004536:	b91e      	cbnz	r6, 8004540 <_printf_i+0x1a4>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f023 0320 	bic.w	r3, r3, #32
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	2310      	movs	r3, #16
 8004542:	e7a7      	b.n	8004494 <_printf_i+0xf8>
 8004544:	4824      	ldr	r0, [pc, #144]	; (80045d8 <_printf_i+0x23c>)
 8004546:	e7e4      	b.n	8004512 <_printf_i+0x176>
 8004548:	4615      	mov	r5, r2
 800454a:	e7bd      	b.n	80044c8 <_printf_i+0x12c>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	6826      	ldr	r6, [r4, #0]
 8004550:	6961      	ldr	r1, [r4, #20]
 8004552:	1d18      	adds	r0, r3, #4
 8004554:	6028      	str	r0, [r5, #0]
 8004556:	0635      	lsls	r5, r6, #24
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	d501      	bpl.n	8004560 <_printf_i+0x1c4>
 800455c:	6019      	str	r1, [r3, #0]
 800455e:	e002      	b.n	8004566 <_printf_i+0x1ca>
 8004560:	0670      	lsls	r0, r6, #25
 8004562:	d5fb      	bpl.n	800455c <_printf_i+0x1c0>
 8004564:	8019      	strh	r1, [r3, #0]
 8004566:	2300      	movs	r3, #0
 8004568:	6123      	str	r3, [r4, #16]
 800456a:	4615      	mov	r5, r2
 800456c:	e7bc      	b.n	80044e8 <_printf_i+0x14c>
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	1d1a      	adds	r2, r3, #4
 8004572:	602a      	str	r2, [r5, #0]
 8004574:	681d      	ldr	r5, [r3, #0]
 8004576:	6862      	ldr	r2, [r4, #4]
 8004578:	2100      	movs	r1, #0
 800457a:	4628      	mov	r0, r5
 800457c:	f7fb fe18 	bl	80001b0 <memchr>
 8004580:	b108      	cbz	r0, 8004586 <_printf_i+0x1ea>
 8004582:	1b40      	subs	r0, r0, r5
 8004584:	6060      	str	r0, [r4, #4]
 8004586:	6863      	ldr	r3, [r4, #4]
 8004588:	6123      	str	r3, [r4, #16]
 800458a:	2300      	movs	r3, #0
 800458c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004590:	e7aa      	b.n	80044e8 <_printf_i+0x14c>
 8004592:	6923      	ldr	r3, [r4, #16]
 8004594:	462a      	mov	r2, r5
 8004596:	4649      	mov	r1, r9
 8004598:	4640      	mov	r0, r8
 800459a:	47d0      	blx	sl
 800459c:	3001      	adds	r0, #1
 800459e:	d0ad      	beq.n	80044fc <_printf_i+0x160>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	079b      	lsls	r3, r3, #30
 80045a4:	d413      	bmi.n	80045ce <_printf_i+0x232>
 80045a6:	68e0      	ldr	r0, [r4, #12]
 80045a8:	9b03      	ldr	r3, [sp, #12]
 80045aa:	4298      	cmp	r0, r3
 80045ac:	bfb8      	it	lt
 80045ae:	4618      	movlt	r0, r3
 80045b0:	e7a6      	b.n	8004500 <_printf_i+0x164>
 80045b2:	2301      	movs	r3, #1
 80045b4:	4632      	mov	r2, r6
 80045b6:	4649      	mov	r1, r9
 80045b8:	4640      	mov	r0, r8
 80045ba:	47d0      	blx	sl
 80045bc:	3001      	adds	r0, #1
 80045be:	d09d      	beq.n	80044fc <_printf_i+0x160>
 80045c0:	3501      	adds	r5, #1
 80045c2:	68e3      	ldr	r3, [r4, #12]
 80045c4:	9903      	ldr	r1, [sp, #12]
 80045c6:	1a5b      	subs	r3, r3, r1
 80045c8:	42ab      	cmp	r3, r5
 80045ca:	dcf2      	bgt.n	80045b2 <_printf_i+0x216>
 80045cc:	e7eb      	b.n	80045a6 <_printf_i+0x20a>
 80045ce:	2500      	movs	r5, #0
 80045d0:	f104 0619 	add.w	r6, r4, #25
 80045d4:	e7f5      	b.n	80045c2 <_printf_i+0x226>
 80045d6:	bf00      	nop
 80045d8:	08005980 	.word	0x08005980
 80045dc:	08005991 	.word	0x08005991

080045e0 <_scanf_chars>:
 80045e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e4:	4615      	mov	r5, r2
 80045e6:	688a      	ldr	r2, [r1, #8]
 80045e8:	4680      	mov	r8, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	b932      	cbnz	r2, 80045fc <_scanf_chars+0x1c>
 80045ee:	698a      	ldr	r2, [r1, #24]
 80045f0:	2a00      	cmp	r2, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2201      	moveq	r2, #1
 80045f6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80045fa:	608a      	str	r2, [r1, #8]
 80045fc:	6822      	ldr	r2, [r4, #0]
 80045fe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004690 <_scanf_chars+0xb0>
 8004602:	06d1      	lsls	r1, r2, #27
 8004604:	bf5f      	itttt	pl
 8004606:	681a      	ldrpl	r2, [r3, #0]
 8004608:	1d11      	addpl	r1, r2, #4
 800460a:	6019      	strpl	r1, [r3, #0]
 800460c:	6816      	ldrpl	r6, [r2, #0]
 800460e:	2700      	movs	r7, #0
 8004610:	69a0      	ldr	r0, [r4, #24]
 8004612:	b188      	cbz	r0, 8004638 <_scanf_chars+0x58>
 8004614:	2801      	cmp	r0, #1
 8004616:	d107      	bne.n	8004628 <_scanf_chars+0x48>
 8004618:	682a      	ldr	r2, [r5, #0]
 800461a:	7811      	ldrb	r1, [r2, #0]
 800461c:	6962      	ldr	r2, [r4, #20]
 800461e:	5c52      	ldrb	r2, [r2, r1]
 8004620:	b952      	cbnz	r2, 8004638 <_scanf_chars+0x58>
 8004622:	2f00      	cmp	r7, #0
 8004624:	d031      	beq.n	800468a <_scanf_chars+0xaa>
 8004626:	e022      	b.n	800466e <_scanf_chars+0x8e>
 8004628:	2802      	cmp	r0, #2
 800462a:	d120      	bne.n	800466e <_scanf_chars+0x8e>
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004634:	071b      	lsls	r3, r3, #28
 8004636:	d41a      	bmi.n	800466e <_scanf_chars+0x8e>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	06da      	lsls	r2, r3, #27
 800463c:	bf5e      	ittt	pl
 800463e:	682b      	ldrpl	r3, [r5, #0]
 8004640:	781b      	ldrbpl	r3, [r3, #0]
 8004642:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004646:	682a      	ldr	r2, [r5, #0]
 8004648:	686b      	ldr	r3, [r5, #4]
 800464a:	3201      	adds	r2, #1
 800464c:	602a      	str	r2, [r5, #0]
 800464e:	68a2      	ldr	r2, [r4, #8]
 8004650:	3b01      	subs	r3, #1
 8004652:	3a01      	subs	r2, #1
 8004654:	606b      	str	r3, [r5, #4]
 8004656:	3701      	adds	r7, #1
 8004658:	60a2      	str	r2, [r4, #8]
 800465a:	b142      	cbz	r2, 800466e <_scanf_chars+0x8e>
 800465c:	2b00      	cmp	r3, #0
 800465e:	dcd7      	bgt.n	8004610 <_scanf_chars+0x30>
 8004660:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004664:	4629      	mov	r1, r5
 8004666:	4640      	mov	r0, r8
 8004668:	4798      	blx	r3
 800466a:	2800      	cmp	r0, #0
 800466c:	d0d0      	beq.n	8004610 <_scanf_chars+0x30>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	f013 0310 	ands.w	r3, r3, #16
 8004674:	d105      	bne.n	8004682 <_scanf_chars+0xa2>
 8004676:	68e2      	ldr	r2, [r4, #12]
 8004678:	3201      	adds	r2, #1
 800467a:	60e2      	str	r2, [r4, #12]
 800467c:	69a2      	ldr	r2, [r4, #24]
 800467e:	b102      	cbz	r2, 8004682 <_scanf_chars+0xa2>
 8004680:	7033      	strb	r3, [r6, #0]
 8004682:	6923      	ldr	r3, [r4, #16]
 8004684:	443b      	add	r3, r7
 8004686:	6123      	str	r3, [r4, #16]
 8004688:	2000      	movs	r0, #0
 800468a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800468e:	bf00      	nop
 8004690:	080059be 	.word	0x080059be

08004694 <_scanf_i>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	4698      	mov	r8, r3
 800469a:	4b74      	ldr	r3, [pc, #464]	; (800486c <_scanf_i+0x1d8>)
 800469c:	460c      	mov	r4, r1
 800469e:	4682      	mov	sl, r0
 80046a0:	4616      	mov	r6, r2
 80046a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046a6:	b087      	sub	sp, #28
 80046a8:	ab03      	add	r3, sp, #12
 80046aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80046ae:	4b70      	ldr	r3, [pc, #448]	; (8004870 <_scanf_i+0x1dc>)
 80046b0:	69a1      	ldr	r1, [r4, #24]
 80046b2:	4a70      	ldr	r2, [pc, #448]	; (8004874 <_scanf_i+0x1e0>)
 80046b4:	2903      	cmp	r1, #3
 80046b6:	bf18      	it	ne
 80046b8:	461a      	movne	r2, r3
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	9201      	str	r2, [sp, #4]
 80046be:	1e5a      	subs	r2, r3, #1
 80046c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80046c4:	bf88      	it	hi
 80046c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80046ca:	4627      	mov	r7, r4
 80046cc:	bf82      	ittt	hi
 80046ce:	eb03 0905 	addhi.w	r9, r3, r5
 80046d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80046d6:	60a3      	strhi	r3, [r4, #8]
 80046d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80046dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80046e0:	bf98      	it	ls
 80046e2:	f04f 0900 	movls.w	r9, #0
 80046e6:	6023      	str	r3, [r4, #0]
 80046e8:	463d      	mov	r5, r7
 80046ea:	f04f 0b00 	mov.w	fp, #0
 80046ee:	6831      	ldr	r1, [r6, #0]
 80046f0:	ab03      	add	r3, sp, #12
 80046f2:	7809      	ldrb	r1, [r1, #0]
 80046f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f7fb fd59 	bl	80001b0 <memchr>
 80046fe:	b328      	cbz	r0, 800474c <_scanf_i+0xb8>
 8004700:	f1bb 0f01 	cmp.w	fp, #1
 8004704:	d159      	bne.n	80047ba <_scanf_i+0x126>
 8004706:	6862      	ldr	r2, [r4, #4]
 8004708:	b92a      	cbnz	r2, 8004716 <_scanf_i+0x82>
 800470a:	6822      	ldr	r2, [r4, #0]
 800470c:	2308      	movs	r3, #8
 800470e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004712:	6063      	str	r3, [r4, #4]
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800471c:	6022      	str	r2, [r4, #0]
 800471e:	68a2      	ldr	r2, [r4, #8]
 8004720:	1e51      	subs	r1, r2, #1
 8004722:	60a1      	str	r1, [r4, #8]
 8004724:	b192      	cbz	r2, 800474c <_scanf_i+0xb8>
 8004726:	6832      	ldr	r2, [r6, #0]
 8004728:	1c51      	adds	r1, r2, #1
 800472a:	6031      	str	r1, [r6, #0]
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	f805 2b01 	strb.w	r2, [r5], #1
 8004732:	6872      	ldr	r2, [r6, #4]
 8004734:	3a01      	subs	r2, #1
 8004736:	2a00      	cmp	r2, #0
 8004738:	6072      	str	r2, [r6, #4]
 800473a:	dc07      	bgt.n	800474c <_scanf_i+0xb8>
 800473c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004740:	4631      	mov	r1, r6
 8004742:	4650      	mov	r0, sl
 8004744:	4790      	blx	r2
 8004746:	2800      	cmp	r0, #0
 8004748:	f040 8085 	bne.w	8004856 <_scanf_i+0x1c2>
 800474c:	f10b 0b01 	add.w	fp, fp, #1
 8004750:	f1bb 0f03 	cmp.w	fp, #3
 8004754:	d1cb      	bne.n	80046ee <_scanf_i+0x5a>
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	b90b      	cbnz	r3, 800475e <_scanf_i+0xca>
 800475a:	230a      	movs	r3, #10
 800475c:	6063      	str	r3, [r4, #4]
 800475e:	6863      	ldr	r3, [r4, #4]
 8004760:	4945      	ldr	r1, [pc, #276]	; (8004878 <_scanf_i+0x1e4>)
 8004762:	6960      	ldr	r0, [r4, #20]
 8004764:	1ac9      	subs	r1, r1, r3
 8004766:	f000 f89b 	bl	80048a0 <__sccl>
 800476a:	f04f 0b00 	mov.w	fp, #0
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d03d      	beq.n	80047f2 <_scanf_i+0x15e>
 8004776:	6831      	ldr	r1, [r6, #0]
 8004778:	6960      	ldr	r0, [r4, #20]
 800477a:	f891 c000 	ldrb.w	ip, [r1]
 800477e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004782:	2800      	cmp	r0, #0
 8004784:	d035      	beq.n	80047f2 <_scanf_i+0x15e>
 8004786:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800478a:	d124      	bne.n	80047d6 <_scanf_i+0x142>
 800478c:	0510      	lsls	r0, r2, #20
 800478e:	d522      	bpl.n	80047d6 <_scanf_i+0x142>
 8004790:	f10b 0b01 	add.w	fp, fp, #1
 8004794:	f1b9 0f00 	cmp.w	r9, #0
 8004798:	d003      	beq.n	80047a2 <_scanf_i+0x10e>
 800479a:	3301      	adds	r3, #1
 800479c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80047a0:	60a3      	str	r3, [r4, #8]
 80047a2:	6873      	ldr	r3, [r6, #4]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	6073      	str	r3, [r6, #4]
 80047aa:	dd1b      	ble.n	80047e4 <_scanf_i+0x150>
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	3301      	adds	r3, #1
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	68a3      	ldr	r3, [r4, #8]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	60a3      	str	r3, [r4, #8]
 80047b8:	e7d9      	b.n	800476e <_scanf_i+0xda>
 80047ba:	f1bb 0f02 	cmp.w	fp, #2
 80047be:	d1ae      	bne.n	800471e <_scanf_i+0x8a>
 80047c0:	6822      	ldr	r2, [r4, #0]
 80047c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80047c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80047ca:	d1bf      	bne.n	800474c <_scanf_i+0xb8>
 80047cc:	2310      	movs	r3, #16
 80047ce:	6063      	str	r3, [r4, #4]
 80047d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d4:	e7a2      	b.n	800471c <_scanf_i+0x88>
 80047d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80047da:	6022      	str	r2, [r4, #0]
 80047dc:	780b      	ldrb	r3, [r1, #0]
 80047de:	f805 3b01 	strb.w	r3, [r5], #1
 80047e2:	e7de      	b.n	80047a2 <_scanf_i+0x10e>
 80047e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047e8:	4631      	mov	r1, r6
 80047ea:	4650      	mov	r0, sl
 80047ec:	4798      	blx	r3
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d0df      	beq.n	80047b2 <_scanf_i+0x11e>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	05d9      	lsls	r1, r3, #23
 80047f6:	d50d      	bpl.n	8004814 <_scanf_i+0x180>
 80047f8:	42bd      	cmp	r5, r7
 80047fa:	d909      	bls.n	8004810 <_scanf_i+0x17c>
 80047fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004804:	4632      	mov	r2, r6
 8004806:	4650      	mov	r0, sl
 8004808:	4798      	blx	r3
 800480a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800480e:	464d      	mov	r5, r9
 8004810:	42bd      	cmp	r5, r7
 8004812:	d028      	beq.n	8004866 <_scanf_i+0x1d2>
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	f012 0210 	ands.w	r2, r2, #16
 800481a:	d113      	bne.n	8004844 <_scanf_i+0x1b0>
 800481c:	702a      	strb	r2, [r5, #0]
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	9e01      	ldr	r6, [sp, #4]
 8004822:	4639      	mov	r1, r7
 8004824:	4650      	mov	r0, sl
 8004826:	47b0      	blx	r6
 8004828:	f8d8 3000 	ldr.w	r3, [r8]
 800482c:	6821      	ldr	r1, [r4, #0]
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	f8c8 2000 	str.w	r2, [r8]
 8004834:	f011 0f20 	tst.w	r1, #32
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	d00f      	beq.n	800485c <_scanf_i+0x1c8>
 800483c:	6018      	str	r0, [r3, #0]
 800483e:	68e3      	ldr	r3, [r4, #12]
 8004840:	3301      	adds	r3, #1
 8004842:	60e3      	str	r3, [r4, #12]
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	1bed      	subs	r5, r5, r7
 8004848:	445d      	add	r5, fp
 800484a:	442b      	add	r3, r5
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	2000      	movs	r0, #0
 8004850:	b007      	add	sp, #28
 8004852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004856:	f04f 0b00 	mov.w	fp, #0
 800485a:	e7ca      	b.n	80047f2 <_scanf_i+0x15e>
 800485c:	07ca      	lsls	r2, r1, #31
 800485e:	bf4c      	ite	mi
 8004860:	8018      	strhmi	r0, [r3, #0]
 8004862:	6018      	strpl	r0, [r3, #0]
 8004864:	e7eb      	b.n	800483e <_scanf_i+0x1aa>
 8004866:	2001      	movs	r0, #1
 8004868:	e7f2      	b.n	8004850 <_scanf_i+0x1bc>
 800486a:	bf00      	nop
 800486c:	08005220 	.word	0x08005220
 8004870:	08004b89 	.word	0x08004b89
 8004874:	08004aa1 	.word	0x08004aa1
 8004878:	080059b2 	.word	0x080059b2

0800487c <_read_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4d07      	ldr	r5, [pc, #28]	; (800489c <_read_r+0x20>)
 8004880:	4604      	mov	r4, r0
 8004882:	4608      	mov	r0, r1
 8004884:	4611      	mov	r1, r2
 8004886:	2200      	movs	r2, #0
 8004888:	602a      	str	r2, [r5, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	f000 fa12 	bl	8004cb4 <_read>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_read_r+0x1e>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_read_r+0x1e>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000d14 	.word	0x20000d14

080048a0 <__sccl>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	780b      	ldrb	r3, [r1, #0]
 80048a4:	4604      	mov	r4, r0
 80048a6:	2b5e      	cmp	r3, #94	; 0x5e
 80048a8:	bf0b      	itete	eq
 80048aa:	784b      	ldrbeq	r3, [r1, #1]
 80048ac:	1c4a      	addne	r2, r1, #1
 80048ae:	1c8a      	addeq	r2, r1, #2
 80048b0:	2100      	movne	r1, #0
 80048b2:	bf08      	it	eq
 80048b4:	2101      	moveq	r1, #1
 80048b6:	3801      	subs	r0, #1
 80048b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80048bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80048c0:	42a8      	cmp	r0, r5
 80048c2:	d1fb      	bne.n	80048bc <__sccl+0x1c>
 80048c4:	b90b      	cbnz	r3, 80048ca <__sccl+0x2a>
 80048c6:	1e50      	subs	r0, r2, #1
 80048c8:	bd70      	pop	{r4, r5, r6, pc}
 80048ca:	f081 0101 	eor.w	r1, r1, #1
 80048ce:	54e1      	strb	r1, [r4, r3]
 80048d0:	4610      	mov	r0, r2
 80048d2:	4602      	mov	r2, r0
 80048d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80048d8:	2d2d      	cmp	r5, #45	; 0x2d
 80048da:	d005      	beq.n	80048e8 <__sccl+0x48>
 80048dc:	2d5d      	cmp	r5, #93	; 0x5d
 80048de:	d016      	beq.n	800490e <__sccl+0x6e>
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	d0f1      	beq.n	80048c8 <__sccl+0x28>
 80048e4:	462b      	mov	r3, r5
 80048e6:	e7f2      	b.n	80048ce <__sccl+0x2e>
 80048e8:	7846      	ldrb	r6, [r0, #1]
 80048ea:	2e5d      	cmp	r6, #93	; 0x5d
 80048ec:	d0fa      	beq.n	80048e4 <__sccl+0x44>
 80048ee:	42b3      	cmp	r3, r6
 80048f0:	dcf8      	bgt.n	80048e4 <__sccl+0x44>
 80048f2:	3002      	adds	r0, #2
 80048f4:	461a      	mov	r2, r3
 80048f6:	3201      	adds	r2, #1
 80048f8:	4296      	cmp	r6, r2
 80048fa:	54a1      	strb	r1, [r4, r2]
 80048fc:	dcfb      	bgt.n	80048f6 <__sccl+0x56>
 80048fe:	1af2      	subs	r2, r6, r3
 8004900:	3a01      	subs	r2, #1
 8004902:	1c5d      	adds	r5, r3, #1
 8004904:	42b3      	cmp	r3, r6
 8004906:	bfa8      	it	ge
 8004908:	2200      	movge	r2, #0
 800490a:	18ab      	adds	r3, r5, r2
 800490c:	e7e1      	b.n	80048d2 <__sccl+0x32>
 800490e:	4610      	mov	r0, r2
 8004910:	e7da      	b.n	80048c8 <__sccl+0x28>

08004912 <_raise_r>:
 8004912:	291f      	cmp	r1, #31
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4604      	mov	r4, r0
 8004918:	460d      	mov	r5, r1
 800491a:	d904      	bls.n	8004926 <_raise_r+0x14>
 800491c:	2316      	movs	r3, #22
 800491e:	6003      	str	r3, [r0, #0]
 8004920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004924:	bd38      	pop	{r3, r4, r5, pc}
 8004926:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004928:	b112      	cbz	r2, 8004930 <_raise_r+0x1e>
 800492a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800492e:	b94b      	cbnz	r3, 8004944 <_raise_r+0x32>
 8004930:	4620      	mov	r0, r4
 8004932:	f000 f831 	bl	8004998 <_getpid_r>
 8004936:	462a      	mov	r2, r5
 8004938:	4601      	mov	r1, r0
 800493a:	4620      	mov	r0, r4
 800493c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004940:	f000 b818 	b.w	8004974 <_kill_r>
 8004944:	2b01      	cmp	r3, #1
 8004946:	d00a      	beq.n	800495e <_raise_r+0x4c>
 8004948:	1c59      	adds	r1, r3, #1
 800494a:	d103      	bne.n	8004954 <_raise_r+0x42>
 800494c:	2316      	movs	r3, #22
 800494e:	6003      	str	r3, [r0, #0]
 8004950:	2001      	movs	r0, #1
 8004952:	e7e7      	b.n	8004924 <_raise_r+0x12>
 8004954:	2400      	movs	r4, #0
 8004956:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800495a:	4628      	mov	r0, r5
 800495c:	4798      	blx	r3
 800495e:	2000      	movs	r0, #0
 8004960:	e7e0      	b.n	8004924 <_raise_r+0x12>
	...

08004964 <raise>:
 8004964:	4b02      	ldr	r3, [pc, #8]	; (8004970 <raise+0xc>)
 8004966:	4601      	mov	r1, r0
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	f7ff bfd2 	b.w	8004912 <_raise_r>
 800496e:	bf00      	nop
 8004970:	20000064 	.word	0x20000064

08004974 <_kill_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4d07      	ldr	r5, [pc, #28]	; (8004994 <_kill_r+0x20>)
 8004978:	2300      	movs	r3, #0
 800497a:	4604      	mov	r4, r0
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	f000 f987 	bl	8004c94 <_kill>
 8004986:	1c43      	adds	r3, r0, #1
 8004988:	d102      	bne.n	8004990 <_kill_r+0x1c>
 800498a:	682b      	ldr	r3, [r5, #0]
 800498c:	b103      	cbz	r3, 8004990 <_kill_r+0x1c>
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	bd38      	pop	{r3, r4, r5, pc}
 8004992:	bf00      	nop
 8004994:	20000d14 	.word	0x20000d14

08004998 <_getpid_r>:
 8004998:	f000 b96c 	b.w	8004c74 <_getpid>

0800499c <_strtol_l.constprop.0>:
 800499c:	2b01      	cmp	r3, #1
 800499e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a2:	d001      	beq.n	80049a8 <_strtol_l.constprop.0+0xc>
 80049a4:	2b24      	cmp	r3, #36	; 0x24
 80049a6:	d906      	bls.n	80049b6 <_strtol_l.constprop.0+0x1a>
 80049a8:	f7fe f8c2 	bl	8002b30 <__errno>
 80049ac:	2316      	movs	r3, #22
 80049ae:	6003      	str	r3, [r0, #0]
 80049b0:	2000      	movs	r0, #0
 80049b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004a9c <_strtol_l.constprop.0+0x100>
 80049ba:	460d      	mov	r5, r1
 80049bc:	462e      	mov	r6, r5
 80049be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049c2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80049c6:	f017 0708 	ands.w	r7, r7, #8
 80049ca:	d1f7      	bne.n	80049bc <_strtol_l.constprop.0+0x20>
 80049cc:	2c2d      	cmp	r4, #45	; 0x2d
 80049ce:	d132      	bne.n	8004a36 <_strtol_l.constprop.0+0x9a>
 80049d0:	782c      	ldrb	r4, [r5, #0]
 80049d2:	2701      	movs	r7, #1
 80049d4:	1cb5      	adds	r5, r6, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d05b      	beq.n	8004a92 <_strtol_l.constprop.0+0xf6>
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d109      	bne.n	80049f2 <_strtol_l.constprop.0+0x56>
 80049de:	2c30      	cmp	r4, #48	; 0x30
 80049e0:	d107      	bne.n	80049f2 <_strtol_l.constprop.0+0x56>
 80049e2:	782c      	ldrb	r4, [r5, #0]
 80049e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80049e8:	2c58      	cmp	r4, #88	; 0x58
 80049ea:	d14d      	bne.n	8004a88 <_strtol_l.constprop.0+0xec>
 80049ec:	786c      	ldrb	r4, [r5, #1]
 80049ee:	2310      	movs	r3, #16
 80049f0:	3502      	adds	r5, #2
 80049f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80049f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80049fa:	f04f 0e00 	mov.w	lr, #0
 80049fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8004a02:	4676      	mov	r6, lr
 8004a04:	fb03 8a19 	mls	sl, r3, r9, r8
 8004a08:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004a0c:	f1bc 0f09 	cmp.w	ip, #9
 8004a10:	d816      	bhi.n	8004a40 <_strtol_l.constprop.0+0xa4>
 8004a12:	4664      	mov	r4, ip
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	dd24      	ble.n	8004a62 <_strtol_l.constprop.0+0xc6>
 8004a18:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004a1c:	d008      	beq.n	8004a30 <_strtol_l.constprop.0+0x94>
 8004a1e:	45b1      	cmp	r9, r6
 8004a20:	d31c      	bcc.n	8004a5c <_strtol_l.constprop.0+0xc0>
 8004a22:	d101      	bne.n	8004a28 <_strtol_l.constprop.0+0x8c>
 8004a24:	45a2      	cmp	sl, r4
 8004a26:	db19      	blt.n	8004a5c <_strtol_l.constprop.0+0xc0>
 8004a28:	fb06 4603 	mla	r6, r6, r3, r4
 8004a2c:	f04f 0e01 	mov.w	lr, #1
 8004a30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a34:	e7e8      	b.n	8004a08 <_strtol_l.constprop.0+0x6c>
 8004a36:	2c2b      	cmp	r4, #43	; 0x2b
 8004a38:	bf04      	itt	eq
 8004a3a:	782c      	ldrbeq	r4, [r5, #0]
 8004a3c:	1cb5      	addeq	r5, r6, #2
 8004a3e:	e7ca      	b.n	80049d6 <_strtol_l.constprop.0+0x3a>
 8004a40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004a44:	f1bc 0f19 	cmp.w	ip, #25
 8004a48:	d801      	bhi.n	8004a4e <_strtol_l.constprop.0+0xb2>
 8004a4a:	3c37      	subs	r4, #55	; 0x37
 8004a4c:	e7e2      	b.n	8004a14 <_strtol_l.constprop.0+0x78>
 8004a4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004a52:	f1bc 0f19 	cmp.w	ip, #25
 8004a56:	d804      	bhi.n	8004a62 <_strtol_l.constprop.0+0xc6>
 8004a58:	3c57      	subs	r4, #87	; 0x57
 8004a5a:	e7db      	b.n	8004a14 <_strtol_l.constprop.0+0x78>
 8004a5c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004a60:	e7e6      	b.n	8004a30 <_strtol_l.constprop.0+0x94>
 8004a62:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004a66:	d105      	bne.n	8004a74 <_strtol_l.constprop.0+0xd8>
 8004a68:	2322      	movs	r3, #34	; 0x22
 8004a6a:	6003      	str	r3, [r0, #0]
 8004a6c:	4646      	mov	r6, r8
 8004a6e:	b942      	cbnz	r2, 8004a82 <_strtol_l.constprop.0+0xe6>
 8004a70:	4630      	mov	r0, r6
 8004a72:	e79e      	b.n	80049b2 <_strtol_l.constprop.0+0x16>
 8004a74:	b107      	cbz	r7, 8004a78 <_strtol_l.constprop.0+0xdc>
 8004a76:	4276      	negs	r6, r6
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	d0f9      	beq.n	8004a70 <_strtol_l.constprop.0+0xd4>
 8004a7c:	f1be 0f00 	cmp.w	lr, #0
 8004a80:	d000      	beq.n	8004a84 <_strtol_l.constprop.0+0xe8>
 8004a82:	1e69      	subs	r1, r5, #1
 8004a84:	6011      	str	r1, [r2, #0]
 8004a86:	e7f3      	b.n	8004a70 <_strtol_l.constprop.0+0xd4>
 8004a88:	2430      	movs	r4, #48	; 0x30
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1b1      	bne.n	80049f2 <_strtol_l.constprop.0+0x56>
 8004a8e:	2308      	movs	r3, #8
 8004a90:	e7af      	b.n	80049f2 <_strtol_l.constprop.0+0x56>
 8004a92:	2c30      	cmp	r4, #48	; 0x30
 8004a94:	d0a5      	beq.n	80049e2 <_strtol_l.constprop.0+0x46>
 8004a96:	230a      	movs	r3, #10
 8004a98:	e7ab      	b.n	80049f2 <_strtol_l.constprop.0+0x56>
 8004a9a:	bf00      	nop
 8004a9c:	080059be 	.word	0x080059be

08004aa0 <_strtol_r>:
 8004aa0:	f7ff bf7c 	b.w	800499c <_strtol_l.constprop.0>

08004aa4 <_strtoul_l.constprop.0>:
 8004aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	4f36      	ldr	r7, [pc, #216]	; (8004b84 <_strtoul_l.constprop.0+0xe0>)
 8004aaa:	4686      	mov	lr, r0
 8004aac:	460d      	mov	r5, r1
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ab4:	5d3e      	ldrb	r6, [r7, r4]
 8004ab6:	f016 0608 	ands.w	r6, r6, #8
 8004aba:	d1f8      	bne.n	8004aae <_strtoul_l.constprop.0+0xa>
 8004abc:	2c2d      	cmp	r4, #45	; 0x2d
 8004abe:	d130      	bne.n	8004b22 <_strtoul_l.constprop.0+0x7e>
 8004ac0:	782c      	ldrb	r4, [r5, #0]
 8004ac2:	2601      	movs	r6, #1
 8004ac4:	1c85      	adds	r5, r0, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d057      	beq.n	8004b7a <_strtoul_l.constprop.0+0xd6>
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d109      	bne.n	8004ae2 <_strtoul_l.constprop.0+0x3e>
 8004ace:	2c30      	cmp	r4, #48	; 0x30
 8004ad0:	d107      	bne.n	8004ae2 <_strtoul_l.constprop.0+0x3e>
 8004ad2:	7828      	ldrb	r0, [r5, #0]
 8004ad4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004ad8:	2858      	cmp	r0, #88	; 0x58
 8004ada:	d149      	bne.n	8004b70 <_strtoul_l.constprop.0+0xcc>
 8004adc:	786c      	ldrb	r4, [r5, #1]
 8004ade:	2310      	movs	r3, #16
 8004ae0:	3502      	adds	r5, #2
 8004ae2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004ae6:	2700      	movs	r7, #0
 8004ae8:	fbb8 f8f3 	udiv	r8, r8, r3
 8004aec:	fb03 f908 	mul.w	r9, r3, r8
 8004af0:	ea6f 0909 	mvn.w	r9, r9
 8004af4:	4638      	mov	r0, r7
 8004af6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004afa:	f1bc 0f09 	cmp.w	ip, #9
 8004afe:	d815      	bhi.n	8004b2c <_strtoul_l.constprop.0+0x88>
 8004b00:	4664      	mov	r4, ip
 8004b02:	42a3      	cmp	r3, r4
 8004b04:	dd23      	ble.n	8004b4e <_strtoul_l.constprop.0+0xaa>
 8004b06:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004b0a:	d007      	beq.n	8004b1c <_strtoul_l.constprop.0+0x78>
 8004b0c:	4580      	cmp	r8, r0
 8004b0e:	d31b      	bcc.n	8004b48 <_strtoul_l.constprop.0+0xa4>
 8004b10:	d101      	bne.n	8004b16 <_strtoul_l.constprop.0+0x72>
 8004b12:	45a1      	cmp	r9, r4
 8004b14:	db18      	blt.n	8004b48 <_strtoul_l.constprop.0+0xa4>
 8004b16:	fb00 4003 	mla	r0, r0, r3, r4
 8004b1a:	2701      	movs	r7, #1
 8004b1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b20:	e7e9      	b.n	8004af6 <_strtoul_l.constprop.0+0x52>
 8004b22:	2c2b      	cmp	r4, #43	; 0x2b
 8004b24:	bf04      	itt	eq
 8004b26:	782c      	ldrbeq	r4, [r5, #0]
 8004b28:	1c85      	addeq	r5, r0, #2
 8004b2a:	e7cc      	b.n	8004ac6 <_strtoul_l.constprop.0+0x22>
 8004b2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004b30:	f1bc 0f19 	cmp.w	ip, #25
 8004b34:	d801      	bhi.n	8004b3a <_strtoul_l.constprop.0+0x96>
 8004b36:	3c37      	subs	r4, #55	; 0x37
 8004b38:	e7e3      	b.n	8004b02 <_strtoul_l.constprop.0+0x5e>
 8004b3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004b3e:	f1bc 0f19 	cmp.w	ip, #25
 8004b42:	d804      	bhi.n	8004b4e <_strtoul_l.constprop.0+0xaa>
 8004b44:	3c57      	subs	r4, #87	; 0x57
 8004b46:	e7dc      	b.n	8004b02 <_strtoul_l.constprop.0+0x5e>
 8004b48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004b4c:	e7e6      	b.n	8004b1c <_strtoul_l.constprop.0+0x78>
 8004b4e:	1c7b      	adds	r3, r7, #1
 8004b50:	d106      	bne.n	8004b60 <_strtoul_l.constprop.0+0xbc>
 8004b52:	2322      	movs	r3, #34	; 0x22
 8004b54:	f8ce 3000 	str.w	r3, [lr]
 8004b58:	4638      	mov	r0, r7
 8004b5a:	b932      	cbnz	r2, 8004b6a <_strtoul_l.constprop.0+0xc6>
 8004b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b60:	b106      	cbz	r6, 8004b64 <_strtoul_l.constprop.0+0xc0>
 8004b62:	4240      	negs	r0, r0
 8004b64:	2a00      	cmp	r2, #0
 8004b66:	d0f9      	beq.n	8004b5c <_strtoul_l.constprop.0+0xb8>
 8004b68:	b107      	cbz	r7, 8004b6c <_strtoul_l.constprop.0+0xc8>
 8004b6a:	1e69      	subs	r1, r5, #1
 8004b6c:	6011      	str	r1, [r2, #0]
 8004b6e:	e7f5      	b.n	8004b5c <_strtoul_l.constprop.0+0xb8>
 8004b70:	2430      	movs	r4, #48	; 0x30
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1b5      	bne.n	8004ae2 <_strtoul_l.constprop.0+0x3e>
 8004b76:	2308      	movs	r3, #8
 8004b78:	e7b3      	b.n	8004ae2 <_strtoul_l.constprop.0+0x3e>
 8004b7a:	2c30      	cmp	r4, #48	; 0x30
 8004b7c:	d0a9      	beq.n	8004ad2 <_strtoul_l.constprop.0+0x2e>
 8004b7e:	230a      	movs	r3, #10
 8004b80:	e7af      	b.n	8004ae2 <_strtoul_l.constprop.0+0x3e>
 8004b82:	bf00      	nop
 8004b84:	080059be 	.word	0x080059be

08004b88 <_strtoul_r>:
 8004b88:	f7ff bf8c 	b.w	8004aa4 <_strtoul_l.constprop.0>

08004b8c <__submore>:
 8004b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b90:	460c      	mov	r4, r1
 8004b92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	d11d      	bne.n	8004bd8 <__submore+0x4c>
 8004b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ba0:	f7fe f838 	bl	8002c14 <_malloc_r>
 8004ba4:	b918      	cbnz	r0, 8004bae <__submore+0x22>
 8004ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8004bb4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8004bba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004bbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004bc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004bc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004bca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004bce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004bd2:	6020      	str	r0, [r4, #0]
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e7e8      	b.n	8004baa <__submore+0x1e>
 8004bd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004bda:	0077      	lsls	r7, r6, #1
 8004bdc:	463a      	mov	r2, r7
 8004bde:	f7ff f815 	bl	8003c0c <_realloc_r>
 8004be2:	4605      	mov	r5, r0
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d0de      	beq.n	8004ba6 <__submore+0x1a>
 8004be8:	eb00 0806 	add.w	r8, r0, r6
 8004bec:	4601      	mov	r1, r0
 8004bee:	4632      	mov	r2, r6
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	f7fd ffd9 	bl	8002ba8 <memcpy>
 8004bf6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004bfa:	f8c4 8000 	str.w	r8, [r4]
 8004bfe:	e7e9      	b.n	8004bd4 <__submore+0x48>

08004c00 <_fstat_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4d07      	ldr	r5, [pc, #28]	; (8004c20 <_fstat_r+0x20>)
 8004c04:	2300      	movs	r3, #0
 8004c06:	4604      	mov	r4, r0
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	602b      	str	r3, [r5, #0]
 8004c0e:	f000 f829 	bl	8004c64 <_fstat>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	d102      	bne.n	8004c1c <_fstat_r+0x1c>
 8004c16:	682b      	ldr	r3, [r5, #0]
 8004c18:	b103      	cbz	r3, 8004c1c <_fstat_r+0x1c>
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	bd38      	pop	{r3, r4, r5, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000d14 	.word	0x20000d14

08004c24 <_isatty_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4d06      	ldr	r5, [pc, #24]	; (8004c40 <_isatty_r+0x1c>)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	f000 f828 	bl	8004c84 <_isatty>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d102      	bne.n	8004c3e <_isatty_r+0x1a>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <_isatty_r+0x1a>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	20000d14 	.word	0x20000d14

08004c44 <_malloc_usable_size_r>:
 8004c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c48:	1f18      	subs	r0, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bfbc      	itt	lt
 8004c4e:	580b      	ldrlt	r3, [r1, r0]
 8004c50:	18c0      	addlt	r0, r0, r3
 8004c52:	4770      	bx	lr

08004c54 <_close>:
 8004c54:	4b02      	ldr	r3, [pc, #8]	; (8004c60 <_close+0xc>)
 8004c56:	2258      	movs	r2, #88	; 0x58
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c5e:	4770      	bx	lr
 8004c60:	20000d14 	.word	0x20000d14

08004c64 <_fstat>:
 8004c64:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <_fstat+0xc>)
 8004c66:	2258      	movs	r2, #88	; 0x58
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c6e:	4770      	bx	lr
 8004c70:	20000d14 	.word	0x20000d14

08004c74 <_getpid>:
 8004c74:	4b02      	ldr	r3, [pc, #8]	; (8004c80 <_getpid+0xc>)
 8004c76:	2258      	movs	r2, #88	; 0x58
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c7e:	4770      	bx	lr
 8004c80:	20000d14 	.word	0x20000d14

08004c84 <_isatty>:
 8004c84:	4b02      	ldr	r3, [pc, #8]	; (8004c90 <_isatty+0xc>)
 8004c86:	2258      	movs	r2, #88	; 0x58
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000d14 	.word	0x20000d14

08004c94 <_kill>:
 8004c94:	4b02      	ldr	r3, [pc, #8]	; (8004ca0 <_kill+0xc>)
 8004c96:	2258      	movs	r2, #88	; 0x58
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c9e:	4770      	bx	lr
 8004ca0:	20000d14 	.word	0x20000d14

08004ca4 <_lseek>:
 8004ca4:	4b02      	ldr	r3, [pc, #8]	; (8004cb0 <_lseek+0xc>)
 8004ca6:	2258      	movs	r2, #88	; 0x58
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cae:	4770      	bx	lr
 8004cb0:	20000d14 	.word	0x20000d14

08004cb4 <_read>:
 8004cb4:	4b02      	ldr	r3, [pc, #8]	; (8004cc0 <_read+0xc>)
 8004cb6:	2258      	movs	r2, #88	; 0x58
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cbe:	4770      	bx	lr
 8004cc0:	20000d14 	.word	0x20000d14

08004cc4 <_sbrk>:
 8004cc4:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <_sbrk+0x14>)
 8004cc6:	4905      	ldr	r1, [pc, #20]	; (8004cdc <_sbrk+0x18>)
 8004cc8:	6813      	ldr	r3, [r2, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf08      	it	eq
 8004cce:	460b      	moveq	r3, r1
 8004cd0:	4418      	add	r0, r3
 8004cd2:	6010      	str	r0, [r2, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	4770      	bx	lr
 8004cd8:	20000d18 	.word	0x20000d18
 8004cdc:	20000d20 	.word	0x20000d20

08004ce0 <_write>:
 8004ce0:	4b02      	ldr	r3, [pc, #8]	; (8004cec <_write+0xc>)
 8004ce2:	2258      	movs	r2, #88	; 0x58
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cea:	4770      	bx	lr
 8004cec:	20000d14 	.word	0x20000d14

08004cf0 <_exit>:
 8004cf0:	e7fe      	b.n	8004cf0 <_exit>
 8004cf2:	bf00      	nop

08004cf4 <_init>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	bf00      	nop
 8004cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfa:	bc08      	pop	{r3}
 8004cfc:	469e      	mov	lr, r3
 8004cfe:	4770      	bx	lr

08004d00 <_fini>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	bf00      	nop
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr

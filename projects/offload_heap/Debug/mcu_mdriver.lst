
Debug/mcu_mdriver.elf:     file format elf32-littlearm
Debug/mcu_mdriver.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08002775

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000057c4 memsz 0x000057c4 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x080057c4 align 2**16
         filesz 0x000000c8 memsz 0x00000d1c flags rw-
    LOAD off    0x00000d1c vaddr 0x20000d1c paddr 0x0800588c align 2**16
         filesz 0x00000000 memsz 0x00000604 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004840  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ddc  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057bc  080057bc  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  080057bc  080057bc  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057bc  080057bc  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080057c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  200000c8  0800588c  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d1c  0800588c  00020d1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce94  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bef  00000000  00000000  0003cf8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000c27  00000000  00000000  00043b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  000447a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000318  00000000  00000000  000453c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a826  00000000  00000000  000456d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000031c2  00000000  00000000  0004fefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  000530c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000196c  00000000  00000000  000530fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004362  00000000  00000000  00054a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000069b  00000000  00000000  00058dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ac  00000000  00000000  00059465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .stab         000000cc  00000000  00000000  00059514  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000001b9  00000000  00000000  000595e0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
080049e0 l    d  .rodata	00000000 .rodata
080057bc l    d  .ARM.extab	00000000 .ARM.extab
080057bc l    d  .ARM	00000000 .ARM
080057bc l    d  .preinit_array	00000000 .preinit_array
080057bc l    d  .init_array	00000000 .init_array
080057c0 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200000c8 l    d  .bss	00000000 .bss
20000d1c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32f411xe.o
08002788 l       .text	00000000 LoopCopyDataInit
08002782 l       .text	00000000 CopyDataInit
0800279a l       .text	00000000 LoopFillZerobss
08002796 l       .text	00000000 FillZerobss
080027c4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 crtstuff.c
080049c8 l     O .text	00000000 __EH_FRAME_BEGIN__
08000a3c l     F .text	00000000 __do_global_dtors_aux
200000c8 l     O .bss	00000000 completed.1
080057c0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000a60 l     F .text	00000000 frame_dummy
200000cc l     O .bss	00000000 object.0
080057bc l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_mdriver.c
200000e8 l     O .bss	00000004 errors
20000000 l     O .data	0000005c tracestr
08000a7c l     F .text	00000020 stack_test
08000a9c l     F .text	0000001a heap_test
200000ec l     O .bss	00000004 test_mem_use
08000eec l     F .text	0000046c read_trace
0800138c l     F .text	00000210 eval_mm_valid
0800159c l     F .text	000001e4 eval_mm_util
08001358 l     F .text	00000032 free_trace
08001780 l     F .text	00000268 printresults
08000d00 l     F .text	00000170 add_range
08001a50 l     F .text	00000048 malloc_error
08001a14 l     F .text	0000003c unix_error
08004f28 l     O .rodata	0000000a __func__.0
08000e70 l     F .text	0000004a remove_range
08000eba l     F .text	00000032 clear_ranges
080019e8 l     F .text	0000002c app_error
00000000 l    df *ABS*	00000000 mcu_mlib.c
200004f0 l     O .bss	00000004 mem_start_brk
200004f4 l     O .bss	00000004 mem_brk
00000000 l    df *ABS*	00000000 mcu_mm.c
08001bac l     F .text	0000003c extend_heap
00000000 l    df *ABS*	00000000 mcu_timer.c
08001dec l     F .text	00000034 __NVIC_EnableIRQ
08001e20 l     F .text	00000050 __NVIC_SetPriority
200004f8 l     O .bss	00000004 systime
00000000 l    df *ABS*	00000000 mcu.c
200004fc l     O .bss	00000800 output_str
00000000 l    df *ABS*	00000000 mcu_request.c
08001f64 l     F .text	00000018 send
08001f7c l     F .text	00000018 receive
00000000 l    df *ABS*	00000000 uart.c
08002070 l     F .text	00000054 uart_pin_setup
080020c4 l     F .text	00000054 uart_enable
00000000 l    df *ABS*	00000000 uart_dma.c
20000d00 l     O .bss	00000004 receiving
20000d04 l     O .bss	00000004 transmitting
00000000 l    df *ABS*	00000000 mcu_syscalls.c
00000000 l    df *ABS*	00000000 mcu_mpu.c
00000000 l    df *ABS*	00000000 mcu_init.c
08002470 l     F .text	00000050 __NVIC_SetPriority
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
080028a8 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf.c
080029d0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800351c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strtol.c
08004670 l     F .text	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 strtoul.c
08004778 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20000d18 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000068 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
080057c4 l       .fini_array	00000000 __fini_array_end
080057c0 l       .fini_array	00000000 __fini_array_start
080057c0 l       .init_array	00000000 __init_array_end
080057bc l       .preinit_array	00000000 __preinit_array_end
080057bc l       .init_array	00000000 __init_array_start
080057bc l       .preinit_array	00000000 __preinit_array_start
080027c4  w    F .text	00000002 RTC_Alarm_IRQHandler
08004918 g     F .text	00000010 _malloc_usable_size_r
080027c4  w    F .text	00000002 EXTI2_IRQHandler
080042b4 g     F .text	000000b4 _scanf_chars
080048f8 g     F .text	00000020 _isatty_r
08004948 g     F .text	00000010 _getpid
0800370c g     F .text	00000024 _lseek_r
080027c4  w    F .text	00000002 DebugMon_Handler
080027c4  w    F .text	00000002 SPI4_IRQHandler
0800227e g     F .text	0000001c sys_free
0800056c g     F .text	0000005a .hidden __floatdidf
08004648 g     F .text	00000024 _kill_r
080027c4  w    F .text	00000002 TIM1_CC_IRQHandler
08002d96 g     F .text	00000024 __sseek
080035cc g     F .text	00000070 __sinit
080027c4  w    F .text	00000002 DMA2_Stream5_IRQHandler
08001f94 g     F .text	00000012 mem_req_setup
080031c4 g     F .text	000000a4 __swbuf_r
080024c0 g     F .text	00000048 HardFault_Handler
08003570 g     F .text	0000002c __sfmoreglue
0800212c g     F .text	0000003c DMA1_Stream5_IRQHandler
0800383c g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
20000cfc g     O .bss	00000004 output_offset
080031ac g     F .text	00000014 strerror
080027c4  w    F .text	00000002 SysTick_Handler
080027c4  w    F .text	00000002 PVD_IRQHandler
080027c4  w    F .text	00000002 SDIO_IRQHandler
080037fc g     F .text	00000034 memmove
080027c4  w    F .text	00000002 TAMP_STAMP_IRQHandler
080057c4 g       *ABS*	00000000 _sidata
080027c4  w    F .text	00000002 PendSV_Handler
080027c4  w    F .text	00000002 NMI_Handler
080057bc g       .ARM	00000000 __exidx_end
08001d34 g     F .text	0000008c mm_realloc
080027c4  w    F .text	00000002 EXTI3_IRQHandler
0800202c g     F .text	00000044 uart_receive
08002804 g     F .text	0000000c __errno
08001fec g     F .text	00000040 uart_send
080027c4  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
080048d4 g     F .text	00000024 _fstat_r
20000d14 g     O .bss	00000004 errno
08004368 g     F .text	000001e8 _scanf_i
08002d5a g     F .text	00000004 __seofread
080049e0 g       .text	00000000 _etext
200000c8 g       .bss	00000000 _sbss
080027c4  w    F .text	00000002 I2C3_ER_IRQHandler
08001f24 g     F .text	0000000c loop
08001eb0 g     F .text	0000000c get_time
0800287c g     F .text	0000001c memcpy
200000e4 g     O .bss	00000004 verbose
08001c4c g     F .text	000000b8 mm_malloc
08003564 g     F .text	0000000c _cleanup_r
080039f4 g     F .text	000001fc _svfprintf_r
080004f4 g     F .text	00000022 .hidden __floatsidf
080027c4  w    F .text	00000002 EXTI0_IRQHandler
080027c4  w    F .text	00000002 I2C2_EV_IRQHandler
080027c4  w    F .text	00000002 DMA1_Stream2_IRQHandler
080027c4  w    F .text	00000002 FPU_IRQHandler
08002de0 g     F .text	000003cc _strerror_r
20000060 g     O .data	00000004 SystemCoreClock
080045e6 g     F .text	00000050 _raise_r
08004938 g     F .text	00000010 _fstat
080027c8 g     F .text	0000003c __assert_func
080027c4  w    F .text	00000002 UsageFault_Handler
080027c4  w    F .text	00000002 DMA2_Stream2_IRQHandler
08003c6a g     F .text	0000003a __ssrefill_r
0800466c g     F .text	00000004 _getpid_r
200000c8 g       .bss	00000000 __bss_start__
080004d4 g     F .text	0000001e .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
080027c4  w    F .text	00000002 SPI1_IRQHandler
08000250 g     F .text	00000000 .hidden __aeabi_drsub
08002c80 g     F .text	00000020 _sbrk_r
08001fc8 g     F .text	00000022 req_receive
08004550 g     F .text	00000024 _read_r
200000f0 g     O .bss	00000400 msg
080027c4  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08000518 g     F .text	00000042 .hidden __extendsfdf2
08003ca4 g     F .text	000002f0 __ssvfscanf_r
0800081c g     F .text	000001d0 .hidden __aeabi_ddiv
0800025c g     F .text	00000276 .hidden __adddf3
080057bc g       .ARM	00000000 __exidx_start
080027c4  w    F .text	00000002 DMA2_Stream3_IRQHandler
080005c8 g     F .text	00000254 .hidden __aeabi_dmul
08004958 g     F .text	00000010 _isatty
20000d12 g     O .bss	00000001 __lock___sinit_recursive_mutex
08004f70 g     O .rodata	00000004 _global_impure_ptr
080038e0 g     F .text	0000005e _realloc_r
08002834 g     F .text	00000048 __libc_init_array
08003368 g     F .text	0000000e abort
080004d4 g     F .text	0000001e .hidden __floatunsidf
08004998 g     F .text	0000001c _sbrk
080027c4  w    F .text	00000002 USART6_IRQHandler
080049c8 g     F .text	00000000 _init
080021e6 g     F .text	0000003c SVC_Handler_Main
08001dc0 g     F .text	0000002c mm_finish
08001f30 g     F .text	00000034 var_print
20000d1c g       .bss	00000000 _ebss
08002222 g     F .text	00000006 priv_mode_on
08002774  w    F .text	00000038 Reset_Handler
080009ec g     F .text	0000004e .hidden __fixdfsi
08001aec g     F .text	00000090 mem_sbrk
08001a98 g     F .text	00000054 mem_init
08001fa6 g     F .text	00000022 req_send
20000d10 g     O .bss	00000001 __lock___malloc_recursive_mutex
080027c4  w    F .text	00000002 DMA2_Stream0_IRQHandler
08001ebc g     F .text	00000068 timer_init
080025b0 g     F .text	00000028 led_on
08002810 g     F .text	00000024 fprintf
080027c4  w    F .text	00000002 TIM4_IRQHandler
0800025c g     F .text	00000276 .hidden __aeabi_dadd
08002dc2 g     F .text	0000001e strcat
0800055c g     F .text	0000006a .hidden __aeabi_ul2d
0800561c g     O .rodata	00000020 __sf_fake_stderr
20000d20 g       ._user_heap_stack	00000000 end
08002590 g     F .text	00000020 memfault_init
080027c4  w    F .text	00000002 I2C1_EV_IRQHandler
0800370a g     F .text	00000002 __retarget_lock_release_recursive
08002168 g     F .text	0000002c DMA1_Stream6_IRQHandler
0800393e g     F .text	000000b4 __ssputs_r
080027c4  w    F .text	00000002 DMA1_Stream1_IRQHandler
080029fe g     F .text	00000024 __sfputs_r
08002118 g     F .text	00000012 uart_init
0800359c g     F .text	0000000c __sfp_lock_acquire
080001b0 g     F .text	00000000 memchr
20000d1c g       .bss	00000000 __bss_end__
08001b88 g     F .text	0000000c mem_heap_hi
08003848 g     F .text	00000098 _free_r
080027c4  w    F .text	00000002 TIM3_IRQHandler
080027c4  w    F .text	00000002 RCC_IRQHandler
2000005c g     O .data	00000004 sp_reset
00000200 g       *ABS*	00000000 _Min_Heap_Size
08003bf0 g     F .text	0000007a _sungetc_r
08000258 g     F .text	0000027a .hidden __aeabi_dsub
080027c4 g       .text	00000002 Default_Handler
0800224c g     F .text	00000012 sys_mm_init
080031c0 g     F .text	00000004 _user_strerror
0800055c g     F .text	0000006a .hidden __floatundidf
08004978 g     F .text	00000010 _lseek
080027c4  w    F .text	00000002 EXTI15_10_IRQHandler
080027c4  w    F .text	00000002 ADC_IRQHandler
080027c4  w    F .text	00000002 DMA1_Stream7_IRQHandler
080027c4  w    F .text	00000002 SPI5_IRQHandler
0800485c g     F .text	00000004 _strtoul_r
08003378 g     F .text	00000020 _close_r
080004f4 g     F .text	00000022 .hidden __aeabi_i2d
080027c4  w    F .text	00000002 TIM5_IRQHandler
080022d0 g     F .text	0000001c sys_get_time
080027c4  w    F .text	00000002 DMA2_Stream7_IRQHandler
080027c4  w    F .text	00000002 I2C3_EV_IRQHandler
0800229a g     F .text	00000024 sys_realloc
08002ce0 g     F .text	00000058 sscanf
0800328c g     F .text	000000dc __swsetup_r
080027c4  w    F .text	00000002 EXTI9_5_IRQHandler
0800081c g     F .text	000001d0 .hidden __divdf3
0800363c g     F .text	0000008c __sfp
080027c4  w    F .text	00000002 RTC_WKUP_IRQHandler
080035c0 g     F .text	0000000c __sinit_lock_release
080005c8 g     F .text	00000254 .hidden __muldf3
08002d38 g     F .text	00000022 __sread
08002194 g     F .text	0000003c uart_dma_init
08001be8 g     F .text	00000064 mm_init
08003830 g     F .text	0000000c __malloc_lock
080034a4 g     F .text	00000078 _fflush_r
08001b94 g     F .text	00000018 mem_heapsize
08001d04 g     F .text	00000030 mm_free
080027c4  w    F .text	00000002 SPI2_IRQHandler
0800563c g     O .rodata	00000020 __sf_fake_stdin
08003708 g     F .text	00000002 __retarget_lock_acquire_recursive
08002898 g     F .text	00000010 memset
08002550 g     F .text	00000040 MemManage_Handler
08000ab8 g     F .text	00000248 main
080027c4  w    F .text	00000002 DMA1_Stream0_IRQHandler
08003706 g     F .text	00000002 __retarget_lock_init_recursive
080021d0 g     F .text	00000016 SVC_Handler
08002dba g     F .text	00000008 __sclose
0800263c g     F .text	00000018 mcu_init
0800225e g     F .text	00000020 sys_malloc
08004774 g     F .text	00000004 _strtol_r
080028e8 g     F .text	000000e8 _malloc_r
0800056c g     F .text	0000005a .hidden __aeabi_l2d
08004860 g     F .text	00000074 __submore
080027c4  w    F .text	00000002 EXTI4_IRQHandler
08002ce0 g     F .text	00000058 siscanf
08002654 g     F .text	0000005c SystemInit
080049d4 g     F .text	00000000 _fini
08002ca0 g     F .text	00000040 sprintf
08003268 g     F .text	00000024 _write_r
080025d8 g     F .text	00000028 led_off
08003f94 g     F .text	000000da _printf_common
20000064 g     O .data	00000004 _impure_ptr
08003398 g     F .text	0000010c __sflush_r
080039f4 g     F .text	000001fc _svfiprintf_r
08002508 g     F .text	00000048 WWDG_IRQHandler
080022ec g     F .text	000000cc proc_update
08001e70 g     F .text	00000040 TIM2_IRQHandler
08002600 g     F .text	0000003c led_init
080026b0 g     F .text	000000c4 set_sysclk_to_100
080023b8 g     F .text	000000b8 mpu_init
080027c4  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
080027c4  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
08003ca4 g     F .text	000002f0 __ssvfiscanf_r
08003730 g     F .text	0000004c __swhatbuf_r
20020000 g       .isr_vector	00000000 _estack
080027c4  w    F .text	00000002 EXTI1_IRQHandler
080049b4 g     F .text	00000010 _write
200000c8 g       .data	00000000 _edata
08001b7c g     F .text	0000000c mem_heap_lo
080027c4  w    F .text	00000002 USART2_IRQHandler
08002d5e g     F .text	00000038 __swrite
08002810 g     F .text	00000024 fiprintf
08002a24 g     F .text	0000025c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080036c8 g     F .text	0000003e _fwalk_reent
080009ec g     F .text	0000004e .hidden __aeabi_d2iz
08004968 g     F .text	00000010 _kill
080022be g     F .text	00000012 sys_mm_finish
080027c4  w    F .text	00000002 I2C2_ER_IRQHandler
080035a8 g     F .text	0000000c __sfp_lock_release
0800565c g     O .rodata	00000020 __sf_fake_stdout
08002ca0 g     F .text	00000040 siprintf
08004574 g     F .text	00000072 __sccl
080027c4  w    F .text	00000002 DMA2_Stream1_IRQHandler
080056b9 g     O .rodata	00000101 _ctype_
08004988 g     F .text	00000010 _read
080027c4  w    F .text	00000002 FLASH_IRQHandler
080049c4 g     F .text	00000002 _exit
080027c4  w    F .text	00000002 DMA2_Stream4_IRQHandler
080027c4  w    F .text	00000002 BusFault_Handler
080027c4  w    F .text	00000002 USART1_IRQHandler
0800377c g     F .text	00000080 __smakebuf_r
080001a0 g     F .text	00000010 strlen
080027c4  w    F .text	00000002 OTG_FS_IRQHandler
08004070 g     F .text	00000244 _printf_i
080027c4  w    F .text	00000002 SPI3_IRQHandler
080027c4  w    F .text	00000002 DMA1_Stream4_IRQHandler
20000d0c g     O .bss	00000004 __malloc_sbrk_start
080027c4  w    F .text	00000002 I2C1_ER_IRQHandler
08000518 g     F .text	00000042 .hidden __aeabi_f2d
20000d08 g     O .bss	00000004 __malloc_free_list
08002228 g     F .text	00000024 priv_mode_off
08000258 g     F .text	0000027a .hidden __subdf3
08002a24 g     F .text	0000025c _vfprintf_r
080027c4  w    F .text	00000002 DMA2_Stream6_IRQHandler
080027c4  w    F .text	00000002 DMA1_Stream3_IRQHandler
20000d11 g     O .bss	00000001 __lock___sfp_recursive_mutex
08004928 g     F .text	00000010 _close
08004638 g     F .text	00000010 raise
080035b4 g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2iz>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f4:	d215      	bcs.n	8000a22 <__aeabi_d2iz+0x36>
 80009f6:	d511      	bpl.n	8000a1c <__aeabi_d2iz+0x30>
 80009f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d912      	bls.n	8000a28 <__aeabi_d2iz+0x3c>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a12:	fa23 f002 	lsr.w	r0, r3, r2
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d105      	bne.n	8000a34 <__aeabi_d2iz+0x48>
 8000a28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	bf08      	it	eq
 8000a2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__do_global_dtors_aux>:
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	4c05      	ldr	r4, [pc, #20]	; (8000a54 <__do_global_dtors_aux+0x18>)
 8000a40:	7823      	ldrb	r3, [r4, #0]
 8000a42:	b933      	cbnz	r3, 8000a52 <__do_global_dtors_aux+0x16>
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__do_global_dtors_aux+0x1c>)
 8000a46:	b113      	cbz	r3, 8000a4e <__do_global_dtors_aux+0x12>
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <__do_global_dtors_aux+0x20>)
 8000a4a:	f3af 8000 	nop.w
 8000a4e:	2301      	movs	r3, #1
 8000a50:	7023      	strb	r3, [r4, #0]
 8000a52:	bd10      	pop	{r4, pc}
 8000a54:	200000c8 	.word	0x200000c8
 8000a58:	00000000 	.word	0x00000000
 8000a5c:	080049c8 	.word	0x080049c8

08000a60 <frame_dummy>:
 8000a60:	b508      	push	{r3, lr}
 8000a62:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <frame_dummy+0x10>)
 8000a64:	b11b      	cbz	r3, 8000a6e <frame_dummy+0xe>
 8000a66:	4903      	ldr	r1, [pc, #12]	; (8000a74 <frame_dummy+0x14>)
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <frame_dummy+0x18>)
 8000a6a:	f3af 8000 	nop.w
 8000a6e:	bd08      	pop	{r3, pc}
 8000a70:	00000000 	.word	0x00000000
 8000a74:	200000cc 	.word	0x200000cc
 8000a78:	080049c8 	.word	0x080049c8

08000a7c <stack_test>:

// Test file string
static char tracestr[] = TESTSTRING;

// Test for stack overflow
static void stack_test(void) {
 8000a7c:	b500      	push	{lr}
 8000a7e:	b0a1      	sub	sp, #132	; 0x84
	char buffer_array[KB/8] = {0};
 8000a80:	2300      	movs	r3, #0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	ab01      	add	r3, sp, #4
 8000a86:	227c      	movs	r2, #124	; 0x7c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 ff04 	bl	8002898 <memset>
	stack_test();
 8000a90:	f7ff fff4 	bl	8000a7c <stack_test>
}
 8000a94:	bf00      	nop
 8000a96:	b021      	add	sp, #132	; 0x84
 8000a98:	f85d fb04 	ldr.w	pc, [sp], #4

08000a9c <heap_test>:

// Test for stack overflow
static void heap_test(void) {
 8000a9c:	b508      	push	{r3, lr}
	while(1) {
		if(!sys_malloc(10*KB)){
 8000a9e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8000aa2:	f001 fbdc 	bl	800225e <sys_malloc>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f8      	bne.n	8000a9e <heap_test+0x2>
			sys_mm_finish();
 8000aac:	f001 fc07 	bl	80022be <sys_mm_finish>
			loop();
 8000ab0:	f001 fa38 	bl	8001f24 <loop>
		if(!sys_malloc(10*KB)){
 8000ab4:	e7f3      	b.n	8000a9e <heap_test+0x2>
	...

08000ab8 <main>:

/**************
 * Main routine
 **************/
int main(void)
{
 8000ab8:	b500      	push	{lr}
 8000aba:	b0a3      	sub	sp, #140	; 0x8c
    int i=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	9320      	str	r3, [sp, #128]	; 0x80
    int num_tracefiles = 0;    /* the number of traces in that array */
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	931f      	str	r3, [sp, #124]	; 0x7c
    trace_t *trace = NULL;     /* stores a single trace file in memory */
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	931e      	str	r3, [sp, #120]	; 0x78
    range_t *ranges = NULL;    /* keeps track of block extents for one trace */
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9308      	str	r3, [sp, #32]
    //speed_t speed_params;      /* input parameters to the xx_speed routines */ 
	
	// Test start and end time
	size_t start_time, end_time;

    int autograder = 0;  /* If set, emit summary info for autograder (-g) */
 8000acc:	2300      	movs	r3, #0
 8000ace:	931d      	str	r3, [sp, #116]	; 0x74
	int p1_int;
	int p2_int;
	int perfindex_int;

    /* Initialize the simulated memory system in memlib.c */
	sys_mm_init();
 8000ad0:	f001 fbbc 	bl	800224c <sys_mm_init>
	start_time = sys_get_time();
 8000ad4:	f001 fbfc 	bl	80022d0 <sys_get_time>
 8000ad8:	901c      	str	r0, [sp, #112]	; 0x70

    /* Evaluate student's mm malloc package using the K-best scheme */
	trace = read_trace();
 8000ada:	f000 fa07 	bl	8000eec <read_trace>
 8000ade:	901e      	str	r0, [sp, #120]	; 0x78
	mm_stats.ops = trace->num_ops;
 8000ae0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd05 	bl	80004f4 <__aeabi_i2d>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	e9cd 2300 	strd	r2, r3, [sp]
	if (verbose > 1) {
 8000af2:	4b75      	ldr	r3, [pc, #468]	; (8000cc8 <main+0x210>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	dd06      	ble.n	8000b08 <main+0x50>
	    sprintf(msg, "Checking sys_malloc for correctness, ");
 8000afa:	4974      	ldr	r1, [pc, #464]	; (8000ccc <main+0x214>)
 8000afc:	4874      	ldr	r0, [pc, #464]	; (8000cd0 <main+0x218>)
 8000afe:	f002 f8cf 	bl	8002ca0 <siprintf>
		var_print(msg);
 8000b02:	4873      	ldr	r0, [pc, #460]	; (8000cd0 <main+0x218>)
 8000b04:	f001 fa14 	bl	8001f30 <var_print>
	}
	mm_stats.valid = eval_mm_valid(trace, i, &ranges);
 8000b08:	ab08      	add	r3, sp, #32
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b0e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b10:	f000 fc3c 	bl	800138c <eval_mm_valid>
 8000b14:	4603      	mov	r3, r0
 8000b16:	9302      	str	r3, [sp, #8]
	if (mm_stats.valid) {
 8000b18:	9b02      	ldr	r3, [sp, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d035      	beq.n	8000b8a <main+0xd2>
	    if (verbose > 1) {
 8000b1e:	4b6a      	ldr	r3, [pc, #424]	; (8000cc8 <main+0x210>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	dd06      	ble.n	8000b34 <main+0x7c>
			sprintf(msg, "efficiency, ");
 8000b26:	496b      	ldr	r1, [pc, #428]	; (8000cd4 <main+0x21c>)
 8000b28:	4869      	ldr	r0, [pc, #420]	; (8000cd0 <main+0x218>)
 8000b2a:	f002 f8b9 	bl	8002ca0 <siprintf>
			var_print(msg);
 8000b2e:	4868      	ldr	r0, [pc, #416]	; (8000cd0 <main+0x218>)
 8000b30:	f001 f9fe 	bl	8001f30 <var_print>
		}
	    mm_stats.util = eval_mm_util(trace, i, &ranges);
 8000b34:	ab08      	add	r3, sp, #32
 8000b36:	461a      	mov	r2, r3
 8000b38:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b3a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b3c:	f000 fd2e 	bl	800159c <eval_mm_util>
 8000b40:	4602      	mov	r2, r0
 8000b42:	460b      	mov	r3, r1
 8000b44:	e9cd 2306 	strd	r2, r3, [sp, #24]
	    if (verbose > 1) {
 8000b48:	4b5f      	ldr	r3, [pc, #380]	; (8000cc8 <main+0x210>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	dd06      	ble.n	8000b5e <main+0xa6>
			sprintf(msg, "and performance.\n");
 8000b50:	4961      	ldr	r1, [pc, #388]	; (8000cd8 <main+0x220>)
 8000b52:	485f      	ldr	r0, [pc, #380]	; (8000cd0 <main+0x218>)
 8000b54:	f002 f8a4 	bl	8002ca0 <siprintf>
			var_print(msg);
 8000b58:	485d      	ldr	r0, [pc, #372]	; (8000cd0 <main+0x218>)
 8000b5a:	f001 f9e9 	bl	8001f30 <var_print>
		}
	    //mm_stats.secs = fsecs(eval_mm_speed, &speed_params);
		end_time = sys_get_time();
 8000b5e:	f001 fbb7 	bl	80022d0 <sys_get_time>
 8000b62:	901b      	str	r0, [sp, #108]	; 0x6c
		mm_stats.secs = (end_time-start_time)/1000.0f;
 8000b64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000b66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	ee07 3a90 	vmov	s15, r3
 8000b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b72:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000cdc <main+0x224>
 8000b76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b7a:	ee16 0a90 	vmov	r0, s13
 8000b7e:	f7ff fccb 	bl	8000518 <__aeabi_f2d>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	e9cd 2304 	strd	r2, r3, [sp, #16]
	}
	free_trace(trace);
 8000b8a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b8c:	f000 fbe4 	bl	8001358 <free_trace>

    /* Display the mm results in a compact table */
    if (verbose) {
 8000b90:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <main+0x210>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d012      	beq.n	8000bbe <main+0x106>
		sprintf(msg, "\nResults for mm malloc:\n");
 8000b98:	4951      	ldr	r1, [pc, #324]	; (8000ce0 <main+0x228>)
 8000b9a:	484d      	ldr	r0, [pc, #308]	; (8000cd0 <main+0x218>)
 8000b9c:	f002 f880 	bl	8002ca0 <siprintf>
		var_print(msg);
 8000ba0:	484b      	ldr	r0, [pc, #300]	; (8000cd0 <main+0x218>)
 8000ba2:	f001 f9c5 	bl	8001f30 <var_print>
		printresults(num_tracefiles, &mm_stats);
 8000ba6:	466b      	mov	r3, sp
 8000ba8:	4619      	mov	r1, r3
 8000baa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8000bac:	f000 fde8 	bl	8001780 <printresults>
		sprintf(msg, "\n");
 8000bb0:	494c      	ldr	r1, [pc, #304]	; (8000ce4 <main+0x22c>)
 8000bb2:	4847      	ldr	r0, [pc, #284]	; (8000cd0 <main+0x218>)
 8000bb4:	f002 f874 	bl	8002ca0 <siprintf>
		var_print(msg);
 8000bb8:	4845      	ldr	r0, [pc, #276]	; (8000cd0 <main+0x218>)
 8000bba:	f001 f9b9 	bl	8001f30 <var_print>
    }

    /* 
     * Accumulate the aggregate statistics for the student's mm package 
     */
    secs = 0;
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	f04f 0300 	mov.w	r3, #0
 8000bc6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    ops = 0;
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    util = 0;
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	f04f 0300 	mov.w	r3, #0
 8000bde:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    numcorrect = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	9321      	str	r3, [sp, #132]	; 0x84
	secs = mm_stats.secs;
 8000be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000bea:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	ops = mm_stats.ops;
 8000bee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000bf2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	util = mm_stats.util;
 8000bf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000bfa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	if (mm_stats.valid)
 8000bfe:	9b02      	ldr	r3, [sp, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <main+0x152>
	    numcorrect++;
 8000c04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000c06:	3301      	adds	r3, #1
 8000c08:	9321      	str	r3, [sp, #132]	; 0x84
    avg_mm_util = util;
 8000c0a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8000c0e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48

    /* 
     * Compute and print the performance index 
     */
    if (errors == 0) {
 8000c12:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <main+0x230>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d130      	bne.n	8000c7c <main+0x1c4>
	avg_mm_throughput = ops/secs;
 8000c1a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8000c1e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8000c22:	f7ff fdfb 	bl	800081c <__aeabi_ddiv>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40

	p1 = avg_mm_util;
 8000c2e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000c32:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	p2 = avg_mm_throughput;
 8000c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000c3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30

	p1_int = p1*100;
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <main+0x234>)
 8000c44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000c48:	f7ff fcbe 	bl	80005c8 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f7ff feca 	bl	80009ec <__aeabi_d2iz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	930b      	str	r3, [sp, #44]	; 0x2c
	p2_int = (int)p2;
 8000c5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000c60:	f7ff fec4 	bl	80009ec <__aeabi_d2iz>
 8000c64:	4603      	mov	r3, r0
 8000c66:	930a      	str	r3, [sp, #40]	; 0x28

	sprintf(msg, "Utilization: %d%%. Throughput: %d\n",
 8000c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000c6c:	4920      	ldr	r1, [pc, #128]	; (8000cf0 <main+0x238>)
 8000c6e:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <main+0x218>)
 8000c70:	f002 f816 	bl	8002ca0 <siprintf>
	       p1_int, 
	       p2_int);
	
	var_print(msg);
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <main+0x218>)
 8000c76:	f001 f95b 	bl	8001f30 <var_print>
 8000c7a:	e009      	b.n	8000c90 <main+0x1d8>
    }
    else { /* There were errors */
	sprintf(msg, "Terminated with %d errors\n", errors);
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <main+0x230>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	491c      	ldr	r1, [pc, #112]	; (8000cf4 <main+0x23c>)
 8000c84:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <main+0x218>)
 8000c86:	f002 f80b 	bl	8002ca0 <siprintf>
	var_print(msg);
 8000c8a:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <main+0x218>)
 8000c8c:	f001 f950 	bl	8001f30 <var_print>
    }

    if (autograder) {
 8000c90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00f      	beq.n	8000cb6 <main+0x1fe>
	sprintf(msg, "correct:%d\n", numcorrect);
 8000c96:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8000c98:	4917      	ldr	r1, [pc, #92]	; (8000cf8 <main+0x240>)
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <main+0x218>)
 8000c9c:	f002 f800 	bl	8002ca0 <siprintf>
	var_print(msg);
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <main+0x218>)
 8000ca2:	f001 f945 	bl	8001f30 <var_print>
	sprintf(msg, "perfidx:%d\n", perfindex_int);
 8000ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ca8:	4914      	ldr	r1, [pc, #80]	; (8000cfc <main+0x244>)
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <main+0x218>)
 8000cac:	f001 fff8 	bl	8002ca0 <siprintf>
	var_print(msg);
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <main+0x218>)
 8000cb2:	f001 f93d 	bl	8001f30 <var_print>
    }

	sys_mm_finish();
 8000cb6:	f001 fb02 	bl	80022be <sys_mm_finish>

	loop();
 8000cba:	f001 f933 	bl	8001f24 <loop>
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	b023      	add	sp, #140	; 0x8c
 8000cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cc8:	200000e4 	.word	0x200000e4
 8000ccc:	080049e0 	.word	0x080049e0
 8000cd0:	200000f0 	.word	0x200000f0
 8000cd4:	08004a08 	.word	0x08004a08
 8000cd8:	08004a18 	.word	0x08004a18
 8000cdc:	447a0000 	.word	0x447a0000
 8000ce0:	08004a2c 	.word	0x08004a2c
 8000ce4:	08004a48 	.word	0x08004a48
 8000ce8:	200000e8 	.word	0x200000e8
 8000cec:	40590000 	.word	0x40590000
 8000cf0:	08004a4c 	.word	0x08004a4c
 8000cf4:	08004a70 	.word	0x08004a70
 8000cf8:	08004a8c 	.word	0x08004a8c
 8000cfc:	08004a98 	.word	0x08004a98

08000d00 <add_range>:
 *     size bytes at addr lo. After checking the block for correctness,
 *     we create a range struct for this block and add it to the range list. 
 */
static int add_range(range_t **ranges, char *lo, int size, 
		     int tracenum, int opnum)
{
 8000d00:	b510      	push	{r4, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	9005      	str	r0, [sp, #20]
 8000d06:	9104      	str	r1, [sp, #16]
 8000d08:	9203      	str	r2, [sp, #12]
 8000d0a:	9302      	str	r3, [sp, #8]
    char *hi = lo + size - 1;
 8000d0c:	9b03      	ldr	r3, [sp, #12]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	9a04      	ldr	r2, [sp, #16]
 8000d12:	4413      	add	r3, r2
 8000d14:	9306      	str	r3, [sp, #24]
    range_t *p;

    assert(size > 0);
 8000d16:	9b03      	ldr	r3, [sp, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dc06      	bgt.n	8000d2a <add_range+0x2a>
 8000d1c:	4b4b      	ldr	r3, [pc, #300]	; (8000e4c <add_range+0x14c>)
 8000d1e:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <add_range+0x150>)
 8000d20:	f240 111d 	movw	r1, #285	; 0x11d
 8000d24:	484b      	ldr	r0, [pc, #300]	; (8000e54 <add_range+0x154>)
 8000d26:	f001 fd4f 	bl	80027c8 <__assert_func>

    /* Payload addresses must be ALIGNMENT-byte aligned */
    if (!IS_ALIGNED(lo)) {
 8000d2a:	9b04      	ldr	r3, [sp, #16]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00c      	beq.n	8000d4e <add_range+0x4e>
	sprintf(msg, "Payload address (%p) not aligned to %d bytes", 
 8000d34:	2304      	movs	r3, #4
 8000d36:	9a04      	ldr	r2, [sp, #16]
 8000d38:	4947      	ldr	r1, [pc, #284]	; (8000e58 <add_range+0x158>)
 8000d3a:	4848      	ldr	r0, [pc, #288]	; (8000e5c <add_range+0x15c>)
 8000d3c:	f001 ffb0 	bl	8002ca0 <siprintf>
		lo, ALIGNMENT);
        malloc_error(tracenum, opnum, msg);
 8000d40:	4a46      	ldr	r2, [pc, #280]	; (8000e5c <add_range+0x15c>)
 8000d42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d44:	9802      	ldr	r0, [sp, #8]
 8000d46:	f000 fe83 	bl	8001a50 <malloc_error>
        return 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e07b      	b.n	8000e46 <add_range+0x146>
    }

    /* The payload must lie within the extent of the heap */
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d4e:	f000 ff15 	bl	8001b7c <mem_heap_lo>
 8000d52:	4602      	mov	r2, r0
 8000d54:	9b04      	ldr	r3, [sp, #16]
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d311      	bcc.n	8000d7e <add_range+0x7e>
 8000d5a:	f000 ff15 	bl	8001b88 <mem_heap_hi>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	9b04      	ldr	r3, [sp, #16]
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d80b      	bhi.n	8000d7e <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d66:	f000 ff09 	bl	8001b7c <mem_heap_lo>
 8000d6a:	4602      	mov	r2, r0
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d6c:	9b06      	ldr	r3, [sp, #24]
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d305      	bcc.n	8000d7e <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d72:	f000 ff09 	bl	8001b88 <mem_heap_hi>
 8000d76:	4602      	mov	r2, r0
 8000d78:	9b06      	ldr	r3, [sp, #24]
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d914      	bls.n	8000da8 <add_range+0xa8>
	sprintf(msg, "Payload (%p:%p) lies outside heap (%p:%p)",
 8000d7e:	f000 fefd 	bl	8001b7c <mem_heap_lo>
 8000d82:	4604      	mov	r4, r0
 8000d84:	f000 ff00 	bl	8001b88 <mem_heap_hi>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	9400      	str	r4, [sp, #0]
 8000d8e:	9b06      	ldr	r3, [sp, #24]
 8000d90:	9a04      	ldr	r2, [sp, #16]
 8000d92:	4933      	ldr	r1, [pc, #204]	; (8000e60 <add_range+0x160>)
 8000d94:	4831      	ldr	r0, [pc, #196]	; (8000e5c <add_range+0x15c>)
 8000d96:	f001 ff83 	bl	8002ca0 <siprintf>
		lo, hi, mem_heap_lo(), mem_heap_hi());
	malloc_error(tracenum, opnum, msg);
 8000d9a:	4a30      	ldr	r2, [pc, #192]	; (8000e5c <add_range+0x15c>)
 8000d9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d9e:	9802      	ldr	r0, [sp, #8]
 8000da0:	f000 fe56 	bl	8001a50 <malloc_error>
        return 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	e04e      	b.n	8000e46 <add_range+0x146>
    }

    /* The payload must not overlap any other payloads */
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000da8:	9b05      	ldr	r3, [sp, #20]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	9307      	str	r3, [sp, #28]
 8000dae:	e029      	b.n	8000e04 <add_range+0x104>
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000db0:	9b07      	ldr	r3, [sp, #28]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	9a04      	ldr	r2, [sp, #16]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d304      	bcc.n	8000dc4 <add_range+0xc4>
 8000dba:	9b07      	ldr	r3, [sp, #28]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	9a04      	ldr	r2, [sp, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d909      	bls.n	8000dd8 <add_range+0xd8>
            (hi >= p->lo && hi <= p->hi)) {
 8000dc4:	9b07      	ldr	r3, [sp, #28]
 8000dc6:	681b      	ldr	r3, [r3, #0]
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000dc8:	9a06      	ldr	r2, [sp, #24]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d317      	bcc.n	8000dfe <add_range+0xfe>
            (hi >= p->lo && hi <= p->hi)) {
 8000dce:	9b07      	ldr	r3, [sp, #28]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	9a06      	ldr	r2, [sp, #24]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d812      	bhi.n	8000dfe <add_range+0xfe>
	    sprintf(msg, "Payload (%p:%p) overlaps another payload (%p:%p)\n",
 8000dd8:	9b07      	ldr	r3, [sp, #28]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	9a07      	ldr	r2, [sp, #28]
 8000dde:	6852      	ldr	r2, [r2, #4]
 8000de0:	9201      	str	r2, [sp, #4]
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	9b06      	ldr	r3, [sp, #24]
 8000de6:	9a04      	ldr	r2, [sp, #16]
 8000de8:	491e      	ldr	r1, [pc, #120]	; (8000e64 <add_range+0x164>)
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <add_range+0x15c>)
 8000dec:	f001 ff58 	bl	8002ca0 <siprintf>
		    lo, hi, p->lo, p->hi);
	    malloc_error(tracenum, opnum, msg);
 8000df0:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <add_range+0x15c>)
 8000df2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000df4:	9802      	ldr	r0, [sp, #8]
 8000df6:	f000 fe2b 	bl	8001a50 <malloc_error>
	    return 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e023      	b.n	8000e46 <add_range+0x146>
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000dfe:	9b07      	ldr	r3, [sp, #28]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	9307      	str	r3, [sp, #28]
 8000e04:	9b07      	ldr	r3, [sp, #28]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1d2      	bne.n	8000db0 <add_range+0xb0>

    /* 
     * Everything looks OK, so remember the extent of this block 
     * by creating a range struct and adding it the range list.
     */
    if ((p = (range_t *)sys_malloc(sizeof(range_t))) == NULL)
 8000e0a:	200c      	movs	r0, #12
 8000e0c:	f001 fa27 	bl	800225e <sys_malloc>
 8000e10:	9007      	str	r0, [sp, #28]
 8000e12:	9b07      	ldr	r3, [sp, #28]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <add_range+0x11e>
		unix_error("malloc error in add_range");
 8000e18:	4813      	ldr	r0, [pc, #76]	; (8000e68 <add_range+0x168>)
 8000e1a:	f000 fdfb 	bl	8001a14 <unix_error>
	test_mem_use += sizeof(range_t);
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <add_range+0x16c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	330c      	adds	r3, #12
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <add_range+0x16c>)
 8000e28:	601a      	str	r2, [r3, #0]
    p->next = *ranges;
 8000e2a:	9b05      	ldr	r3, [sp, #20]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	9b07      	ldr	r3, [sp, #28]
 8000e30:	609a      	str	r2, [r3, #8]
    p->lo = lo;
 8000e32:	9b07      	ldr	r3, [sp, #28]
 8000e34:	9a04      	ldr	r2, [sp, #16]
 8000e36:	601a      	str	r2, [r3, #0]
    p->hi = hi;
 8000e38:	9b07      	ldr	r3, [sp, #28]
 8000e3a:	9a06      	ldr	r2, [sp, #24]
 8000e3c:	605a      	str	r2, [r3, #4]
    *ranges = p;
 8000e3e:	9b05      	ldr	r3, [sp, #20]
 8000e40:	9a07      	ldr	r2, [sp, #28]
 8000e42:	601a      	str	r2, [r3, #0]
    return 1;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	b008      	add	sp, #32
 8000e4a:	bd10      	pop	{r4, pc}
 8000e4c:	08004aa4 	.word	0x08004aa4
 8000e50:	08004f28 	.word	0x08004f28
 8000e54:	08004ab0 	.word	0x08004ab0
 8000e58:	08004ac8 	.word	0x08004ac8
 8000e5c:	200000f0 	.word	0x200000f0
 8000e60:	08004af8 	.word	0x08004af8
 8000e64:	08004b24 	.word	0x08004b24
 8000e68:	08004b58 	.word	0x08004b58
 8000e6c:	200000ec 	.word	0x200000ec

08000e70 <remove_range>:

/* 
 * remove_range - Free the range record of block whose payload starts at lo 
 */
static void remove_range(range_t **ranges, char *lo)
{
 8000e70:	b500      	push	{lr}
 8000e72:	b085      	sub	sp, #20
 8000e74:	9001      	str	r0, [sp, #4]
 8000e76:	9100      	str	r1, [sp, #0]
    range_t *p;
    range_t **prevpp = ranges;
 8000e78:	9b01      	ldr	r3, [sp, #4]
 8000e7a:	9302      	str	r3, [sp, #8]

    for (p = *ranges;  p != NULL; p = p->next) {
 8000e7c:	9b01      	ldr	r3, [sp, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	9303      	str	r3, [sp, #12]
 8000e82:	e012      	b.n	8000eaa <remove_range+0x3a>
        if (p->lo == lo) {
 8000e84:	9b03      	ldr	r3, [sp, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	9a00      	ldr	r2, [sp, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d107      	bne.n	8000e9e <remove_range+0x2e>
	    *prevpp = p->next;
 8000e8e:	9b03      	ldr	r3, [sp, #12]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	9b02      	ldr	r3, [sp, #8]
 8000e94:	601a      	str	r2, [r3, #0]
            sys_free(p);
 8000e96:	9803      	ldr	r0, [sp, #12]
 8000e98:	f001 f9f1 	bl	800227e <sys_free>
            break;
 8000e9c:	e009      	b.n	8000eb2 <remove_range+0x42>
        }
        prevpp = &(p->next);
 8000e9e:	9b03      	ldr	r3, [sp, #12]
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	9302      	str	r3, [sp, #8]
    for (p = *ranges;  p != NULL; p = p->next) {
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	9303      	str	r3, [sp, #12]
 8000eaa:	9b03      	ldr	r3, [sp, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e9      	bne.n	8000e84 <remove_range+0x14>
    }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	b005      	add	sp, #20
 8000eb6:	f85d fb04 	ldr.w	pc, [sp], #4

08000eba <clear_ranges>:

/*
 * clear_ranges - free all of the range records for a trace 
 */
static void clear_ranges(range_t **ranges)
{
 8000eba:	b500      	push	{lr}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	9001      	str	r0, [sp, #4]
    range_t *p;
    range_t *pnext;

    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	9303      	str	r3, [sp, #12]
 8000ec6:	e007      	b.n	8000ed8 <clear_ranges+0x1e>
        pnext = p->next;
 8000ec8:	9b03      	ldr	r3, [sp, #12]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	9302      	str	r3, [sp, #8]
        sys_free(p);
 8000ece:	9803      	ldr	r0, [sp, #12]
 8000ed0:	f001 f9d5 	bl	800227e <sys_free>
    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ed4:	9b02      	ldr	r3, [sp, #8]
 8000ed6:	9303      	str	r3, [sp, #12]
 8000ed8:	9b03      	ldr	r3, [sp, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f4      	bne.n	8000ec8 <clear_ranges+0xe>
    }
    *ranges = NULL;
 8000ede:	9b01      	ldr	r3, [sp, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	b005      	add	sp, #20
 8000ee8:	f85d fb04 	ldr.w	pc, [sp], #4

08000eec <read_trace>:

/*
 * read_trace - read a trace file and store it in memory
 */
static trace_t *read_trace()
{
 8000eec:	b500      	push	{lr}
 8000eee:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
    trace_t *trace;
    char type[MAXLINE];
    char path[MAXLINE];
    unsigned index, size;
    unsigned max_index = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
    unsigned op_index;
	char * scanptr = tracestr;
 8000ef8:	4bac      	ldr	r3, [pc, #688]	; (80011ac <read_trace+0x2c0>)
 8000efa:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
	int bytes_scanned = 0;
 8000efe:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f02:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]

    /* Allocate the trace record */
    if ((trace = (trace_t *) sys_malloc(sizeof(trace_t))) == NULL)
 8000f0a:	201c      	movs	r0, #28
 8000f0c:	f001 f9a7 	bl	800225e <sys_malloc>
 8000f10:	f8cd 0818 	str.w	r0, [sp, #2072]	; 0x818
 8000f14:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <read_trace+0x36>
		unix_error("malloc 1 failed in read_trance");
 8000f1c:	48a4      	ldr	r0, [pc, #656]	; (80011b0 <read_trace+0x2c4>)
 8000f1e:	f000 fd79 	bl	8001a14 <unix_error>
	test_mem_use += sizeof(trace_t);
 8000f22:	4ba4      	ldr	r3, [pc, #656]	; (80011b4 <read_trace+0x2c8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	331c      	adds	r3, #28
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4ba2      	ldr	r3, [pc, #648]	; (80011b4 <read_trace+0x2c8>)
 8000f2c:	601a      	str	r2, [r3, #0]
    /* Read the trace file header */
    //if ((tracefile = fmemopen(tracestr, strlen(tracestr), "r")) == NULL) {
	//sprintf(msg, "Could not open %s in read_trace", path);
	//unix_error(msg);
    //}
    sscanf(scanptr, "%d%n", &(trace->sugg_heapsize), &bytes_scanned); /* not used */
 8000f2e:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
 8000f32:	ab03      	add	r3, sp, #12
 8000f34:	49a0      	ldr	r1, [pc, #640]	; (80011b8 <read_trace+0x2cc>)
 8000f36:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f3a:	f001 fed1 	bl	8002ce0 <siscanf>
	scanptr += bytes_scanned;
 8000f3e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f42:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f4e:	4413      	add	r3, r2
 8000f50:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ids), &bytes_scanned);     
 8000f54:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f58:	1d1a      	adds	r2, r3, #4
 8000f5a:	ab03      	add	r3, sp, #12
 8000f5c:	4996      	ldr	r1, [pc, #600]	; (80011b8 <read_trace+0x2cc>)
 8000f5e:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f62:	f001 febd 	bl	8002ce0 <siscanf>
	scanptr += bytes_scanned;
 8000f66:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f6a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f76:	4413      	add	r3, r2
 8000f78:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ops), &bytes_scanned);     
 8000f7c:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f80:	f103 0208 	add.w	r2, r3, #8
 8000f84:	ab03      	add	r3, sp, #12
 8000f86:	498c      	ldr	r1, [pc, #560]	; (80011b8 <read_trace+0x2cc>)
 8000f88:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f8c:	f001 fea8 	bl	8002ce0 <siscanf>
	scanptr += bytes_scanned;
 8000f90:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f94:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->weight), &bytes_scanned);        /* not used */
 8000fa6:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000faa:	f103 020c 	add.w	r2, r3, #12
 8000fae:	ab03      	add	r3, sp, #12
 8000fb0:	4981      	ldr	r1, [pc, #516]	; (80011b8 <read_trace+0x2cc>)
 8000fb2:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000fb6:	f001 fe93 	bl	8002ce0 <siscanf>
	scanptr += bytes_scanned;
 8000fba:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000fbe:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fca:	4413      	add	r3, r2
 8000fcc:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    
    /* We'll store each request line in the trace in this array */
    if ((trace->ops = 
	 (traceop_t *)sys_malloc(trace->num_ops * sizeof(traceop_t))) == NULL)
 8000fd0:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f93c 	bl	800225e <sys_malloc>
 8000fe6:	4602      	mov	r2, r0
    if ((trace->ops = 
 8000fe8:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <read_trace+0x112>
		unix_error("malloc 2 failed in read_trace");
 8000ff8:	4870      	ldr	r0, [pc, #448]	; (80011bc <read_trace+0x2d0>)
 8000ffa:	f000 fd0b 	bl	8001a14 <unix_error>
	test_mem_use += sizeof(traceop_t);
 8000ffe:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <read_trace+0x2c8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	330c      	adds	r3, #12
 8001004:	461a      	mov	r2, r3
 8001006:	4b6b      	ldr	r3, [pc, #428]	; (80011b4 <read_trace+0x2c8>)
 8001008:	601a      	str	r2, [r3, #0]

    /* We'll keep an array of pointers to the allocated blocks here... */
    if ((trace->blocks = 
	 (char **)sys_malloc(trace->num_ids * sizeof(char *))) == NULL)
 800100a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 f923 	bl	800225e <sys_malloc>
 8001018:	4602      	mov	r2, r0
    if ((trace->blocks = 
 800101a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <read_trace+0x144>
		unix_error("malloc 3 failed in read_trace");
 800102a:	4865      	ldr	r0, [pc, #404]	; (80011c0 <read_trace+0x2d4>)
 800102c:	f000 fcf2 	bl	8001a14 <unix_error>
	test_mem_use += trace->num_ids * sizeof(char *);
 8001030:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4a5e      	ldr	r2, [pc, #376]	; (80011b4 <read_trace+0x2c8>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	4413      	add	r3, r2
 800103e:	461a      	mov	r2, r3
 8001040:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <read_trace+0x2c8>)
 8001042:	601a      	str	r2, [r3, #0]

    /* ... along with the corresponding byte sizes of each block */
    if ((trace->block_sizes = 
	 (size_t *)sys_malloc(trace->num_ids * sizeof(size_t))) == NULL)
 8001044:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4618      	mov	r0, r3
 800104e:	f001 f906 	bl	800225e <sys_malloc>
 8001052:	4602      	mov	r2, r0
    if ((trace->block_sizes = 
 8001054:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001058:	619a      	str	r2, [r3, #24]
 800105a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <read_trace+0x17e>
		unix_error("malloc 4 failed in read_trace");
 8001064:	4857      	ldr	r0, [pc, #348]	; (80011c4 <read_trace+0x2d8>)
 8001066:	f000 fcd5 	bl	8001a14 <unix_error>
	test_mem_use += trace->num_ids * sizeof(size_t);
 800106a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <read_trace+0x2c8>)
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	4413      	add	r3, r2
 8001078:	461a      	mov	r2, r3
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <read_trace+0x2c8>)
 800107c:	601a      	str	r2, [r3, #0]
    
    /* read every request line in the trace file */
    index = 0;
 800107e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001082:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    op_index = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 8001090:	e143      	b.n	800131a <read_trace+0x42e>
		scanptr += bytes_scanned;
 8001092:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001096:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80010a2:	4413      	add	r3, r2
 80010a4:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
		switch(type[0]) {
 80010a8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010ac:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	3b61      	subs	r3, #97	; 0x61
 80010b4:	2b12      	cmp	r3, #18
 80010b6:	f200 810f 	bhi.w	80012d8 <read_trace+0x3ec>
 80010ba:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <read_trace+0x1d4>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	0800110d 	.word	0x0800110d
 80010c4:	080012d9 	.word	0x080012d9
 80010c8:	080012d9 	.word	0x080012d9
 80010cc:	080012d9 	.word	0x080012d9
 80010d0:	080012d9 	.word	0x080012d9
 80010d4:	0800126d 	.word	0x0800126d
 80010d8:	080012d9 	.word	0x080012d9
 80010dc:	080012d3 	.word	0x080012d3
 80010e0:	080012d9 	.word	0x080012d9
 80010e4:	080012d9 	.word	0x080012d9
 80010e8:	080012d9 	.word	0x080012d9
 80010ec:	080012d9 	.word	0x080012d9
 80010f0:	080012d9 	.word	0x080012d9
 80010f4:	080012d9 	.word	0x080012d9
 80010f8:	080012d9 	.word	0x080012d9
 80010fc:	080012d9 	.word	0x080012d9
 8001100:	080012d9 	.word	0x080012d9
 8001104:	080011cd 	.word	0x080011cd
 8001108:	080012cd 	.word	0x080012cd
		case 'a':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 800110c:	a904      	add	r1, sp, #16
 800110e:	aa05      	add	r2, sp, #20
 8001110:	ab03      	add	r3, sp, #12
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	460b      	mov	r3, r1
 8001116:	492c      	ldr	r1, [pc, #176]	; (80011c8 <read_trace+0x2dc>)
 8001118:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 800111c:	f001 fde0 	bl	8002ce0 <siscanf>
			scanptr += bytes_scanned;
 8001120:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001124:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8001130:	4413      	add	r3, r2
 8001132:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = ALLOC;
 8001136:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800113a:	6919      	ldr	r1, [r3, #16]
 800113c:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 800114e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001152:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800115c:	6919      	ldr	r1, [r3, #16]
 800115e:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	4602      	mov	r2, r0
 800116e:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 8001170:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001174:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800117e:	6919      	ldr	r1, [r3, #16]
 8001180:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	4602      	mov	r2, r0
 8001190:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 8001192:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001196:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf38      	it	cc
 80011a4:	4613      	movcc	r3, r2
 80011a6:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 80011aa:	e0b1      	b.n	8001310 <read_trace+0x424>
 80011ac:	20000000 	.word	0x20000000
 80011b0:	08004b74 	.word	0x08004b74
 80011b4:	200000ec 	.word	0x200000ec
 80011b8:	08004b94 	.word	0x08004b94
 80011bc:	08004b9c 	.word	0x08004b9c
 80011c0:	08004bbc 	.word	0x08004bbc
 80011c4:	08004bdc 	.word	0x08004bdc
 80011c8:	08004bfc 	.word	0x08004bfc
		case 'r':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 80011cc:	a904      	add	r1, sp, #16
 80011ce:	aa05      	add	r2, sp, #20
 80011d0:	ab03      	add	r3, sp, #12
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	460b      	mov	r3, r1
 80011d6:	495b      	ldr	r1, [pc, #364]	; (8001344 <read_trace+0x458>)
 80011d8:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 80011dc:	f001 fd80 	bl	8002ce0 <siscanf>
			scanptr += bytes_scanned;
 80011e0:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011e4:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80011f0:	4413      	add	r3, r2
 80011f2:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = REALLOC;
 80011f6:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80011fa:	6919      	ldr	r1, [r3, #16]
 80011fc:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	2202      	movs	r2, #2
 800120c:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 800120e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001212:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800121c:	6919      	ldr	r1, [r3, #16]
 800121e:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	4602      	mov	r2, r0
 800122e:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 8001230:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001234:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800123e:	6919      	ldr	r1, [r3, #16]
 8001240:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	4602      	mov	r2, r0
 8001250:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 8001252:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001256:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 8001260:	4293      	cmp	r3, r2
 8001262:	bf38      	it	cc
 8001264:	4613      	movcc	r3, r2
 8001266:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 800126a:	e051      	b.n	8001310 <read_trace+0x424>
		case 'f':
			sscanf(scanptr, "%u%n", &index, &bytes_scanned);
 800126c:	ab03      	add	r3, sp, #12
 800126e:	aa05      	add	r2, sp, #20
 8001270:	4935      	ldr	r1, [pc, #212]	; (8001348 <read_trace+0x45c>)
 8001272:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001276:	f001 fd33 	bl	8002ce0 <siscanf>
			scanptr += bytes_scanned;
 800127a:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800127e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 800128a:	4413      	add	r3, r2
 800128c:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = FREE;
 8001290:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001294:	6919      	ldr	r1, [r3, #16]
 8001296:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 80012a8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012ac:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	4602      	mov	r2, r0
 80012c8:	605a      	str	r2, [r3, #4]
			break;
 80012ca:	e021      	b.n	8001310 <read_trace+0x424>
		case 's':
			stack_test();
 80012cc:	f7ff fbd6 	bl	8000a7c <stack_test>
			break;
 80012d0:	e01e      	b.n	8001310 <read_trace+0x424>
		case 'h':
			heap_test();
 80012d2:	f7ff fbe3 	bl	8000a9c <heap_test>
			break;
 80012d6:	e01b      	b.n	8001310 <read_trace+0x424>
		default:
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
			   type[0], scanptr-bytes_scanned, path);
 80012d8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012dc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80012e0:	781b      	ldrb	r3, [r3, #0]
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 80012e2:	4619      	mov	r1, r3
			   type[0], scanptr-bytes_scanned, path);
 80012e4:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012e8:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	425b      	negs	r3, r3
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 80012f0:	f8dd 281c 	ldr.w	r2, [sp, #2076]	; 0x81c
 80012f4:	441a      	add	r2, r3
 80012f6:	ab06      	add	r3, sp, #24
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	4613      	mov	r3, r2
 80012fc:	460a      	mov	r2, r1
 80012fe:	4913      	ldr	r1, [pc, #76]	; (800134c <read_trace+0x460>)
 8001300:	4813      	ldr	r0, [pc, #76]	; (8001350 <read_trace+0x464>)
 8001302:	f001 fccd 	bl	8002ca0 <siprintf>
			var_print(msg);
 8001306:	4812      	ldr	r0, [pc, #72]	; (8001350 <read_trace+0x464>)
 8001308:	f000 fe12 	bl	8001f30 <var_print>
			loop();
 800130c:	f000 fe0a 	bl	8001f24 <loop>
		}
		op_index++;
 8001310:	f8dd 3820 	ldr.w	r3, [sp, #2080]	; 0x820
 8001314:	3301      	adds	r3, #1
 8001316:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 800131a:	ab03      	add	r3, sp, #12
 800131c:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <read_trace+0x468>)
 8001322:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001326:	f001 fcdb 	bl	8002ce0 <siscanf>
 800132a:	4603      	mov	r3, r0
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001330:	f47f aeaf 	bne.w	8001092 <read_trace+0x1a6>
    }
	// Removed to allow shortened trace files
    //assert(max_index == trace->num_ids - 1);
    //assert(trace->num_ops == op_index);
    
    return trace;
 8001334:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
}
 8001338:	4618      	mov	r0, r3
 800133a:	f60d 0d2c 	addw	sp, sp, #2092	; 0x82c
 800133e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001342:	bf00      	nop
 8001344:	08004bfc 	.word	0x08004bfc
 8001348:	08004c04 	.word	0x08004c04
 800134c:	08004c0c 	.word	0x08004c0c
 8001350:	200000f0 	.word	0x200000f0
 8001354:	08004c48 	.word	0x08004c48

08001358 <free_trace>:
/*
 * free_trace - Free the trace record and the three arrays it points
 *              to, all of which were allocated in read_trace().
 */
void free_trace(trace_t *trace)
{
 8001358:	b500      	push	{lr}
 800135a:	b083      	sub	sp, #12
 800135c:	9001      	str	r0, [sp, #4]
    sys_free(trace->ops);         /* free the three arrays... */
 800135e:	9b01      	ldr	r3, [sp, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 ff8b 	bl	800227e <sys_free>
    sys_free(trace->blocks);      
 8001368:	9b01      	ldr	r3, [sp, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 ff86 	bl	800227e <sys_free>
    sys_free(trace->block_sizes);
 8001372:	9b01      	ldr	r3, [sp, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 ff81 	bl	800227e <sys_free>
    sys_free(trace);              /* and the trace record itself... */
 800137c:	9801      	ldr	r0, [sp, #4]
 800137e:	f000 ff7e 	bl	800227e <sys_free>
}
 8001382:	bf00      	nop
 8001384:	b003      	add	sp, #12
 8001386:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800138c <eval_mm_valid>:

/*
 * eval_mm_valid - Check the mm malloc package for correctness
 */
static int eval_mm_valid(trace_t *trace, int tracenum, range_t **ranges) 
{
 800138c:	b500      	push	{lr}
 800138e:	b08f      	sub	sp, #60	; 0x3c
 8001390:	9005      	str	r0, [sp, #20]
 8001392:	9104      	str	r1, [sp, #16]
 8001394:	9203      	str	r2, [sp, #12]
    char *newp;
    char *oldp;
    char *p;
    
    /* Reset the heap and free any records in the range list */
    clear_ranges(ranges);
 8001396:	9803      	ldr	r0, [sp, #12]
 8001398:	f7ff fd8f 	bl	8000eba <clear_ranges>
	return 0;
    }
	*/

    /* Interpret each operation in the trace in order */
    for (i = 0;  i < trace->num_ops;  i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	930d      	str	r3, [sp, #52]	; 0x34
 80013a0:	e0e4      	b.n	800156c <eval_mm_valid+0x1e0>
	index = trace->ops[i].index;
 80013a2:	9b05      	ldr	r3, [sp, #20]
 80013a4:	6919      	ldr	r1, [r3, #16]
 80013a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	930a      	str	r3, [sp, #40]	; 0x28
	size = trace->ops[i].size;
 80013b6:	9b05      	ldr	r3, [sp, #20]
 80013b8:	6919      	ldr	r1, [r3, #16]
 80013ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	9309      	str	r3, [sp, #36]	; 0x24

        switch (trace->ops[i].type) {
 80013ca:	9b05      	ldr	r3, [sp, #20]
 80013cc:	6919      	ldr	r1, [r3, #16]
 80013ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d03a      	beq.n	8001456 <eval_mm_valid+0xca>
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	f300 80ac 	bgt.w	800153e <eval_mm_valid+0x1b2>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <eval_mm_valid+0x66>
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	f000 8098 	beq.w	8001520 <eval_mm_valid+0x194>
 80013f0:	e0a5      	b.n	800153e <eval_mm_valid+0x1b2>

        case ALLOC: /* sys_malloc */

	    /* Call the student's malloc */
	    if ((p = sys_malloc(size)) == NULL) {
 80013f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 ff32 	bl	800225e <sys_malloc>
 80013fa:	9006      	str	r0, [sp, #24]
 80013fc:	9b06      	ldr	r3, [sp, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <eval_mm_valid+0x84>
		malloc_error(tracenum, i, "sys_malloc failed.");
 8001402:	4a60      	ldr	r2, [pc, #384]	; (8001584 <eval_mm_valid+0x1f8>)
 8001404:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001406:	9804      	ldr	r0, [sp, #16]
 8001408:	f000 fb22 	bl	8001a50 <malloc_error>
		return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e0b4      	b.n	800157a <eval_mm_valid+0x1ee>
	    /* 
	     * Test the range of the new block for correctness and add it 
	     * to the range list if OK. The block must be  be aligned properly,
	     * and must not overlap any currently allocated block. 
	     */ 
	    if (add_range(ranges, p, size, tracenum, i) == 0)
 8001410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	9b04      	ldr	r3, [sp, #16]
 8001416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001418:	9906      	ldr	r1, [sp, #24]
 800141a:	9803      	ldr	r0, [sp, #12]
 800141c:	f7ff fc70 	bl	8000d00 <add_range>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <eval_mm_valid+0x9e>
		return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	e0a7      	b.n	800157a <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * fill range with low byte of index.  This will be used later
	     * if we realloc the block and wish to make sure that the old
	     * data was copied to the new block
	     */
	    memset(p, index & 0xFF, size);
 800142a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800142c:	b2db      	uxtb	r3, r3
 800142e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	9806      	ldr	r0, [sp, #24]
 8001434:	f001 fa30 	bl	8002898 <memset>

	    /* Remember region */
	    trace->blocks[index] = p;
 8001438:	9b05      	ldr	r3, [sp, #20]
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	9a06      	ldr	r2, [sp, #24]
 8001444:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001446:	9b05      	ldr	r3, [sp, #20]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001452:	601a      	str	r2, [r3, #0]
	    break;
 8001454:	e087      	b.n	8001566 <eval_mm_valid+0x1da>

        case REALLOC: /* sys_realloc */
	    
	    /* Call the student's realloc */
	    oldp = trace->blocks[index];
 8001456:	9b05      	ldr	r3, [sp, #20]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	9308      	str	r3, [sp, #32]
	    if ((newp = sys_realloc(oldp, size)) == NULL) {
 8001464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	9808      	ldr	r0, [sp, #32]
 800146a:	f000 ff16 	bl	800229a <sys_realloc>
 800146e:	9007      	str	r0, [sp, #28]
 8001470:	9b07      	ldr	r3, [sp, #28]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <eval_mm_valid+0xf8>
		malloc_error(tracenum, i, "sys_realloc failed.");
 8001476:	4a44      	ldr	r2, [pc, #272]	; (8001588 <eval_mm_valid+0x1fc>)
 8001478:	990d      	ldr	r1, [sp, #52]	; 0x34
 800147a:	9804      	ldr	r0, [sp, #16]
 800147c:	f000 fae8 	bl	8001a50 <malloc_error>
		return 0;
 8001480:	2300      	movs	r3, #0
 8001482:	e07a      	b.n	800157a <eval_mm_valid+0x1ee>
	    }
	    
	    /* Remove the old region from the range list */
	    remove_range(ranges, oldp);
 8001484:	9908      	ldr	r1, [sp, #32]
 8001486:	9803      	ldr	r0, [sp, #12]
 8001488:	f7ff fcf2 	bl	8000e70 <remove_range>
	    
	    /* Check new block for correctness and add it to range list */
	    if (add_range(ranges, newp, size, tracenum, i) == 0)
 800148c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	9b04      	ldr	r3, [sp, #16]
 8001492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001494:	9907      	ldr	r1, [sp, #28]
 8001496:	9803      	ldr	r0, [sp, #12]
 8001498:	f7ff fc32 	bl	8000d00 <add_range>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <eval_mm_valid+0x11a>
		return 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e069      	b.n	800157a <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * Make sure that the new block contains the data from the old 
	     * block and then fill in the new block with the low order byte
	     * of the new index
	     */
	    oldsize = trace->block_sizes[index];
 80014a6:	9b05      	ldr	r3, [sp, #20]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	930b      	str	r3, [sp, #44]	; 0x2c
	    if (size < oldsize) oldsize = size;
 80014b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014b8:	429a      	cmp	r2, r3
 80014ba:	da01      	bge.n	80014c0 <eval_mm_valid+0x134>
 80014bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014be:	930b      	str	r3, [sp, #44]	; 0x2c
	    for (j = 0; j < oldsize; j++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	930c      	str	r3, [sp, #48]	; 0x30
 80014c4:	e012      	b.n	80014ec <eval_mm_valid+0x160>
	      if (newp[j] != (index & 0xFF)) {
 80014c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014c8:	9a07      	ldr	r2, [sp, #28]
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d006      	beq.n	80014e6 <eval_mm_valid+0x15a>
		malloc_error(tracenum, i, "sys_realloc did not preserve the "
 80014d8:	4a2c      	ldr	r2, [pc, #176]	; (800158c <eval_mm_valid+0x200>)
 80014da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80014dc:	9804      	ldr	r0, [sp, #16]
 80014de:	f000 fab7 	bl	8001a50 <malloc_error>
			     "data from old block");
		return 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e049      	b.n	800157a <eval_mm_valid+0x1ee>
	    for (j = 0; j < oldsize; j++) {
 80014e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014e8:	3301      	adds	r3, #1
 80014ea:	930c      	str	r3, [sp, #48]	; 0x30
 80014ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80014ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbe8      	blt.n	80014c6 <eval_mm_valid+0x13a>
	      }
	    }
	    memset(newp, index & 0xFF, size);
 80014f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	9807      	ldr	r0, [sp, #28]
 80014fe:	f001 f9cb 	bl	8002898 <memset>

	    /* Remember region */
	    trace->blocks[index] = newp;
 8001502:	9b05      	ldr	r3, [sp, #20]
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	9a07      	ldr	r2, [sp, #28]
 800150e:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001510:	9b05      	ldr	r3, [sp, #20]
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800151c:	601a      	str	r2, [r3, #0]
	    break;
 800151e:	e022      	b.n	8001566 <eval_mm_valid+0x1da>

        case FREE: /* sys_free */
	    
	    /* Remove region from list and call student's free function */
	    p = trace->blocks[index];
 8001520:	9b05      	ldr	r3, [sp, #20]
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	9306      	str	r3, [sp, #24]
	    remove_range(ranges, p);
 800152e:	9906      	ldr	r1, [sp, #24]
 8001530:	9803      	ldr	r0, [sp, #12]
 8001532:	f7ff fc9d 	bl	8000e70 <remove_range>
	    sys_free(p);
 8001536:	9806      	ldr	r0, [sp, #24]
 8001538:	f000 fea1 	bl	800227e <sys_free>
	    break;
 800153c:	e013      	b.n	8001566 <eval_mm_valid+0x1da>

	default:
		sprintf(msg, "Type %d", trace->ops[i].type);
 800153e:	9b05      	ldr	r3, [sp, #20]
 8001540:	6919      	ldr	r1, [r3, #16]
 8001542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	490f      	ldr	r1, [pc, #60]	; (8001590 <eval_mm_valid+0x204>)
 8001554:	480f      	ldr	r0, [pc, #60]	; (8001594 <eval_mm_valid+0x208>)
 8001556:	f001 fba3 	bl	8002ca0 <siprintf>
		var_print(msg);
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <eval_mm_valid+0x208>)
 800155c:	f000 fce8 	bl	8001f30 <var_print>
	    app_error("Nonexistent request type in eval_mm_valid");
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <eval_mm_valid+0x20c>)
 8001562:	f000 fa41 	bl	80019e8 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 8001566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001568:	3301      	adds	r3, #1
 800156a:	930d      	str	r3, [sp, #52]	; 0x34
 800156c:	9b05      	ldr	r3, [sp, #20]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001572:	429a      	cmp	r2, r3
 8001574:	f6ff af15 	blt.w	80013a2 <eval_mm_valid+0x16>
        }

    }

    /* As far as we know, this is a valid malloc package */
    return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	b00f      	add	sp, #60	; 0x3c
 800157e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001582:	bf00      	nop
 8001584:	08004c50 	.word	0x08004c50
 8001588:	08004c64 	.word	0x08004c64
 800158c:	08004c78 	.word	0x08004c78
 8001590:	08004cb0 	.word	0x08004cb0
 8001594:	200000f0 	.word	0x200000f0
 8001598:	08004cb8 	.word	0x08004cb8

0800159c <eval_mm_util>:
 *   doesn't allow the students to decrement the brk pointer, so brk
 *   is always the high water mark of the heap. 
 *   
 */
static double eval_mm_util(trace_t *trace, int tracenum, range_t **ranges)
{   
 800159c:	b530      	push	{r4, r5, lr}
 800159e:	b08f      	sub	sp, #60	; 0x3c
 80015a0:	9003      	str	r0, [sp, #12]
 80015a2:	9102      	str	r1, [sp, #8]
 80015a4:	9201      	str	r2, [sp, #4]
    int i;
    int index;
    int size, newsize, oldsize;
    int max_total_size = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	930c      	str	r3, [sp, #48]	; 0x30
    int total_size = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	930b      	str	r3, [sp, #44]	; 0x2c
    /* initialize the heap and the mm malloc package */
    //mem_reset_brk();
    //if (mm_init() < 0)
	//app_error("mm_init failed in eval_mm_util");

    for (i = 0;  i < trace->num_ops;  i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	930d      	str	r3, [sp, #52]	; 0x34
 80015b2:	e0ba      	b.n	800172a <eval_mm_util+0x18e>
        switch (trace->ops[i].type) {
 80015b4:	9b03      	ldr	r3, [sp, #12]
 80015b6:	6919      	ldr	r1, [r3, #16]
 80015b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d040      	beq.n	800164c <eval_mm_util+0xb0>
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	f300 80a7 	bgt.w	800171e <eval_mm_util+0x182>
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <eval_mm_util+0x40>
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f000 8082 	beq.w	80016de <eval_mm_util+0x142>
 80015da:	e0a0      	b.n	800171e <eval_mm_util+0x182>

        case ALLOC: /* mm_alloc */
	    index = trace->ops[i].index;
 80015dc:	9b03      	ldr	r3, [sp, #12]
 80015de:	6919      	ldr	r1, [r3, #16]
 80015e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->ops[i].size;
 80015f0:	9b03      	ldr	r3, [sp, #12]
 80015f2:	6919      	ldr	r1, [r3, #16]
 80015f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	9305      	str	r3, [sp, #20]

	    if ((p = sys_malloc(size)) == NULL) 
 8001604:	9b05      	ldr	r3, [sp, #20]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fe29 	bl	800225e <sys_malloc>
 800160c:	9004      	str	r0, [sp, #16]
 800160e:	9b04      	ldr	r3, [sp, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <eval_mm_util+0x7e>
			app_error("sys_malloc failed in eval_mm_util");
 8001614:	4856      	ldr	r0, [pc, #344]	; (8001770 <eval_mm_util+0x1d4>)
 8001616:	f000 f9e7 	bl	80019e8 <app_error>
	    
	    /* Remember region and size */
	    trace->blocks[index] = p;
 800161a:	9b03      	ldr	r3, [sp, #12]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	9a04      	ldr	r2, [sp, #16]
 8001626:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001628:	9b03      	ldr	r3, [sp, #12]
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	9a05      	ldr	r2, [sp, #20]
 8001634:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += size;
 8001636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001638:	9b05      	ldr	r3, [sp, #20]
 800163a:	4413      	add	r3, r2
 800163c:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 800163e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001642:	4293      	cmp	r3, r2
 8001644:	bfb8      	it	lt
 8001646:	4613      	movlt	r3, r2
 8001648:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 800164a:	e06b      	b.n	8001724 <eval_mm_util+0x188>

	case REALLOC: /* sys_realloc */
	    index = trace->ops[i].index;
 800164c:	9b03      	ldr	r3, [sp, #12]
 800164e:	6919      	ldr	r1, [r3, #16]
 8001650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	930a      	str	r3, [sp, #40]	; 0x28
	    newsize = trace->ops[i].size;
 8001660:	9b03      	ldr	r3, [sp, #12]
 8001662:	6919      	ldr	r1, [r3, #16]
 8001664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	9309      	str	r3, [sp, #36]	; 0x24
	    oldsize = trace->block_sizes[index];
 8001674:	9b03      	ldr	r3, [sp, #12]
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	9308      	str	r3, [sp, #32]

	    oldp = trace->blocks[index];
 8001682:	9b03      	ldr	r3, [sp, #12]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	9307      	str	r3, [sp, #28]
	    if ((newp = sys_realloc(oldp,newsize)) == NULL)
 8001690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001692:	4619      	mov	r1, r3
 8001694:	9807      	ldr	r0, [sp, #28]
 8001696:	f000 fe00 	bl	800229a <sys_realloc>
 800169a:	9006      	str	r0, [sp, #24]
 800169c:	9b06      	ldr	r3, [sp, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <eval_mm_util+0x10c>
		app_error("sys_realloc failed in eval_mm_util");
 80016a2:	4834      	ldr	r0, [pc, #208]	; (8001774 <eval_mm_util+0x1d8>)
 80016a4:	f000 f9a0 	bl	80019e8 <app_error>

	    /* Remember region and size */
	    trace->blocks[index] = newp;
 80016a8:	9b03      	ldr	r3, [sp, #12]
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	9a06      	ldr	r2, [sp, #24]
 80016b4:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = newsize;
 80016b6:	9b03      	ldr	r3, [sp, #12]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016c2:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += (newsize - oldsize);
 80016c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016c6:	9b08      	ldr	r3, [sp, #32]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80016cc:	4413      	add	r3, r2
 80016ce:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 80016d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80016d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016d4:	4293      	cmp	r3, r2
 80016d6:	bfb8      	it	lt
 80016d8:	4613      	movlt	r3, r2
 80016da:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 80016dc:	e022      	b.n	8001724 <eval_mm_util+0x188>

        case FREE: /* sys_free */
	    index = trace->ops[i].index;
 80016de:	9b03      	ldr	r3, [sp, #12]
 80016e0:	6919      	ldr	r1, [r3, #16]
 80016e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->block_sizes[index];
 80016f2:	9b03      	ldr	r3, [sp, #12]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	9305      	str	r3, [sp, #20]
	    p = trace->blocks[index];
 8001700:	9b03      	ldr	r3, [sp, #12]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	9304      	str	r3, [sp, #16]
	    
	    sys_free(p);
 800170e:	9804      	ldr	r0, [sp, #16]
 8001710:	f000 fdb5 	bl	800227e <sys_free>
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size -= size;
 8001714:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001716:	9b05      	ldr	r3, [sp, #20]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    break;
 800171c:	e002      	b.n	8001724 <eval_mm_util+0x188>

	default:
	    app_error("Nonexistent request type in eval_mm_util");
 800171e:	4816      	ldr	r0, [pc, #88]	; (8001778 <eval_mm_util+0x1dc>)
 8001720:	f000 f962 	bl	80019e8 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 8001724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001726:	3301      	adds	r3, #1
 8001728:	930d      	str	r3, [sp, #52]	; 0x34
 800172a:	9b03      	ldr	r3, [sp, #12]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001730:	429a      	cmp	r2, r3
 8001732:	f6ff af3f 	blt.w	80015b4 <eval_mm_util+0x18>

        }
    }

	max_total_size += test_mem_use;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <eval_mm_util+0x1e0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800173c:	4413      	add	r3, r2
 800173e:	930c      	str	r3, [sp, #48]	; 0x30

    return ((double)max_total_size  / (double)mem_heapsize());
 8001740:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001742:	f7fe fed7 	bl	80004f4 <__aeabi_i2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	f000 fa23 	bl	8001b94 <mem_heapsize>
 800174e:	4603      	mov	r3, r0
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe febf 	bl	80004d4 <__aeabi_ui2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7ff f85d 	bl	800081c <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
}
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	b00f      	add	sp, #60	; 0x3c
 800176c:	bd30      	pop	{r4, r5, pc}
 800176e:	bf00      	nop
 8001770:	08004ce4 	.word	0x08004ce4
 8001774:	08004d08 	.word	0x08004d08
 8001778:	08004d2c 	.word	0x08004d2c
 800177c:	200000ec 	.word	0x200000ec

08001780 <printresults>:

/*
 * printresults - prints a performance summary for some malloc package
 */
static void printresults(int n, stats_t *stats) 
{
 8001780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001784:	b093      	sub	sp, #76	; 0x4c
 8001786:	9009      	str	r0, [sp, #36]	; 0x24
 8001788:	9108      	str	r1, [sp, #32]
    int i;
    double secs = 0;
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    double ops = 0;
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    double util = 0;
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

    /* Print the individual results for each trace */
    sprintf(msg, "%5s%7s %5s%8s%10s%6s\n", 
 80017ae:	4b7b      	ldr	r3, [pc, #492]	; (800199c <printresults+0x21c>)
 80017b0:	9303      	str	r3, [sp, #12]
 80017b2:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <printresults+0x220>)
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	4b7b      	ldr	r3, [pc, #492]	; (80019a4 <printresults+0x224>)
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	4b7b      	ldr	r3, [pc, #492]	; (80019a8 <printresults+0x228>)
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4b7b      	ldr	r3, [pc, #492]	; (80019ac <printresults+0x22c>)
 80017c0:	4a7b      	ldr	r2, [pc, #492]	; (80019b0 <printresults+0x230>)
 80017c2:	497c      	ldr	r1, [pc, #496]	; (80019b4 <printresults+0x234>)
 80017c4:	487c      	ldr	r0, [pc, #496]	; (80019b8 <printresults+0x238>)
 80017c6:	f001 fa6b 	bl	8002ca0 <siprintf>
	   "trace", " valid", "util", "ops", "secs", "Kops");
	var_print(msg);
 80017ca:	487b      	ldr	r0, [pc, #492]	; (80019b8 <printresults+0x238>)
 80017cc:	f000 fbb0 	bl	8001f30 <var_print>
    for (i=0; i < n; i++) {
 80017d0:	2300      	movs	r3, #0
 80017d2:	9311      	str	r3, [sp, #68]	; 0x44
 80017d4:	e08a      	b.n	80018ec <printresults+0x16c>
	if (stats[i].valid) {
 80017d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017d8:	015b      	lsls	r3, r3, #5
 80017da:	9a08      	ldr	r2, [sp, #32]
 80017dc:	4413      	add	r3, r2
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d06f      	beq.n	80018c4 <printresults+0x144>
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
		   i,
		   "yes",
		   stats[i].util*100.0,
 80017e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017e6:	015b      	lsls	r3, r3, #5
 80017e8:	9a08      	ldr	r2, [sp, #32]
 80017ea:	4413      	add	r3, r2
 80017ec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	4b71      	ldr	r3, [pc, #452]	; (80019bc <printresults+0x23c>)
 80017f6:	f7fe fee7 	bl	80005c8 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4690      	mov	r8, r2
 8001800:	4699      	mov	r9, r3
		   stats[i].ops,
 8001802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001804:	015b      	lsls	r3, r3, #5
 8001806:	9a08      	ldr	r2, [sp, #32]
 8001808:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 800180a:	e9d3 4500 	ldrd	r4, r5, [r3]
		   stats[i].secs,
 800180e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001810:	015b      	lsls	r3, r3, #5
 8001812:	9a08      	ldr	r2, [sp, #32]
 8001814:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001816:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
		   (stats[i].ops/1e3)/stats[i].secs);
 800181a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	9a08      	ldr	r2, [sp, #32]
 8001820:	4413      	add	r3, r2
 8001822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <printresults+0x240>)
 800182c:	f7fe fff6 	bl	800081c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800183a:	015b      	lsls	r3, r3, #5
 800183c:	9a08      	ldr	r2, [sp, #32]
 800183e:	4413      	add	r3, r2
 8001840:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001844:	f7fe ffea 	bl	800081c <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001850:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001854:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001858:	e9cd 8900 	strd	r8, r9, [sp]
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <printresults+0x244>)
 800185e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001860:	4959      	ldr	r1, [pc, #356]	; (80019c8 <printresults+0x248>)
 8001862:	4855      	ldr	r0, [pc, #340]	; (80019b8 <printresults+0x238>)
 8001864:	f001 fa1c 	bl	8002ca0 <siprintf>
		var_print(msg);
 8001868:	4853      	ldr	r0, [pc, #332]	; (80019b8 <printresults+0x238>)
 800186a:	f000 fb61 	bl	8001f30 <var_print>
	    secs += stats[i].secs;
 800186e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	9a08      	ldr	r2, [sp, #32]
 8001874:	4413      	add	r3, r2
 8001876:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800187a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800187e:	f7fe fced 	bl	800025c <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	    ops += stats[i].ops;
 800188a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800188c:	015b      	lsls	r3, r3, #5
 800188e:	9a08      	ldr	r2, [sp, #32]
 8001890:	4413      	add	r3, r2
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800189a:	f7fe fcdf 	bl	800025c <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	    util += stats[i].util;
 80018a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018a8:	015b      	lsls	r3, r3, #5
 80018aa:	9a08      	ldr	r2, [sp, #32]
 80018ac:	4413      	add	r3, r2
 80018ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80018b6:	f7fe fcd1 	bl	800025c <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80018c2:	e010      	b.n	80018e6 <printresults+0x166>
	}
	else {
	    sprintf(msg,"%2d%10s%6s%8s%10s%6s\n", 
 80018c4:	4b41      	ldr	r3, [pc, #260]	; (80019cc <printresults+0x24c>)
 80018c6:	9303      	str	r3, [sp, #12]
 80018c8:	4b40      	ldr	r3, [pc, #256]	; (80019cc <printresults+0x24c>)
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <printresults+0x24c>)
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <printresults+0x24c>)
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <printresults+0x250>)
 80018d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018d8:	493e      	ldr	r1, [pc, #248]	; (80019d4 <printresults+0x254>)
 80018da:	4837      	ldr	r0, [pc, #220]	; (80019b8 <printresults+0x238>)
 80018dc:	f001 f9e0 	bl	8002ca0 <siprintf>
		   "no",
		   "-",
		   "-",
		   "-",
		   "-");
		var_print(msg);
 80018e0:	4835      	ldr	r0, [pc, #212]	; (80019b8 <printresults+0x238>)
 80018e2:	f000 fb25 	bl	8001f30 <var_print>
    for (i=0; i < n; i++) {
 80018e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018e8:	3301      	adds	r3, #1
 80018ea:	9311      	str	r3, [sp, #68]	; 0x44
 80018ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f6ff af70 	blt.w	80017d6 <printresults+0x56>
	}
    }

    /* Print the aggregate results for the set of traces */
    if (errors == 0) {
 80018f6:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <printresults+0x258>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d13b      	bne.n	8001976 <printresults+0x1f6>
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
	       "Total       ",
	       (util/n)*100.0,
 80018fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001900:	f7fe fdf8 	bl	80004f4 <__aeabi_i2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800190c:	f7fe ff86 	bl	800081c <__aeabi_ddiv>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <printresults+0x23c>)
 800191e:	f7fe fe53 	bl	80005c8 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4614      	mov	r4, r2
 8001928:	461d      	mov	r5, r3
	       ops, 
	       secs,
	       (ops/1e3)/secs);
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <printresults+0x240>)
 8001930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001934:	f7fe ff72 	bl	800081c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001940:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001944:	f7fe ff6a 	bl	800081c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001954:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001958:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800195c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001960:	e9cd 4500 	strd	r4, r5, [sp]
 8001964:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <printresults+0x25c>)
 8001966:	491e      	ldr	r1, [pc, #120]	; (80019e0 <printresults+0x260>)
 8001968:	4813      	ldr	r0, [pc, #76]	; (80019b8 <printresults+0x238>)
 800196a:	f001 f999 	bl	8002ca0 <siprintf>
	var_print(msg);
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <printresults+0x238>)
 8001970:	f000 fade 	bl	8001f30 <var_print>
	       "-", 
	       "-");
	var_print(msg);
    }

}
 8001974:	e00e      	b.n	8001994 <printresults+0x214>
	sprintf(msg, "%12s%6s%8s%10s%6s\n", 
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <printresults+0x24c>)
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <printresults+0x24c>)
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <printresults+0x24c>)
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <printresults+0x24c>)
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <printresults+0x25c>)
 8001986:	4917      	ldr	r1, [pc, #92]	; (80019e4 <printresults+0x264>)
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <printresults+0x238>)
 800198a:	f001 f989 	bl	8002ca0 <siprintf>
	var_print(msg);
 800198e:	480a      	ldr	r0, [pc, #40]	; (80019b8 <printresults+0x238>)
 8001990:	f000 face 	bl	8001f30 <var_print>
}
 8001994:	bf00      	nop
 8001996:	b013      	add	sp, #76	; 0x4c
 8001998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800199c:	08004d80 	.word	0x08004d80
 80019a0:	08004d88 	.word	0x08004d88
 80019a4:	08004d90 	.word	0x08004d90
 80019a8:	08004d94 	.word	0x08004d94
 80019ac:	08004d58 	.word	0x08004d58
 80019b0:	08004d60 	.word	0x08004d60
 80019b4:	08004d68 	.word	0x08004d68
 80019b8:	200000f0 	.word	0x200000f0
 80019bc:	40590000 	.word	0x40590000
 80019c0:	408f4000 	.word	0x408f4000
 80019c4:	08004d9c 	.word	0x08004d9c
 80019c8:	08004da0 	.word	0x08004da0
 80019cc:	08004ddc 	.word	0x08004ddc
 80019d0:	08004dc0 	.word	0x08004dc0
 80019d4:	08004dc4 	.word	0x08004dc4
 80019d8:	200000e8 	.word	0x200000e8
 80019dc:	08004de0 	.word	0x08004de0
 80019e0:	08004df0 	.word	0x08004df0
 80019e4:	08004e10 	.word	0x08004e10

080019e8 <app_error>:

/* 
 * app_error - Report an arbitrary application error
 */
void app_error(char * err_msg) 
{
 80019e8:	b500      	push	{lr}
 80019ea:	b083      	sub	sp, #12
 80019ec:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s\n", err_msg);
 80019ee:	9a01      	ldr	r2, [sp, #4]
 80019f0:	4906      	ldr	r1, [pc, #24]	; (8001a0c <app_error+0x24>)
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <app_error+0x28>)
 80019f4:	f001 f954 	bl	8002ca0 <siprintf>
	var_print(msg);
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <app_error+0x28>)
 80019fa:	f000 fa99 	bl	8001f30 <var_print>
	loop();
 80019fe:	f000 fa91 	bl	8001f24 <loop>
}
 8001a02:	bf00      	nop
 8001a04:	b003      	add	sp, #12
 8001a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a0a:	bf00      	nop
 8001a0c:	08004e24 	.word	0x08004e24
 8001a10:	200000f0 	.word	0x200000f0

08001a14 <unix_error>:

/* 
 * unix_error - Report a Unix-style error
 */
void unix_error(char * err_msg) 
{
 8001a14:	b500      	push	{lr}
 8001a16:	b083      	sub	sp, #12
 8001a18:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s: %s\n", err_msg, strerror(errno));
 8001a1a:	f000 fef3 	bl	8002804 <__errno>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 fbc2 	bl	80031ac <strerror>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	9a01      	ldr	r2, [sp, #4]
 8001a2c:	4906      	ldr	r1, [pc, #24]	; (8001a48 <unix_error+0x34>)
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <unix_error+0x38>)
 8001a30:	f001 f936 	bl	8002ca0 <siprintf>
	var_print(msg);
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <unix_error+0x38>)
 8001a36:	f000 fa7b 	bl	8001f30 <var_print>
	loop();
 8001a3a:	f000 fa73 	bl	8001f24 <loop>
}
 8001a3e:	bf00      	nop
 8001a40:	b003      	add	sp, #12
 8001a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a46:	bf00      	nop
 8001a48:	08004e28 	.word	0x08004e28
 8001a4c:	200000f0 	.word	0x200000f0

08001a50 <malloc_error>:

/*
 * malloc_error - Report an error returned by the sys_malloc package
 */
void malloc_error(int tracenum, int opnum, char *err_msg)
{
 8001a50:	b500      	push	{lr}
 8001a52:	b087      	sub	sp, #28
 8001a54:	9005      	str	r0, [sp, #20]
 8001a56:	9104      	str	r1, [sp, #16]
 8001a58:	9203      	str	r2, [sp, #12]
    errors++;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <malloc_error+0x3c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <malloc_error+0x3c>)
 8001a62:	6013      	str	r3, [r2, #0]
    sprintf(msg, "ERROR [trace %d, line %d]: %s\n", tracenum, LINENUM(opnum), err_msg);
 8001a64:	9b04      	ldr	r3, [sp, #16]
 8001a66:	1d5a      	adds	r2, r3, #5
 8001a68:	9b03      	ldr	r3, [sp, #12]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	9a05      	ldr	r2, [sp, #20]
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <malloc_error+0x40>)
 8001a72:	4808      	ldr	r0, [pc, #32]	; (8001a94 <malloc_error+0x44>)
 8001a74:	f001 f914 	bl	8002ca0 <siprintf>
	var_print(msg);
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <malloc_error+0x44>)
 8001a7a:	f000 fa59 	bl	8001f30 <var_print>
	loop();
 8001a7e:	f000 fa51 	bl	8001f24 <loop>
}
 8001a82:	bf00      	nop
 8001a84:	b007      	add	sp, #28
 8001a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a8a:	bf00      	nop
 8001a8c:	200000e8 	.word	0x200000e8
 8001a90:	08004e30 	.word	0x08004e30
 8001a94:	200000f0 	.word	0x200000f0

08001a98 <mem_init>:

/* 
 * mem_init - initialize the memory system model
 */
void mem_init(void)
{
 8001a98:	b500      	push	{lr}
 8001a9a:	b085      	sub	sp, #20
	mem_request req;
	mem_start_brk = (char *)ALIGN((size_t)(&__malloc_sbrk_start));
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <mem_init+0x48>)
 8001a9e:	3303      	adds	r3, #3
 8001aa0:	f023 0307 	bic.w	r3, r3, #7
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <mem_init+0x4c>)
 8001aa8:	601a      	str	r2, [r3, #0]
    mem_brk = mem_start_brk;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <mem_init+0x4c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <mem_init+0x50>)
 8001ab0:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, ptr set to heap start
	req = (mem_request){.request=SBRK, .size=0, .ptr=mem_brk};
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <mem_init+0x50>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001aba:	f043 0303 	orr.w	r3, r3, #3
 8001abe:	f88d 3008 	strb.w	r3, [sp, #8]
 8001ac2:	9b02      	ldr	r3, [sp, #8]
 8001ac4:	f36f 039f 	bfc	r3, #2, #30
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	9203      	str	r2, [sp, #12]
	req_send(&req);
 8001acc:	ab02      	add	r3, sp, #8
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fa69 	bl	8001fa6 <req_send>
	proc_update();
 8001ad4:	f000 fc0a 	bl	80022ec <proc_update>
}
 8001ad8:	bf00      	nop
 8001ada:	b005      	add	sp, #20
 8001adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ae0:	20000d0c 	.word	0x20000d0c
 8001ae4:	200004f0 	.word	0x200004f0
 8001ae8:	200004f4 	.word	0x200004f4

08001aec <mem_sbrk>:
 * mem_sbrk - simple model of the sbrk function. Extends the heap 
 *    by incr bytes and returns the start address of the new area. In
 *    this model, the heap cannot be shrunk.
 */
void *mem_sbrk(unsigned int incr) 
{
 8001aec:	b530      	push	{r4, r5, lr}
 8001aee:	b09b      	sub	sp, #108	; 0x6c
 8001af0:	9001      	str	r0, [sp, #4]
    char *old_brk = mem_brk;
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <mem_sbrk+0x88>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	9319      	str	r3, [sp, #100]	; 0x64
	// Special incr cases
	if (incr < 0) {
		char output_str[] = "Negative incr not supported";
		var_print(output_str);
		return (void *)-1;
	} else if (incr == 0) {
 8001af8:	9b01      	ldr	r3, [sp, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <mem_sbrk+0x18>
		return mem_brk;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <mem_sbrk+0x88>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e034      	b.n	8001b6e <mem_sbrk+0x82>
	}

	// Check if there is enough memory
    if (((mem_brk + incr) > (char *)(stack_top))) {
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <mem_sbrk+0x88>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	9b01      	ldr	r3, [sp, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	466a      	mov	r2, sp
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d911      	bls.n	8001b36 <mem_sbrk+0x4a>
		char output_str[] = "ERROR: mem_sbrk failed. Ran out of memory...\n";
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <mem_sbrk+0x8c>)
 8001b14:	ac02      	add	r4, sp, #8
 8001b16:	461d      	mov	r5, r3
 8001b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b24:	c407      	stmia	r4!, {r0, r1, r2}
 8001b26:	8023      	strh	r3, [r4, #0]
		var_print(output_str);
 8001b28:	ab02      	add	r3, sp, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fa00 	bl	8001f30 <var_print>
		return (void *)-1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b34:	e01b      	b.n	8001b6e <mem_sbrk+0x82>
    }
    mem_brk += incr;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <mem_sbrk+0x88>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <mem_sbrk+0x88>)
 8001b40:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, size=1 for sbrk move
	req = (mem_request){.request = SBRK, .size=incr, .ptr=0};
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001b48:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8001b4c:	f043 0303 	orr.w	r3, r3, #3
 8001b50:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8001b54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001b56:	f362 039f 	bfi	r3, r2, #2, #30
 8001b5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9318      	str	r3, [sp, #96]	; 0x60
	req_send(&req);
 8001b60:	ab17      	add	r3, sp, #92	; 0x5c
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fa1f 	bl	8001fa6 <req_send>
	proc_update();
 8001b68:	f000 fbc0 	bl	80022ec <proc_update>
    return (void *)old_brk;
 8001b6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	b01b      	add	sp, #108	; 0x6c
 8001b72:	bd30      	pop	{r4, r5, pc}
 8001b74:	200004f4 	.word	0x200004f4
 8001b78:	08004e50 	.word	0x08004e50

08001b7c <mem_heap_lo>:
/*
 * mem_heap_lo - return address of the first heap byte
 */
void *mem_heap_lo()
{
    return (void *)mem_start_brk;
 8001b7c:	4b01      	ldr	r3, [pc, #4]	; (8001b84 <mem_heap_lo+0x8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	4770      	bx	lr
 8001b84:	200004f0 	.word	0x200004f0

08001b88 <mem_heap_hi>:
/* 
 * mem_heap_hi - return address of last heap byte
 */
void *mem_heap_hi()
{
    return (void *)(mem_brk);
 8001b88:	4b01      	ldr	r3, [pc, #4]	; (8001b90 <mem_heap_hi+0x8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	4770      	bx	lr
 8001b90:	200004f4 	.word	0x200004f4

08001b94 <mem_heapsize>:
/*
 * mem_heapsize() - returns the heap size in bytes
 */
size_t mem_heapsize() 
{
    return (size_t)(mem_brk - mem_start_brk);
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <mem_heapsize+0x10>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <mem_heapsize+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	1ad3      	subs	r3, r2, r3
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	200004f4 	.word	0x200004f4
 8001ba8:	200004f0 	.word	0x200004f0

08001bac <extend_heap>:
#define CHUNKSIZE (1<<12) // Heap request chunk

#define MAX(x,y) ((x) > (y) ? (x) : (y))

// Extend heap by words * WSIZE with alignment, return 1 on success 0 on fail
static int extend_heap(size_t words) {
 8001bac:	b500      	push	{lr}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	9001      	str	r0, [sp, #4]
	char * bp;
	size_t size;

	size = (words % 2) ? (words+1) * WSIZE : words * WSIZE; // Maintain double word alignment
 8001bb2:	9b01      	ldr	r3, [sp, #4]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <extend_heap+0x18>
 8001bbc:	9b01      	ldr	r3, [sp, #4]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	e001      	b.n	8001bc8 <extend_heap+0x1c>
 8001bc4:	9b01      	ldr	r3, [sp, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	9303      	str	r3, [sp, #12]
	if ((long)(bp = mem_sbrk(size)) == -1) {
 8001bca:	9803      	ldr	r0, [sp, #12]
 8001bcc:	f7ff ff8e 	bl	8001aec <mem_sbrk>
 8001bd0:	9002      	str	r0, [sp, #8]
 8001bd2:	9b02      	ldr	r3, [sp, #8]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd8:	d101      	bne.n	8001bde <extend_heap+0x32>
		return 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <extend_heap+0x34>
	} else {
		return 1;
 8001bde:	2301      	movs	r3, #1
	}
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	b005      	add	sp, #20
 8001be4:	f85d fb04 	ldr.w	pc, [sp], #4

08001be8 <mm_init>:

// Initialize memory request communication
int mm_init(void)
{
 8001be8:	b500      	push	{lr}
 8001bea:	b083      	sub	sp, #12
	void * response = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]

	mem_req_setup();
 8001bf0:	f000 f9d0 	bl	8001f94 <mem_req_setup>
	mpu_init();
 8001bf4:	f000 fbe0 	bl	80023b8 <mpu_init>

	// Receive starting singal of 1 in every field
	led_on(BLUE);
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	f000 fcd9 	bl	80025b0 <led_on>
	req_receive(&response);
 8001bfe:	ab01      	add	r3, sp, #4
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f9e1 	bl	8001fc8 <req_receive>
	if (response==(void *)1) {
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10c      	bne.n	8001c26 <mm_init+0x3e>
		led_off(BLUE);
 8001c0c:	200f      	movs	r0, #15
 8001c0e:	f000 fce3 	bl	80025d8 <led_off>
		mem_init();
 8001c12:	f7ff ff41 	bl	8001a98 <mem_init>
		extend_heap(4096/WSIZE);
 8001c16:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c1a:	f7ff ffc7 	bl	8001bac <extend_heap>
		timer_init();
 8001c1e:	f000 f94d 	bl	8001ebc <timer_init>
		return 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e00b      	b.n	8001c3e <mm_init+0x56>
	} else {
		led_off(BLUE);
 8001c26:	200f      	movs	r0, #15
 8001c28:	f000 fcd6 	bl	80025d8 <led_off>
		led_on(RED);
 8001c2c:	200e      	movs	r0, #14
 8001c2e:	f000 fcbf 	bl	80025b0 <led_on>
		var_print("Start signal incorrect");
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <mm_init+0x60>)
 8001c34:	f000 f97c 	bl	8001f30 <var_print>
		loop();
 8001c38:	f000 f974 	bl	8001f24 <loop>
		return 1;
 8001c3c:	2301      	movs	r3, #1
	}
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	b003      	add	sp, #12
 8001c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c46:	bf00      	nop
 8001c48:	08004eb4 	.word	0x08004eb4

08001c4c <mm_malloc>:


void *mm_malloc(size_t size)
{
 8001c4c:	b500      	push	{lr}
 8001c4e:	b08d      	sub	sp, #52	; 0x34
 8001c50:	9001      	str	r0, [sp, #4]
	size_t asize, extendsize;	
	mem_request req;	
	void * response;

	// Ignore 0 size
	if (size == 0) {
 8001c52:	9b01      	ldr	r3, [sp, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <mm_malloc+0x10>
		return NULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e04f      	b.n	8001cfc <mm_malloc+0xb0>
	}

	// Send malloc request to server
	req = (mem_request){.request = MALLOC, .size = size, .ptr=NULL};
 8001c5c:	9b01      	ldr	r3, [sp, #4]
 8001c5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001c62:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001c66:	f36f 0301 	bfc	r3, #0, #2
 8001c6a:	f88d 3020 	strb.w	r3, [sp, #32]
 8001c6e:	9b08      	ldr	r3, [sp, #32]
 8001c70:	f362 039f 	bfi	r3, r2, #2, #30
 8001c74:	9308      	str	r3, [sp, #32]
 8001c76:	2300      	movs	r3, #0
 8001c78:	9309      	str	r3, [sp, #36]	; 0x24
	req_send(&req);
 8001c7a:	ab08      	add	r3, sp, #32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f992 	bl	8001fa6 <req_send>
	req_receive(&response);
 8001c82:	ab07      	add	r3, sp, #28
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f99f 	bl	8001fc8 <req_receive>

	if (response) {
 8001c8a:	9b07      	ldr	r3, [sp, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <mm_malloc+0x48>
		return response;
 8001c90:	9b07      	ldr	r3, [sp, #28]
 8001c92:	e033      	b.n	8001cfc <mm_malloc+0xb0>
	} else {
		// Need to extend heap
		// Add overhead and alignment to block size
		if (size <= WSIZE) {
 8001c94:	9b01      	ldr	r3, [sp, #4]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d802      	bhi.n	8001ca0 <mm_malloc+0x54>
			asize = WSIZE;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c9e:	e004      	b.n	8001caa <mm_malloc+0x5e>
		} else {
			asize = WSIZE * ((size + (WSIZE) + (WSIZE-1))/WSIZE); // Add overhead and make rounding floor
 8001ca0:	9b01      	ldr	r3, [sp, #4]
 8001ca2:	3307      	adds	r3, #7
 8001ca4:	f023 0303 	bic.w	r3, r3, #3
 8001ca8:	930b      	str	r3, [sp, #44]	; 0x2c
		}
		extendsize = MAX(asize, CHUNKSIZE);
 8001caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb0:	bf38      	it	cc
 8001cb2:	f44f 5380 	movcc.w	r3, #4096	; 0x1000
 8001cb6:	930a      	str	r3, [sp, #40]	; 0x28

		if (extend_heap(extendsize/WSIZE)) {
 8001cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff75 	bl	8001bac <extend_heap>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d018      	beq.n	8001cfa <mm_malloc+0xae>
			// Resend malloc request
			// Send malloc request to server
			req = (mem_request){.request = MALLOC, .size = size, .ptr=NULL};
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001cce:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001cd2:	f36f 0301 	bfc	r3, #0, #2
 8001cd6:	f88d 3020 	strb.w	r3, [sp, #32]
 8001cda:	9b08      	ldr	r3, [sp, #32]
 8001cdc:	f362 039f 	bfi	r3, r2, #2, #30
 8001ce0:	9308      	str	r3, [sp, #32]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9309      	str	r3, [sp, #36]	; 0x24
			req_send(&req);
 8001ce6:	ab08      	add	r3, sp, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f95c 	bl	8001fa6 <req_send>
			req_receive(&response);
 8001cee:	ab07      	add	r3, sp, #28
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f969 	bl	8001fc8 <req_receive>
			
			return(response);
 8001cf6:	9b07      	ldr	r3, [sp, #28]
 8001cf8:	e000      	b.n	8001cfc <mm_malloc+0xb0>
		} else {
			// Not enough memory
			return NULL;
 8001cfa:	2300      	movs	r3, #0
		}
	}
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	b00d      	add	sp, #52	; 0x34
 8001d00:	f85d fb04 	ldr.w	pc, [sp], #4

08001d04 <mm_free>:

void mm_free(void *ptr)
{
 8001d04:	b500      	push	{lr}
 8001d06:	b085      	sub	sp, #20
 8001d08:	9001      	str	r0, [sp, #4]
	mem_request req = {.request=FREE, .size=0, .ptr=ptr};
 8001d0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f362 0301 	bfi	r3, r2, #0, #2
 8001d14:	f88d 3008 	strb.w	r3, [sp, #8]
 8001d18:	9b02      	ldr	r3, [sp, #8]
 8001d1a:	f36f 039f 	bfc	r3, #2, #30
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	9b01      	ldr	r3, [sp, #4]
 8001d22:	9303      	str	r3, [sp, #12]
	req_send(&req);
 8001d24:	ab02      	add	r3, sp, #8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f93d 	bl	8001fa6 <req_send>
}
 8001d2c:	bf00      	nop
 8001d2e:	b005      	add	sp, #20
 8001d30:	f85d fb04 	ldr.w	pc, [sp], #4

08001d34 <mm_realloc>:

void *mm_realloc(void *ptr, size_t size)
{
 8001d34:	b500      	push	{lr}
 8001d36:	b08b      	sub	sp, #44	; 0x2c
 8001d38:	9001      	str	r0, [sp, #4]
 8001d3a:	9100      	str	r1, [sp, #0]
    void *oldptr = ptr;
 8001d3c:	9b01      	ldr	r3, [sp, #4]
 8001d3e:	9309      	str	r3, [sp, #36]	; 0x24
    void *newptr;
	mem_request req;
	void * response;

	// Special cases
	if (ptr == NULL) {
 8001d40:	9b01      	ldr	r3, [sp, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <mm_realloc+0x1e>
		newptr = mm_malloc(size);
 8001d46:	9800      	ldr	r0, [sp, #0]
 8001d48:	f7ff ff80 	bl	8001c4c <mm_malloc>
 8001d4c:	9008      	str	r0, [sp, #32]
		return newptr;
 8001d4e:	9b08      	ldr	r3, [sp, #32]
 8001d50:	e032      	b.n	8001db8 <mm_realloc+0x84>
	}
	if (size == 0) {
 8001d52:	9b00      	ldr	r3, [sp, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <mm_realloc+0x2e>
		mm_free(ptr);
 8001d58:	9801      	ldr	r0, [sp, #4]
 8001d5a:	f7ff ffd3 	bl	8001d04 <mm_free>
		return ptr;
 8001d5e:	9b01      	ldr	r3, [sp, #4]
 8001d60:	e02a      	b.n	8001db8 <mm_realloc+0x84>
	}

	// Send realloc request to server
	req = (mem_request){.request = REALLOC, .size = size, .ptr=ptr};
 8001d62:	9b00      	ldr	r3, [sp, #0]
 8001d64:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001d68:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	f361 0301 	bfi	r3, r1, #0, #2
 8001d72:	f88d 3018 	strb.w	r3, [sp, #24]
 8001d76:	9b06      	ldr	r3, [sp, #24]
 8001d78:	f362 039f 	bfi	r3, r2, #2, #30
 8001d7c:	9306      	str	r3, [sp, #24]
 8001d7e:	9b01      	ldr	r3, [sp, #4]
 8001d80:	9307      	str	r3, [sp, #28]
	req_send(&req);
 8001d82:	ab06      	add	r3, sp, #24
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f90e 	bl	8001fa6 <req_send>
	req_receive(&response);
 8001d8a:	ab05      	add	r3, sp, #20
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f91b 	bl	8001fc8 <req_receive>

	if (response == oldptr) {
 8001d92:	9b05      	ldr	r3, [sp, #20]
 8001d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d101      	bne.n	8001d9e <mm_realloc+0x6a>
		// Address stays the same
		return response;
 8001d9a:	9b05      	ldr	r3, [sp, #20]
 8001d9c:	e00c      	b.n	8001db8 <mm_realloc+0x84>
	} else {
		// Need to copy to new location
		newptr = mm_malloc(size);
 8001d9e:	9800      	ldr	r0, [sp, #0]
 8001da0:	f7ff ff54 	bl	8001c4c <mm_malloc>
 8001da4:	9008      	str	r0, [sp, #32]
		memcpy(newptr, oldptr, size);
 8001da6:	9a00      	ldr	r2, [sp, #0]
 8001da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001daa:	9808      	ldr	r0, [sp, #32]
 8001dac:	f000 fd66 	bl	800287c <memcpy>
		mm_free(oldptr);
 8001db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001db2:	f7ff ffa7 	bl	8001d04 <mm_free>
		return newptr;
 8001db6:	9b08      	ldr	r3, [sp, #32]
	}
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	b00b      	add	sp, #44	; 0x2c
 8001dbc:	f85d fb04 	ldr.w	pc, [sp], #4

08001dc0 <mm_finish>:

// Tell server to end session
void mm_finish(void) {
 8001dc0:	b500      	push	{lr}
 8001dc2:	b083      	sub	sp, #12
	mem_request req = {.request=SBRK, .size=0, .ptr=0};
 8001dc4:	f89d 3000 	ldrb.w	r3, [sp]
 8001dc8:	f043 0303 	orr.w	r3, r3, #3
 8001dcc:	f88d 3000 	strb.w	r3, [sp]
 8001dd0:	9b00      	ldr	r3, [sp, #0]
 8001dd2:	f36f 039f 	bfc	r3, #2, #30
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9301      	str	r3, [sp, #4]
	req_send(&req);
 8001ddc:	466b      	mov	r3, sp
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f8e1 	bl	8001fa6 <req_send>
}
 8001de4:	bf00      	nop
 8001de6:	b003      	add	sp, #12
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b082      	sub	sp, #8
 8001dee:	4603      	mov	r3, r0
 8001df0:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0c      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4905      	ldr	r1, [pc, #20]	; (8001e1c <__NVIC_EnableIRQ+0x30>)
 8001e06:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	b002      	add	sp, #8
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b082      	sub	sp, #8
 8001e22:	4603      	mov	r3, r0
 8001e24:	9100      	str	r1, [sp, #0]
 8001e26:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0a      	blt.n	8001e48 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	9b00      	ldr	r3, [sp, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x48>)
 8001e38:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e46:	e00b      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	9b00      	ldr	r3, [sp, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	b002      	add	sp, #8
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <TIM2_IRQHandler>:
/*************************************************
* timer 2 interrupt handler
*************************************************/
void TIM2_IRQHandler(void)
{
	systime++;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <TIM2_IRQHandler+0x3c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <TIM2_IRQHandler+0x3c>)
 8001e78:	6013      	str	r3, [r2, #0]

	// Reset watchdog bits
	// WWDG->CR |= 0x7F;

    // clear interrupt status
    if (TIM2->DIER & 0x01) {
 8001e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00e      	beq.n	8001ea6 <TIM2_IRQHandler+0x36>
        if (TIM2->SR & 0x01) {
 8001e88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <TIM2_IRQHandler+0x36>
            TIM2->SR &= ~(1U << 0);
 8001e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6113      	str	r3, [r2, #16]
        }
    }
}
 8001ea6:	bf00      	nop
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200004f8 	.word	0x200004f8

08001eb0 <get_time>:

// Returns system time in ms
size_t get_time(void) {
	return systime;
 8001eb0:	4b01      	ldr	r3, [pc, #4]	; (8001eb8 <get_time+0x8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4770      	bx	lr
 8001eb8:	200004f8 	.word	0x200004f8

08001ebc <timer_init>:

/************************************************* * main code starts from here
*************************************************/
void timer_init(void)
{
 8001ebc:	b508      	push	{r3, lr}
    // enable TIM2 clock (bit0)
    RCC->APB1ENR |= (1 << 0);
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <timer_init+0x64>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <timer_init+0x64>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40

	// For STM32F411: 100M/4*2 = 50M, 50M/4999+1 = 10 khz clock speed
    TIM2->PSC = 4999;
 8001eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ece:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28

	// Set auto reload value to 10 to give 1 ms timer interrupts
    TIM2->ARR = 10;
 8001ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ed8:	220a      	movs	r2, #10
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c

    // Update Interrupt Enable
    TIM2->DIER |= (1 << 0);
 8001edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM2_IRQn, 35); // Priority level 2
 8001eec:	2123      	movs	r1, #35	; 0x23
 8001eee:	201c      	movs	r0, #28
 8001ef0:	f7ff ff96 	bl	8001e20 <__NVIC_SetPriority>
    // enable TIM2 IRQ from NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8001ef4:	201c      	movs	r0, #28
 8001ef6:	f7ff ff79 	bl	8001dec <__NVIC_EnableIRQ>

	// Set to upcounting mode
	TIM2->CR1 &= ~(1 << 4);
 8001efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f04:	f023 0310 	bic.w	r3, r3, #16
 8001f08:	6013      	str	r3, [r2, #0]
    // Enable Timer 2 module (CEN, bit0)
    TIM2->CR1 |= (1 << 0);
 8001f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	bd08      	pop	{r3, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <loop>:

static char output_str[MAXLINE*2];
size_t output_offset=0;
void * sp_reset = (void *)0x20005000;

void loop() {
 8001f24:	b508      	push	{r3, lr}
	led_on(ORANGE);
 8001f26:	200d      	movs	r0, #13
 8001f28:	f000 fb42 	bl	80025b0 <led_on>
	while(1) {}
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <loop+0x8>

08001f30 <var_print>:
}

// Append printed output to output_str
void var_print(char * str) {
 8001f30:	b500      	push	{lr}
 8001f32:	b083      	sub	sp, #12
 8001f34:	9001      	str	r0, [sp, #4]
	if (output_offset + strlen(str) <= MAXLINE*2) {
 8001f36:	9801      	ldr	r0, [sp, #4]
 8001f38:	f7fe f932 	bl	80001a0 <strlen>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <var_print+0x2c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f48:	d804      	bhi.n	8001f54 <var_print+0x24>
		strcat(output_str, str);
 8001f4a:	9901      	ldr	r1, [sp, #4]
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <var_print+0x30>)
 8001f4e:	f000 ff38 	bl	8002dc2 <strcat>
	} else {
		while(1){}
	}
}
 8001f52:	e000      	b.n	8001f56 <var_print+0x26>
		while(1){}
 8001f54:	e7fe      	b.n	8001f54 <var_print+0x24>
}
 8001f56:	b003      	add	sp, #12
 8001f58:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f5c:	20000cfc 	.word	0x20000cfc
 8001f60:	200004fc 	.word	0x200004fc

08001f64 <send>:
#define READSIZE(buffer) *(size_t *)buffer

static char tx_buffer[16] = {0};

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 8001f64:	b500      	push	{lr}
 8001f66:	b083      	sub	sp, #12
 8001f68:	9001      	str	r0, [sp, #4]
 8001f6a:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_wait();
		memcpy(tx_buffer, data, size);
		uart_tx_start(tx_buffer, size);
	} else {
		uart_send(data, size);
 8001f6c:	9900      	ldr	r1, [sp, #0]
 8001f6e:	9801      	ldr	r0, [sp, #4]
 8001f70:	f000 f83c 	bl	8001fec <uart_send>
	}
}
 8001f74:	bf00      	nop
 8001f76:	b003      	add	sp, #12
 8001f78:	f85d fb04 	ldr.w	pc, [sp], #4

08001f7c <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 8001f7c:	b500      	push	{lr}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	9001      	str	r0, [sp, #4]
 8001f82:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_wait();
		uart_rx_start(buffer, size);
		uart_rx_wait();
	} else {
		uart_receive(buffer, size);
 8001f84:	9900      	ldr	r1, [sp, #0]
 8001f86:	9801      	ldr	r0, [sp, #4]
 8001f88:	f000 f850 	bl	800202c <uart_receive>
	}
}
 8001f8c:	bf00      	nop
 8001f8e:	b003      	add	sp, #12
 8001f90:	f85d fb04 	ldr.w	pc, [sp], #4

08001f94 <mem_req_setup>:

// Initialize request communication
void mem_req_setup(void) {
 8001f94:	b508      	push	{r3, lr}
	mcu_init();
 8001f96:	f000 fb51 	bl	800263c <mcu_init>
	uart_init();
 8001f9a:	f000 f8bd 	bl	8002118 <uart_init>
	uart_dma_init();
 8001f9e:	f000 f8f9 	bl	8002194 <uart_dma_init>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd08      	pop	{r3, pc}

08001fa6 <req_send>:

// Send request
void req_send(mem_request * buffer) {
 8001fa6:	b500      	push	{lr}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	9001      	str	r0, [sp, #4]
	led_on(GREEN);
 8001fac:	200c      	movs	r0, #12
 8001fae:	f000 faff 	bl	80025b0 <led_on>
	send(buffer, sizeof(mem_request));
 8001fb2:	2108      	movs	r1, #8
 8001fb4:	9801      	ldr	r0, [sp, #4]
 8001fb6:	f7ff ffd5 	bl	8001f64 <send>
	led_off(GREEN);
 8001fba:	200c      	movs	r0, #12
 8001fbc:	f000 fb0c 	bl	80025d8 <led_off>
}
 8001fc0:	bf00      	nop
 8001fc2:	b003      	add	sp, #12
 8001fc4:	f85d fb04 	ldr.w	pc, [sp], #4

08001fc8 <req_receive>:

// Wait for response
void req_receive(void ** buffer) {
 8001fc8:	b500      	push	{lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	9001      	str	r0, [sp, #4]
	led_on(GREEN);
 8001fce:	200c      	movs	r0, #12
 8001fd0:	f000 faee 	bl	80025b0 <led_on>
	receive(buffer, sizeof(void *));
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	9801      	ldr	r0, [sp, #4]
 8001fd8:	f7ff ffd0 	bl	8001f7c <receive>
	led_off(GREEN);
 8001fdc:	200c      	movs	r0, #12
 8001fde:	f000 fafb 	bl	80025d8 <led_off>
}
 8001fe2:	bf00      	nop
 8001fe4:	b003      	add	sp, #12
 8001fe6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001fec <uart_send>:
#include "uart.h"

char msg_buffer[BUFFERSIZE] = {0};

// Send content of pointer through uart
void uart_send(void * data, size_t size) {
 8001fec:	b084      	sub	sp, #16
 8001fee:	9001      	str	r0, [sp, #4]
 8001ff0:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i<size; i++){
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	9303      	str	r3, [sp, #12]
 8001ff6:	e00f      	b.n	8002018 <uart_send+0x2c>
		// Send character
		USART1->DR = ((char *)data)[i];
 8001ff8:	9a01      	ldr	r2, [sp, #4]
 8001ffa:	9b03      	ldr	r3, [sp, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781a      	ldrb	r2, [r3, #0]
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <uart_send+0x3c>)
 8002002:	605a      	str	r2, [r3, #4]
		// Wait for transmit complete
		while(!(USART1->SR & (1 << 6)));
 8002004:	bf00      	nop
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <uart_send+0x3c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f9      	beq.n	8002006 <uart_send+0x1a>
	for (size_t i=0; i<size; i++){
 8002012:	9b03      	ldr	r3, [sp, #12]
 8002014:	3301      	adds	r3, #1
 8002016:	9303      	str	r3, [sp, #12]
 8002018:	9a03      	ldr	r2, [sp, #12]
 800201a:	9b00      	ldr	r3, [sp, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3eb      	bcc.n	8001ff8 <uart_send+0xc>
	}
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	b004      	add	sp, #16
 8002026:	4770      	bx	lr
 8002028:	40011000 	.word	0x40011000

0800202c <uart_receive>:

// Receive size bytes of content from uart and write it to buffer
void uart_receive(void * buffer, size_t size)  {
 800202c:	b084      	sub	sp, #16
 800202e:	9001      	str	r0, [sp, #4]
 8002030:	9100      	str	r1, [sp, #0]
	// USART CR2 configure stop bit count, default 1
	for (size_t i=0; i < size; i++) {
 8002032:	2300      	movs	r3, #0
 8002034:	9303      	str	r3, [sp, #12]
 8002036:	e010      	b.n	800205a <uart_receive+0x2e>
		// Wait until RXNE bit is set
		while (!(USART1->SR & (0x1U << 5))){};
 8002038:	bf00      	nop
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <uart_receive+0x40>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f9      	beq.n	800203a <uart_receive+0xe>
		// Receive character
		((char *)buffer)[i] = USART1->DR;
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <uart_receive+0x40>)
 8002048:	6859      	ldr	r1, [r3, #4]
 800204a:	9a01      	ldr	r2, [sp, #4]
 800204c:	9b03      	ldr	r3, [sp, #12]
 800204e:	4413      	add	r3, r2
 8002050:	b2ca      	uxtb	r2, r1
 8002052:	701a      	strb	r2, [r3, #0]
	for (size_t i=0; i < size; i++) {
 8002054:	9b03      	ldr	r3, [sp, #12]
 8002056:	3301      	adds	r3, #1
 8002058:	9303      	str	r3, [sp, #12]
 800205a:	9a03      	ldr	r2, [sp, #12]
 800205c:	9b00      	ldr	r3, [sp, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d3ea      	bcc.n	8002038 <uart_receive+0xc>
	}
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	b004      	add	sp, #16
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40011000 	.word	0x40011000

08002070 <uart_pin_setup>:

// Setup GPIO A9 and A10 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOB clock, bit 0 on AHB1ENR
    RCC->AHB1ENR |= (1 << 1);
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <uart_pin_setup+0x4c>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4a11      	ldr	r2, [pc, #68]	; (80020bc <uart_pin_setup+0x4c>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6313      	str	r3, [r2, #48]	; 0x30

    // Set pin modes as alternate mode (pins 6 and 7)
    // USART1 TX and RX pins are PB6 and PB7 respectively
    GPIOB->MODER &= ~(0xFU << 12); // Reset bits
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <uart_pin_setup+0x50>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <uart_pin_setup+0x50>)
 8002082:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002086:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xAU << 12); // Set to alternate function mode
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <uart_pin_setup+0x50>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <uart_pin_setup+0x50>)
 800208e:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8002092:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOB->OSPEEDR |= (0xFU << 12);
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <uart_pin_setup+0x50>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <uart_pin_setup+0x50>)
 800209a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800209e:	6093      	str	r3, [r2, #8]

    // Choose AF7 for USART1 in Alternate Function registers
    GPIOB->AFR[0] |= (0x7 << 24);
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <uart_pin_setup+0x50>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <uart_pin_setup+0x50>)
 80020a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020aa:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (0x7 << 28);
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <uart_pin_setup+0x50>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <uart_pin_setup+0x50>)
 80020b2:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 80020b6:	6213      	str	r3, [r2, #32]
}
 80020b8:	bf00      	nop
 80020ba:	4770      	bx	lr
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400

080020c4 <uart_enable>:

// Initialize UART 1
static void uart_enable(void) {
	// Enable clock: bit 4 on APB2ENR
    RCC->APB2ENR |= (1 << 4);
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <uart_enable+0x4c>)
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	4a11      	ldr	r2, [pc, #68]	; (8002110 <uart_enable+0x4c>)
 80020ca:	f043 0310 	orr.w	r3, r3, #16
 80020ce:	6453      	str	r3, [r2, #68]	; 0x44

    // USART1 RX enable, RE bit 2
    USART1->CR1 |= (1 << 2);
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <uart_enable+0x50>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <uart_enable+0x50>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	60d3      	str	r3, [r2, #12]
    // USART1 TX enable, TE bit 3
    USART1->CR1 |= (1 << 3);
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <uart_enable+0x50>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <uart_enable+0x50>)
 80020e2:	f043 0308 	orr.w	r3, r3, #8
 80020e6:	60d3      	str	r3, [r2, #12]

    // Enable usart1 - UE, bit 13
    USART1->CR1 |= (1 << 13);
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <uart_enable+0x50>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <uart_enable+0x50>)
 80020ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020f2:	60d3      	str	r3, [r2, #12]
	// For STM32F411: fCK = 50 Mhz (Sysclk/4), Baudrate = 115200, OVER8 = 0
	// USARTDIV = fCK / baud / 8 * (2-OVER8)
	// USARTDIV = 25Mhz / 2000000 / 16 = 1.5625
	// Fraction: 0.5624*16 = 9
	// Mantissa: 1
    USART1->BRR |= (1 << 4); // Mantissa
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <uart_enable+0x50>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <uart_enable+0x50>)
 80020fa:	f043 0310 	orr.w	r3, r3, #16
 80020fe:	6093      	str	r3, [r2, #8]
    USART1->BRR |= 9; // Fraction
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <uart_enable+0x50>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a03      	ldr	r2, [pc, #12]	; (8002114 <uart_enable+0x50>)
 8002106:	f043 0309 	orr.w	r3, r3, #9
 800210a:	6093      	str	r3, [r2, #8]
}	
 800210c:	bf00      	nop
 800210e:	4770      	bx	lr
 8002110:	40023800 	.word	0x40023800
 8002114:	40011000 	.word	0x40011000

08002118 <uart_init>:

void uart_init(void)
{
 8002118:	b508      	push	{r3, lr}
    /* set system clock to 100 Mhz */
    set_sysclk_to_100();
 800211a:	f000 fac9 	bl	80026b0 <set_sysclk_to_100>

	uart_pin_setup();
 800211e:	f7ff ffa7 	bl	8002070 <uart_pin_setup>
	uart_enable();
 8002122:	f7ff ffcf 	bl	80020c4 <uart_enable>
}
 8002126:	bf00      	nop
 8002128:	bd08      	pop	{r3, pc}
	...

0800212c <DMA1_Stream5_IRQHandler>:

// UART reception finish interrupt
void DMA1_Stream5_IRQHandler(void)
{
    // clear stream receive complete interrupt - bit11 for stream 5
    if (DMA1->HISR & DMA_HISR_TCIF5) {
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <DMA1_Stream5_IRQHandler+0x30>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00e      	beq.n	8002156 <DMA1_Stream5_IRQHandler+0x2a>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF5;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <DMA1_Stream5_IRQHandler+0x30>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a07      	ldr	r2, [pc, #28]	; (800215c <DMA1_Stream5_IRQHandler+0x30>)
 800213e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002142:	60d3      	str	r3, [r2, #12]
		receiving = 0;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <DMA1_Stream5_IRQHandler+0x34>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
		// Disable receive DMA
		USART2->CR3 &= ~USART_CR3_DMAR;
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <DMA1_Stream5_IRQHandler+0x38>)
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <DMA1_Stream5_IRQHandler+0x38>)
 8002150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002154:	6153      	str	r3, [r2, #20]
    }
}
 8002156:	bf00      	nop
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40026000 	.word	0x40026000
 8002160:	20000d00 	.word	0x20000d00
 8002164:	40004400 	.word	0x40004400

08002168 <DMA1_Stream6_IRQHandler>:

// UART transmission finish interrupt
void DMA1_Stream6_IRQHandler(void)
{
    // clear stream transfer complete interrupt - bit21 for stream 6
    if (DMA1->HISR & DMA_HISR_TCIF6) {
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <DMA1_Stream6_IRQHandler+0x24>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <DMA1_Stream6_IRQHandler+0x1e>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF6;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <DMA1_Stream6_IRQHandler+0x24>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <DMA1_Stream6_IRQHandler+0x24>)
 800217a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800217e:	60d3      	str	r3, [r2, #12]
		transmitting = 0;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <DMA1_Stream6_IRQHandler+0x28>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
    }
}
 8002186:	bf00      	nop
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40026000 	.word	0x40026000
 8002190:	20000d04 	.word	0x20000d04

08002194 <uart_dma_init>:

// Setup UART DMA
void uart_dma_init(void) {
	// Enable transmit DMA
	USART2->CR3 |= USART_CR3_DMAT;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <uart_dma_init+0x34>)
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <uart_dma_init+0x34>)
 800219a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219e:	6153      	str	r3, [r2, #20]
	// Enable receive DMA
	USART2->CR3 |= USART_CR3_DMAR;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <uart_dma_init+0x34>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <uart_dma_init+0x34>)
 80021a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021aa:	6153      	str	r3, [r2, #20]
	// Clear TC bit
	USART2->SR &= ~USART_SR_TC;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <uart_dma_init+0x34>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <uart_dma_init+0x34>)
 80021b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b6:	6013      	str	r3, [r2, #0]
	// Enable DMA1 clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <uart_dma_init+0x38>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	4a03      	ldr	r2, [pc, #12]	; (80021cc <uart_dma_init+0x38>)
 80021be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80021c4:	bf00      	nop
 80021c6:	4770      	bx	lr
 80021c8:	40004400 	.word	0x40004400
 80021cc:	40023800 	.word	0x40023800

080021d0 <SVC_Handler>:
#include "mcu_mm.h"
#include "mcu_mpu.h"
#include "mcu_timer.h"

void SVC_Handler(void) {
	__asm (
 80021d0:	f01e 0f04 	tst.w	lr, #4
 80021d4:	bf0c      	ite	eq
 80021d6:	f3ef 8008 	mrseq	r0, MSP
 80021da:	f3ef 8009 	mrsne	r0, PSP
 80021de:	f000 b802 	b.w	80021e6 <SVC_Handler_Main>
			"ITE EQ\n"
			"MRSEQ r0, MSP\n"
			"MRSNE r0, PSP\n" // Check to use msp or psp
			"B SVC_Handler_Main\n" // Go to the C handler function
	);
}
 80021e2:	bf00      	nop
 80021e4:	4770      	bx	lr

080021e6 <SVC_Handler_Main>:

void SVC_Handler_Main(unsigned int * svc_args) {
 80021e6:	b086      	sub	sp, #24
 80021e8:	9001      	str	r0, [sp, #4]
	// Stack frame contents: r0-r3, LR, PC, and xPSR
	// Correspond with svc_args[0 to 7]
	// First registers are arguments and return values

	unsigned int svc_number = ((char *)svc_args[6])[-2];
 80021ea:	9b01      	ldr	r3, [sp, #4]
 80021ec:	3318      	adds	r3, #24
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3b02      	subs	r3, #2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	9305      	str	r3, [sp, #20]
	switch(svc_number) {
 80021f6:	9b05      	ldr	r3, [sp, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10e      	bne.n	800221a <SVC_Handler_Main+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80021fc:	f3ef 8314 	mrs	r3, CONTROL
 8002200:	9303      	str	r3, [sp, #12]
  return(result);
 8002202:	9b03      	ldr	r3, [sp, #12]
		case 0: // Enable privileged mode
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk);
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	9304      	str	r3, [sp, #16]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800220a:	9b04      	ldr	r3, [sp, #16]
 800220c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002210:	f3bf 8f6f 	isb	sy
}
 8002214:	bf00      	nop
  __ISB();
}
 8002216:	bf00      	nop
			break;
 8002218:	e000      	b.n	800221c <SVC_Handler_Main+0x36>
		default:
			break;
 800221a:	bf00      	nop
	}
}
 800221c:	bf00      	nop
 800221e:	b006      	add	sp, #24
 8002220:	4770      	bx	lr

08002222 <priv_mode_on>:

void priv_mode_on(void) {
	asm volatile ("svc #0");
 8002222:	df00      	svc	0
}
 8002224:	bf00      	nop
 8002226:	4770      	bx	lr

08002228 <priv_mode_off>:

void priv_mode_off(void) {
 8002228:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800222a:	f3ef 8314 	mrs	r3, CONTROL
 800222e:	9300      	str	r3, [sp, #0]
  return(result);
 8002230:	9b00      	ldr	r3, [sp, #0]
	__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk);
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002238:	9b01      	ldr	r3, [sp, #4]
 800223a:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 800223e:	f3bf 8f6f 	isb	sy
}
 8002242:	bf00      	nop
}
 8002244:	bf00      	nop
}
 8002246:	bf00      	nop
 8002248:	b002      	add	sp, #8
 800224a:	4770      	bx	lr

0800224c <sys_mm_init>:

void sys_mm_init(void) {
 800224c:	b508      	push	{r3, lr}
	priv_mode_on();
 800224e:	f7ff ffe8 	bl	8002222 <priv_mode_on>
	mm_init();
 8002252:	f7ff fcc9 	bl	8001be8 <mm_init>
	priv_mode_off();
 8002256:	f7ff ffe7 	bl	8002228 <priv_mode_off>
}
 800225a:	bf00      	nop
 800225c:	bd08      	pop	{r3, pc}

0800225e <sys_malloc>:
	priv_mode_on();
	timer_init();
	priv_mode_off();
}

void * sys_malloc(size_t size) {
 800225e:	b500      	push	{lr}
 8002260:	b085      	sub	sp, #20
 8002262:	9001      	str	r0, [sp, #4]
	void * ptr;
	priv_mode_on();
 8002264:	f7ff ffdd 	bl	8002222 <priv_mode_on>
	ptr = mm_malloc(size);
 8002268:	9801      	ldr	r0, [sp, #4]
 800226a:	f7ff fcef 	bl	8001c4c <mm_malloc>
 800226e:	9003      	str	r0, [sp, #12]
	priv_mode_off();
 8002270:	f7ff ffda 	bl	8002228 <priv_mode_off>
	return ptr;
 8002274:	9b03      	ldr	r3, [sp, #12]
}
 8002276:	4618      	mov	r0, r3
 8002278:	b005      	add	sp, #20
 800227a:	f85d fb04 	ldr.w	pc, [sp], #4

0800227e <sys_free>:

void sys_free(void * ptr) {
 800227e:	b500      	push	{lr}
 8002280:	b083      	sub	sp, #12
 8002282:	9001      	str	r0, [sp, #4]
	priv_mode_on();
 8002284:	f7ff ffcd 	bl	8002222 <priv_mode_on>
	mm_free(ptr);
 8002288:	9801      	ldr	r0, [sp, #4]
 800228a:	f7ff fd3b 	bl	8001d04 <mm_free>
	priv_mode_off();
 800228e:	f7ff ffcb 	bl	8002228 <priv_mode_off>
}
 8002292:	bf00      	nop
 8002294:	b003      	add	sp, #12
 8002296:	f85d fb04 	ldr.w	pc, [sp], #4

0800229a <sys_realloc>:

void * sys_realloc(void * ptr, size_t size) {
 800229a:	b500      	push	{lr}
 800229c:	b085      	sub	sp, #20
 800229e:	9001      	str	r0, [sp, #4]
 80022a0:	9100      	str	r1, [sp, #0]
	void * newptr;
	priv_mode_on();
 80022a2:	f7ff ffbe 	bl	8002222 <priv_mode_on>
	newptr = mm_realloc(ptr, size);
 80022a6:	9900      	ldr	r1, [sp, #0]
 80022a8:	9801      	ldr	r0, [sp, #4]
 80022aa:	f7ff fd43 	bl	8001d34 <mm_realloc>
 80022ae:	9003      	str	r0, [sp, #12]
	priv_mode_off();
 80022b0:	f7ff ffba 	bl	8002228 <priv_mode_off>
	return newptr;
 80022b4:	9b03      	ldr	r3, [sp, #12]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	b005      	add	sp, #20
 80022ba:	f85d fb04 	ldr.w	pc, [sp], #4

080022be <sys_mm_finish>:

void sys_mm_finish(void) {
 80022be:	b508      	push	{r3, lr}
	priv_mode_on();
 80022c0:	f7ff ffaf 	bl	8002222 <priv_mode_on>
	mm_finish();
 80022c4:	f7ff fd7c 	bl	8001dc0 <mm_finish>
	priv_mode_off();
 80022c8:	f7ff ffae 	bl	8002228 <priv_mode_off>
}
 80022cc:	bf00      	nop
 80022ce:	bd08      	pop	{r3, pc}

080022d0 <sys_get_time>:

size_t sys_get_time(void) {
 80022d0:	b500      	push	{lr}
 80022d2:	b083      	sub	sp, #12
	size_t t;
	priv_mode_on();
 80022d4:	f7ff ffa5 	bl	8002222 <priv_mode_on>
	t = get_time();
 80022d8:	f7ff fdea 	bl	8001eb0 <get_time>
 80022dc:	9001      	str	r0, [sp, #4]
	priv_mode_off();
 80022de:	f7ff ffa3 	bl	8002228 <priv_mode_off>
	return t;
 80022e2:	9b01      	ldr	r3, [sp, #4]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	b003      	add	sp, #12
 80022e8:	f85d fb04 	ldr.w	pc, [sp], #4

080022ec <proc_update>:
#include "mcu_mpu.h"
#include "memlib.h"

// Update mpu settings with new heap top
void proc_update(void) {
 80022ec:	b510      	push	{r4, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
	uint32_t mpu_cfg_rbar[4] = {
 80022f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022f4:	9304      	str	r3, [sp, #16]
 80022f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022fa:	9305      	str	r3, [sp, #20]
 80022fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002300:	9306      	str	r3, [sp, #24]
		// SRAM - Region 1
		0x20000000,
		// Peripherals - Region 2
		PERIPH_BASE,
		// Heap top plus 32 bytes ceiling aligned - Region 3
		(((uint32_t)mem_heap_hi() + 32 + 31)/32)*32,
 8002302:	f7ff fc41 	bl	8001b88 <mem_heap_hi>
 8002306:	4603      	mov	r3, r0
 8002308:	333f      	adds	r3, #63	; 0x3f
 800230a:	f023 031f 	bic.w	r3, r3, #31
	uint32_t mpu_cfg_rbar[4] = {
 800230e:	9307      	str	r3, [sp, #28]
	};

	uint32_t mpu_cfg_rasr[4] = {
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <proc_update+0xc4>)
 8002312:	466c      	mov	r4, sp
 8002314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		(MPU_DEFS_RASR_SIZE_4GB | MPU_DEFS_SHARED_DEVICE | MPU_DEFS_RASE_AP_FULL_ACCESS | MPU_RASR_ENABLE_Msk),
		// Stack/heap overflow protection
		(MPU_DEFS_RASR_SIZE_32B | MPU_DEFS_NORMAL_SHARED_MEMORY_WT | MPU_DEFS_RASE_AP_NO_ACCESS | MPU_RASR_ENABLE_Msk),
	};

	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't existPB1PERIPH_BASE + 0x4400U)
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <proc_update+0xc8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d042      	beq.n	80023a8 <proc_update+0xbc>
  __ASM volatile ("dmb 0xF":::"memory");
 8002322:	f3bf 8f5f 	dmb	sy
}
 8002326:	bf00      	nop
	__DMB(); // Finish outstanding transfers
	
	MPU->CTRL = 0; // Disable first
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <proc_update+0xc8>)
 800232a:	2200      	movs	r2, #0
 800232c:	605a      	str	r2, [r3, #4]
	
	for (size_t i=0; i<4; i++) {
 800232e:	2300      	movs	r3, #0
 8002330:	9309      	str	r3, [sp, #36]	; 0x24
 8002332:	e015      	b.n	8002360 <proc_update+0x74>
		MPU->RNR = i; // Select region	
 8002334:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <proc_update+0xc8>)
 8002336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002338:	6093      	str	r3, [r2, #8]
		MPU->RBAR = mpu_cfg_rbar[i]; // Write base address register
 800233a:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <proc_update+0xc8>)
 800233c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3328      	adds	r3, #40	; 0x28
 8002342:	446b      	add	r3, sp
 8002344:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002348:	60d3      	str	r3, [r2, #12]
		MPU->RASR = mpu_cfg_rasr[i]; // Region attribute and size register
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <proc_update+0xc8>)
 800234c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	3328      	adds	r3, #40	; 0x28
 8002352:	446b      	add	r3, sp
 8002354:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002358:	6113      	str	r3, [r2, #16]
	for (size_t i=0; i<4; i++) {
 800235a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800235c:	3301      	adds	r3, #1
 800235e:	9309      	str	r3, [sp, #36]	; 0x24
 8002360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002362:	2b03      	cmp	r3, #3
 8002364:	d9e6      	bls.n	8002334 <proc_update+0x48>
	}

	for (size_t i=4; i<8; i++) {
 8002366:	2304      	movs	r3, #4
 8002368:	9308      	str	r3, [sp, #32]
 800236a:	e00b      	b.n	8002384 <proc_update+0x98>
		// Disable unused regions
		MPU->RNR = i; // Select region	
 800236c:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <proc_update+0xc8>)
 800236e:	9b08      	ldr	r3, [sp, #32]
 8002370:	6093      	str	r3, [r2, #8]
		MPU->RBAR = 0; // Base address
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <proc_update+0xc8>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
		MPU->RASR = 0; // Region attribute and size register
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <proc_update+0xc8>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
	for (size_t i=4; i<8; i++) {
 800237e:	9b08      	ldr	r3, [sp, #32]
 8002380:	3301      	adds	r3, #1
 8002382:	9308      	str	r3, [sp, #32]
 8002384:	9b08      	ldr	r3, [sp, #32]
 8002386:	2b07      	cmp	r3, #7
 8002388:	d9f0      	bls.n	800236c <proc_update+0x80>
	}

	MPU->CTRL |= 1<<2; // Enable privileged background region
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <proc_update+0xc8>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <proc_update+0xc8>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6053      	str	r3, [r2, #4]

	MPU->CTRL = MPU_CTRL_ENABLE_Msk; // Enable MPU
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <proc_update+0xc8>)
 8002398:	2201      	movs	r2, #1
 800239a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800239c:	f3bf 8f4f 	dsb	sy
}
 80023a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023a2:	f3bf 8f6f 	isb	sy
}
 80023a6:	e000      	b.n	80023aa <proc_update+0xbe>
	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't existPB1PERIPH_BASE + 0x4400U)
 80023a8:	bf00      	nop
	
	__DSB(); // Memory barrier for subsequence data & instruction
	__ISB(); // Transfers using updated MPU settings
}
 80023aa:	b00a      	add	sp, #40	; 0x28
 80023ac:	bd10      	pop	{r4, pc}
 80023ae:	bf00      	nop
 80023b0:	08004ecc 	.word	0x08004ecc
 80023b4:	e000ed90 	.word	0xe000ed90

080023b8 <mpu_init>:

void mpu_init(void) {
 80023b8:	b088      	sub	sp, #32
	uint32_t mpu_cfg_rbar[3] = {
 80023ba:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <mpu_init+0xac>)
 80023bc:	ab03      	add	r3, sp, #12
 80023be:	ca07      	ldmia	r2, {r0, r1, r2}
 80023c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		0x20000000,
		// Peripherals - Region 2
		PERIPH_BASE,
	};

	uint32_t mpu_cfg_rasr[3] = {
 80023c4:	4a28      	ldr	r2, [pc, #160]	; (8002468 <mpu_init+0xb0>)
 80023c6:	466b      	mov	r3, sp
 80023c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(MPU_DEFS_RASR_SIZE_128KB | MPU_DEFS_NORMAL_SHARED_MEMORY_WT | MPU_DEFS_RASE_AP_FULL_ACCESS | MPU_RASR_ENABLE_Msk),
		// Peripherals
		(MPU_DEFS_RASR_SIZE_4GB | MPU_DEFS_SHARED_DEVICE | MPU_DEFS_RASE_AP_FULL_ACCESS | MPU_RASR_ENABLE_Msk),
	};

	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't existPB1PERIPH_BASE + 0x4400U)
 80023ce:	4b27      	ldr	r3, [pc, #156]	; (800246c <mpu_init+0xb4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d042      	beq.n	800245c <mpu_init+0xa4>
  __ASM volatile ("dmb 0xF":::"memory");
 80023d6:	f3bf 8f5f 	dmb	sy
}
 80023da:	bf00      	nop
	__DMB(); // Finish outstanding transfers
	
	MPU->CTRL = 0; // Disable first
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <mpu_init+0xb4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	605a      	str	r2, [r3, #4]
	
	for (size_t i=0; i<3; i++) {
 80023e2:	2300      	movs	r3, #0
 80023e4:	9307      	str	r3, [sp, #28]
 80023e6:	e015      	b.n	8002414 <mpu_init+0x5c>
		MPU->RNR = i; // Select region	
 80023e8:	4a20      	ldr	r2, [pc, #128]	; (800246c <mpu_init+0xb4>)
 80023ea:	9b07      	ldr	r3, [sp, #28]
 80023ec:	6093      	str	r3, [r2, #8]
		MPU->RBAR = mpu_cfg_rbar[i]; // Write base address register
 80023ee:	4a1f      	ldr	r2, [pc, #124]	; (800246c <mpu_init+0xb4>)
 80023f0:	9b07      	ldr	r3, [sp, #28]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	3320      	adds	r3, #32
 80023f6:	446b      	add	r3, sp
 80023f8:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80023fc:	60d3      	str	r3, [r2, #12]
		MPU->RASR = mpu_cfg_rasr[i]; // Region attribute and size register
 80023fe:	4a1b      	ldr	r2, [pc, #108]	; (800246c <mpu_init+0xb4>)
 8002400:	9b07      	ldr	r3, [sp, #28]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	3320      	adds	r3, #32
 8002406:	446b      	add	r3, sp
 8002408:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800240c:	6113      	str	r3, [r2, #16]
	for (size_t i=0; i<3; i++) {
 800240e:	9b07      	ldr	r3, [sp, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	9307      	str	r3, [sp, #28]
 8002414:	9b07      	ldr	r3, [sp, #28]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d9e6      	bls.n	80023e8 <mpu_init+0x30>
	}

	for (size_t i=3; i<8; i++) {
 800241a:	2303      	movs	r3, #3
 800241c:	9306      	str	r3, [sp, #24]
 800241e:	e00b      	b.n	8002438 <mpu_init+0x80>
		// Disable unused regions
		MPU->RNR = i; // Select region	
 8002420:	4a12      	ldr	r2, [pc, #72]	; (800246c <mpu_init+0xb4>)
 8002422:	9b06      	ldr	r3, [sp, #24]
 8002424:	6093      	str	r3, [r2, #8]
		MPU->RBAR = 0; // Base address
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <mpu_init+0xb4>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
		MPU->RASR = 0; // Region attribute and size register
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <mpu_init+0xb4>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
	for (size_t i=3; i<8; i++) {
 8002432:	9b06      	ldr	r3, [sp, #24]
 8002434:	3301      	adds	r3, #1
 8002436:	9306      	str	r3, [sp, #24]
 8002438:	9b06      	ldr	r3, [sp, #24]
 800243a:	2b07      	cmp	r3, #7
 800243c:	d9f0      	bls.n	8002420 <mpu_init+0x68>
	}

	MPU->CTRL |= 1<<2; // Enable privileged background region
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <mpu_init+0xb4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <mpu_init+0xb4>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6053      	str	r3, [r2, #4]

	MPU->CTRL = MPU_CTRL_ENABLE_Msk; // Enable MPU
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <mpu_init+0xb4>)
 800244c:	2201      	movs	r2, #1
 800244e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8002450:	f3bf 8f4f 	dsb	sy
}
 8002454:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002456:	f3bf 8f6f 	isb	sy
}
 800245a:	e000      	b.n	800245e <mpu_init+0xa6>
	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't existPB1PERIPH_BASE + 0x4400U)
 800245c:	bf00      	nop
	
	__DSB(); // Memory barrier for subsequence data & instruction
	__ISB(); // Transfers using updated MPU settings
}
 800245e:	b008      	add	sp, #32
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	08004edc 	.word	0x08004edc
 8002468:	08004ee8 	.word	0x08004ee8
 800246c:	e000ed90 	.word	0xe000ed90

08002470 <__NVIC_SetPriority>:
{
 8002470:	b082      	sub	sp, #8
 8002472:	4603      	mov	r3, r0
 8002474:	9100      	str	r1, [sp, #0]
 8002476:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0a      	blt.n	8002498 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	9b00      	ldr	r3, [sp, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	490c      	ldr	r1, [pc, #48]	; (80024b8 <__NVIC_SetPriority+0x48>)
 8002488:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002496:	e00b      	b.n	80024b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	9b00      	ldr	r3, [sp, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4907      	ldr	r1, [pc, #28]	; (80024bc <__NVIC_SetPriority+0x4c>)
 800249e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	3b04      	subs	r3, #4
 80024a8:	0112      	lsls	r2, r2, #4
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	440b      	add	r3, r1
 80024ae:	761a      	strb	r2, [r3, #24]
}
 80024b0:	bf00      	nop
 80024b2:	b002      	add	sp, #8
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <HardFault_Handler>:
#include "mcu_init.h"
#include "mcu_mm.h"
#include "mcu_timer.h"

// Hardfault Handler - Send exit signal
void HardFault_Handler(void) {
 80024c0:	b500      	push	{lr}
 80024c2:	b085      	sub	sp, #20
	// Force reset stack pointer in case of overflow
	sp_reset = (void *)0x20005000;
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HardFault_Handler+0x3c>)
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HardFault_Handler+0x40>)
 80024c8:	601a      	str	r2, [r3, #0]
	asm volatile ("mov sp, %0" : "+r" (sp_reset));
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HardFault_Handler+0x3c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	469d      	mov	sp, r3
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HardFault_Handler+0x3c>)
 80024d2:	6013      	str	r3, [r2, #0]

	char err[] = "Hard Fault";
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HardFault_Handler+0x44>)
 80024d6:	ab01      	add	r3, sp, #4
 80024d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024da:	c303      	stmia	r3!, {r0, r1}
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	3302      	adds	r3, #2
 80024e0:	0c12      	lsrs	r2, r2, #16
 80024e2:	701a      	strb	r2, [r3, #0]
	var_print(err);
 80024e4:	ab01      	add	r3, sp, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fd22 	bl	8001f30 <var_print>
	mm_finish();
 80024ec:	f7ff fc68 	bl	8001dc0 <mm_finish>
	loop();
 80024f0:	f7ff fd18 	bl	8001f24 <loop>
}
 80024f4:	bf00      	nop
 80024f6:	b005      	add	sp, #20
 80024f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024fc:	2000005c 	.word	0x2000005c
 8002500:	20005000 	.word	0x20005000
 8002504:	08004ef4 	.word	0x08004ef4

08002508 <WWDG_IRQHandler>:

// Timer interrupt stopped running - Send exit signal
void WWDG_IRQHandler(void) {
 8002508:	b500      	push	{lr}
 800250a:	b085      	sub	sp, #20
	// Force reset stack pointer in case of overflow
	sp_reset = (void *)0x20005000;
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <WWDG_IRQHandler+0x3c>)
 800250e:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <WWDG_IRQHandler+0x40>)
 8002510:	601a      	str	r2, [r3, #0]
	asm volatile ("mov sp, %0" : "+r" (sp_reset));
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <WWDG_IRQHandler+0x3c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	469d      	mov	sp, r3
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <WWDG_IRQHandler+0x3c>)
 800251a:	6013      	str	r3, [r2, #0]

	char err[] = "WWDG error";
 800251c:	4a0b      	ldr	r2, [pc, #44]	; (800254c <WWDG_IRQHandler+0x44>)
 800251e:	ab01      	add	r3, sp, #4
 8002520:	ca07      	ldmia	r2, {r0, r1, r2}
 8002522:	c303      	stmia	r3!, {r0, r1}
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	3302      	adds	r3, #2
 8002528:	0c12      	lsrs	r2, r2, #16
 800252a:	701a      	strb	r2, [r3, #0]
	var_print(err);
 800252c:	ab01      	add	r3, sp, #4
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fcfe 	bl	8001f30 <var_print>
	mm_finish();
 8002534:	f7ff fc44 	bl	8001dc0 <mm_finish>
	loop();
 8002538:	f7ff fcf4 	bl	8001f24 <loop>
}
 800253c:	bf00      	nop
 800253e:	b005      	add	sp, #20
 8002540:	f85d fb04 	ldr.w	pc, [sp], #4
 8002544:	2000005c 	.word	0x2000005c
 8002548:	20005000 	.word	0x20005000
 800254c:	08004f00 	.word	0x08004f00

08002550 <MemManage_Handler>:

// Memory fault handler
void MemManage_Handler(void) {
 8002550:	b510      	push	{r4, lr}
 8002552:	b084      	sub	sp, #16
	// Force reset stack pointer in case of overflow
	sp_reset = (void *)0x20005000;
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <MemManage_Handler+0x34>)
 8002556:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <MemManage_Handler+0x38>)
 8002558:	601a      	str	r2, [r3, #0]
	asm volatile ("mov sp, %0" : "+r" (sp_reset));
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <MemManage_Handler+0x34>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	469d      	mov	sp, r3
 8002560:	4a08      	ldr	r2, [pc, #32]	; (8002584 <MemManage_Handler+0x34>)
 8002562:	6013      	str	r3, [r2, #0]

	char err[] = "Memory error";
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <MemManage_Handler+0x3c>)
 8002566:	466c      	mov	r4, sp
 8002568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800256a:	c407      	stmia	r4!, {r0, r1, r2}
 800256c:	7023      	strb	r3, [r4, #0]
	var_print(err);
 800256e:	466b      	mov	r3, sp
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fcdd 	bl	8001f30 <var_print>
	mm_finish();
 8002576:	f7ff fc23 	bl	8001dc0 <mm_finish>
	loop();
 800257a:	f7ff fcd3 	bl	8001f24 <loop>
}
 800257e:	bf00      	nop
 8002580:	b004      	add	sp, #16
 8002582:	bd10      	pop	{r4, pc}
 8002584:	2000005c 	.word	0x2000005c
 8002588:	20005000 	.word	0x20005000
 800258c:	08004f0c 	.word	0x08004f0c

08002590 <memfault_init>:
	NVIC_SetPriority(WWDG_IRQn, 7);
	NVIC_EnableIRQ(WWDG_IRQn);
}

// Initialize memory fault handler
void memfault_init(void) {
 8002590:	b508      	push	{r3, lr}
	SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk; // Enable memfault, bit 16
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <memfault_init+0x1c>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <memfault_init+0x1c>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	6253      	str	r3, [r2, #36]	; 0x24
	NVIC_SetPriority(MemoryManagement_IRQn, 0);
 800259e:	2100      	movs	r1, #0
 80025a0:	f06f 000b 	mvn.w	r0, #11
 80025a4:	f7ff ff64 	bl	8002470 <__NVIC_SetPriority>
}
 80025a8:	bf00      	nop
 80025aa:	bd08      	pop	{r3, pc}
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <led_on>:

// Turn on LED
void led_on(led l) {
 80025b0:	b082      	sub	sp, #8
 80025b2:	4603      	mov	r3, r0
 80025b4:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR |= (1U<<l);
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <led_on+0x24>)
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	4903      	ldr	r1, [pc, #12]	; (80025d4 <led_on+0x24>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	614b      	str	r3, [r1, #20]
}
 80025cc:	bf00      	nop
 80025ce:	b002      	add	sp, #8
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40020c00 	.word	0x40020c00

080025d8 <led_off>:

// Turn off LED
void led_off(led l) {
 80025d8:	b082      	sub	sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR &= ~(1U<<l);
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <led_off+0x24>)
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4902      	ldr	r1, [pc, #8]	; (80025fc <led_off+0x24>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	614b      	str	r3, [r1, #20]
}
 80025f6:	bf00      	nop
 80025f8:	b002      	add	sp, #8
 80025fa:	4770      	bx	lr
 80025fc:	40020c00 	.word	0x40020c00

08002600 <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOD clock
	RCC->AHB1ENR |= 0x00000008;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <led_init+0x34>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <led_init+0x34>)
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	6313      	str	r3, [r2, #48]	; 0x30

	// Turn on output mode
	GPIOD->MODER &= 0x00FFFFFF;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <led_init+0x38>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a09      	ldr	r2, [pc, #36]	; (8002638 <led_init+0x38>)
 8002612:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002616:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0x55000000;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <led_init+0x38>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <led_init+0x38>)
 800261e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8002622:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOD->ODR &= 0x0FFF;
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <led_init+0x38>)
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	4a03      	ldr	r2, [pc, #12]	; (8002638 <led_init+0x38>)
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	6153      	str	r3, [r2, #20]
}
 8002630:	bf00      	nop
 8002632:	4770      	bx	lr
 8002634:	40023800 	.word	0x40023800
 8002638:	40020c00 	.word	0x40020c00

0800263c <mcu_init>:

// Set up LED and fault handlers
void mcu_init(void) {
 800263c:	b508      	push	{r3, lr}
	//wwdg_init();
	memfault_init();
 800263e:	f7ff ffa7 	bl	8002590 <memfault_init>
	led_init();
 8002642:	f7ff ffdd 	bl	8002600 <led_init>
	// Make SVC call priority 3
	NVIC_SetPriority(SVCall_IRQn, 3);
 8002646:	2103      	movs	r1, #3
 8002648:	f06f 0004 	mvn.w	r0, #4
 800264c:	f7ff ff10 	bl	8002470 <__NVIC_SetPriority>
}
 8002650:	bf00      	nop
 8002652:	bd08      	pop	{r3, pc}

08002654 <SystemInit>:
*************************************************/
void SystemInit(void)
{
	/* FPU settings, can be enabled from project makefile */
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <SystemInit+0x50>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <SystemInit+0x50>)
 800265c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <SystemInit+0x54>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <SystemInit+0x54>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <SystemInit+0x54>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <SystemInit+0x54>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <SystemInit+0x54>)
 800267c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <SystemInit+0x54>)
 8002688:	4a08      	ldr	r2, [pc, #32]	; (80026ac <SystemInit+0x58>)
 800268a:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <SystemInit+0x54>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <SystemInit+0x54>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <SystemInit+0x54>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
}
 800269e:	bf00      	nop
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	24003010 	.word	0x24003010

080026b0 <set_sysclk_to_100>:
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_100(void)
{
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 80026b0:	4b2a      	ldr	r3, [pc, #168]	; (800275c <set_sysclk_to_100+0xac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a29      	ldr	r2, [pc, #164]	; (800275c <set_sysclk_to_100+0xac>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 80026bc:	bf00      	nop
 80026be:	4b27      	ldr	r3, [pc, #156]	; (800275c <set_sysclk_to_100+0xac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f9      	beq.n	80026be <set_sysclk_to_100+0xe>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <set_sysclk_to_100+0xac>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a23      	ldr	r2, [pc, #140]	; (800275c <set_sysclk_to_100+0xac>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <set_sysclk_to_100+0xb0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a21      	ldr	r2, [pc, #132]	; (8002760 <set_sysclk_to_100+0xb0>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <set_sysclk_to_100+0xac>)
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <set_sysclk_to_100+0xac>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <set_sysclk_to_100+0xac>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a1b      	ldr	r2, [pc, #108]	; (800275c <set_sysclk_to_100+0xac>)
 80026f0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80026f4:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /2 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (4 << 13);
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <set_sysclk_to_100+0xac>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <set_sysclk_to_100+0xac>)
 80026fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002700:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <set_sysclk_to_100+0xac>)
 8002704:	4a17      	ldr	r2, [pc, #92]	; (8002764 <set_sysclk_to_100+0xb4>)
 8002706:	605a      	str	r2, [r3, #4]
	               (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <set_sysclk_to_100+0xac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <set_sysclk_to_100+0xac>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002712:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 8002714:	bf00      	nop
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <set_sysclk_to_100+0xac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f9      	beq.n	8002716 <set_sysclk_to_100+0x66>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <set_sysclk_to_100+0xb8>)
 8002724:	f240 7205 	movw	r2, #1797	; 0x705
 8002728:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <set_sysclk_to_100+0xac>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <set_sysclk_to_100+0xac>)
 8002730:	f023 0303 	bic.w	r3, r3, #3
 8002734:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <set_sysclk_to_100+0xac>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <set_sysclk_to_100+0xac>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 8002742:	bf00      	nop
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <set_sysclk_to_100+0xac>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f9      	beq.n	8002744 <set_sysclk_to_100+0x94>

	// update SystemCoreClock variable
	SystemCoreClock = 100000000;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <set_sysclk_to_100+0xbc>)
 8002752:	4a07      	ldr	r2, [pc, #28]	; (8002770 <set_sysclk_to_100+0xc0>)
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	08416408 	.word	0x08416408
 8002768:	40023c00 	.word	0x40023c00
 800276c:	20000060 	.word	0x20000060
 8002770:	05f5e100 	.word	0x05f5e100

08002774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002778:	480d      	ldr	r0, [pc, #52]	; (80027b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800277a:	490e      	ldr	r1, [pc, #56]	; (80027b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002780:	e002      	b.n	8002788 <LoopCopyDataInit>

08002782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002786:	3304      	adds	r3, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800278c:	d3f9      	bcc.n	8002782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002790:	4c0b      	ldr	r4, [pc, #44]	; (80027c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002794:	e001      	b.n	800279a <LoopFillZerobss>

08002796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002798:	3204      	adds	r2, #4

0800279a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800279c:	d3fb      	bcc.n	8002796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800279e:	f7ff ff59 	bl	8002654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a2:	f000 f847 	bl	8002834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027a6:	f7fe f987 	bl	8000ab8 <main>
  bx  lr    
 80027aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80027b8:	080057c4 	.word	0x080057c4
  ldr r2, =_sbss
 80027bc:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80027c0:	20000d1c 	.word	0x20000d1c

080027c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC_IRQHandler>
	...

080027c8 <__assert_func>:
 80027c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027ca:	4614      	mov	r4, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <__assert_func+0x2c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4605      	mov	r5, r0
 80027d4:	68d8      	ldr	r0, [r3, #12]
 80027d6:	b14c      	cbz	r4, 80027ec <__assert_func+0x24>
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <__assert_func+0x30>)
 80027da:	9100      	str	r1, [sp, #0]
 80027dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80027e0:	4906      	ldr	r1, [pc, #24]	; (80027fc <__assert_func+0x34>)
 80027e2:	462b      	mov	r3, r5
 80027e4:	f000 f814 	bl	8002810 <fiprintf>
 80027e8:	f000 fdbe 	bl	8003368 <abort>
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <__assert_func+0x38>)
 80027ee:	461c      	mov	r4, r3
 80027f0:	e7f3      	b.n	80027da <__assert_func+0x12>
 80027f2:	bf00      	nop
 80027f4:	20000064 	.word	0x20000064
 80027f8:	08004f32 	.word	0x08004f32
 80027fc:	08004f3f 	.word	0x08004f3f
 8002800:	08004f6d 	.word	0x08004f6d

08002804 <__errno>:
 8002804:	4b01      	ldr	r3, [pc, #4]	; (800280c <__errno+0x8>)
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000064 	.word	0x20000064

08002810 <fiprintf>:
 8002810:	b40e      	push	{r1, r2, r3}
 8002812:	b503      	push	{r0, r1, lr}
 8002814:	4601      	mov	r1, r0
 8002816:	ab03      	add	r3, sp, #12
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <fiprintf+0x20>)
 800281a:	f853 2b04 	ldr.w	r2, [r3], #4
 800281e:	6800      	ldr	r0, [r0, #0]
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	f000 f8ff 	bl	8002a24 <_vfiprintf_r>
 8002826:	b002      	add	sp, #8
 8002828:	f85d eb04 	ldr.w	lr, [sp], #4
 800282c:	b003      	add	sp, #12
 800282e:	4770      	bx	lr
 8002830:	20000064 	.word	0x20000064

08002834 <__libc_init_array>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	4d0d      	ldr	r5, [pc, #52]	; (800286c <__libc_init_array+0x38>)
 8002838:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <__libc_init_array+0x3c>)
 800283a:	1b64      	subs	r4, r4, r5
 800283c:	10a4      	asrs	r4, r4, #2
 800283e:	2600      	movs	r6, #0
 8002840:	42a6      	cmp	r6, r4
 8002842:	d109      	bne.n	8002858 <__libc_init_array+0x24>
 8002844:	4d0b      	ldr	r5, [pc, #44]	; (8002874 <__libc_init_array+0x40>)
 8002846:	4c0c      	ldr	r4, [pc, #48]	; (8002878 <__libc_init_array+0x44>)
 8002848:	f002 f8be 	bl	80049c8 <_init>
 800284c:	1b64      	subs	r4, r4, r5
 800284e:	10a4      	asrs	r4, r4, #2
 8002850:	2600      	movs	r6, #0
 8002852:	42a6      	cmp	r6, r4
 8002854:	d105      	bne.n	8002862 <__libc_init_array+0x2e>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	f855 3b04 	ldr.w	r3, [r5], #4
 800285c:	4798      	blx	r3
 800285e:	3601      	adds	r6, #1
 8002860:	e7ee      	b.n	8002840 <__libc_init_array+0xc>
 8002862:	f855 3b04 	ldr.w	r3, [r5], #4
 8002866:	4798      	blx	r3
 8002868:	3601      	adds	r6, #1
 800286a:	e7f2      	b.n	8002852 <__libc_init_array+0x1e>
 800286c:	080057bc 	.word	0x080057bc
 8002870:	080057bc 	.word	0x080057bc
 8002874:	080057bc 	.word	0x080057bc
 8002878:	080057c0 	.word	0x080057c0

0800287c <memcpy>:
 800287c:	440a      	add	r2, r1
 800287e:	4291      	cmp	r1, r2
 8002880:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002884:	d100      	bne.n	8002888 <memcpy+0xc>
 8002886:	4770      	bx	lr
 8002888:	b510      	push	{r4, lr}
 800288a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800288e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002892:	4291      	cmp	r1, r2
 8002894:	d1f9      	bne.n	800288a <memcpy+0xe>
 8002896:	bd10      	pop	{r4, pc}

08002898 <memset>:
 8002898:	4402      	add	r2, r0
 800289a:	4603      	mov	r3, r0
 800289c:	4293      	cmp	r3, r2
 800289e:	d100      	bne.n	80028a2 <memset+0xa>
 80028a0:	4770      	bx	lr
 80028a2:	f803 1b01 	strb.w	r1, [r3], #1
 80028a6:	e7f9      	b.n	800289c <memset+0x4>

080028a8 <sbrk_aligned>:
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	4e0e      	ldr	r6, [pc, #56]	; (80028e4 <sbrk_aligned+0x3c>)
 80028ac:	460c      	mov	r4, r1
 80028ae:	6831      	ldr	r1, [r6, #0]
 80028b0:	4605      	mov	r5, r0
 80028b2:	b911      	cbnz	r1, 80028ba <sbrk_aligned+0x12>
 80028b4:	f000 f9e4 	bl	8002c80 <_sbrk_r>
 80028b8:	6030      	str	r0, [r6, #0]
 80028ba:	4621      	mov	r1, r4
 80028bc:	4628      	mov	r0, r5
 80028be:	f000 f9df 	bl	8002c80 <_sbrk_r>
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	d00a      	beq.n	80028dc <sbrk_aligned+0x34>
 80028c6:	1cc4      	adds	r4, r0, #3
 80028c8:	f024 0403 	bic.w	r4, r4, #3
 80028cc:	42a0      	cmp	r0, r4
 80028ce:	d007      	beq.n	80028e0 <sbrk_aligned+0x38>
 80028d0:	1a21      	subs	r1, r4, r0
 80028d2:	4628      	mov	r0, r5
 80028d4:	f000 f9d4 	bl	8002c80 <_sbrk_r>
 80028d8:	3001      	adds	r0, #1
 80028da:	d101      	bne.n	80028e0 <sbrk_aligned+0x38>
 80028dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80028e0:	4620      	mov	r0, r4
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	20000d0c 	.word	0x20000d0c

080028e8 <_malloc_r>:
 80028e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ec:	1ccd      	adds	r5, r1, #3
 80028ee:	f025 0503 	bic.w	r5, r5, #3
 80028f2:	3508      	adds	r5, #8
 80028f4:	2d0c      	cmp	r5, #12
 80028f6:	bf38      	it	cc
 80028f8:	250c      	movcc	r5, #12
 80028fa:	2d00      	cmp	r5, #0
 80028fc:	4607      	mov	r7, r0
 80028fe:	db01      	blt.n	8002904 <_malloc_r+0x1c>
 8002900:	42a9      	cmp	r1, r5
 8002902:	d905      	bls.n	8002910 <_malloc_r+0x28>
 8002904:	230c      	movs	r3, #12
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	2600      	movs	r6, #0
 800290a:	4630      	mov	r0, r6
 800290c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002910:	4e2e      	ldr	r6, [pc, #184]	; (80029cc <_malloc_r+0xe4>)
 8002912:	f000 ff8d 	bl	8003830 <__malloc_lock>
 8002916:	6833      	ldr	r3, [r6, #0]
 8002918:	461c      	mov	r4, r3
 800291a:	bb34      	cbnz	r4, 800296a <_malloc_r+0x82>
 800291c:	4629      	mov	r1, r5
 800291e:	4638      	mov	r0, r7
 8002920:	f7ff ffc2 	bl	80028a8 <sbrk_aligned>
 8002924:	1c43      	adds	r3, r0, #1
 8002926:	4604      	mov	r4, r0
 8002928:	d14d      	bne.n	80029c6 <_malloc_r+0xde>
 800292a:	6834      	ldr	r4, [r6, #0]
 800292c:	4626      	mov	r6, r4
 800292e:	2e00      	cmp	r6, #0
 8002930:	d140      	bne.n	80029b4 <_malloc_r+0xcc>
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	4631      	mov	r1, r6
 8002936:	4638      	mov	r0, r7
 8002938:	eb04 0803 	add.w	r8, r4, r3
 800293c:	f000 f9a0 	bl	8002c80 <_sbrk_r>
 8002940:	4580      	cmp	r8, r0
 8002942:	d13a      	bne.n	80029ba <_malloc_r+0xd2>
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	3503      	adds	r5, #3
 8002948:	1aed      	subs	r5, r5, r3
 800294a:	f025 0503 	bic.w	r5, r5, #3
 800294e:	3508      	adds	r5, #8
 8002950:	2d0c      	cmp	r5, #12
 8002952:	bf38      	it	cc
 8002954:	250c      	movcc	r5, #12
 8002956:	4629      	mov	r1, r5
 8002958:	4638      	mov	r0, r7
 800295a:	f7ff ffa5 	bl	80028a8 <sbrk_aligned>
 800295e:	3001      	adds	r0, #1
 8002960:	d02b      	beq.n	80029ba <_malloc_r+0xd2>
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	442b      	add	r3, r5
 8002966:	6023      	str	r3, [r4, #0]
 8002968:	e00e      	b.n	8002988 <_malloc_r+0xa0>
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	1b52      	subs	r2, r2, r5
 800296e:	d41e      	bmi.n	80029ae <_malloc_r+0xc6>
 8002970:	2a0b      	cmp	r2, #11
 8002972:	d916      	bls.n	80029a2 <_malloc_r+0xba>
 8002974:	1961      	adds	r1, r4, r5
 8002976:	42a3      	cmp	r3, r4
 8002978:	6025      	str	r5, [r4, #0]
 800297a:	bf18      	it	ne
 800297c:	6059      	strne	r1, [r3, #4]
 800297e:	6863      	ldr	r3, [r4, #4]
 8002980:	bf08      	it	eq
 8002982:	6031      	streq	r1, [r6, #0]
 8002984:	5162      	str	r2, [r4, r5]
 8002986:	604b      	str	r3, [r1, #4]
 8002988:	4638      	mov	r0, r7
 800298a:	f104 060b 	add.w	r6, r4, #11
 800298e:	f000 ff55 	bl	800383c <__malloc_unlock>
 8002992:	f026 0607 	bic.w	r6, r6, #7
 8002996:	1d23      	adds	r3, r4, #4
 8002998:	1af2      	subs	r2, r6, r3
 800299a:	d0b6      	beq.n	800290a <_malloc_r+0x22>
 800299c:	1b9b      	subs	r3, r3, r6
 800299e:	50a3      	str	r3, [r4, r2]
 80029a0:	e7b3      	b.n	800290a <_malloc_r+0x22>
 80029a2:	6862      	ldr	r2, [r4, #4]
 80029a4:	42a3      	cmp	r3, r4
 80029a6:	bf0c      	ite	eq
 80029a8:	6032      	streq	r2, [r6, #0]
 80029aa:	605a      	strne	r2, [r3, #4]
 80029ac:	e7ec      	b.n	8002988 <_malloc_r+0xa0>
 80029ae:	4623      	mov	r3, r4
 80029b0:	6864      	ldr	r4, [r4, #4]
 80029b2:	e7b2      	b.n	800291a <_malloc_r+0x32>
 80029b4:	4634      	mov	r4, r6
 80029b6:	6876      	ldr	r6, [r6, #4]
 80029b8:	e7b9      	b.n	800292e <_malloc_r+0x46>
 80029ba:	230c      	movs	r3, #12
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4638      	mov	r0, r7
 80029c0:	f000 ff3c 	bl	800383c <__malloc_unlock>
 80029c4:	e7a1      	b.n	800290a <_malloc_r+0x22>
 80029c6:	6025      	str	r5, [r4, #0]
 80029c8:	e7de      	b.n	8002988 <_malloc_r+0xa0>
 80029ca:	bf00      	nop
 80029cc:	20000d08 	.word	0x20000d08

080029d0 <__sfputc_r>:
 80029d0:	6893      	ldr	r3, [r2, #8]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	b410      	push	{r4}
 80029d8:	6093      	str	r3, [r2, #8]
 80029da:	da08      	bge.n	80029ee <__sfputc_r+0x1e>
 80029dc:	6994      	ldr	r4, [r2, #24]
 80029de:	42a3      	cmp	r3, r4
 80029e0:	db01      	blt.n	80029e6 <__sfputc_r+0x16>
 80029e2:	290a      	cmp	r1, #10
 80029e4:	d103      	bne.n	80029ee <__sfputc_r+0x1e>
 80029e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029ea:	f000 bbeb 	b.w	80031c4 <__swbuf_r>
 80029ee:	6813      	ldr	r3, [r2, #0]
 80029f0:	1c58      	adds	r0, r3, #1
 80029f2:	6010      	str	r0, [r2, #0]
 80029f4:	7019      	strb	r1, [r3, #0]
 80029f6:	4608      	mov	r0, r1
 80029f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <__sfputs_r>:
 80029fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a00:	4606      	mov	r6, r0
 8002a02:	460f      	mov	r7, r1
 8002a04:	4614      	mov	r4, r2
 8002a06:	18d5      	adds	r5, r2, r3
 8002a08:	42ac      	cmp	r4, r5
 8002a0a:	d101      	bne.n	8002a10 <__sfputs_r+0x12>
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	e007      	b.n	8002a20 <__sfputs_r+0x22>
 8002a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a14:	463a      	mov	r2, r7
 8002a16:	4630      	mov	r0, r6
 8002a18:	f7ff ffda 	bl	80029d0 <__sfputc_r>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d1f3      	bne.n	8002a08 <__sfputs_r+0xa>
 8002a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a24 <_vfiprintf_r>:
 8002a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a28:	460d      	mov	r5, r1
 8002a2a:	b09d      	sub	sp, #116	; 0x74
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	4698      	mov	r8, r3
 8002a30:	4606      	mov	r6, r0
 8002a32:	b118      	cbz	r0, 8002a3c <_vfiprintf_r+0x18>
 8002a34:	6983      	ldr	r3, [r0, #24]
 8002a36:	b90b      	cbnz	r3, 8002a3c <_vfiprintf_r+0x18>
 8002a38:	f000 fdc8 	bl	80035cc <__sinit>
 8002a3c:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <_vfiprintf_r+0x23c>)
 8002a3e:	429d      	cmp	r5, r3
 8002a40:	d11b      	bne.n	8002a7a <_vfiprintf_r+0x56>
 8002a42:	6875      	ldr	r5, [r6, #4]
 8002a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a46:	07d9      	lsls	r1, r3, #31
 8002a48:	d405      	bmi.n	8002a56 <_vfiprintf_r+0x32>
 8002a4a:	89ab      	ldrh	r3, [r5, #12]
 8002a4c:	059a      	lsls	r2, r3, #22
 8002a4e:	d402      	bmi.n	8002a56 <_vfiprintf_r+0x32>
 8002a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a52:	f000 fe59 	bl	8003708 <__retarget_lock_acquire_recursive>
 8002a56:	89ab      	ldrh	r3, [r5, #12]
 8002a58:	071b      	lsls	r3, r3, #28
 8002a5a:	d501      	bpl.n	8002a60 <_vfiprintf_r+0x3c>
 8002a5c:	692b      	ldr	r3, [r5, #16]
 8002a5e:	b9eb      	cbnz	r3, 8002a9c <_vfiprintf_r+0x78>
 8002a60:	4629      	mov	r1, r5
 8002a62:	4630      	mov	r0, r6
 8002a64:	f000 fc12 	bl	800328c <__swsetup_r>
 8002a68:	b1c0      	cbz	r0, 8002a9c <_vfiprintf_r+0x78>
 8002a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a6c:	07dc      	lsls	r4, r3, #31
 8002a6e:	d50e      	bpl.n	8002a8e <_vfiprintf_r+0x6a>
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a74:	b01d      	add	sp, #116	; 0x74
 8002a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a7a:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <_vfiprintf_r+0x240>)
 8002a7c:	429d      	cmp	r5, r3
 8002a7e:	d101      	bne.n	8002a84 <_vfiprintf_r+0x60>
 8002a80:	68b5      	ldr	r5, [r6, #8]
 8002a82:	e7df      	b.n	8002a44 <_vfiprintf_r+0x20>
 8002a84:	4b78      	ldr	r3, [pc, #480]	; (8002c68 <_vfiprintf_r+0x244>)
 8002a86:	429d      	cmp	r5, r3
 8002a88:	bf08      	it	eq
 8002a8a:	68f5      	ldreq	r5, [r6, #12]
 8002a8c:	e7da      	b.n	8002a44 <_vfiprintf_r+0x20>
 8002a8e:	89ab      	ldrh	r3, [r5, #12]
 8002a90:	0598      	lsls	r0, r3, #22
 8002a92:	d4ed      	bmi.n	8002a70 <_vfiprintf_r+0x4c>
 8002a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a96:	f000 fe38 	bl	800370a <__retarget_lock_release_recursive>
 8002a9a:	e7e9      	b.n	8002a70 <_vfiprintf_r+0x4c>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002aaa:	2330      	movs	r3, #48	; 0x30
 8002aac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002c6c <_vfiprintf_r+0x248>
 8002ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ab4:	f04f 0901 	mov.w	r9, #1
 8002ab8:	4623      	mov	r3, r4
 8002aba:	469a      	mov	sl, r3
 8002abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ac0:	b10a      	cbz	r2, 8002ac6 <_vfiprintf_r+0xa2>
 8002ac2:	2a25      	cmp	r2, #37	; 0x25
 8002ac4:	d1f9      	bne.n	8002aba <_vfiprintf_r+0x96>
 8002ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8002aca:	d00b      	beq.n	8002ae4 <_vfiprintf_r+0xc0>
 8002acc:	465b      	mov	r3, fp
 8002ace:	4622      	mov	r2, r4
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	4630      	mov	r0, r6
 8002ad4:	f7ff ff93 	bl	80029fe <__sfputs_r>
 8002ad8:	3001      	adds	r0, #1
 8002ada:	f000 80a9 	beq.w	8002c30 <_vfiprintf_r+0x20c>
 8002ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ae0:	445a      	add	r2, fp
 8002ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a1 	beq.w	8002c30 <_vfiprintf_r+0x20c>
 8002aee:	2300      	movs	r3, #0
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002af8:	f10a 0a01 	add.w	sl, sl, #1
 8002afc:	9304      	str	r3, [sp, #16]
 8002afe:	9307      	str	r3, [sp, #28]
 8002b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b04:	931a      	str	r3, [sp, #104]	; 0x68
 8002b06:	4654      	mov	r4, sl
 8002b08:	2205      	movs	r2, #5
 8002b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b0e:	4857      	ldr	r0, [pc, #348]	; (8002c6c <_vfiprintf_r+0x248>)
 8002b10:	f7fd fb4e 	bl	80001b0 <memchr>
 8002b14:	9a04      	ldr	r2, [sp, #16]
 8002b16:	b9d8      	cbnz	r0, 8002b50 <_vfiprintf_r+0x12c>
 8002b18:	06d1      	lsls	r1, r2, #27
 8002b1a:	bf44      	itt	mi
 8002b1c:	2320      	movmi	r3, #32
 8002b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b22:	0713      	lsls	r3, r2, #28
 8002b24:	bf44      	itt	mi
 8002b26:	232b      	movmi	r3, #43	; 0x2b
 8002b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8002b30:	2b2a      	cmp	r3, #42	; 0x2a
 8002b32:	d015      	beq.n	8002b60 <_vfiprintf_r+0x13c>
 8002b34:	9a07      	ldr	r2, [sp, #28]
 8002b36:	4654      	mov	r4, sl
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f04f 0c0a 	mov.w	ip, #10
 8002b3e:	4621      	mov	r1, r4
 8002b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b44:	3b30      	subs	r3, #48	; 0x30
 8002b46:	2b09      	cmp	r3, #9
 8002b48:	d94d      	bls.n	8002be6 <_vfiprintf_r+0x1c2>
 8002b4a:	b1b0      	cbz	r0, 8002b7a <_vfiprintf_r+0x156>
 8002b4c:	9207      	str	r2, [sp, #28]
 8002b4e:	e014      	b.n	8002b7a <_vfiprintf_r+0x156>
 8002b50:	eba0 0308 	sub.w	r3, r0, r8
 8002b54:	fa09 f303 	lsl.w	r3, r9, r3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	9304      	str	r3, [sp, #16]
 8002b5c:	46a2      	mov	sl, r4
 8002b5e:	e7d2      	b.n	8002b06 <_vfiprintf_r+0xe2>
 8002b60:	9b03      	ldr	r3, [sp, #12]
 8002b62:	1d19      	adds	r1, r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	9103      	str	r1, [sp, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bfbb      	ittet	lt
 8002b6c:	425b      	neglt	r3, r3
 8002b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8002b72:	9307      	strge	r3, [sp, #28]
 8002b74:	9307      	strlt	r3, [sp, #28]
 8002b76:	bfb8      	it	lt
 8002b78:	9204      	strlt	r2, [sp, #16]
 8002b7a:	7823      	ldrb	r3, [r4, #0]
 8002b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b7e:	d10c      	bne.n	8002b9a <_vfiprintf_r+0x176>
 8002b80:	7863      	ldrb	r3, [r4, #1]
 8002b82:	2b2a      	cmp	r3, #42	; 0x2a
 8002b84:	d134      	bne.n	8002bf0 <_vfiprintf_r+0x1cc>
 8002b86:	9b03      	ldr	r3, [sp, #12]
 8002b88:	1d1a      	adds	r2, r3, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	9203      	str	r2, [sp, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bfb8      	it	lt
 8002b92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002b96:	3402      	adds	r4, #2
 8002b98:	9305      	str	r3, [sp, #20]
 8002b9a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8002c7c <_vfiprintf_r+0x258>
 8002b9e:	7821      	ldrb	r1, [r4, #0]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	4650      	mov	r0, sl
 8002ba4:	f7fd fb04 	bl	80001b0 <memchr>
 8002ba8:	b138      	cbz	r0, 8002bba <_vfiprintf_r+0x196>
 8002baa:	9b04      	ldr	r3, [sp, #16]
 8002bac:	eba0 000a 	sub.w	r0, r0, sl
 8002bb0:	2240      	movs	r2, #64	; 0x40
 8002bb2:	4082      	lsls	r2, r0
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	3401      	adds	r4, #1
 8002bb8:	9304      	str	r3, [sp, #16]
 8002bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bbe:	482c      	ldr	r0, [pc, #176]	; (8002c70 <_vfiprintf_r+0x24c>)
 8002bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bc4:	2206      	movs	r2, #6
 8002bc6:	f7fd faf3 	bl	80001b0 <memchr>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d03f      	beq.n	8002c4e <_vfiprintf_r+0x22a>
 8002bce:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <_vfiprintf_r+0x250>)
 8002bd0:	bb1b      	cbnz	r3, 8002c1a <_vfiprintf_r+0x1f6>
 8002bd2:	9b03      	ldr	r3, [sp, #12]
 8002bd4:	3307      	adds	r3, #7
 8002bd6:	f023 0307 	bic.w	r3, r3, #7
 8002bda:	3308      	adds	r3, #8
 8002bdc:	9303      	str	r3, [sp, #12]
 8002bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002be0:	443b      	add	r3, r7
 8002be2:	9309      	str	r3, [sp, #36]	; 0x24
 8002be4:	e768      	b.n	8002ab8 <_vfiprintf_r+0x94>
 8002be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bea:	460c      	mov	r4, r1
 8002bec:	2001      	movs	r0, #1
 8002bee:	e7a6      	b.n	8002b3e <_vfiprintf_r+0x11a>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	3401      	adds	r4, #1
 8002bf4:	9305      	str	r3, [sp, #20]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f04f 0c0a 	mov.w	ip, #10
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c02:	3a30      	subs	r2, #48	; 0x30
 8002c04:	2a09      	cmp	r2, #9
 8002c06:	d903      	bls.n	8002c10 <_vfiprintf_r+0x1ec>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0c6      	beq.n	8002b9a <_vfiprintf_r+0x176>
 8002c0c:	9105      	str	r1, [sp, #20]
 8002c0e:	e7c4      	b.n	8002b9a <_vfiprintf_r+0x176>
 8002c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c14:	4604      	mov	r4, r0
 8002c16:	2301      	movs	r3, #1
 8002c18:	e7f0      	b.n	8002bfc <_vfiprintf_r+0x1d8>
 8002c1a:	ab03      	add	r3, sp, #12
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	462a      	mov	r2, r5
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <_vfiprintf_r+0x254>)
 8002c22:	a904      	add	r1, sp, #16
 8002c24:	4630      	mov	r0, r6
 8002c26:	f3af 8000 	nop.w
 8002c2a:	4607      	mov	r7, r0
 8002c2c:	1c78      	adds	r0, r7, #1
 8002c2e:	d1d6      	bne.n	8002bde <_vfiprintf_r+0x1ba>
 8002c30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c32:	07d9      	lsls	r1, r3, #31
 8002c34:	d405      	bmi.n	8002c42 <_vfiprintf_r+0x21e>
 8002c36:	89ab      	ldrh	r3, [r5, #12]
 8002c38:	059a      	lsls	r2, r3, #22
 8002c3a:	d402      	bmi.n	8002c42 <_vfiprintf_r+0x21e>
 8002c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c3e:	f000 fd64 	bl	800370a <__retarget_lock_release_recursive>
 8002c42:	89ab      	ldrh	r3, [r5, #12]
 8002c44:	065b      	lsls	r3, r3, #25
 8002c46:	f53f af13 	bmi.w	8002a70 <_vfiprintf_r+0x4c>
 8002c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c4c:	e712      	b.n	8002a74 <_vfiprintf_r+0x50>
 8002c4e:	ab03      	add	r3, sp, #12
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	462a      	mov	r2, r5
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <_vfiprintf_r+0x254>)
 8002c56:	a904      	add	r1, sp, #16
 8002c58:	4630      	mov	r0, r6
 8002c5a:	f001 fa09 	bl	8004070 <_printf_i>
 8002c5e:	e7e4      	b.n	8002c2a <_vfiprintf_r+0x206>
 8002c60:	0800563c 	.word	0x0800563c
 8002c64:	0800565c 	.word	0x0800565c
 8002c68:	0800561c 	.word	0x0800561c
 8002c6c:	08004f74 	.word	0x08004f74
 8002c70:	08004f7e 	.word	0x08004f7e
 8002c74:	00000000 	.word	0x00000000
 8002c78:	080029ff 	.word	0x080029ff
 8002c7c:	08004f7a 	.word	0x08004f7a

08002c80 <_sbrk_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4d06      	ldr	r5, [pc, #24]	; (8002c9c <_sbrk_r+0x1c>)
 8002c84:	2300      	movs	r3, #0
 8002c86:	4604      	mov	r4, r0
 8002c88:	4608      	mov	r0, r1
 8002c8a:	602b      	str	r3, [r5, #0]
 8002c8c:	f001 fe84 	bl	8004998 <_sbrk>
 8002c90:	1c43      	adds	r3, r0, #1
 8002c92:	d102      	bne.n	8002c9a <_sbrk_r+0x1a>
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	b103      	cbz	r3, 8002c9a <_sbrk_r+0x1a>
 8002c98:	6023      	str	r3, [r4, #0]
 8002c9a:	bd38      	pop	{r3, r4, r5, pc}
 8002c9c:	20000d14 	.word	0x20000d14

08002ca0 <siprintf>:
 8002ca0:	b40e      	push	{r1, r2, r3}
 8002ca2:	b500      	push	{lr}
 8002ca4:	b09c      	sub	sp, #112	; 0x70
 8002ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8002ca8:	9002      	str	r0, [sp, #8]
 8002caa:	9006      	str	r0, [sp, #24]
 8002cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cb0:	4809      	ldr	r0, [pc, #36]	; (8002cd8 <siprintf+0x38>)
 8002cb2:	9107      	str	r1, [sp, #28]
 8002cb4:	9104      	str	r1, [sp, #16]
 8002cb6:	4909      	ldr	r1, [pc, #36]	; (8002cdc <siprintf+0x3c>)
 8002cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cbc:	9105      	str	r1, [sp, #20]
 8002cbe:	6800      	ldr	r0, [r0, #0]
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	a902      	add	r1, sp, #8
 8002cc4:	f000 fe96 	bl	80039f4 <_svfiprintf_r>
 8002cc8:	9b02      	ldr	r3, [sp, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	b01c      	add	sp, #112	; 0x70
 8002cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cd4:	b003      	add	sp, #12
 8002cd6:	4770      	bx	lr
 8002cd8:	20000064 	.word	0x20000064
 8002cdc:	ffff0208 	.word	0xffff0208

08002ce0 <siscanf>:
 8002ce0:	b40e      	push	{r1, r2, r3}
 8002ce2:	b510      	push	{r4, lr}
 8002ce4:	b09f      	sub	sp, #124	; 0x7c
 8002ce6:	ac21      	add	r4, sp, #132	; 0x84
 8002ce8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002cec:	f854 2b04 	ldr.w	r2, [r4], #4
 8002cf0:	9201      	str	r2, [sp, #4]
 8002cf2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8002cf6:	9004      	str	r0, [sp, #16]
 8002cf8:	9008      	str	r0, [sp, #32]
 8002cfa:	f7fd fa51 	bl	80001a0 <strlen>
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <siscanf+0x50>)
 8002d00:	9005      	str	r0, [sp, #20]
 8002d02:	9009      	str	r0, [sp, #36]	; 0x24
 8002d04:	930d      	str	r3, [sp, #52]	; 0x34
 8002d06:	480b      	ldr	r0, [pc, #44]	; (8002d34 <siscanf+0x54>)
 8002d08:	9a01      	ldr	r2, [sp, #4]
 8002d0a:	6800      	ldr	r0, [r0, #0]
 8002d0c:	9403      	str	r4, [sp, #12]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9311      	str	r3, [sp, #68]	; 0x44
 8002d12:	9316      	str	r3, [sp, #88]	; 0x58
 8002d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d18:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002d1c:	a904      	add	r1, sp, #16
 8002d1e:	4623      	mov	r3, r4
 8002d20:	f000 ffc0 	bl	8003ca4 <__ssvfiscanf_r>
 8002d24:	b01f      	add	sp, #124	; 0x7c
 8002d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d2a:	b003      	add	sp, #12
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	08002d5b 	.word	0x08002d5b
 8002d34:	20000064 	.word	0x20000064

08002d38 <__sread>:
 8002d38:	b510      	push	{r4, lr}
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d40:	f001 fc06 	bl	8004550 <_read_r>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	bfab      	itete	ge
 8002d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8002d4c:	181b      	addge	r3, r3, r0
 8002d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d52:	bfac      	ite	ge
 8002d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d56:	81a3      	strhlt	r3, [r4, #12]
 8002d58:	bd10      	pop	{r4, pc}

08002d5a <__seofread>:
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	4770      	bx	lr

08002d5e <__swrite>:
 8002d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d62:	461f      	mov	r7, r3
 8002d64:	898b      	ldrh	r3, [r1, #12]
 8002d66:	05db      	lsls	r3, r3, #23
 8002d68:	4605      	mov	r5, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	4616      	mov	r6, r2
 8002d6e:	d505      	bpl.n	8002d7c <__swrite+0x1e>
 8002d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d74:	2302      	movs	r3, #2
 8002d76:	2200      	movs	r2, #0
 8002d78:	f000 fcc8 	bl	800370c <_lseek_r>
 8002d7c:	89a3      	ldrh	r3, [r4, #12]
 8002d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d86:	81a3      	strh	r3, [r4, #12]
 8002d88:	4632      	mov	r2, r6
 8002d8a:	463b      	mov	r3, r7
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d92:	f000 ba69 	b.w	8003268 <_write_r>

08002d96 <__sseek>:
 8002d96:	b510      	push	{r4, lr}
 8002d98:	460c      	mov	r4, r1
 8002d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d9e:	f000 fcb5 	bl	800370c <_lseek_r>
 8002da2:	1c43      	adds	r3, r0, #1
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	bf15      	itete	ne
 8002da8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002daa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002dae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002db2:	81a3      	strheq	r3, [r4, #12]
 8002db4:	bf18      	it	ne
 8002db6:	81a3      	strhne	r3, [r4, #12]
 8002db8:	bd10      	pop	{r4, pc}

08002dba <__sclose>:
 8002dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dbe:	f000 badb 	b.w	8003378 <_close_r>

08002dc2 <strcat>:
 8002dc2:	b510      	push	{r4, lr}
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	7814      	ldrb	r4, [r2, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	3201      	adds	r2, #1
 8002dcc:	2c00      	cmp	r4, #0
 8002dce:	d1fa      	bne.n	8002dc6 <strcat+0x4>
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	d1f9      	bne.n	8002dd2 <strcat+0x10>
 8002dde:	bd10      	pop	{r4, pc}

08002de0 <_strerror_r>:
 8002de0:	b510      	push	{r4, lr}
 8002de2:	4604      	mov	r4, r0
 8002de4:	4608      	mov	r0, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	288e      	cmp	r0, #142	; 0x8e
 8002dea:	f200 8130 	bhi.w	800304e <_strerror_r+0x26e>
 8002dee:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002df2:	0139      	.short	0x0139
 8002df4:	0092008f 	.word	0x0092008f
 8002df8:	00960094 	.word	0x00960094
 8002dfc:	009a0098 	.word	0x009a0098
 8002e00:	009e009c 	.word	0x009e009c
 8002e04:	00a400a2 	.word	0x00a400a2
 8002e08:	00aa00a8 	.word	0x00aa00a8
 8002e0c:	00ae00ac 	.word	0x00ae00ac
 8002e10:	00b0012e 	.word	0x00b0012e
 8002e14:	00b400b2 	.word	0x00b400b2
 8002e18:	00b800b6 	.word	0x00b800b6
 8002e1c:	00c000be 	.word	0x00c000be
 8002e20:	00c800c6 	.word	0x00c800c6
 8002e24:	00cc00ca 	.word	0x00cc00ca
 8002e28:	00d200ce 	.word	0x00d200ce
 8002e2c:	00d800d6 	.word	0x00d800d6
 8002e30:	00dc00da 	.word	0x00dc00da
 8002e34:	00e000de 	.word	0x00e000de
 8002e38:	00e400e2 	.word	0x00e400e2
 8002e3c:	012e012e 	.word	0x012e012e
 8002e40:	012e012e 	.word	0x012e012e
 8002e44:	012e012e 	.word	0x012e012e
 8002e48:	012e012e 	.word	0x012e012e
 8002e4c:	00ec00e8 	.word	0x00ec00e8
 8002e50:	012e012e 	.word	0x012e012e
 8002e54:	012e012e 	.word	0x012e012e
 8002e58:	012e012e 	.word	0x012e012e
 8002e5c:	012e012e 	.word	0x012e012e
 8002e60:	012e012e 	.word	0x012e012e
 8002e64:	012e012e 	.word	0x012e012e
 8002e68:	00ee012e 	.word	0x00ee012e
 8002e6c:	00f00108 	.word	0x00f00108
 8002e70:	012e00f2 	.word	0x012e00f2
 8002e74:	012e012e 	.word	0x012e012e
 8002e78:	012e00f4 	.word	0x012e00f4
 8002e7c:	012e012e 	.word	0x012e012e
 8002e80:	012e00f6 	.word	0x012e00f6
 8002e84:	00fa012e 	.word	0x00fa012e
 8002e88:	012e012e 	.word	0x012e012e
 8002e8c:	012e00fc 	.word	0x012e00fc
 8002e90:	012e012e 	.word	0x012e012e
 8002e94:	012e012e 	.word	0x012e012e
 8002e98:	012e012e 	.word	0x012e012e
 8002e9c:	012e012e 	.word	0x012e012e
 8002ea0:	00fe012e 	.word	0x00fe012e
 8002ea4:	0100012e 	.word	0x0100012e
 8002ea8:	01040102 	.word	0x01040102
 8002eac:	012e012e 	.word	0x012e012e
 8002eb0:	012e0126 	.word	0x012e0126
 8002eb4:	012e012e 	.word	0x012e012e
 8002eb8:	012e012e 	.word	0x012e012e
 8002ebc:	012e012e 	.word	0x012e012e
 8002ec0:	0114012e 	.word	0x0114012e
 8002ec4:	010a0106 	.word	0x010a0106
 8002ec8:	010e010c 	.word	0x010e010c
 8002ecc:	012e0110 	.word	0x012e0110
 8002ed0:	01160112 	.word	0x01160112
 8002ed4:	00ea011a 	.word	0x00ea011a
 8002ed8:	012c00c2 	.word	0x012c00c2
 8002edc:	00d000ba 	.word	0x00d000ba
 8002ee0:	00a000bc 	.word	0x00a000bc
 8002ee4:	012a00a6 	.word	0x012a00a6
 8002ee8:	012e00f8 	.word	0x012e00f8
 8002eec:	00c40118 	.word	0x00c40118
 8002ef0:	011c011e 	.word	0x011c011e
 8002ef4:	012e012e 	.word	0x012e012e
 8002ef8:	012e012e 	.word	0x012e012e
 8002efc:	00d4012e 	.word	0x00d4012e
 8002f00:	012e012e 	.word	0x012e012e
 8002f04:	00e6012e 	.word	0x00e6012e
 8002f08:	01200128 	.word	0x01200128
 8002f0c:	01240122 	.word	0x01240122
 8002f10:	4b55      	ldr	r3, [pc, #340]	; (8003068 <_strerror_r+0x288>)
 8002f12:	4618      	mov	r0, r3
 8002f14:	bd10      	pop	{r4, pc}
 8002f16:	4b55      	ldr	r3, [pc, #340]	; (800306c <_strerror_r+0x28c>)
 8002f18:	e7fb      	b.n	8002f12 <_strerror_r+0x132>
 8002f1a:	4b55      	ldr	r3, [pc, #340]	; (8003070 <_strerror_r+0x290>)
 8002f1c:	e7f9      	b.n	8002f12 <_strerror_r+0x132>
 8002f1e:	4b55      	ldr	r3, [pc, #340]	; (8003074 <_strerror_r+0x294>)
 8002f20:	e7f7      	b.n	8002f12 <_strerror_r+0x132>
 8002f22:	4b55      	ldr	r3, [pc, #340]	; (8003078 <_strerror_r+0x298>)
 8002f24:	e7f5      	b.n	8002f12 <_strerror_r+0x132>
 8002f26:	4b55      	ldr	r3, [pc, #340]	; (800307c <_strerror_r+0x29c>)
 8002f28:	e7f3      	b.n	8002f12 <_strerror_r+0x132>
 8002f2a:	4b55      	ldr	r3, [pc, #340]	; (8003080 <_strerror_r+0x2a0>)
 8002f2c:	e7f1      	b.n	8002f12 <_strerror_r+0x132>
 8002f2e:	4b55      	ldr	r3, [pc, #340]	; (8003084 <_strerror_r+0x2a4>)
 8002f30:	e7ef      	b.n	8002f12 <_strerror_r+0x132>
 8002f32:	4b55      	ldr	r3, [pc, #340]	; (8003088 <_strerror_r+0x2a8>)
 8002f34:	e7ed      	b.n	8002f12 <_strerror_r+0x132>
 8002f36:	4b55      	ldr	r3, [pc, #340]	; (800308c <_strerror_r+0x2ac>)
 8002f38:	e7eb      	b.n	8002f12 <_strerror_r+0x132>
 8002f3a:	4b55      	ldr	r3, [pc, #340]	; (8003090 <_strerror_r+0x2b0>)
 8002f3c:	e7e9      	b.n	8002f12 <_strerror_r+0x132>
 8002f3e:	4b55      	ldr	r3, [pc, #340]	; (8003094 <_strerror_r+0x2b4>)
 8002f40:	e7e7      	b.n	8002f12 <_strerror_r+0x132>
 8002f42:	4b55      	ldr	r3, [pc, #340]	; (8003098 <_strerror_r+0x2b8>)
 8002f44:	e7e5      	b.n	8002f12 <_strerror_r+0x132>
 8002f46:	4b55      	ldr	r3, [pc, #340]	; (800309c <_strerror_r+0x2bc>)
 8002f48:	e7e3      	b.n	8002f12 <_strerror_r+0x132>
 8002f4a:	4b55      	ldr	r3, [pc, #340]	; (80030a0 <_strerror_r+0x2c0>)
 8002f4c:	e7e1      	b.n	8002f12 <_strerror_r+0x132>
 8002f4e:	4b55      	ldr	r3, [pc, #340]	; (80030a4 <_strerror_r+0x2c4>)
 8002f50:	e7df      	b.n	8002f12 <_strerror_r+0x132>
 8002f52:	4b55      	ldr	r3, [pc, #340]	; (80030a8 <_strerror_r+0x2c8>)
 8002f54:	e7dd      	b.n	8002f12 <_strerror_r+0x132>
 8002f56:	4b55      	ldr	r3, [pc, #340]	; (80030ac <_strerror_r+0x2cc>)
 8002f58:	e7db      	b.n	8002f12 <_strerror_r+0x132>
 8002f5a:	4b55      	ldr	r3, [pc, #340]	; (80030b0 <_strerror_r+0x2d0>)
 8002f5c:	e7d9      	b.n	8002f12 <_strerror_r+0x132>
 8002f5e:	4b55      	ldr	r3, [pc, #340]	; (80030b4 <_strerror_r+0x2d4>)
 8002f60:	e7d7      	b.n	8002f12 <_strerror_r+0x132>
 8002f62:	4b55      	ldr	r3, [pc, #340]	; (80030b8 <_strerror_r+0x2d8>)
 8002f64:	e7d5      	b.n	8002f12 <_strerror_r+0x132>
 8002f66:	4b55      	ldr	r3, [pc, #340]	; (80030bc <_strerror_r+0x2dc>)
 8002f68:	e7d3      	b.n	8002f12 <_strerror_r+0x132>
 8002f6a:	4b55      	ldr	r3, [pc, #340]	; (80030c0 <_strerror_r+0x2e0>)
 8002f6c:	e7d1      	b.n	8002f12 <_strerror_r+0x132>
 8002f6e:	4b55      	ldr	r3, [pc, #340]	; (80030c4 <_strerror_r+0x2e4>)
 8002f70:	e7cf      	b.n	8002f12 <_strerror_r+0x132>
 8002f72:	4b55      	ldr	r3, [pc, #340]	; (80030c8 <_strerror_r+0x2e8>)
 8002f74:	e7cd      	b.n	8002f12 <_strerror_r+0x132>
 8002f76:	4b55      	ldr	r3, [pc, #340]	; (80030cc <_strerror_r+0x2ec>)
 8002f78:	e7cb      	b.n	8002f12 <_strerror_r+0x132>
 8002f7a:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <_strerror_r+0x2f0>)
 8002f7c:	e7c9      	b.n	8002f12 <_strerror_r+0x132>
 8002f7e:	4b55      	ldr	r3, [pc, #340]	; (80030d4 <_strerror_r+0x2f4>)
 8002f80:	e7c7      	b.n	8002f12 <_strerror_r+0x132>
 8002f82:	4b55      	ldr	r3, [pc, #340]	; (80030d8 <_strerror_r+0x2f8>)
 8002f84:	e7c5      	b.n	8002f12 <_strerror_r+0x132>
 8002f86:	4b55      	ldr	r3, [pc, #340]	; (80030dc <_strerror_r+0x2fc>)
 8002f88:	e7c3      	b.n	8002f12 <_strerror_r+0x132>
 8002f8a:	4b55      	ldr	r3, [pc, #340]	; (80030e0 <_strerror_r+0x300>)
 8002f8c:	e7c1      	b.n	8002f12 <_strerror_r+0x132>
 8002f8e:	4b55      	ldr	r3, [pc, #340]	; (80030e4 <_strerror_r+0x304>)
 8002f90:	e7bf      	b.n	8002f12 <_strerror_r+0x132>
 8002f92:	4b55      	ldr	r3, [pc, #340]	; (80030e8 <_strerror_r+0x308>)
 8002f94:	e7bd      	b.n	8002f12 <_strerror_r+0x132>
 8002f96:	4b55      	ldr	r3, [pc, #340]	; (80030ec <_strerror_r+0x30c>)
 8002f98:	e7bb      	b.n	8002f12 <_strerror_r+0x132>
 8002f9a:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <_strerror_r+0x310>)
 8002f9c:	e7b9      	b.n	8002f12 <_strerror_r+0x132>
 8002f9e:	4b55      	ldr	r3, [pc, #340]	; (80030f4 <_strerror_r+0x314>)
 8002fa0:	e7b7      	b.n	8002f12 <_strerror_r+0x132>
 8002fa2:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <_strerror_r+0x318>)
 8002fa4:	e7b5      	b.n	8002f12 <_strerror_r+0x132>
 8002fa6:	4b55      	ldr	r3, [pc, #340]	; (80030fc <_strerror_r+0x31c>)
 8002fa8:	e7b3      	b.n	8002f12 <_strerror_r+0x132>
 8002faa:	4b55      	ldr	r3, [pc, #340]	; (8003100 <_strerror_r+0x320>)
 8002fac:	e7b1      	b.n	8002f12 <_strerror_r+0x132>
 8002fae:	4b55      	ldr	r3, [pc, #340]	; (8003104 <_strerror_r+0x324>)
 8002fb0:	e7af      	b.n	8002f12 <_strerror_r+0x132>
 8002fb2:	4b55      	ldr	r3, [pc, #340]	; (8003108 <_strerror_r+0x328>)
 8002fb4:	e7ad      	b.n	8002f12 <_strerror_r+0x132>
 8002fb6:	4b55      	ldr	r3, [pc, #340]	; (800310c <_strerror_r+0x32c>)
 8002fb8:	e7ab      	b.n	8002f12 <_strerror_r+0x132>
 8002fba:	4b55      	ldr	r3, [pc, #340]	; (8003110 <_strerror_r+0x330>)
 8002fbc:	e7a9      	b.n	8002f12 <_strerror_r+0x132>
 8002fbe:	4b55      	ldr	r3, [pc, #340]	; (8003114 <_strerror_r+0x334>)
 8002fc0:	e7a7      	b.n	8002f12 <_strerror_r+0x132>
 8002fc2:	4b55      	ldr	r3, [pc, #340]	; (8003118 <_strerror_r+0x338>)
 8002fc4:	e7a5      	b.n	8002f12 <_strerror_r+0x132>
 8002fc6:	4b55      	ldr	r3, [pc, #340]	; (800311c <_strerror_r+0x33c>)
 8002fc8:	e7a3      	b.n	8002f12 <_strerror_r+0x132>
 8002fca:	4b55      	ldr	r3, [pc, #340]	; (8003120 <_strerror_r+0x340>)
 8002fcc:	e7a1      	b.n	8002f12 <_strerror_r+0x132>
 8002fce:	4b55      	ldr	r3, [pc, #340]	; (8003124 <_strerror_r+0x344>)
 8002fd0:	e79f      	b.n	8002f12 <_strerror_r+0x132>
 8002fd2:	4b55      	ldr	r3, [pc, #340]	; (8003128 <_strerror_r+0x348>)
 8002fd4:	e79d      	b.n	8002f12 <_strerror_r+0x132>
 8002fd6:	4b55      	ldr	r3, [pc, #340]	; (800312c <_strerror_r+0x34c>)
 8002fd8:	e79b      	b.n	8002f12 <_strerror_r+0x132>
 8002fda:	4b55      	ldr	r3, [pc, #340]	; (8003130 <_strerror_r+0x350>)
 8002fdc:	e799      	b.n	8002f12 <_strerror_r+0x132>
 8002fde:	4b55      	ldr	r3, [pc, #340]	; (8003134 <_strerror_r+0x354>)
 8002fe0:	e797      	b.n	8002f12 <_strerror_r+0x132>
 8002fe2:	4b55      	ldr	r3, [pc, #340]	; (8003138 <_strerror_r+0x358>)
 8002fe4:	e795      	b.n	8002f12 <_strerror_r+0x132>
 8002fe6:	4b55      	ldr	r3, [pc, #340]	; (800313c <_strerror_r+0x35c>)
 8002fe8:	e793      	b.n	8002f12 <_strerror_r+0x132>
 8002fea:	4b55      	ldr	r3, [pc, #340]	; (8003140 <_strerror_r+0x360>)
 8002fec:	e791      	b.n	8002f12 <_strerror_r+0x132>
 8002fee:	4b55      	ldr	r3, [pc, #340]	; (8003144 <_strerror_r+0x364>)
 8002ff0:	e78f      	b.n	8002f12 <_strerror_r+0x132>
 8002ff2:	4b55      	ldr	r3, [pc, #340]	; (8003148 <_strerror_r+0x368>)
 8002ff4:	e78d      	b.n	8002f12 <_strerror_r+0x132>
 8002ff6:	4b55      	ldr	r3, [pc, #340]	; (800314c <_strerror_r+0x36c>)
 8002ff8:	e78b      	b.n	8002f12 <_strerror_r+0x132>
 8002ffa:	4b55      	ldr	r3, [pc, #340]	; (8003150 <_strerror_r+0x370>)
 8002ffc:	e789      	b.n	8002f12 <_strerror_r+0x132>
 8002ffe:	4b55      	ldr	r3, [pc, #340]	; (8003154 <_strerror_r+0x374>)
 8003000:	e787      	b.n	8002f12 <_strerror_r+0x132>
 8003002:	4b55      	ldr	r3, [pc, #340]	; (8003158 <_strerror_r+0x378>)
 8003004:	e785      	b.n	8002f12 <_strerror_r+0x132>
 8003006:	4b55      	ldr	r3, [pc, #340]	; (800315c <_strerror_r+0x37c>)
 8003008:	e783      	b.n	8002f12 <_strerror_r+0x132>
 800300a:	4b55      	ldr	r3, [pc, #340]	; (8003160 <_strerror_r+0x380>)
 800300c:	e781      	b.n	8002f12 <_strerror_r+0x132>
 800300e:	4b55      	ldr	r3, [pc, #340]	; (8003164 <_strerror_r+0x384>)
 8003010:	e77f      	b.n	8002f12 <_strerror_r+0x132>
 8003012:	4b55      	ldr	r3, [pc, #340]	; (8003168 <_strerror_r+0x388>)
 8003014:	e77d      	b.n	8002f12 <_strerror_r+0x132>
 8003016:	4b55      	ldr	r3, [pc, #340]	; (800316c <_strerror_r+0x38c>)
 8003018:	e77b      	b.n	8002f12 <_strerror_r+0x132>
 800301a:	4b55      	ldr	r3, [pc, #340]	; (8003170 <_strerror_r+0x390>)
 800301c:	e779      	b.n	8002f12 <_strerror_r+0x132>
 800301e:	4b55      	ldr	r3, [pc, #340]	; (8003174 <_strerror_r+0x394>)
 8003020:	e777      	b.n	8002f12 <_strerror_r+0x132>
 8003022:	4b55      	ldr	r3, [pc, #340]	; (8003178 <_strerror_r+0x398>)
 8003024:	e775      	b.n	8002f12 <_strerror_r+0x132>
 8003026:	4b55      	ldr	r3, [pc, #340]	; (800317c <_strerror_r+0x39c>)
 8003028:	e773      	b.n	8002f12 <_strerror_r+0x132>
 800302a:	4b55      	ldr	r3, [pc, #340]	; (8003180 <_strerror_r+0x3a0>)
 800302c:	e771      	b.n	8002f12 <_strerror_r+0x132>
 800302e:	4b55      	ldr	r3, [pc, #340]	; (8003184 <_strerror_r+0x3a4>)
 8003030:	e76f      	b.n	8002f12 <_strerror_r+0x132>
 8003032:	4b55      	ldr	r3, [pc, #340]	; (8003188 <_strerror_r+0x3a8>)
 8003034:	e76d      	b.n	8002f12 <_strerror_r+0x132>
 8003036:	4b55      	ldr	r3, [pc, #340]	; (800318c <_strerror_r+0x3ac>)
 8003038:	e76b      	b.n	8002f12 <_strerror_r+0x132>
 800303a:	4b55      	ldr	r3, [pc, #340]	; (8003190 <_strerror_r+0x3b0>)
 800303c:	e769      	b.n	8002f12 <_strerror_r+0x132>
 800303e:	4b55      	ldr	r3, [pc, #340]	; (8003194 <_strerror_r+0x3b4>)
 8003040:	e767      	b.n	8002f12 <_strerror_r+0x132>
 8003042:	4b55      	ldr	r3, [pc, #340]	; (8003198 <_strerror_r+0x3b8>)
 8003044:	e765      	b.n	8002f12 <_strerror_r+0x132>
 8003046:	4b55      	ldr	r3, [pc, #340]	; (800319c <_strerror_r+0x3bc>)
 8003048:	e763      	b.n	8002f12 <_strerror_r+0x132>
 800304a:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <_strerror_r+0x3c0>)
 800304c:	e761      	b.n	8002f12 <_strerror_r+0x132>
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf14      	ite	ne
 8003052:	461a      	movne	r2, r3
 8003054:	4622      	moveq	r2, r4
 8003056:	f000 f8b3 	bl	80031c0 <_user_strerror>
 800305a:	4b52      	ldr	r3, [pc, #328]	; (80031a4 <_strerror_r+0x3c4>)
 800305c:	2800      	cmp	r0, #0
 800305e:	bf18      	it	ne
 8003060:	4603      	movne	r3, r0
 8003062:	e756      	b.n	8002f12 <_strerror_r+0x132>
 8003064:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <_strerror_r+0x3c8>)
 8003066:	e754      	b.n	8002f12 <_strerror_r+0x132>
 8003068:	08004f8d 	.word	0x08004f8d
 800306c:	08004f97 	.word	0x08004f97
 8003070:	08004fb1 	.word	0x08004fb1
 8003074:	08004fc1 	.word	0x08004fc1
 8003078:	08004fd9 	.word	0x08004fd9
 800307c:	08004fe3 	.word	0x08004fe3
 8003080:	08004ffd 	.word	0x08004ffd
 8003084:	0800500f 	.word	0x0800500f
 8003088:	08005021 	.word	0x08005021
 800308c:	0800503a 	.word	0x0800503a
 8003090:	0800504a 	.word	0x0800504a
 8003094:	08005056 	.word	0x08005056
 8003098:	08005073 	.word	0x08005073
 800309c:	08005085 	.word	0x08005085
 80030a0:	08005096 	.word	0x08005096
 80030a4:	080050a8 	.word	0x080050a8
 80030a8:	080050b4 	.word	0x080050b4
 80030ac:	080050cc 	.word	0x080050cc
 80030b0:	080050d8 	.word	0x080050d8
 80030b4:	080050ea 	.word	0x080050ea
 80030b8:	080050f9 	.word	0x080050f9
 80030bc:	08005109 	.word	0x08005109
 80030c0:	08005116 	.word	0x08005116
 80030c4:	08005135 	.word	0x08005135
 80030c8:	08005144 	.word	0x08005144
 80030cc:	08005155 	.word	0x08005155
 80030d0:	08005179 	.word	0x08005179
 80030d4:	08005197 	.word	0x08005197
 80030d8:	080051b5 	.word	0x080051b5
 80030dc:	080051d5 	.word	0x080051d5
 80030e0:	080051ec 	.word	0x080051ec
 80030e4:	080051fb 	.word	0x080051fb
 80030e8:	0800520a 	.word	0x0800520a
 80030ec:	0800521e 	.word	0x0800521e
 80030f0:	08005236 	.word	0x08005236
 80030f4:	08005244 	.word	0x08005244
 80030f8:	08005251 	.word	0x08005251
 80030fc:	08005267 	.word	0x08005267
 8003100:	08005276 	.word	0x08005276
 8003104:	08005282 	.word	0x08005282
 8003108:	080052b1 	.word	0x080052b1
 800310c:	080052c2 	.word	0x080052c2
 8003110:	080052dd 	.word	0x080052dd
 8003114:	080052f0 	.word	0x080052f0
 8003118:	08005306 	.word	0x08005306
 800311c:	0800530f 	.word	0x0800530f
 8003120:	08005326 	.word	0x08005326
 8003124:	0800532e 	.word	0x0800532e
 8003128:	0800533b 	.word	0x0800533b
 800312c:	08005350 	.word	0x08005350
 8003130:	08005364 	.word	0x08005364
 8003134:	0800537c 	.word	0x0800537c
 8003138:	0800538b 	.word	0x0800538b
 800313c:	0800539c 	.word	0x0800539c
 8003140:	080053af 	.word	0x080053af
 8003144:	080053bb 	.word	0x080053bb
 8003148:	080053d4 	.word	0x080053d4
 800314c:	080053e8 	.word	0x080053e8
 8003150:	08005403 	.word	0x08005403
 8003154:	0800541b 	.word	0x0800541b
 8003158:	08005435 	.word	0x08005435
 800315c:	0800543d 	.word	0x0800543d
 8003160:	0800546d 	.word	0x0800546d
 8003164:	0800548c 	.word	0x0800548c
 8003168:	080054ab 	.word	0x080054ab
 800316c:	080054c2 	.word	0x080054c2
 8003170:	080054d5 	.word	0x080054d5
 8003174:	080054ee 	.word	0x080054ee
 8003178:	08005505 	.word	0x08005505
 800317c:	0800551b 	.word	0x0800551b
 8003180:	0800553c 	.word	0x0800553c
 8003184:	08005554 	.word	0x08005554
 8003188:	08005570 	.word	0x08005570
 800318c:	08005583 	.word	0x08005583
 8003190:	08005599 	.word	0x08005599
 8003194:	080055ad 	.word	0x080055ad
 8003198:	080055cf 	.word	0x080055cf
 800319c:	080055f5 	.word	0x080055f5
 80031a0:	08005606 	.word	0x08005606
 80031a4:	08004f6d 	.word	0x08004f6d
 80031a8:	08004f85 	.word	0x08004f85

080031ac <strerror>:
 80031ac:	4601      	mov	r1, r0
 80031ae:	4803      	ldr	r0, [pc, #12]	; (80031bc <strerror+0x10>)
 80031b0:	2300      	movs	r3, #0
 80031b2:	6800      	ldr	r0, [r0, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	f7ff be13 	b.w	8002de0 <_strerror_r>
 80031ba:	bf00      	nop
 80031bc:	20000064 	.word	0x20000064

080031c0 <_user_strerror>:
 80031c0:	2000      	movs	r0, #0
 80031c2:	4770      	bx	lr

080031c4 <__swbuf_r>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	460e      	mov	r6, r1
 80031c8:	4614      	mov	r4, r2
 80031ca:	4605      	mov	r5, r0
 80031cc:	b118      	cbz	r0, 80031d6 <__swbuf_r+0x12>
 80031ce:	6983      	ldr	r3, [r0, #24]
 80031d0:	b90b      	cbnz	r3, 80031d6 <__swbuf_r+0x12>
 80031d2:	f000 f9fb 	bl	80035cc <__sinit>
 80031d6:	4b21      	ldr	r3, [pc, #132]	; (800325c <__swbuf_r+0x98>)
 80031d8:	429c      	cmp	r4, r3
 80031da:	d12b      	bne.n	8003234 <__swbuf_r+0x70>
 80031dc:	686c      	ldr	r4, [r5, #4]
 80031de:	69a3      	ldr	r3, [r4, #24]
 80031e0:	60a3      	str	r3, [r4, #8]
 80031e2:	89a3      	ldrh	r3, [r4, #12]
 80031e4:	071a      	lsls	r2, r3, #28
 80031e6:	d52f      	bpl.n	8003248 <__swbuf_r+0x84>
 80031e8:	6923      	ldr	r3, [r4, #16]
 80031ea:	b36b      	cbz	r3, 8003248 <__swbuf_r+0x84>
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	6820      	ldr	r0, [r4, #0]
 80031f0:	1ac0      	subs	r0, r0, r3
 80031f2:	6963      	ldr	r3, [r4, #20]
 80031f4:	b2f6      	uxtb	r6, r6
 80031f6:	4283      	cmp	r3, r0
 80031f8:	4637      	mov	r7, r6
 80031fa:	dc04      	bgt.n	8003206 <__swbuf_r+0x42>
 80031fc:	4621      	mov	r1, r4
 80031fe:	4628      	mov	r0, r5
 8003200:	f000 f950 	bl	80034a4 <_fflush_r>
 8003204:	bb30      	cbnz	r0, 8003254 <__swbuf_r+0x90>
 8003206:	68a3      	ldr	r3, [r4, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60a3      	str	r3, [r4, #8]
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	6022      	str	r2, [r4, #0]
 8003212:	701e      	strb	r6, [r3, #0]
 8003214:	6963      	ldr	r3, [r4, #20]
 8003216:	3001      	adds	r0, #1
 8003218:	4283      	cmp	r3, r0
 800321a:	d004      	beq.n	8003226 <__swbuf_r+0x62>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	07db      	lsls	r3, r3, #31
 8003220:	d506      	bpl.n	8003230 <__swbuf_r+0x6c>
 8003222:	2e0a      	cmp	r6, #10
 8003224:	d104      	bne.n	8003230 <__swbuf_r+0x6c>
 8003226:	4621      	mov	r1, r4
 8003228:	4628      	mov	r0, r5
 800322a:	f000 f93b 	bl	80034a4 <_fflush_r>
 800322e:	b988      	cbnz	r0, 8003254 <__swbuf_r+0x90>
 8003230:	4638      	mov	r0, r7
 8003232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <__swbuf_r+0x9c>)
 8003236:	429c      	cmp	r4, r3
 8003238:	d101      	bne.n	800323e <__swbuf_r+0x7a>
 800323a:	68ac      	ldr	r4, [r5, #8]
 800323c:	e7cf      	b.n	80031de <__swbuf_r+0x1a>
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <__swbuf_r+0xa0>)
 8003240:	429c      	cmp	r4, r3
 8003242:	bf08      	it	eq
 8003244:	68ec      	ldreq	r4, [r5, #12]
 8003246:	e7ca      	b.n	80031de <__swbuf_r+0x1a>
 8003248:	4621      	mov	r1, r4
 800324a:	4628      	mov	r0, r5
 800324c:	f000 f81e 	bl	800328c <__swsetup_r>
 8003250:	2800      	cmp	r0, #0
 8003252:	d0cb      	beq.n	80031ec <__swbuf_r+0x28>
 8003254:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003258:	e7ea      	b.n	8003230 <__swbuf_r+0x6c>
 800325a:	bf00      	nop
 800325c:	0800563c 	.word	0x0800563c
 8003260:	0800565c 	.word	0x0800565c
 8003264:	0800561c 	.word	0x0800561c

08003268 <_write_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	4d07      	ldr	r5, [pc, #28]	; (8003288 <_write_r+0x20>)
 800326c:	4604      	mov	r4, r0
 800326e:	4608      	mov	r0, r1
 8003270:	4611      	mov	r1, r2
 8003272:	2200      	movs	r2, #0
 8003274:	602a      	str	r2, [r5, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	f001 fb9c 	bl	80049b4 <_write>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d102      	bne.n	8003286 <_write_r+0x1e>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	b103      	cbz	r3, 8003286 <_write_r+0x1e>
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	bd38      	pop	{r3, r4, r5, pc}
 8003288:	20000d14 	.word	0x20000d14

0800328c <__swsetup_r>:
 800328c:	4b32      	ldr	r3, [pc, #200]	; (8003358 <__swsetup_r+0xcc>)
 800328e:	b570      	push	{r4, r5, r6, lr}
 8003290:	681d      	ldr	r5, [r3, #0]
 8003292:	4606      	mov	r6, r0
 8003294:	460c      	mov	r4, r1
 8003296:	b125      	cbz	r5, 80032a2 <__swsetup_r+0x16>
 8003298:	69ab      	ldr	r3, [r5, #24]
 800329a:	b913      	cbnz	r3, 80032a2 <__swsetup_r+0x16>
 800329c:	4628      	mov	r0, r5
 800329e:	f000 f995 	bl	80035cc <__sinit>
 80032a2:	4b2e      	ldr	r3, [pc, #184]	; (800335c <__swsetup_r+0xd0>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d10f      	bne.n	80032c8 <__swsetup_r+0x3c>
 80032a8:	686c      	ldr	r4, [r5, #4]
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032b0:	0719      	lsls	r1, r3, #28
 80032b2:	d42c      	bmi.n	800330e <__swsetup_r+0x82>
 80032b4:	06dd      	lsls	r5, r3, #27
 80032b6:	d411      	bmi.n	80032dc <__swsetup_r+0x50>
 80032b8:	2309      	movs	r3, #9
 80032ba:	6033      	str	r3, [r6, #0]
 80032bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032c0:	81a3      	strh	r3, [r4, #12]
 80032c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032c6:	e03e      	b.n	8003346 <__swsetup_r+0xba>
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <__swsetup_r+0xd4>)
 80032ca:	429c      	cmp	r4, r3
 80032cc:	d101      	bne.n	80032d2 <__swsetup_r+0x46>
 80032ce:	68ac      	ldr	r4, [r5, #8]
 80032d0:	e7eb      	b.n	80032aa <__swsetup_r+0x1e>
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <__swsetup_r+0xd8>)
 80032d4:	429c      	cmp	r4, r3
 80032d6:	bf08      	it	eq
 80032d8:	68ec      	ldreq	r4, [r5, #12]
 80032da:	e7e6      	b.n	80032aa <__swsetup_r+0x1e>
 80032dc:	0758      	lsls	r0, r3, #29
 80032de:	d512      	bpl.n	8003306 <__swsetup_r+0x7a>
 80032e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032e2:	b141      	cbz	r1, 80032f6 <__swsetup_r+0x6a>
 80032e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032e8:	4299      	cmp	r1, r3
 80032ea:	d002      	beq.n	80032f2 <__swsetup_r+0x66>
 80032ec:	4630      	mov	r0, r6
 80032ee:	f000 faab 	bl	8003848 <_free_r>
 80032f2:	2300      	movs	r3, #0
 80032f4:	6363      	str	r3, [r4, #52]	; 0x34
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032fc:	81a3      	strh	r3, [r4, #12]
 80032fe:	2300      	movs	r3, #0
 8003300:	6063      	str	r3, [r4, #4]
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	6923      	ldr	r3, [r4, #16]
 8003310:	b94b      	cbnz	r3, 8003326 <__swsetup_r+0x9a>
 8003312:	89a3      	ldrh	r3, [r4, #12]
 8003314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331c:	d003      	beq.n	8003326 <__swsetup_r+0x9a>
 800331e:	4621      	mov	r1, r4
 8003320:	4630      	mov	r0, r6
 8003322:	f000 fa2b 	bl	800377c <__smakebuf_r>
 8003326:	89a0      	ldrh	r0, [r4, #12]
 8003328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800332c:	f010 0301 	ands.w	r3, r0, #1
 8003330:	d00a      	beq.n	8003348 <__swsetup_r+0xbc>
 8003332:	2300      	movs	r3, #0
 8003334:	60a3      	str	r3, [r4, #8]
 8003336:	6963      	ldr	r3, [r4, #20]
 8003338:	425b      	negs	r3, r3
 800333a:	61a3      	str	r3, [r4, #24]
 800333c:	6923      	ldr	r3, [r4, #16]
 800333e:	b943      	cbnz	r3, 8003352 <__swsetup_r+0xc6>
 8003340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003344:	d1ba      	bne.n	80032bc <__swsetup_r+0x30>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	0781      	lsls	r1, r0, #30
 800334a:	bf58      	it	pl
 800334c:	6963      	ldrpl	r3, [r4, #20]
 800334e:	60a3      	str	r3, [r4, #8]
 8003350:	e7f4      	b.n	800333c <__swsetup_r+0xb0>
 8003352:	2000      	movs	r0, #0
 8003354:	e7f7      	b.n	8003346 <__swsetup_r+0xba>
 8003356:	bf00      	nop
 8003358:	20000064 	.word	0x20000064
 800335c:	0800563c 	.word	0x0800563c
 8003360:	0800565c 	.word	0x0800565c
 8003364:	0800561c 	.word	0x0800561c

08003368 <abort>:
 8003368:	b508      	push	{r3, lr}
 800336a:	2006      	movs	r0, #6
 800336c:	f001 f964 	bl	8004638 <raise>
 8003370:	2001      	movs	r0, #1
 8003372:	f001 fb27 	bl	80049c4 <_exit>
	...

08003378 <_close_r>:
 8003378:	b538      	push	{r3, r4, r5, lr}
 800337a:	4d06      	ldr	r5, [pc, #24]	; (8003394 <_close_r+0x1c>)
 800337c:	2300      	movs	r3, #0
 800337e:	4604      	mov	r4, r0
 8003380:	4608      	mov	r0, r1
 8003382:	602b      	str	r3, [r5, #0]
 8003384:	f001 fad0 	bl	8004928 <_close>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	d102      	bne.n	8003392 <_close_r+0x1a>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	b103      	cbz	r3, 8003392 <_close_r+0x1a>
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	bd38      	pop	{r3, r4, r5, pc}
 8003394:	20000d14 	.word	0x20000d14

08003398 <__sflush_r>:
 8003398:	898a      	ldrh	r2, [r1, #12]
 800339a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339e:	4605      	mov	r5, r0
 80033a0:	0710      	lsls	r0, r2, #28
 80033a2:	460c      	mov	r4, r1
 80033a4:	d458      	bmi.n	8003458 <__sflush_r+0xc0>
 80033a6:	684b      	ldr	r3, [r1, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	dc05      	bgt.n	80033b8 <__sflush_r+0x20>
 80033ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	dc02      	bgt.n	80033b8 <__sflush_r+0x20>
 80033b2:	2000      	movs	r0, #0
 80033b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033ba:	2e00      	cmp	r6, #0
 80033bc:	d0f9      	beq.n	80033b2 <__sflush_r+0x1a>
 80033be:	2300      	movs	r3, #0
 80033c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033c4:	682f      	ldr	r7, [r5, #0]
 80033c6:	6a21      	ldr	r1, [r4, #32]
 80033c8:	602b      	str	r3, [r5, #0]
 80033ca:	d032      	beq.n	8003432 <__sflush_r+0x9a>
 80033cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	075a      	lsls	r2, r3, #29
 80033d2:	d505      	bpl.n	80033e0 <__sflush_r+0x48>
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	1ac0      	subs	r0, r0, r3
 80033d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033da:	b10b      	cbz	r3, 80033e0 <__sflush_r+0x48>
 80033dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033de:	1ac0      	subs	r0, r0, r3
 80033e0:	2300      	movs	r3, #0
 80033e2:	4602      	mov	r2, r0
 80033e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033e6:	6a21      	ldr	r1, [r4, #32]
 80033e8:	4628      	mov	r0, r5
 80033ea:	47b0      	blx	r6
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	d106      	bne.n	8003400 <__sflush_r+0x68>
 80033f2:	6829      	ldr	r1, [r5, #0]
 80033f4:	291d      	cmp	r1, #29
 80033f6:	d82b      	bhi.n	8003450 <__sflush_r+0xb8>
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <__sflush_r+0x108>)
 80033fa:	410a      	asrs	r2, r1
 80033fc:	07d6      	lsls	r6, r2, #31
 80033fe:	d427      	bmi.n	8003450 <__sflush_r+0xb8>
 8003400:	2200      	movs	r2, #0
 8003402:	6062      	str	r2, [r4, #4]
 8003404:	04d9      	lsls	r1, r3, #19
 8003406:	6922      	ldr	r2, [r4, #16]
 8003408:	6022      	str	r2, [r4, #0]
 800340a:	d504      	bpl.n	8003416 <__sflush_r+0x7e>
 800340c:	1c42      	adds	r2, r0, #1
 800340e:	d101      	bne.n	8003414 <__sflush_r+0x7c>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	b903      	cbnz	r3, 8003416 <__sflush_r+0x7e>
 8003414:	6560      	str	r0, [r4, #84]	; 0x54
 8003416:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003418:	602f      	str	r7, [r5, #0]
 800341a:	2900      	cmp	r1, #0
 800341c:	d0c9      	beq.n	80033b2 <__sflush_r+0x1a>
 800341e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003422:	4299      	cmp	r1, r3
 8003424:	d002      	beq.n	800342c <__sflush_r+0x94>
 8003426:	4628      	mov	r0, r5
 8003428:	f000 fa0e 	bl	8003848 <_free_r>
 800342c:	2000      	movs	r0, #0
 800342e:	6360      	str	r0, [r4, #52]	; 0x34
 8003430:	e7c0      	b.n	80033b4 <__sflush_r+0x1c>
 8003432:	2301      	movs	r3, #1
 8003434:	4628      	mov	r0, r5
 8003436:	47b0      	blx	r6
 8003438:	1c41      	adds	r1, r0, #1
 800343a:	d1c8      	bne.n	80033ce <__sflush_r+0x36>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0c5      	beq.n	80033ce <__sflush_r+0x36>
 8003442:	2b1d      	cmp	r3, #29
 8003444:	d001      	beq.n	800344a <__sflush_r+0xb2>
 8003446:	2b16      	cmp	r3, #22
 8003448:	d101      	bne.n	800344e <__sflush_r+0xb6>
 800344a:	602f      	str	r7, [r5, #0]
 800344c:	e7b1      	b.n	80033b2 <__sflush_r+0x1a>
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	e7ad      	b.n	80033b4 <__sflush_r+0x1c>
 8003458:	690f      	ldr	r7, [r1, #16]
 800345a:	2f00      	cmp	r7, #0
 800345c:	d0a9      	beq.n	80033b2 <__sflush_r+0x1a>
 800345e:	0793      	lsls	r3, r2, #30
 8003460:	680e      	ldr	r6, [r1, #0]
 8003462:	bf08      	it	eq
 8003464:	694b      	ldreq	r3, [r1, #20]
 8003466:	600f      	str	r7, [r1, #0]
 8003468:	bf18      	it	ne
 800346a:	2300      	movne	r3, #0
 800346c:	eba6 0807 	sub.w	r8, r6, r7
 8003470:	608b      	str	r3, [r1, #8]
 8003472:	f1b8 0f00 	cmp.w	r8, #0
 8003476:	dd9c      	ble.n	80033b2 <__sflush_r+0x1a>
 8003478:	6a21      	ldr	r1, [r4, #32]
 800347a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800347c:	4643      	mov	r3, r8
 800347e:	463a      	mov	r2, r7
 8003480:	4628      	mov	r0, r5
 8003482:	47b0      	blx	r6
 8003484:	2800      	cmp	r0, #0
 8003486:	dc06      	bgt.n	8003496 <__sflush_r+0xfe>
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800348e:	81a3      	strh	r3, [r4, #12]
 8003490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003494:	e78e      	b.n	80033b4 <__sflush_r+0x1c>
 8003496:	4407      	add	r7, r0
 8003498:	eba8 0800 	sub.w	r8, r8, r0
 800349c:	e7e9      	b.n	8003472 <__sflush_r+0xda>
 800349e:	bf00      	nop
 80034a0:	dfbffffe 	.word	0xdfbffffe

080034a4 <_fflush_r>:
 80034a4:	b538      	push	{r3, r4, r5, lr}
 80034a6:	690b      	ldr	r3, [r1, #16]
 80034a8:	4605      	mov	r5, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	b913      	cbnz	r3, 80034b4 <_fflush_r+0x10>
 80034ae:	2500      	movs	r5, #0
 80034b0:	4628      	mov	r0, r5
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	b118      	cbz	r0, 80034be <_fflush_r+0x1a>
 80034b6:	6983      	ldr	r3, [r0, #24]
 80034b8:	b90b      	cbnz	r3, 80034be <_fflush_r+0x1a>
 80034ba:	f000 f887 	bl	80035cc <__sinit>
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <_fflush_r+0x6c>)
 80034c0:	429c      	cmp	r4, r3
 80034c2:	d11b      	bne.n	80034fc <_fflush_r+0x58>
 80034c4:	686c      	ldr	r4, [r5, #4]
 80034c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ef      	beq.n	80034ae <_fflush_r+0xa>
 80034ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034d0:	07d0      	lsls	r0, r2, #31
 80034d2:	d404      	bmi.n	80034de <_fflush_r+0x3a>
 80034d4:	0599      	lsls	r1, r3, #22
 80034d6:	d402      	bmi.n	80034de <_fflush_r+0x3a>
 80034d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034da:	f000 f915 	bl	8003708 <__retarget_lock_acquire_recursive>
 80034de:	4628      	mov	r0, r5
 80034e0:	4621      	mov	r1, r4
 80034e2:	f7ff ff59 	bl	8003398 <__sflush_r>
 80034e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034e8:	07da      	lsls	r2, r3, #31
 80034ea:	4605      	mov	r5, r0
 80034ec:	d4e0      	bmi.n	80034b0 <_fflush_r+0xc>
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	059b      	lsls	r3, r3, #22
 80034f2:	d4dd      	bmi.n	80034b0 <_fflush_r+0xc>
 80034f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034f6:	f000 f908 	bl	800370a <__retarget_lock_release_recursive>
 80034fa:	e7d9      	b.n	80034b0 <_fflush_r+0xc>
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <_fflush_r+0x70>)
 80034fe:	429c      	cmp	r4, r3
 8003500:	d101      	bne.n	8003506 <_fflush_r+0x62>
 8003502:	68ac      	ldr	r4, [r5, #8]
 8003504:	e7df      	b.n	80034c6 <_fflush_r+0x22>
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <_fflush_r+0x74>)
 8003508:	429c      	cmp	r4, r3
 800350a:	bf08      	it	eq
 800350c:	68ec      	ldreq	r4, [r5, #12]
 800350e:	e7da      	b.n	80034c6 <_fflush_r+0x22>
 8003510:	0800563c 	.word	0x0800563c
 8003514:	0800565c 	.word	0x0800565c
 8003518:	0800561c 	.word	0x0800561c

0800351c <std>:
 800351c:	2300      	movs	r3, #0
 800351e:	b510      	push	{r4, lr}
 8003520:	4604      	mov	r4, r0
 8003522:	e9c0 3300 	strd	r3, r3, [r0]
 8003526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800352a:	6083      	str	r3, [r0, #8]
 800352c:	8181      	strh	r1, [r0, #12]
 800352e:	6643      	str	r3, [r0, #100]	; 0x64
 8003530:	81c2      	strh	r2, [r0, #14]
 8003532:	6183      	str	r3, [r0, #24]
 8003534:	4619      	mov	r1, r3
 8003536:	2208      	movs	r2, #8
 8003538:	305c      	adds	r0, #92	; 0x5c
 800353a:	f7ff f9ad 	bl	8002898 <memset>
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <std+0x38>)
 8003540:	6263      	str	r3, [r4, #36]	; 0x24
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <std+0x3c>)
 8003544:	62a3      	str	r3, [r4, #40]	; 0x28
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <std+0x40>)
 8003548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <std+0x44>)
 800354c:	6224      	str	r4, [r4, #32]
 800354e:	6323      	str	r3, [r4, #48]	; 0x30
 8003550:	bd10      	pop	{r4, pc}
 8003552:	bf00      	nop
 8003554:	08002d39 	.word	0x08002d39
 8003558:	08002d5f 	.word	0x08002d5f
 800355c:	08002d97 	.word	0x08002d97
 8003560:	08002dbb 	.word	0x08002dbb

08003564 <_cleanup_r>:
 8003564:	4901      	ldr	r1, [pc, #4]	; (800356c <_cleanup_r+0x8>)
 8003566:	f000 b8af 	b.w	80036c8 <_fwalk_reent>
 800356a:	bf00      	nop
 800356c:	080034a5 	.word	0x080034a5

08003570 <__sfmoreglue>:
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	2368      	movs	r3, #104	; 0x68
 8003574:	1e4d      	subs	r5, r1, #1
 8003576:	435d      	muls	r5, r3
 8003578:	460e      	mov	r6, r1
 800357a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800357e:	f7ff f9b3 	bl	80028e8 <_malloc_r>
 8003582:	4604      	mov	r4, r0
 8003584:	b140      	cbz	r0, 8003598 <__sfmoreglue+0x28>
 8003586:	2100      	movs	r1, #0
 8003588:	e9c0 1600 	strd	r1, r6, [r0]
 800358c:	300c      	adds	r0, #12
 800358e:	60a0      	str	r0, [r4, #8]
 8003590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003594:	f7ff f980 	bl	8002898 <memset>
 8003598:	4620      	mov	r0, r4
 800359a:	bd70      	pop	{r4, r5, r6, pc}

0800359c <__sfp_lock_acquire>:
 800359c:	4801      	ldr	r0, [pc, #4]	; (80035a4 <__sfp_lock_acquire+0x8>)
 800359e:	f000 b8b3 	b.w	8003708 <__retarget_lock_acquire_recursive>
 80035a2:	bf00      	nop
 80035a4:	20000d11 	.word	0x20000d11

080035a8 <__sfp_lock_release>:
 80035a8:	4801      	ldr	r0, [pc, #4]	; (80035b0 <__sfp_lock_release+0x8>)
 80035aa:	f000 b8ae 	b.w	800370a <__retarget_lock_release_recursive>
 80035ae:	bf00      	nop
 80035b0:	20000d11 	.word	0x20000d11

080035b4 <__sinit_lock_acquire>:
 80035b4:	4801      	ldr	r0, [pc, #4]	; (80035bc <__sinit_lock_acquire+0x8>)
 80035b6:	f000 b8a7 	b.w	8003708 <__retarget_lock_acquire_recursive>
 80035ba:	bf00      	nop
 80035bc:	20000d12 	.word	0x20000d12

080035c0 <__sinit_lock_release>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__sinit_lock_release+0x8>)
 80035c2:	f000 b8a2 	b.w	800370a <__retarget_lock_release_recursive>
 80035c6:	bf00      	nop
 80035c8:	20000d12 	.word	0x20000d12

080035cc <__sinit>:
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4604      	mov	r4, r0
 80035d0:	f7ff fff0 	bl	80035b4 <__sinit_lock_acquire>
 80035d4:	69a3      	ldr	r3, [r4, #24]
 80035d6:	b11b      	cbz	r3, 80035e0 <__sinit+0x14>
 80035d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035dc:	f7ff bff0 	b.w	80035c0 <__sinit_lock_release>
 80035e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035e4:	6523      	str	r3, [r4, #80]	; 0x50
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <__sinit+0x68>)
 80035e8:	4a13      	ldr	r2, [pc, #76]	; (8003638 <__sinit+0x6c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80035ee:	42a3      	cmp	r3, r4
 80035f0:	bf04      	itt	eq
 80035f2:	2301      	moveq	r3, #1
 80035f4:	61a3      	streq	r3, [r4, #24]
 80035f6:	4620      	mov	r0, r4
 80035f8:	f000 f820 	bl	800363c <__sfp>
 80035fc:	6060      	str	r0, [r4, #4]
 80035fe:	4620      	mov	r0, r4
 8003600:	f000 f81c 	bl	800363c <__sfp>
 8003604:	60a0      	str	r0, [r4, #8]
 8003606:	4620      	mov	r0, r4
 8003608:	f000 f818 	bl	800363c <__sfp>
 800360c:	2200      	movs	r2, #0
 800360e:	60e0      	str	r0, [r4, #12]
 8003610:	2104      	movs	r1, #4
 8003612:	6860      	ldr	r0, [r4, #4]
 8003614:	f7ff ff82 	bl	800351c <std>
 8003618:	68a0      	ldr	r0, [r4, #8]
 800361a:	2201      	movs	r2, #1
 800361c:	2109      	movs	r1, #9
 800361e:	f7ff ff7d 	bl	800351c <std>
 8003622:	68e0      	ldr	r0, [r4, #12]
 8003624:	2202      	movs	r2, #2
 8003626:	2112      	movs	r1, #18
 8003628:	f7ff ff78 	bl	800351c <std>
 800362c:	2301      	movs	r3, #1
 800362e:	61a3      	str	r3, [r4, #24]
 8003630:	e7d2      	b.n	80035d8 <__sinit+0xc>
 8003632:	bf00      	nop
 8003634:	08004f70 	.word	0x08004f70
 8003638:	08003565 	.word	0x08003565

0800363c <__sfp>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	4607      	mov	r7, r0
 8003640:	f7ff ffac 	bl	800359c <__sfp_lock_acquire>
 8003644:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <__sfp+0x84>)
 8003646:	681e      	ldr	r6, [r3, #0]
 8003648:	69b3      	ldr	r3, [r6, #24]
 800364a:	b913      	cbnz	r3, 8003652 <__sfp+0x16>
 800364c:	4630      	mov	r0, r6
 800364e:	f7ff ffbd 	bl	80035cc <__sinit>
 8003652:	3648      	adds	r6, #72	; 0x48
 8003654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003658:	3b01      	subs	r3, #1
 800365a:	d503      	bpl.n	8003664 <__sfp+0x28>
 800365c:	6833      	ldr	r3, [r6, #0]
 800365e:	b30b      	cbz	r3, 80036a4 <__sfp+0x68>
 8003660:	6836      	ldr	r6, [r6, #0]
 8003662:	e7f7      	b.n	8003654 <__sfp+0x18>
 8003664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003668:	b9d5      	cbnz	r5, 80036a0 <__sfp+0x64>
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <__sfp+0x88>)
 800366c:	60e3      	str	r3, [r4, #12]
 800366e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003672:	6665      	str	r5, [r4, #100]	; 0x64
 8003674:	f000 f847 	bl	8003706 <__retarget_lock_init_recursive>
 8003678:	f7ff ff96 	bl	80035a8 <__sfp_lock_release>
 800367c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003684:	6025      	str	r5, [r4, #0]
 8003686:	61a5      	str	r5, [r4, #24]
 8003688:	2208      	movs	r2, #8
 800368a:	4629      	mov	r1, r5
 800368c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003690:	f7ff f902 	bl	8002898 <memset>
 8003694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800369c:	4620      	mov	r0, r4
 800369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a0:	3468      	adds	r4, #104	; 0x68
 80036a2:	e7d9      	b.n	8003658 <__sfp+0x1c>
 80036a4:	2104      	movs	r1, #4
 80036a6:	4638      	mov	r0, r7
 80036a8:	f7ff ff62 	bl	8003570 <__sfmoreglue>
 80036ac:	4604      	mov	r4, r0
 80036ae:	6030      	str	r0, [r6, #0]
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d1d5      	bne.n	8003660 <__sfp+0x24>
 80036b4:	f7ff ff78 	bl	80035a8 <__sfp_lock_release>
 80036b8:	230c      	movs	r3, #12
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	e7ee      	b.n	800369c <__sfp+0x60>
 80036be:	bf00      	nop
 80036c0:	08004f70 	.word	0x08004f70
 80036c4:	ffff0001 	.word	0xffff0001

080036c8 <_fwalk_reent>:
 80036c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036cc:	4606      	mov	r6, r0
 80036ce:	4688      	mov	r8, r1
 80036d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036d4:	2700      	movs	r7, #0
 80036d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036da:	f1b9 0901 	subs.w	r9, r9, #1
 80036de:	d505      	bpl.n	80036ec <_fwalk_reent+0x24>
 80036e0:	6824      	ldr	r4, [r4, #0]
 80036e2:	2c00      	cmp	r4, #0
 80036e4:	d1f7      	bne.n	80036d6 <_fwalk_reent+0xe>
 80036e6:	4638      	mov	r0, r7
 80036e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ec:	89ab      	ldrh	r3, [r5, #12]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d907      	bls.n	8003702 <_fwalk_reent+0x3a>
 80036f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036f6:	3301      	adds	r3, #1
 80036f8:	d003      	beq.n	8003702 <_fwalk_reent+0x3a>
 80036fa:	4629      	mov	r1, r5
 80036fc:	4630      	mov	r0, r6
 80036fe:	47c0      	blx	r8
 8003700:	4307      	orrs	r7, r0
 8003702:	3568      	adds	r5, #104	; 0x68
 8003704:	e7e9      	b.n	80036da <_fwalk_reent+0x12>

08003706 <__retarget_lock_init_recursive>:
 8003706:	4770      	bx	lr

08003708 <__retarget_lock_acquire_recursive>:
 8003708:	4770      	bx	lr

0800370a <__retarget_lock_release_recursive>:
 800370a:	4770      	bx	lr

0800370c <_lseek_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4d07      	ldr	r5, [pc, #28]	; (800372c <_lseek_r+0x20>)
 8003710:	4604      	mov	r4, r0
 8003712:	4608      	mov	r0, r1
 8003714:	4611      	mov	r1, r2
 8003716:	2200      	movs	r2, #0
 8003718:	602a      	str	r2, [r5, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	f001 f92c 	bl	8004978 <_lseek>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_lseek_r+0x1e>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_lseek_r+0x1e>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	20000d14 	.word	0x20000d14

08003730 <__swhatbuf_r>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	460c      	mov	r4, r1
 8003734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003738:	2900      	cmp	r1, #0
 800373a:	b096      	sub	sp, #88	; 0x58
 800373c:	4615      	mov	r5, r2
 800373e:	461e      	mov	r6, r3
 8003740:	da0d      	bge.n	800375e <__swhatbuf_r+0x2e>
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	bf0c      	ite	eq
 800374e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003752:	2340      	movne	r3, #64	; 0x40
 8003754:	2000      	movs	r0, #0
 8003756:	6031      	str	r1, [r6, #0]
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	b016      	add	sp, #88	; 0x58
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	466a      	mov	r2, sp
 8003760:	f001 f8b8 	bl	80048d4 <_fstat_r>
 8003764:	2800      	cmp	r0, #0
 8003766:	dbec      	blt.n	8003742 <__swhatbuf_r+0x12>
 8003768:	9901      	ldr	r1, [sp, #4]
 800376a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800376e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003772:	4259      	negs	r1, r3
 8003774:	4159      	adcs	r1, r3
 8003776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800377a:	e7eb      	b.n	8003754 <__swhatbuf_r+0x24>

0800377c <__smakebuf_r>:
 800377c:	898b      	ldrh	r3, [r1, #12]
 800377e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003780:	079d      	lsls	r5, r3, #30
 8003782:	4606      	mov	r6, r0
 8003784:	460c      	mov	r4, r1
 8003786:	d507      	bpl.n	8003798 <__smakebuf_r+0x1c>
 8003788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	6123      	str	r3, [r4, #16]
 8003790:	2301      	movs	r3, #1
 8003792:	6163      	str	r3, [r4, #20]
 8003794:	b002      	add	sp, #8
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	ab01      	add	r3, sp, #4
 800379a:	466a      	mov	r2, sp
 800379c:	f7ff ffc8 	bl	8003730 <__swhatbuf_r>
 80037a0:	9900      	ldr	r1, [sp, #0]
 80037a2:	4605      	mov	r5, r0
 80037a4:	4630      	mov	r0, r6
 80037a6:	f7ff f89f 	bl	80028e8 <_malloc_r>
 80037aa:	b948      	cbnz	r0, 80037c0 <__smakebuf_r+0x44>
 80037ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b0:	059a      	lsls	r2, r3, #22
 80037b2:	d4ef      	bmi.n	8003794 <__smakebuf_r+0x18>
 80037b4:	f023 0303 	bic.w	r3, r3, #3
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	e7e3      	b.n	8003788 <__smakebuf_r+0xc>
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <__smakebuf_r+0x7c>)
 80037c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80037c4:	89a3      	ldrh	r3, [r4, #12]
 80037c6:	6020      	str	r0, [r4, #0]
 80037c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	9b00      	ldr	r3, [sp, #0]
 80037d0:	6163      	str	r3, [r4, #20]
 80037d2:	9b01      	ldr	r3, [sp, #4]
 80037d4:	6120      	str	r0, [r4, #16]
 80037d6:	b15b      	cbz	r3, 80037f0 <__smakebuf_r+0x74>
 80037d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037dc:	4630      	mov	r0, r6
 80037de:	f001 f88b 	bl	80048f8 <_isatty_r>
 80037e2:	b128      	cbz	r0, 80037f0 <__smakebuf_r+0x74>
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	81a3      	strh	r3, [r4, #12]
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	431d      	orrs	r5, r3
 80037f4:	81a5      	strh	r5, [r4, #12]
 80037f6:	e7cd      	b.n	8003794 <__smakebuf_r+0x18>
 80037f8:	08003565 	.word	0x08003565

080037fc <memmove>:
 80037fc:	4288      	cmp	r0, r1
 80037fe:	b510      	push	{r4, lr}
 8003800:	eb01 0402 	add.w	r4, r1, r2
 8003804:	d902      	bls.n	800380c <memmove+0x10>
 8003806:	4284      	cmp	r4, r0
 8003808:	4623      	mov	r3, r4
 800380a:	d807      	bhi.n	800381c <memmove+0x20>
 800380c:	1e43      	subs	r3, r0, #1
 800380e:	42a1      	cmp	r1, r4
 8003810:	d008      	beq.n	8003824 <memmove+0x28>
 8003812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800381a:	e7f8      	b.n	800380e <memmove+0x12>
 800381c:	4402      	add	r2, r0
 800381e:	4601      	mov	r1, r0
 8003820:	428a      	cmp	r2, r1
 8003822:	d100      	bne.n	8003826 <memmove+0x2a>
 8003824:	bd10      	pop	{r4, pc}
 8003826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800382a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800382e:	e7f7      	b.n	8003820 <memmove+0x24>

08003830 <__malloc_lock>:
 8003830:	4801      	ldr	r0, [pc, #4]	; (8003838 <__malloc_lock+0x8>)
 8003832:	f7ff bf69 	b.w	8003708 <__retarget_lock_acquire_recursive>
 8003836:	bf00      	nop
 8003838:	20000d10 	.word	0x20000d10

0800383c <__malloc_unlock>:
 800383c:	4801      	ldr	r0, [pc, #4]	; (8003844 <__malloc_unlock+0x8>)
 800383e:	f7ff bf64 	b.w	800370a <__retarget_lock_release_recursive>
 8003842:	bf00      	nop
 8003844:	20000d10 	.word	0x20000d10

08003848 <_free_r>:
 8003848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800384a:	2900      	cmp	r1, #0
 800384c:	d044      	beq.n	80038d8 <_free_r+0x90>
 800384e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003852:	9001      	str	r0, [sp, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f1a1 0404 	sub.w	r4, r1, #4
 800385a:	bfb8      	it	lt
 800385c:	18e4      	addlt	r4, r4, r3
 800385e:	f7ff ffe7 	bl	8003830 <__malloc_lock>
 8003862:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <_free_r+0x94>)
 8003864:	9801      	ldr	r0, [sp, #4]
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	b933      	cbnz	r3, 8003878 <_free_r+0x30>
 800386a:	6063      	str	r3, [r4, #4]
 800386c:	6014      	str	r4, [r2, #0]
 800386e:	b003      	add	sp, #12
 8003870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003874:	f7ff bfe2 	b.w	800383c <__malloc_unlock>
 8003878:	42a3      	cmp	r3, r4
 800387a:	d908      	bls.n	800388e <_free_r+0x46>
 800387c:	6825      	ldr	r5, [r4, #0]
 800387e:	1961      	adds	r1, r4, r5
 8003880:	428b      	cmp	r3, r1
 8003882:	bf01      	itttt	eq
 8003884:	6819      	ldreq	r1, [r3, #0]
 8003886:	685b      	ldreq	r3, [r3, #4]
 8003888:	1949      	addeq	r1, r1, r5
 800388a:	6021      	streq	r1, [r4, #0]
 800388c:	e7ed      	b.n	800386a <_free_r+0x22>
 800388e:	461a      	mov	r2, r3
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	b10b      	cbz	r3, 8003898 <_free_r+0x50>
 8003894:	42a3      	cmp	r3, r4
 8003896:	d9fa      	bls.n	800388e <_free_r+0x46>
 8003898:	6811      	ldr	r1, [r2, #0]
 800389a:	1855      	adds	r5, r2, r1
 800389c:	42a5      	cmp	r5, r4
 800389e:	d10b      	bne.n	80038b8 <_free_r+0x70>
 80038a0:	6824      	ldr	r4, [r4, #0]
 80038a2:	4421      	add	r1, r4
 80038a4:	1854      	adds	r4, r2, r1
 80038a6:	42a3      	cmp	r3, r4
 80038a8:	6011      	str	r1, [r2, #0]
 80038aa:	d1e0      	bne.n	800386e <_free_r+0x26>
 80038ac:	681c      	ldr	r4, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	6053      	str	r3, [r2, #4]
 80038b2:	440c      	add	r4, r1
 80038b4:	6014      	str	r4, [r2, #0]
 80038b6:	e7da      	b.n	800386e <_free_r+0x26>
 80038b8:	d902      	bls.n	80038c0 <_free_r+0x78>
 80038ba:	230c      	movs	r3, #12
 80038bc:	6003      	str	r3, [r0, #0]
 80038be:	e7d6      	b.n	800386e <_free_r+0x26>
 80038c0:	6825      	ldr	r5, [r4, #0]
 80038c2:	1961      	adds	r1, r4, r5
 80038c4:	428b      	cmp	r3, r1
 80038c6:	bf04      	itt	eq
 80038c8:	6819      	ldreq	r1, [r3, #0]
 80038ca:	685b      	ldreq	r3, [r3, #4]
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	bf04      	itt	eq
 80038d0:	1949      	addeq	r1, r1, r5
 80038d2:	6021      	streq	r1, [r4, #0]
 80038d4:	6054      	str	r4, [r2, #4]
 80038d6:	e7ca      	b.n	800386e <_free_r+0x26>
 80038d8:	b003      	add	sp, #12
 80038da:	bd30      	pop	{r4, r5, pc}
 80038dc:	20000d08 	.word	0x20000d08

080038e0 <_realloc_r>:
 80038e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e4:	4680      	mov	r8, r0
 80038e6:	4614      	mov	r4, r2
 80038e8:	460e      	mov	r6, r1
 80038ea:	b921      	cbnz	r1, 80038f6 <_realloc_r+0x16>
 80038ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038f0:	4611      	mov	r1, r2
 80038f2:	f7fe bff9 	b.w	80028e8 <_malloc_r>
 80038f6:	b92a      	cbnz	r2, 8003904 <_realloc_r+0x24>
 80038f8:	f7ff ffa6 	bl	8003848 <_free_r>
 80038fc:	4625      	mov	r5, r4
 80038fe:	4628      	mov	r0, r5
 8003900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003904:	f001 f808 	bl	8004918 <_malloc_usable_size_r>
 8003908:	4284      	cmp	r4, r0
 800390a:	4607      	mov	r7, r0
 800390c:	d802      	bhi.n	8003914 <_realloc_r+0x34>
 800390e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003912:	d812      	bhi.n	800393a <_realloc_r+0x5a>
 8003914:	4621      	mov	r1, r4
 8003916:	4640      	mov	r0, r8
 8003918:	f7fe ffe6 	bl	80028e8 <_malloc_r>
 800391c:	4605      	mov	r5, r0
 800391e:	2800      	cmp	r0, #0
 8003920:	d0ed      	beq.n	80038fe <_realloc_r+0x1e>
 8003922:	42bc      	cmp	r4, r7
 8003924:	4622      	mov	r2, r4
 8003926:	4631      	mov	r1, r6
 8003928:	bf28      	it	cs
 800392a:	463a      	movcs	r2, r7
 800392c:	f7fe ffa6 	bl	800287c <memcpy>
 8003930:	4631      	mov	r1, r6
 8003932:	4640      	mov	r0, r8
 8003934:	f7ff ff88 	bl	8003848 <_free_r>
 8003938:	e7e1      	b.n	80038fe <_realloc_r+0x1e>
 800393a:	4635      	mov	r5, r6
 800393c:	e7df      	b.n	80038fe <_realloc_r+0x1e>

0800393e <__ssputs_r>:
 800393e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003942:	688e      	ldr	r6, [r1, #8]
 8003944:	461f      	mov	r7, r3
 8003946:	42be      	cmp	r6, r7
 8003948:	680b      	ldr	r3, [r1, #0]
 800394a:	4682      	mov	sl, r0
 800394c:	460c      	mov	r4, r1
 800394e:	4690      	mov	r8, r2
 8003950:	d82c      	bhi.n	80039ac <__ssputs_r+0x6e>
 8003952:	898a      	ldrh	r2, [r1, #12]
 8003954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003958:	d026      	beq.n	80039a8 <__ssputs_r+0x6a>
 800395a:	6965      	ldr	r5, [r4, #20]
 800395c:	6909      	ldr	r1, [r1, #16]
 800395e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003962:	eba3 0901 	sub.w	r9, r3, r1
 8003966:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800396a:	1c7b      	adds	r3, r7, #1
 800396c:	444b      	add	r3, r9
 800396e:	106d      	asrs	r5, r5, #1
 8003970:	429d      	cmp	r5, r3
 8003972:	bf38      	it	cc
 8003974:	461d      	movcc	r5, r3
 8003976:	0553      	lsls	r3, r2, #21
 8003978:	d527      	bpl.n	80039ca <__ssputs_r+0x8c>
 800397a:	4629      	mov	r1, r5
 800397c:	f7fe ffb4 	bl	80028e8 <_malloc_r>
 8003980:	4606      	mov	r6, r0
 8003982:	b360      	cbz	r0, 80039de <__ssputs_r+0xa0>
 8003984:	6921      	ldr	r1, [r4, #16]
 8003986:	464a      	mov	r2, r9
 8003988:	f7fe ff78 	bl	800287c <memcpy>
 800398c:	89a3      	ldrh	r3, [r4, #12]
 800398e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003996:	81a3      	strh	r3, [r4, #12]
 8003998:	6126      	str	r6, [r4, #16]
 800399a:	6165      	str	r5, [r4, #20]
 800399c:	444e      	add	r6, r9
 800399e:	eba5 0509 	sub.w	r5, r5, r9
 80039a2:	6026      	str	r6, [r4, #0]
 80039a4:	60a5      	str	r5, [r4, #8]
 80039a6:	463e      	mov	r6, r7
 80039a8:	42be      	cmp	r6, r7
 80039aa:	d900      	bls.n	80039ae <__ssputs_r+0x70>
 80039ac:	463e      	mov	r6, r7
 80039ae:	6820      	ldr	r0, [r4, #0]
 80039b0:	4632      	mov	r2, r6
 80039b2:	4641      	mov	r1, r8
 80039b4:	f7ff ff22 	bl	80037fc <memmove>
 80039b8:	68a3      	ldr	r3, [r4, #8]
 80039ba:	1b9b      	subs	r3, r3, r6
 80039bc:	60a3      	str	r3, [r4, #8]
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	4433      	add	r3, r6
 80039c2:	6023      	str	r3, [r4, #0]
 80039c4:	2000      	movs	r0, #0
 80039c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ca:	462a      	mov	r2, r5
 80039cc:	f7ff ff88 	bl	80038e0 <_realloc_r>
 80039d0:	4606      	mov	r6, r0
 80039d2:	2800      	cmp	r0, #0
 80039d4:	d1e0      	bne.n	8003998 <__ssputs_r+0x5a>
 80039d6:	6921      	ldr	r1, [r4, #16]
 80039d8:	4650      	mov	r0, sl
 80039da:	f7ff ff35 	bl	8003848 <_free_r>
 80039de:	230c      	movs	r3, #12
 80039e0:	f8ca 3000 	str.w	r3, [sl]
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039f0:	e7e9      	b.n	80039c6 <__ssputs_r+0x88>
	...

080039f4 <_svfiprintf_r>:
 80039f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f8:	4698      	mov	r8, r3
 80039fa:	898b      	ldrh	r3, [r1, #12]
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	b09d      	sub	sp, #116	; 0x74
 8003a00:	4607      	mov	r7, r0
 8003a02:	460d      	mov	r5, r1
 8003a04:	4614      	mov	r4, r2
 8003a06:	d50e      	bpl.n	8003a26 <_svfiprintf_r+0x32>
 8003a08:	690b      	ldr	r3, [r1, #16]
 8003a0a:	b963      	cbnz	r3, 8003a26 <_svfiprintf_r+0x32>
 8003a0c:	2140      	movs	r1, #64	; 0x40
 8003a0e:	f7fe ff6b 	bl	80028e8 <_malloc_r>
 8003a12:	6028      	str	r0, [r5, #0]
 8003a14:	6128      	str	r0, [r5, #16]
 8003a16:	b920      	cbnz	r0, 8003a22 <_svfiprintf_r+0x2e>
 8003a18:	230c      	movs	r3, #12
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a20:	e0d0      	b.n	8003bc4 <_svfiprintf_r+0x1d0>
 8003a22:	2340      	movs	r3, #64	; 0x40
 8003a24:	616b      	str	r3, [r5, #20]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a30:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a34:	2330      	movs	r3, #48	; 0x30
 8003a36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003bdc <_svfiprintf_r+0x1e8>
 8003a3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a3e:	f04f 0901 	mov.w	r9, #1
 8003a42:	4623      	mov	r3, r4
 8003a44:	469a      	mov	sl, r3
 8003a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a4a:	b10a      	cbz	r2, 8003a50 <_svfiprintf_r+0x5c>
 8003a4c:	2a25      	cmp	r2, #37	; 0x25
 8003a4e:	d1f9      	bne.n	8003a44 <_svfiprintf_r+0x50>
 8003a50:	ebba 0b04 	subs.w	fp, sl, r4
 8003a54:	d00b      	beq.n	8003a6e <_svfiprintf_r+0x7a>
 8003a56:	465b      	mov	r3, fp
 8003a58:	4622      	mov	r2, r4
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7ff ff6e 	bl	800393e <__ssputs_r>
 8003a62:	3001      	adds	r0, #1
 8003a64:	f000 80a9 	beq.w	8003bba <_svfiprintf_r+0x1c6>
 8003a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a6a:	445a      	add	r2, fp
 8003a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80a1 	beq.w	8003bba <_svfiprintf_r+0x1c6>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a82:	f10a 0a01 	add.w	sl, sl, #1
 8003a86:	9304      	str	r3, [sp, #16]
 8003a88:	9307      	str	r3, [sp, #28]
 8003a8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a90:	4654      	mov	r4, sl
 8003a92:	2205      	movs	r2, #5
 8003a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a98:	4850      	ldr	r0, [pc, #320]	; (8003bdc <_svfiprintf_r+0x1e8>)
 8003a9a:	f7fc fb89 	bl	80001b0 <memchr>
 8003a9e:	9a04      	ldr	r2, [sp, #16]
 8003aa0:	b9d8      	cbnz	r0, 8003ada <_svfiprintf_r+0xe6>
 8003aa2:	06d0      	lsls	r0, r2, #27
 8003aa4:	bf44      	itt	mi
 8003aa6:	2320      	movmi	r3, #32
 8003aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aac:	0711      	lsls	r1, r2, #28
 8003aae:	bf44      	itt	mi
 8003ab0:	232b      	movmi	r3, #43	; 0x2b
 8003ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aba:	2b2a      	cmp	r3, #42	; 0x2a
 8003abc:	d015      	beq.n	8003aea <_svfiprintf_r+0xf6>
 8003abe:	9a07      	ldr	r2, [sp, #28]
 8003ac0:	4654      	mov	r4, sl
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f04f 0c0a 	mov.w	ip, #10
 8003ac8:	4621      	mov	r1, r4
 8003aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ace:	3b30      	subs	r3, #48	; 0x30
 8003ad0:	2b09      	cmp	r3, #9
 8003ad2:	d94d      	bls.n	8003b70 <_svfiprintf_r+0x17c>
 8003ad4:	b1b0      	cbz	r0, 8003b04 <_svfiprintf_r+0x110>
 8003ad6:	9207      	str	r2, [sp, #28]
 8003ad8:	e014      	b.n	8003b04 <_svfiprintf_r+0x110>
 8003ada:	eba0 0308 	sub.w	r3, r0, r8
 8003ade:	fa09 f303 	lsl.w	r3, r9, r3
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	9304      	str	r3, [sp, #16]
 8003ae6:	46a2      	mov	sl, r4
 8003ae8:	e7d2      	b.n	8003a90 <_svfiprintf_r+0x9c>
 8003aea:	9b03      	ldr	r3, [sp, #12]
 8003aec:	1d19      	adds	r1, r3, #4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	9103      	str	r1, [sp, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bfbb      	ittet	lt
 8003af6:	425b      	neglt	r3, r3
 8003af8:	f042 0202 	orrlt.w	r2, r2, #2
 8003afc:	9307      	strge	r3, [sp, #28]
 8003afe:	9307      	strlt	r3, [sp, #28]
 8003b00:	bfb8      	it	lt
 8003b02:	9204      	strlt	r2, [sp, #16]
 8003b04:	7823      	ldrb	r3, [r4, #0]
 8003b06:	2b2e      	cmp	r3, #46	; 0x2e
 8003b08:	d10c      	bne.n	8003b24 <_svfiprintf_r+0x130>
 8003b0a:	7863      	ldrb	r3, [r4, #1]
 8003b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b0e:	d134      	bne.n	8003b7a <_svfiprintf_r+0x186>
 8003b10:	9b03      	ldr	r3, [sp, #12]
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	9203      	str	r2, [sp, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bfb8      	it	lt
 8003b1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b20:	3402      	adds	r4, #2
 8003b22:	9305      	str	r3, [sp, #20]
 8003b24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003bec <_svfiprintf_r+0x1f8>
 8003b28:	7821      	ldrb	r1, [r4, #0]
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	4650      	mov	r0, sl
 8003b2e:	f7fc fb3f 	bl	80001b0 <memchr>
 8003b32:	b138      	cbz	r0, 8003b44 <_svfiprintf_r+0x150>
 8003b34:	9b04      	ldr	r3, [sp, #16]
 8003b36:	eba0 000a 	sub.w	r0, r0, sl
 8003b3a:	2240      	movs	r2, #64	; 0x40
 8003b3c:	4082      	lsls	r2, r0
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	3401      	adds	r4, #1
 8003b42:	9304      	str	r3, [sp, #16]
 8003b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b48:	4825      	ldr	r0, [pc, #148]	; (8003be0 <_svfiprintf_r+0x1ec>)
 8003b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b4e:	2206      	movs	r2, #6
 8003b50:	f7fc fb2e 	bl	80001b0 <memchr>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d038      	beq.n	8003bca <_svfiprintf_r+0x1d6>
 8003b58:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <_svfiprintf_r+0x1f0>)
 8003b5a:	bb1b      	cbnz	r3, 8003ba4 <_svfiprintf_r+0x1b0>
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	3307      	adds	r3, #7
 8003b60:	f023 0307 	bic.w	r3, r3, #7
 8003b64:	3308      	adds	r3, #8
 8003b66:	9303      	str	r3, [sp, #12]
 8003b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b6a:	4433      	add	r3, r6
 8003b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6e:	e768      	b.n	8003a42 <_svfiprintf_r+0x4e>
 8003b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b74:	460c      	mov	r4, r1
 8003b76:	2001      	movs	r0, #1
 8003b78:	e7a6      	b.n	8003ac8 <_svfiprintf_r+0xd4>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	3401      	adds	r4, #1
 8003b7e:	9305      	str	r3, [sp, #20]
 8003b80:	4619      	mov	r1, r3
 8003b82:	f04f 0c0a 	mov.w	ip, #10
 8003b86:	4620      	mov	r0, r4
 8003b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b8c:	3a30      	subs	r2, #48	; 0x30
 8003b8e:	2a09      	cmp	r2, #9
 8003b90:	d903      	bls.n	8003b9a <_svfiprintf_r+0x1a6>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0c6      	beq.n	8003b24 <_svfiprintf_r+0x130>
 8003b96:	9105      	str	r1, [sp, #20]
 8003b98:	e7c4      	b.n	8003b24 <_svfiprintf_r+0x130>
 8003b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e7f0      	b.n	8003b86 <_svfiprintf_r+0x192>
 8003ba4:	ab03      	add	r3, sp, #12
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	462a      	mov	r2, r5
 8003baa:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <_svfiprintf_r+0x1f4>)
 8003bac:	a904      	add	r1, sp, #16
 8003bae:	4638      	mov	r0, r7
 8003bb0:	f3af 8000 	nop.w
 8003bb4:	1c42      	adds	r2, r0, #1
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	d1d6      	bne.n	8003b68 <_svfiprintf_r+0x174>
 8003bba:	89ab      	ldrh	r3, [r5, #12]
 8003bbc:	065b      	lsls	r3, r3, #25
 8003bbe:	f53f af2d 	bmi.w	8003a1c <_svfiprintf_r+0x28>
 8003bc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bc4:	b01d      	add	sp, #116	; 0x74
 8003bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bca:	ab03      	add	r3, sp, #12
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	462a      	mov	r2, r5
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <_svfiprintf_r+0x1f4>)
 8003bd2:	a904      	add	r1, sp, #16
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	f000 fa4b 	bl	8004070 <_printf_i>
 8003bda:	e7eb      	b.n	8003bb4 <_svfiprintf_r+0x1c0>
 8003bdc:	08004f74 	.word	0x08004f74
 8003be0:	08004f7e 	.word	0x08004f7e
 8003be4:	00000000 	.word	0x00000000
 8003be8:	0800393f 	.word	0x0800393f
 8003bec:	08004f7a 	.word	0x08004f7a

08003bf0 <_sungetc_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	1c4b      	adds	r3, r1, #1
 8003bf4:	4614      	mov	r4, r2
 8003bf6:	d103      	bne.n	8003c00 <_sungetc_r+0x10>
 8003bf8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	8993      	ldrh	r3, [r2, #12]
 8003c02:	f023 0320 	bic.w	r3, r3, #32
 8003c06:	8193      	strh	r3, [r2, #12]
 8003c08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c0a:	6852      	ldr	r2, [r2, #4]
 8003c0c:	b2cd      	uxtb	r5, r1
 8003c0e:	b18b      	cbz	r3, 8003c34 <_sungetc_r+0x44>
 8003c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c12:	4293      	cmp	r3, r2
 8003c14:	dd08      	ble.n	8003c28 <_sungetc_r+0x38>
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	1e5a      	subs	r2, r3, #1
 8003c1a:	6022      	str	r2, [r4, #0]
 8003c1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003c20:	6863      	ldr	r3, [r4, #4]
 8003c22:	3301      	adds	r3, #1
 8003c24:	6063      	str	r3, [r4, #4]
 8003c26:	e7e9      	b.n	8003bfc <_sungetc_r+0xc>
 8003c28:	4621      	mov	r1, r4
 8003c2a:	f000 fe19 	bl	8004860 <__submore>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d0f1      	beq.n	8003c16 <_sungetc_r+0x26>
 8003c32:	e7e1      	b.n	8003bf8 <_sungetc_r+0x8>
 8003c34:	6921      	ldr	r1, [r4, #16]
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	b151      	cbz	r1, 8003c50 <_sungetc_r+0x60>
 8003c3a:	4299      	cmp	r1, r3
 8003c3c:	d208      	bcs.n	8003c50 <_sungetc_r+0x60>
 8003c3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003c42:	42a9      	cmp	r1, r5
 8003c44:	d104      	bne.n	8003c50 <_sungetc_r+0x60>
 8003c46:	3b01      	subs	r3, #1
 8003c48:	3201      	adds	r2, #1
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	6062      	str	r2, [r4, #4]
 8003c4e:	e7d5      	b.n	8003bfc <_sungetc_r+0xc>
 8003c50:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c58:	6363      	str	r3, [r4, #52]	; 0x34
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c5e:	4623      	mov	r3, r4
 8003c60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	2301      	movs	r3, #1
 8003c68:	e7dc      	b.n	8003c24 <_sungetc_r+0x34>

08003c6a <__ssrefill_r>:
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c70:	b169      	cbz	r1, 8003c8e <__ssrefill_r+0x24>
 8003c72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c76:	4299      	cmp	r1, r3
 8003c78:	d001      	beq.n	8003c7e <__ssrefill_r+0x14>
 8003c7a:	f7ff fde5 	bl	8003848 <_free_r>
 8003c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c80:	6063      	str	r3, [r4, #4]
 8003c82:	2000      	movs	r0, #0
 8003c84:	6360      	str	r0, [r4, #52]	; 0x34
 8003c86:	b113      	cbz	r3, 8003c8e <__ssrefill_r+0x24>
 8003c88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c8a:	6023      	str	r3, [r4, #0]
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	6923      	ldr	r3, [r4, #16]
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	2300      	movs	r3, #0
 8003c94:	6063      	str	r3, [r4, #4]
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	f043 0320 	orr.w	r3, r3, #32
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ca2:	e7f3      	b.n	8003c8c <__ssrefill_r+0x22>

08003ca4 <__ssvfiscanf_r>:
 8003ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	460c      	mov	r4, r1
 8003caa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003cae:	2100      	movs	r1, #0
 8003cb0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003cb4:	49a6      	ldr	r1, [pc, #664]	; (8003f50 <__ssvfiscanf_r+0x2ac>)
 8003cb6:	91a0      	str	r1, [sp, #640]	; 0x280
 8003cb8:	f10d 0804 	add.w	r8, sp, #4
 8003cbc:	49a5      	ldr	r1, [pc, #660]	; (8003f54 <__ssvfiscanf_r+0x2b0>)
 8003cbe:	4fa6      	ldr	r7, [pc, #664]	; (8003f58 <__ssvfiscanf_r+0x2b4>)
 8003cc0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003f5c <__ssvfiscanf_r+0x2b8>
 8003cc4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003cc8:	4606      	mov	r6, r0
 8003cca:	91a1      	str	r1, [sp, #644]	; 0x284
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	7813      	ldrb	r3, [r2, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 815a 	beq.w	8003f8a <__ssvfiscanf_r+0x2e6>
 8003cd6:	5cf9      	ldrb	r1, [r7, r3]
 8003cd8:	f011 0108 	ands.w	r1, r1, #8
 8003cdc:	f102 0501 	add.w	r5, r2, #1
 8003ce0:	d019      	beq.n	8003d16 <__ssvfiscanf_r+0x72>
 8003ce2:	6863      	ldr	r3, [r4, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	dd0f      	ble.n	8003d08 <__ssvfiscanf_r+0x64>
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	5cba      	ldrb	r2, [r7, r2]
 8003cee:	0712      	lsls	r2, r2, #28
 8003cf0:	d401      	bmi.n	8003cf6 <__ssvfiscanf_r+0x52>
 8003cf2:	462a      	mov	r2, r5
 8003cf4:	e7eb      	b.n	8003cce <__ssvfiscanf_r+0x2a>
 8003cf6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003cf8:	3201      	adds	r2, #1
 8003cfa:	9245      	str	r2, [sp, #276]	; 0x114
 8003cfc:	6862      	ldr	r2, [r4, #4]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	3a01      	subs	r2, #1
 8003d02:	6062      	str	r2, [r4, #4]
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	e7ec      	b.n	8003ce2 <__ssvfiscanf_r+0x3e>
 8003d08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	4798      	blx	r3
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d0e9      	beq.n	8003ce8 <__ssvfiscanf_r+0x44>
 8003d14:	e7ed      	b.n	8003cf2 <__ssvfiscanf_r+0x4e>
 8003d16:	2b25      	cmp	r3, #37	; 0x25
 8003d18:	d012      	beq.n	8003d40 <__ssvfiscanf_r+0x9c>
 8003d1a:	469a      	mov	sl, r3
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f340 8091 	ble.w	8003e46 <__ssvfiscanf_r+0x1a2>
 8003d24:	6822      	ldr	r2, [r4, #0]
 8003d26:	7813      	ldrb	r3, [r2, #0]
 8003d28:	4553      	cmp	r3, sl
 8003d2a:	f040 812e 	bne.w	8003f8a <__ssvfiscanf_r+0x2e6>
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	6063      	str	r3, [r4, #4]
 8003d34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003d36:	3201      	adds	r2, #1
 8003d38:	3301      	adds	r3, #1
 8003d3a:	6022      	str	r2, [r4, #0]
 8003d3c:	9345      	str	r3, [sp, #276]	; 0x114
 8003d3e:	e7d8      	b.n	8003cf2 <__ssvfiscanf_r+0x4e>
 8003d40:	9141      	str	r1, [sp, #260]	; 0x104
 8003d42:	9143      	str	r1, [sp, #268]	; 0x10c
 8003d44:	7853      	ldrb	r3, [r2, #1]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	bf02      	ittt	eq
 8003d4a:	2310      	moveq	r3, #16
 8003d4c:	1c95      	addeq	r5, r2, #2
 8003d4e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003d50:	220a      	movs	r2, #10
 8003d52:	46aa      	mov	sl, r5
 8003d54:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003d58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d91c      	bls.n	8003d9a <__ssvfiscanf_r+0xf6>
 8003d60:	487e      	ldr	r0, [pc, #504]	; (8003f5c <__ssvfiscanf_r+0x2b8>)
 8003d62:	2203      	movs	r2, #3
 8003d64:	f7fc fa24 	bl	80001b0 <memchr>
 8003d68:	b138      	cbz	r0, 8003d7a <__ssvfiscanf_r+0xd6>
 8003d6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003d6c:	eba0 0009 	sub.w	r0, r0, r9
 8003d70:	2301      	movs	r3, #1
 8003d72:	4083      	lsls	r3, r0
 8003d74:	4313      	orrs	r3, r2
 8003d76:	9341      	str	r3, [sp, #260]	; 0x104
 8003d78:	4655      	mov	r5, sl
 8003d7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d7e:	2b78      	cmp	r3, #120	; 0x78
 8003d80:	d806      	bhi.n	8003d90 <__ssvfiscanf_r+0xec>
 8003d82:	2b57      	cmp	r3, #87	; 0x57
 8003d84:	d810      	bhi.n	8003da8 <__ssvfiscanf_r+0x104>
 8003d86:	2b25      	cmp	r3, #37	; 0x25
 8003d88:	d0c7      	beq.n	8003d1a <__ssvfiscanf_r+0x76>
 8003d8a:	d857      	bhi.n	8003e3c <__ssvfiscanf_r+0x198>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d065      	beq.n	8003e5c <__ssvfiscanf_r+0x1b8>
 8003d90:	2303      	movs	r3, #3
 8003d92:	9347      	str	r3, [sp, #284]	; 0x11c
 8003d94:	230a      	movs	r3, #10
 8003d96:	9342      	str	r3, [sp, #264]	; 0x108
 8003d98:	e076      	b.n	8003e88 <__ssvfiscanf_r+0x1e4>
 8003d9a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003d9c:	fb02 1103 	mla	r1, r2, r3, r1
 8003da0:	3930      	subs	r1, #48	; 0x30
 8003da2:	9143      	str	r1, [sp, #268]	; 0x10c
 8003da4:	4655      	mov	r5, sl
 8003da6:	e7d4      	b.n	8003d52 <__ssvfiscanf_r+0xae>
 8003da8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003dac:	2a20      	cmp	r2, #32
 8003dae:	d8ef      	bhi.n	8003d90 <__ssvfiscanf_r+0xec>
 8003db0:	a101      	add	r1, pc, #4	; (adr r1, 8003db8 <__ssvfiscanf_r+0x114>)
 8003db2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003e6b 	.word	0x08003e6b
 8003dbc:	08003d91 	.word	0x08003d91
 8003dc0:	08003d91 	.word	0x08003d91
 8003dc4:	08003ec9 	.word	0x08003ec9
 8003dc8:	08003d91 	.word	0x08003d91
 8003dcc:	08003d91 	.word	0x08003d91
 8003dd0:	08003d91 	.word	0x08003d91
 8003dd4:	08003d91 	.word	0x08003d91
 8003dd8:	08003d91 	.word	0x08003d91
 8003ddc:	08003d91 	.word	0x08003d91
 8003de0:	08003d91 	.word	0x08003d91
 8003de4:	08003edf 	.word	0x08003edf
 8003de8:	08003ec5 	.word	0x08003ec5
 8003dec:	08003e43 	.word	0x08003e43
 8003df0:	08003e43 	.word	0x08003e43
 8003df4:	08003e43 	.word	0x08003e43
 8003df8:	08003d91 	.word	0x08003d91
 8003dfc:	08003e81 	.word	0x08003e81
 8003e00:	08003d91 	.word	0x08003d91
 8003e04:	08003d91 	.word	0x08003d91
 8003e08:	08003d91 	.word	0x08003d91
 8003e0c:	08003d91 	.word	0x08003d91
 8003e10:	08003eef 	.word	0x08003eef
 8003e14:	08003ebd 	.word	0x08003ebd
 8003e18:	08003e63 	.word	0x08003e63
 8003e1c:	08003d91 	.word	0x08003d91
 8003e20:	08003d91 	.word	0x08003d91
 8003e24:	08003eeb 	.word	0x08003eeb
 8003e28:	08003d91 	.word	0x08003d91
 8003e2c:	08003ec5 	.word	0x08003ec5
 8003e30:	08003d91 	.word	0x08003d91
 8003e34:	08003d91 	.word	0x08003d91
 8003e38:	08003e6b 	.word	0x08003e6b
 8003e3c:	3b45      	subs	r3, #69	; 0x45
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d8a6      	bhi.n	8003d90 <__ssvfiscanf_r+0xec>
 8003e42:	2305      	movs	r3, #5
 8003e44:	e01f      	b.n	8003e86 <__ssvfiscanf_r+0x1e2>
 8003e46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	4798      	blx	r3
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	f43f af68 	beq.w	8003d24 <__ssvfiscanf_r+0x80>
 8003e54:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f040 808d 	bne.w	8003f76 <__ssvfiscanf_r+0x2d2>
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e60:	e08f      	b.n	8003f82 <__ssvfiscanf_r+0x2de>
 8003e62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003e64:	f042 0220 	orr.w	r2, r2, #32
 8003e68:	9241      	str	r2, [sp, #260]	; 0x104
 8003e6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e70:	9241      	str	r2, [sp, #260]	; 0x104
 8003e72:	2210      	movs	r2, #16
 8003e74:	2b6f      	cmp	r3, #111	; 0x6f
 8003e76:	9242      	str	r2, [sp, #264]	; 0x108
 8003e78:	bf34      	ite	cc
 8003e7a:	2303      	movcc	r3, #3
 8003e7c:	2304      	movcs	r3, #4
 8003e7e:	e002      	b.n	8003e86 <__ssvfiscanf_r+0x1e2>
 8003e80:	2300      	movs	r3, #0
 8003e82:	9342      	str	r3, [sp, #264]	; 0x108
 8003e84:	2303      	movs	r3, #3
 8003e86:	9347      	str	r3, [sp, #284]	; 0x11c
 8003e88:	6863      	ldr	r3, [r4, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	dd3d      	ble.n	8003f0a <__ssvfiscanf_r+0x266>
 8003e8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e90:	0659      	lsls	r1, r3, #25
 8003e92:	d404      	bmi.n	8003e9e <__ssvfiscanf_r+0x1fa>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	5cba      	ldrb	r2, [r7, r2]
 8003e9a:	0712      	lsls	r2, r2, #28
 8003e9c:	d43c      	bmi.n	8003f18 <__ssvfiscanf_r+0x274>
 8003e9e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	dc4b      	bgt.n	8003f3c <__ssvfiscanf_r+0x298>
 8003ea4:	466b      	mov	r3, sp
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	a941      	add	r1, sp, #260	; 0x104
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f000 fa02 	bl	80042b4 <_scanf_chars>
 8003eb0:	2801      	cmp	r0, #1
 8003eb2:	d06a      	beq.n	8003f8a <__ssvfiscanf_r+0x2e6>
 8003eb4:	2802      	cmp	r0, #2
 8003eb6:	f47f af1c 	bne.w	8003cf2 <__ssvfiscanf_r+0x4e>
 8003eba:	e7cb      	b.n	8003e54 <__ssvfiscanf_r+0x1b0>
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	9342      	str	r3, [sp, #264]	; 0x108
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	e7e0      	b.n	8003e86 <__ssvfiscanf_r+0x1e2>
 8003ec4:	220a      	movs	r2, #10
 8003ec6:	e7d5      	b.n	8003e74 <__ssvfiscanf_r+0x1d0>
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4640      	mov	r0, r8
 8003ecc:	f000 fb52 	bl	8004574 <__sccl>
 8003ed0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed6:	9341      	str	r3, [sp, #260]	; 0x104
 8003ed8:	4605      	mov	r5, r0
 8003eda:	2301      	movs	r3, #1
 8003edc:	e7d3      	b.n	8003e86 <__ssvfiscanf_r+0x1e2>
 8003ede:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ee4:	9341      	str	r3, [sp, #260]	; 0x104
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e7cd      	b.n	8003e86 <__ssvfiscanf_r+0x1e2>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e7cb      	b.n	8003e86 <__ssvfiscanf_r+0x1e2>
 8003eee:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003ef0:	06c3      	lsls	r3, r0, #27
 8003ef2:	f53f aefe 	bmi.w	8003cf2 <__ssvfiscanf_r+0x4e>
 8003ef6:	9b00      	ldr	r3, [sp, #0]
 8003ef8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003efa:	1d19      	adds	r1, r3, #4
 8003efc:	9100      	str	r1, [sp, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	07c0      	lsls	r0, r0, #31
 8003f02:	bf4c      	ite	mi
 8003f04:	801a      	strhmi	r2, [r3, #0]
 8003f06:	601a      	strpl	r2, [r3, #0]
 8003f08:	e6f3      	b.n	8003cf2 <__ssvfiscanf_r+0x4e>
 8003f0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	4630      	mov	r0, r6
 8003f10:	4798      	blx	r3
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d0bb      	beq.n	8003e8e <__ssvfiscanf_r+0x1ea>
 8003f16:	e79d      	b.n	8003e54 <__ssvfiscanf_r+0x1b0>
 8003f18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003f1a:	3201      	adds	r2, #1
 8003f1c:	9245      	str	r2, [sp, #276]	; 0x114
 8003f1e:	6862      	ldr	r2, [r4, #4]
 8003f20:	3a01      	subs	r2, #1
 8003f22:	2a00      	cmp	r2, #0
 8003f24:	6062      	str	r2, [r4, #4]
 8003f26:	dd02      	ble.n	8003f2e <__ssvfiscanf_r+0x28a>
 8003f28:	3301      	adds	r3, #1
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	e7b2      	b.n	8003e94 <__ssvfiscanf_r+0x1f0>
 8003f2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f30:	4621      	mov	r1, r4
 8003f32:	4630      	mov	r0, r6
 8003f34:	4798      	blx	r3
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d0ac      	beq.n	8003e94 <__ssvfiscanf_r+0x1f0>
 8003f3a:	e78b      	b.n	8003e54 <__ssvfiscanf_r+0x1b0>
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	dc0f      	bgt.n	8003f60 <__ssvfiscanf_r+0x2bc>
 8003f40:	466b      	mov	r3, sp
 8003f42:	4622      	mov	r2, r4
 8003f44:	a941      	add	r1, sp, #260	; 0x104
 8003f46:	4630      	mov	r0, r6
 8003f48:	f000 fa0e 	bl	8004368 <_scanf_i>
 8003f4c:	e7b0      	b.n	8003eb0 <__ssvfiscanf_r+0x20c>
 8003f4e:	bf00      	nop
 8003f50:	08003bf1 	.word	0x08003bf1
 8003f54:	08003c6b 	.word	0x08003c6b
 8003f58:	080056ba 	.word	0x080056ba
 8003f5c:	08004f7a 	.word	0x08004f7a
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <__ssvfiscanf_r+0x2ec>)
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f43f aec5 	beq.w	8003cf2 <__ssvfiscanf_r+0x4e>
 8003f68:	466b      	mov	r3, sp
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	a941      	add	r1, sp, #260	; 0x104
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f3af 8000 	nop.w
 8003f74:	e79c      	b.n	8003eb0 <__ssvfiscanf_r+0x20c>
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f7c:	bf18      	it	ne
 8003f7e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003f82:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003f8c:	e7f9      	b.n	8003f82 <__ssvfiscanf_r+0x2de>
 8003f8e:	bf00      	nop
 8003f90:	00000000 	.word	0x00000000

08003f94 <_printf_common>:
 8003f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	4616      	mov	r6, r2
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	688a      	ldr	r2, [r1, #8]
 8003f9e:	690b      	ldr	r3, [r1, #16]
 8003fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	bfb8      	it	lt
 8003fa8:	4613      	movlt	r3, r2
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	b10a      	cbz	r2, 8003fba <_printf_common+0x26>
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	6033      	str	r3, [r6, #0]
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	0699      	lsls	r1, r3, #26
 8003fbe:	bf42      	ittt	mi
 8003fc0:	6833      	ldrmi	r3, [r6, #0]
 8003fc2:	3302      	addmi	r3, #2
 8003fc4:	6033      	strmi	r3, [r6, #0]
 8003fc6:	6825      	ldr	r5, [r4, #0]
 8003fc8:	f015 0506 	ands.w	r5, r5, #6
 8003fcc:	d106      	bne.n	8003fdc <_printf_common+0x48>
 8003fce:	f104 0a19 	add.w	sl, r4, #25
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	6832      	ldr	r2, [r6, #0]
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	42ab      	cmp	r3, r5
 8003fda:	dc26      	bgt.n	800402a <_printf_common+0x96>
 8003fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fe0:	1e13      	subs	r3, r2, #0
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	bf18      	it	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	0692      	lsls	r2, r2, #26
 8003fea:	d42b      	bmi.n	8004044 <_printf_common+0xb0>
 8003fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	47c0      	blx	r8
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d01e      	beq.n	8004038 <_printf_common+0xa4>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	6922      	ldr	r2, [r4, #16]
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	2b04      	cmp	r3, #4
 8004004:	bf02      	ittt	eq
 8004006:	68e5      	ldreq	r5, [r4, #12]
 8004008:	6833      	ldreq	r3, [r6, #0]
 800400a:	1aed      	subeq	r5, r5, r3
 800400c:	68a3      	ldr	r3, [r4, #8]
 800400e:	bf0c      	ite	eq
 8004010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004014:	2500      	movne	r5, #0
 8004016:	4293      	cmp	r3, r2
 8004018:	bfc4      	itt	gt
 800401a:	1a9b      	subgt	r3, r3, r2
 800401c:	18ed      	addgt	r5, r5, r3
 800401e:	2600      	movs	r6, #0
 8004020:	341a      	adds	r4, #26
 8004022:	42b5      	cmp	r5, r6
 8004024:	d11a      	bne.n	800405c <_printf_common+0xc8>
 8004026:	2000      	movs	r0, #0
 8004028:	e008      	b.n	800403c <_printf_common+0xa8>
 800402a:	2301      	movs	r3, #1
 800402c:	4652      	mov	r2, sl
 800402e:	4649      	mov	r1, r9
 8004030:	4638      	mov	r0, r7
 8004032:	47c0      	blx	r8
 8004034:	3001      	adds	r0, #1
 8004036:	d103      	bne.n	8004040 <_printf_common+0xac>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004040:	3501      	adds	r5, #1
 8004042:	e7c6      	b.n	8003fd2 <_printf_common+0x3e>
 8004044:	18e1      	adds	r1, r4, r3
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	2030      	movs	r0, #48	; 0x30
 800404a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800404e:	4422      	add	r2, r4
 8004050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004058:	3302      	adds	r3, #2
 800405a:	e7c7      	b.n	8003fec <_printf_common+0x58>
 800405c:	2301      	movs	r3, #1
 800405e:	4622      	mov	r2, r4
 8004060:	4649      	mov	r1, r9
 8004062:	4638      	mov	r0, r7
 8004064:	47c0      	blx	r8
 8004066:	3001      	adds	r0, #1
 8004068:	d0e6      	beq.n	8004038 <_printf_common+0xa4>
 800406a:	3601      	adds	r6, #1
 800406c:	e7d9      	b.n	8004022 <_printf_common+0x8e>
	...

08004070 <_printf_i>:
 8004070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	7e0f      	ldrb	r7, [r1, #24]
 8004076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004078:	2f78      	cmp	r7, #120	; 0x78
 800407a:	4691      	mov	r9, r2
 800407c:	4680      	mov	r8, r0
 800407e:	460c      	mov	r4, r1
 8004080:	469a      	mov	sl, r3
 8004082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004086:	d807      	bhi.n	8004098 <_printf_i+0x28>
 8004088:	2f62      	cmp	r7, #98	; 0x62
 800408a:	d80a      	bhi.n	80040a2 <_printf_i+0x32>
 800408c:	2f00      	cmp	r7, #0
 800408e:	f000 80d4 	beq.w	800423a <_printf_i+0x1ca>
 8004092:	2f58      	cmp	r7, #88	; 0x58
 8004094:	f000 80c0 	beq.w	8004218 <_printf_i+0x1a8>
 8004098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800409c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040a0:	e03a      	b.n	8004118 <_printf_i+0xa8>
 80040a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040a6:	2b15      	cmp	r3, #21
 80040a8:	d8f6      	bhi.n	8004098 <_printf_i+0x28>
 80040aa:	a101      	add	r1, pc, #4	; (adr r1, 80040b0 <_printf_i+0x40>)
 80040ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b0:	08004109 	.word	0x08004109
 80040b4:	0800411d 	.word	0x0800411d
 80040b8:	08004099 	.word	0x08004099
 80040bc:	08004099 	.word	0x08004099
 80040c0:	08004099 	.word	0x08004099
 80040c4:	08004099 	.word	0x08004099
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	08004099 	.word	0x08004099
 80040d0:	08004099 	.word	0x08004099
 80040d4:	08004099 	.word	0x08004099
 80040d8:	08004099 	.word	0x08004099
 80040dc:	08004221 	.word	0x08004221
 80040e0:	08004149 	.word	0x08004149
 80040e4:	080041db 	.word	0x080041db
 80040e8:	08004099 	.word	0x08004099
 80040ec:	08004099 	.word	0x08004099
 80040f0:	08004243 	.word	0x08004243
 80040f4:	08004099 	.word	0x08004099
 80040f8:	08004149 	.word	0x08004149
 80040fc:	08004099 	.word	0x08004099
 8004100:	08004099 	.word	0x08004099
 8004104:	080041e3 	.word	0x080041e3
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	1d1a      	adds	r2, r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	602a      	str	r2, [r5, #0]
 8004110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004118:	2301      	movs	r3, #1
 800411a:	e09f      	b.n	800425c <_printf_i+0x1ec>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	0607      	lsls	r7, r0, #24
 8004122:	f103 0104 	add.w	r1, r3, #4
 8004126:	6029      	str	r1, [r5, #0]
 8004128:	d501      	bpl.n	800412e <_printf_i+0xbe>
 800412a:	681e      	ldr	r6, [r3, #0]
 800412c:	e003      	b.n	8004136 <_printf_i+0xc6>
 800412e:	0646      	lsls	r6, r0, #25
 8004130:	d5fb      	bpl.n	800412a <_printf_i+0xba>
 8004132:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004136:	2e00      	cmp	r6, #0
 8004138:	da03      	bge.n	8004142 <_printf_i+0xd2>
 800413a:	232d      	movs	r3, #45	; 0x2d
 800413c:	4276      	negs	r6, r6
 800413e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004142:	485a      	ldr	r0, [pc, #360]	; (80042ac <_printf_i+0x23c>)
 8004144:	230a      	movs	r3, #10
 8004146:	e012      	b.n	800416e <_printf_i+0xfe>
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	6820      	ldr	r0, [r4, #0]
 800414c:	1d19      	adds	r1, r3, #4
 800414e:	6029      	str	r1, [r5, #0]
 8004150:	0605      	lsls	r5, r0, #24
 8004152:	d501      	bpl.n	8004158 <_printf_i+0xe8>
 8004154:	681e      	ldr	r6, [r3, #0]
 8004156:	e002      	b.n	800415e <_printf_i+0xee>
 8004158:	0641      	lsls	r1, r0, #25
 800415a:	d5fb      	bpl.n	8004154 <_printf_i+0xe4>
 800415c:	881e      	ldrh	r6, [r3, #0]
 800415e:	4853      	ldr	r0, [pc, #332]	; (80042ac <_printf_i+0x23c>)
 8004160:	2f6f      	cmp	r7, #111	; 0x6f
 8004162:	bf0c      	ite	eq
 8004164:	2308      	moveq	r3, #8
 8004166:	230a      	movne	r3, #10
 8004168:	2100      	movs	r1, #0
 800416a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800416e:	6865      	ldr	r5, [r4, #4]
 8004170:	60a5      	str	r5, [r4, #8]
 8004172:	2d00      	cmp	r5, #0
 8004174:	bfa2      	ittt	ge
 8004176:	6821      	ldrge	r1, [r4, #0]
 8004178:	f021 0104 	bicge.w	r1, r1, #4
 800417c:	6021      	strge	r1, [r4, #0]
 800417e:	b90e      	cbnz	r6, 8004184 <_printf_i+0x114>
 8004180:	2d00      	cmp	r5, #0
 8004182:	d04b      	beq.n	800421c <_printf_i+0x1ac>
 8004184:	4615      	mov	r5, r2
 8004186:	fbb6 f1f3 	udiv	r1, r6, r3
 800418a:	fb03 6711 	mls	r7, r3, r1, r6
 800418e:	5dc7      	ldrb	r7, [r0, r7]
 8004190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004194:	4637      	mov	r7, r6
 8004196:	42bb      	cmp	r3, r7
 8004198:	460e      	mov	r6, r1
 800419a:	d9f4      	bls.n	8004186 <_printf_i+0x116>
 800419c:	2b08      	cmp	r3, #8
 800419e:	d10b      	bne.n	80041b8 <_printf_i+0x148>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	07de      	lsls	r6, r3, #31
 80041a4:	d508      	bpl.n	80041b8 <_printf_i+0x148>
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	6861      	ldr	r1, [r4, #4]
 80041aa:	4299      	cmp	r1, r3
 80041ac:	bfde      	ittt	le
 80041ae:	2330      	movle	r3, #48	; 0x30
 80041b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80041b8:	1b52      	subs	r2, r2, r5
 80041ba:	6122      	str	r2, [r4, #16]
 80041bc:	f8cd a000 	str.w	sl, [sp]
 80041c0:	464b      	mov	r3, r9
 80041c2:	aa03      	add	r2, sp, #12
 80041c4:	4621      	mov	r1, r4
 80041c6:	4640      	mov	r0, r8
 80041c8:	f7ff fee4 	bl	8003f94 <_printf_common>
 80041cc:	3001      	adds	r0, #1
 80041ce:	d14a      	bne.n	8004266 <_printf_i+0x1f6>
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d4:	b004      	add	sp, #16
 80041d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	f043 0320 	orr.w	r3, r3, #32
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	4833      	ldr	r0, [pc, #204]	; (80042b0 <_printf_i+0x240>)
 80041e4:	2778      	movs	r7, #120	; 0x78
 80041e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	6829      	ldr	r1, [r5, #0]
 80041ee:	061f      	lsls	r7, r3, #24
 80041f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80041f4:	d402      	bmi.n	80041fc <_printf_i+0x18c>
 80041f6:	065f      	lsls	r7, r3, #25
 80041f8:	bf48      	it	mi
 80041fa:	b2b6      	uxthmi	r6, r6
 80041fc:	07df      	lsls	r7, r3, #31
 80041fe:	bf48      	it	mi
 8004200:	f043 0320 	orrmi.w	r3, r3, #32
 8004204:	6029      	str	r1, [r5, #0]
 8004206:	bf48      	it	mi
 8004208:	6023      	strmi	r3, [r4, #0]
 800420a:	b91e      	cbnz	r6, 8004214 <_printf_i+0x1a4>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	f023 0320 	bic.w	r3, r3, #32
 8004212:	6023      	str	r3, [r4, #0]
 8004214:	2310      	movs	r3, #16
 8004216:	e7a7      	b.n	8004168 <_printf_i+0xf8>
 8004218:	4824      	ldr	r0, [pc, #144]	; (80042ac <_printf_i+0x23c>)
 800421a:	e7e4      	b.n	80041e6 <_printf_i+0x176>
 800421c:	4615      	mov	r5, r2
 800421e:	e7bd      	b.n	800419c <_printf_i+0x12c>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	6826      	ldr	r6, [r4, #0]
 8004224:	6961      	ldr	r1, [r4, #20]
 8004226:	1d18      	adds	r0, r3, #4
 8004228:	6028      	str	r0, [r5, #0]
 800422a:	0635      	lsls	r5, r6, #24
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	d501      	bpl.n	8004234 <_printf_i+0x1c4>
 8004230:	6019      	str	r1, [r3, #0]
 8004232:	e002      	b.n	800423a <_printf_i+0x1ca>
 8004234:	0670      	lsls	r0, r6, #25
 8004236:	d5fb      	bpl.n	8004230 <_printf_i+0x1c0>
 8004238:	8019      	strh	r1, [r3, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	4615      	mov	r5, r2
 8004240:	e7bc      	b.n	80041bc <_printf_i+0x14c>
 8004242:	682b      	ldr	r3, [r5, #0]
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	602a      	str	r2, [r5, #0]
 8004248:	681d      	ldr	r5, [r3, #0]
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	2100      	movs	r1, #0
 800424e:	4628      	mov	r0, r5
 8004250:	f7fb ffae 	bl	80001b0 <memchr>
 8004254:	b108      	cbz	r0, 800425a <_printf_i+0x1ea>
 8004256:	1b40      	subs	r0, r0, r5
 8004258:	6060      	str	r0, [r4, #4]
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	6123      	str	r3, [r4, #16]
 800425e:	2300      	movs	r3, #0
 8004260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004264:	e7aa      	b.n	80041bc <_printf_i+0x14c>
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	462a      	mov	r2, r5
 800426a:	4649      	mov	r1, r9
 800426c:	4640      	mov	r0, r8
 800426e:	47d0      	blx	sl
 8004270:	3001      	adds	r0, #1
 8004272:	d0ad      	beq.n	80041d0 <_printf_i+0x160>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	079b      	lsls	r3, r3, #30
 8004278:	d413      	bmi.n	80042a2 <_printf_i+0x232>
 800427a:	68e0      	ldr	r0, [r4, #12]
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	4298      	cmp	r0, r3
 8004280:	bfb8      	it	lt
 8004282:	4618      	movlt	r0, r3
 8004284:	e7a6      	b.n	80041d4 <_printf_i+0x164>
 8004286:	2301      	movs	r3, #1
 8004288:	4632      	mov	r2, r6
 800428a:	4649      	mov	r1, r9
 800428c:	4640      	mov	r0, r8
 800428e:	47d0      	blx	sl
 8004290:	3001      	adds	r0, #1
 8004292:	d09d      	beq.n	80041d0 <_printf_i+0x160>
 8004294:	3501      	adds	r5, #1
 8004296:	68e3      	ldr	r3, [r4, #12]
 8004298:	9903      	ldr	r1, [sp, #12]
 800429a:	1a5b      	subs	r3, r3, r1
 800429c:	42ab      	cmp	r3, r5
 800429e:	dcf2      	bgt.n	8004286 <_printf_i+0x216>
 80042a0:	e7eb      	b.n	800427a <_printf_i+0x20a>
 80042a2:	2500      	movs	r5, #0
 80042a4:	f104 0619 	add.w	r6, r4, #25
 80042a8:	e7f5      	b.n	8004296 <_printf_i+0x226>
 80042aa:	bf00      	nop
 80042ac:	0800567c 	.word	0x0800567c
 80042b0:	0800568d 	.word	0x0800568d

080042b4 <_scanf_chars>:
 80042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b8:	4615      	mov	r5, r2
 80042ba:	688a      	ldr	r2, [r1, #8]
 80042bc:	4680      	mov	r8, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	b932      	cbnz	r2, 80042d0 <_scanf_chars+0x1c>
 80042c2:	698a      	ldr	r2, [r1, #24]
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	bf0c      	ite	eq
 80042c8:	2201      	moveq	r2, #1
 80042ca:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80042ce:	608a      	str	r2, [r1, #8]
 80042d0:	6822      	ldr	r2, [r4, #0]
 80042d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004364 <_scanf_chars+0xb0>
 80042d6:	06d1      	lsls	r1, r2, #27
 80042d8:	bf5f      	itttt	pl
 80042da:	681a      	ldrpl	r2, [r3, #0]
 80042dc:	1d11      	addpl	r1, r2, #4
 80042de:	6019      	strpl	r1, [r3, #0]
 80042e0:	6816      	ldrpl	r6, [r2, #0]
 80042e2:	2700      	movs	r7, #0
 80042e4:	69a0      	ldr	r0, [r4, #24]
 80042e6:	b188      	cbz	r0, 800430c <_scanf_chars+0x58>
 80042e8:	2801      	cmp	r0, #1
 80042ea:	d107      	bne.n	80042fc <_scanf_chars+0x48>
 80042ec:	682a      	ldr	r2, [r5, #0]
 80042ee:	7811      	ldrb	r1, [r2, #0]
 80042f0:	6962      	ldr	r2, [r4, #20]
 80042f2:	5c52      	ldrb	r2, [r2, r1]
 80042f4:	b952      	cbnz	r2, 800430c <_scanf_chars+0x58>
 80042f6:	2f00      	cmp	r7, #0
 80042f8:	d031      	beq.n	800435e <_scanf_chars+0xaa>
 80042fa:	e022      	b.n	8004342 <_scanf_chars+0x8e>
 80042fc:	2802      	cmp	r0, #2
 80042fe:	d120      	bne.n	8004342 <_scanf_chars+0x8e>
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004308:	071b      	lsls	r3, r3, #28
 800430a:	d41a      	bmi.n	8004342 <_scanf_chars+0x8e>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	06da      	lsls	r2, r3, #27
 8004310:	bf5e      	ittt	pl
 8004312:	682b      	ldrpl	r3, [r5, #0]
 8004314:	781b      	ldrbpl	r3, [r3, #0]
 8004316:	f806 3b01 	strbpl.w	r3, [r6], #1
 800431a:	682a      	ldr	r2, [r5, #0]
 800431c:	686b      	ldr	r3, [r5, #4]
 800431e:	3201      	adds	r2, #1
 8004320:	602a      	str	r2, [r5, #0]
 8004322:	68a2      	ldr	r2, [r4, #8]
 8004324:	3b01      	subs	r3, #1
 8004326:	3a01      	subs	r2, #1
 8004328:	606b      	str	r3, [r5, #4]
 800432a:	3701      	adds	r7, #1
 800432c:	60a2      	str	r2, [r4, #8]
 800432e:	b142      	cbz	r2, 8004342 <_scanf_chars+0x8e>
 8004330:	2b00      	cmp	r3, #0
 8004332:	dcd7      	bgt.n	80042e4 <_scanf_chars+0x30>
 8004334:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004338:	4629      	mov	r1, r5
 800433a:	4640      	mov	r0, r8
 800433c:	4798      	blx	r3
 800433e:	2800      	cmp	r0, #0
 8004340:	d0d0      	beq.n	80042e4 <_scanf_chars+0x30>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	f013 0310 	ands.w	r3, r3, #16
 8004348:	d105      	bne.n	8004356 <_scanf_chars+0xa2>
 800434a:	68e2      	ldr	r2, [r4, #12]
 800434c:	3201      	adds	r2, #1
 800434e:	60e2      	str	r2, [r4, #12]
 8004350:	69a2      	ldr	r2, [r4, #24]
 8004352:	b102      	cbz	r2, 8004356 <_scanf_chars+0xa2>
 8004354:	7033      	strb	r3, [r6, #0]
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	443b      	add	r3, r7
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	2000      	movs	r0, #0
 800435e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004362:	bf00      	nop
 8004364:	080056ba 	.word	0x080056ba

08004368 <_scanf_i>:
 8004368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	4698      	mov	r8, r3
 800436e:	4b74      	ldr	r3, [pc, #464]	; (8004540 <_scanf_i+0x1d8>)
 8004370:	460c      	mov	r4, r1
 8004372:	4682      	mov	sl, r0
 8004374:	4616      	mov	r6, r2
 8004376:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800437a:	b087      	sub	sp, #28
 800437c:	ab03      	add	r3, sp, #12
 800437e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004382:	4b70      	ldr	r3, [pc, #448]	; (8004544 <_scanf_i+0x1dc>)
 8004384:	69a1      	ldr	r1, [r4, #24]
 8004386:	4a70      	ldr	r2, [pc, #448]	; (8004548 <_scanf_i+0x1e0>)
 8004388:	2903      	cmp	r1, #3
 800438a:	bf18      	it	ne
 800438c:	461a      	movne	r2, r3
 800438e:	68a3      	ldr	r3, [r4, #8]
 8004390:	9201      	str	r2, [sp, #4]
 8004392:	1e5a      	subs	r2, r3, #1
 8004394:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004398:	bf88      	it	hi
 800439a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800439e:	4627      	mov	r7, r4
 80043a0:	bf82      	ittt	hi
 80043a2:	eb03 0905 	addhi.w	r9, r3, r5
 80043a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80043aa:	60a3      	strhi	r3, [r4, #8]
 80043ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80043b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80043b4:	bf98      	it	ls
 80043b6:	f04f 0900 	movls.w	r9, #0
 80043ba:	6023      	str	r3, [r4, #0]
 80043bc:	463d      	mov	r5, r7
 80043be:	f04f 0b00 	mov.w	fp, #0
 80043c2:	6831      	ldr	r1, [r6, #0]
 80043c4:	ab03      	add	r3, sp, #12
 80043c6:	7809      	ldrb	r1, [r1, #0]
 80043c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f7fb feef 	bl	80001b0 <memchr>
 80043d2:	b328      	cbz	r0, 8004420 <_scanf_i+0xb8>
 80043d4:	f1bb 0f01 	cmp.w	fp, #1
 80043d8:	d159      	bne.n	800448e <_scanf_i+0x126>
 80043da:	6862      	ldr	r2, [r4, #4]
 80043dc:	b92a      	cbnz	r2, 80043ea <_scanf_i+0x82>
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	2308      	movs	r3, #8
 80043e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e6:	6063      	str	r3, [r4, #4]
 80043e8:	6022      	str	r2, [r4, #0]
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80043f0:	6022      	str	r2, [r4, #0]
 80043f2:	68a2      	ldr	r2, [r4, #8]
 80043f4:	1e51      	subs	r1, r2, #1
 80043f6:	60a1      	str	r1, [r4, #8]
 80043f8:	b192      	cbz	r2, 8004420 <_scanf_i+0xb8>
 80043fa:	6832      	ldr	r2, [r6, #0]
 80043fc:	1c51      	adds	r1, r2, #1
 80043fe:	6031      	str	r1, [r6, #0]
 8004400:	7812      	ldrb	r2, [r2, #0]
 8004402:	f805 2b01 	strb.w	r2, [r5], #1
 8004406:	6872      	ldr	r2, [r6, #4]
 8004408:	3a01      	subs	r2, #1
 800440a:	2a00      	cmp	r2, #0
 800440c:	6072      	str	r2, [r6, #4]
 800440e:	dc07      	bgt.n	8004420 <_scanf_i+0xb8>
 8004410:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004414:	4631      	mov	r1, r6
 8004416:	4650      	mov	r0, sl
 8004418:	4790      	blx	r2
 800441a:	2800      	cmp	r0, #0
 800441c:	f040 8085 	bne.w	800452a <_scanf_i+0x1c2>
 8004420:	f10b 0b01 	add.w	fp, fp, #1
 8004424:	f1bb 0f03 	cmp.w	fp, #3
 8004428:	d1cb      	bne.n	80043c2 <_scanf_i+0x5a>
 800442a:	6863      	ldr	r3, [r4, #4]
 800442c:	b90b      	cbnz	r3, 8004432 <_scanf_i+0xca>
 800442e:	230a      	movs	r3, #10
 8004430:	6063      	str	r3, [r4, #4]
 8004432:	6863      	ldr	r3, [r4, #4]
 8004434:	4945      	ldr	r1, [pc, #276]	; (800454c <_scanf_i+0x1e4>)
 8004436:	6960      	ldr	r0, [r4, #20]
 8004438:	1ac9      	subs	r1, r1, r3
 800443a:	f000 f89b 	bl	8004574 <__sccl>
 800443e:	f04f 0b00 	mov.w	fp, #0
 8004442:	68a3      	ldr	r3, [r4, #8]
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03d      	beq.n	80044c6 <_scanf_i+0x15e>
 800444a:	6831      	ldr	r1, [r6, #0]
 800444c:	6960      	ldr	r0, [r4, #20]
 800444e:	f891 c000 	ldrb.w	ip, [r1]
 8004452:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004456:	2800      	cmp	r0, #0
 8004458:	d035      	beq.n	80044c6 <_scanf_i+0x15e>
 800445a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800445e:	d124      	bne.n	80044aa <_scanf_i+0x142>
 8004460:	0510      	lsls	r0, r2, #20
 8004462:	d522      	bpl.n	80044aa <_scanf_i+0x142>
 8004464:	f10b 0b01 	add.w	fp, fp, #1
 8004468:	f1b9 0f00 	cmp.w	r9, #0
 800446c:	d003      	beq.n	8004476 <_scanf_i+0x10e>
 800446e:	3301      	adds	r3, #1
 8004470:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004474:	60a3      	str	r3, [r4, #8]
 8004476:	6873      	ldr	r3, [r6, #4]
 8004478:	3b01      	subs	r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	6073      	str	r3, [r6, #4]
 800447e:	dd1b      	ble.n	80044b8 <_scanf_i+0x150>
 8004480:	6833      	ldr	r3, [r6, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	6033      	str	r3, [r6, #0]
 8004486:	68a3      	ldr	r3, [r4, #8]
 8004488:	3b01      	subs	r3, #1
 800448a:	60a3      	str	r3, [r4, #8]
 800448c:	e7d9      	b.n	8004442 <_scanf_i+0xda>
 800448e:	f1bb 0f02 	cmp.w	fp, #2
 8004492:	d1ae      	bne.n	80043f2 <_scanf_i+0x8a>
 8004494:	6822      	ldr	r2, [r4, #0]
 8004496:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800449a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800449e:	d1bf      	bne.n	8004420 <_scanf_i+0xb8>
 80044a0:	2310      	movs	r3, #16
 80044a2:	6063      	str	r3, [r4, #4]
 80044a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a8:	e7a2      	b.n	80043f0 <_scanf_i+0x88>
 80044aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80044ae:	6022      	str	r2, [r4, #0]
 80044b0:	780b      	ldrb	r3, [r1, #0]
 80044b2:	f805 3b01 	strb.w	r3, [r5], #1
 80044b6:	e7de      	b.n	8004476 <_scanf_i+0x10e>
 80044b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80044bc:	4631      	mov	r1, r6
 80044be:	4650      	mov	r0, sl
 80044c0:	4798      	blx	r3
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d0df      	beq.n	8004486 <_scanf_i+0x11e>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	05d9      	lsls	r1, r3, #23
 80044ca:	d50d      	bpl.n	80044e8 <_scanf_i+0x180>
 80044cc:	42bd      	cmp	r5, r7
 80044ce:	d909      	bls.n	80044e4 <_scanf_i+0x17c>
 80044d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80044d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044d8:	4632      	mov	r2, r6
 80044da:	4650      	mov	r0, sl
 80044dc:	4798      	blx	r3
 80044de:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80044e2:	464d      	mov	r5, r9
 80044e4:	42bd      	cmp	r5, r7
 80044e6:	d028      	beq.n	800453a <_scanf_i+0x1d2>
 80044e8:	6822      	ldr	r2, [r4, #0]
 80044ea:	f012 0210 	ands.w	r2, r2, #16
 80044ee:	d113      	bne.n	8004518 <_scanf_i+0x1b0>
 80044f0:	702a      	strb	r2, [r5, #0]
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	9e01      	ldr	r6, [sp, #4]
 80044f6:	4639      	mov	r1, r7
 80044f8:	4650      	mov	r0, sl
 80044fa:	47b0      	blx	r6
 80044fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004500:	6821      	ldr	r1, [r4, #0]
 8004502:	1d1a      	adds	r2, r3, #4
 8004504:	f8c8 2000 	str.w	r2, [r8]
 8004508:	f011 0f20 	tst.w	r1, #32
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	d00f      	beq.n	8004530 <_scanf_i+0x1c8>
 8004510:	6018      	str	r0, [r3, #0]
 8004512:	68e3      	ldr	r3, [r4, #12]
 8004514:	3301      	adds	r3, #1
 8004516:	60e3      	str	r3, [r4, #12]
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	1bed      	subs	r5, r5, r7
 800451c:	445d      	add	r5, fp
 800451e:	442b      	add	r3, r5
 8004520:	6123      	str	r3, [r4, #16]
 8004522:	2000      	movs	r0, #0
 8004524:	b007      	add	sp, #28
 8004526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452a:	f04f 0b00 	mov.w	fp, #0
 800452e:	e7ca      	b.n	80044c6 <_scanf_i+0x15e>
 8004530:	07ca      	lsls	r2, r1, #31
 8004532:	bf4c      	ite	mi
 8004534:	8018      	strhmi	r0, [r3, #0]
 8004536:	6018      	strpl	r0, [r3, #0]
 8004538:	e7eb      	b.n	8004512 <_scanf_i+0x1aa>
 800453a:	2001      	movs	r0, #1
 800453c:	e7f2      	b.n	8004524 <_scanf_i+0x1bc>
 800453e:	bf00      	nop
 8004540:	08004f1c 	.word	0x08004f1c
 8004544:	0800485d 	.word	0x0800485d
 8004548:	08004775 	.word	0x08004775
 800454c:	080056ae 	.word	0x080056ae

08004550 <_read_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4d07      	ldr	r5, [pc, #28]	; (8004570 <_read_r+0x20>)
 8004554:	4604      	mov	r4, r0
 8004556:	4608      	mov	r0, r1
 8004558:	4611      	mov	r1, r2
 800455a:	2200      	movs	r2, #0
 800455c:	602a      	str	r2, [r5, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	f000 fa12 	bl	8004988 <_read>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_read_r+0x1e>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_read_r+0x1e>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	20000d14 	.word	0x20000d14

08004574 <__sccl>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	780b      	ldrb	r3, [r1, #0]
 8004578:	4604      	mov	r4, r0
 800457a:	2b5e      	cmp	r3, #94	; 0x5e
 800457c:	bf0b      	itete	eq
 800457e:	784b      	ldrbeq	r3, [r1, #1]
 8004580:	1c4a      	addne	r2, r1, #1
 8004582:	1c8a      	addeq	r2, r1, #2
 8004584:	2100      	movne	r1, #0
 8004586:	bf08      	it	eq
 8004588:	2101      	moveq	r1, #1
 800458a:	3801      	subs	r0, #1
 800458c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004590:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004594:	42a8      	cmp	r0, r5
 8004596:	d1fb      	bne.n	8004590 <__sccl+0x1c>
 8004598:	b90b      	cbnz	r3, 800459e <__sccl+0x2a>
 800459a:	1e50      	subs	r0, r2, #1
 800459c:	bd70      	pop	{r4, r5, r6, pc}
 800459e:	f081 0101 	eor.w	r1, r1, #1
 80045a2:	54e1      	strb	r1, [r4, r3]
 80045a4:	4610      	mov	r0, r2
 80045a6:	4602      	mov	r2, r0
 80045a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80045ac:	2d2d      	cmp	r5, #45	; 0x2d
 80045ae:	d005      	beq.n	80045bc <__sccl+0x48>
 80045b0:	2d5d      	cmp	r5, #93	; 0x5d
 80045b2:	d016      	beq.n	80045e2 <__sccl+0x6e>
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	d0f1      	beq.n	800459c <__sccl+0x28>
 80045b8:	462b      	mov	r3, r5
 80045ba:	e7f2      	b.n	80045a2 <__sccl+0x2e>
 80045bc:	7846      	ldrb	r6, [r0, #1]
 80045be:	2e5d      	cmp	r6, #93	; 0x5d
 80045c0:	d0fa      	beq.n	80045b8 <__sccl+0x44>
 80045c2:	42b3      	cmp	r3, r6
 80045c4:	dcf8      	bgt.n	80045b8 <__sccl+0x44>
 80045c6:	3002      	adds	r0, #2
 80045c8:	461a      	mov	r2, r3
 80045ca:	3201      	adds	r2, #1
 80045cc:	4296      	cmp	r6, r2
 80045ce:	54a1      	strb	r1, [r4, r2]
 80045d0:	dcfb      	bgt.n	80045ca <__sccl+0x56>
 80045d2:	1af2      	subs	r2, r6, r3
 80045d4:	3a01      	subs	r2, #1
 80045d6:	1c5d      	adds	r5, r3, #1
 80045d8:	42b3      	cmp	r3, r6
 80045da:	bfa8      	it	ge
 80045dc:	2200      	movge	r2, #0
 80045de:	18ab      	adds	r3, r5, r2
 80045e0:	e7e1      	b.n	80045a6 <__sccl+0x32>
 80045e2:	4610      	mov	r0, r2
 80045e4:	e7da      	b.n	800459c <__sccl+0x28>

080045e6 <_raise_r>:
 80045e6:	291f      	cmp	r1, #31
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4604      	mov	r4, r0
 80045ec:	460d      	mov	r5, r1
 80045ee:	d904      	bls.n	80045fa <_raise_r+0x14>
 80045f0:	2316      	movs	r3, #22
 80045f2:	6003      	str	r3, [r0, #0]
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045f8:	bd38      	pop	{r3, r4, r5, pc}
 80045fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80045fc:	b112      	cbz	r2, 8004604 <_raise_r+0x1e>
 80045fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004602:	b94b      	cbnz	r3, 8004618 <_raise_r+0x32>
 8004604:	4620      	mov	r0, r4
 8004606:	f000 f831 	bl	800466c <_getpid_r>
 800460a:	462a      	mov	r2, r5
 800460c:	4601      	mov	r1, r0
 800460e:	4620      	mov	r0, r4
 8004610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004614:	f000 b818 	b.w	8004648 <_kill_r>
 8004618:	2b01      	cmp	r3, #1
 800461a:	d00a      	beq.n	8004632 <_raise_r+0x4c>
 800461c:	1c59      	adds	r1, r3, #1
 800461e:	d103      	bne.n	8004628 <_raise_r+0x42>
 8004620:	2316      	movs	r3, #22
 8004622:	6003      	str	r3, [r0, #0]
 8004624:	2001      	movs	r0, #1
 8004626:	e7e7      	b.n	80045f8 <_raise_r+0x12>
 8004628:	2400      	movs	r4, #0
 800462a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800462e:	4628      	mov	r0, r5
 8004630:	4798      	blx	r3
 8004632:	2000      	movs	r0, #0
 8004634:	e7e0      	b.n	80045f8 <_raise_r+0x12>
	...

08004638 <raise>:
 8004638:	4b02      	ldr	r3, [pc, #8]	; (8004644 <raise+0xc>)
 800463a:	4601      	mov	r1, r0
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	f7ff bfd2 	b.w	80045e6 <_raise_r>
 8004642:	bf00      	nop
 8004644:	20000064 	.word	0x20000064

08004648 <_kill_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d07      	ldr	r5, [pc, #28]	; (8004668 <_kill_r+0x20>)
 800464c:	2300      	movs	r3, #0
 800464e:	4604      	mov	r4, r0
 8004650:	4608      	mov	r0, r1
 8004652:	4611      	mov	r1, r2
 8004654:	602b      	str	r3, [r5, #0]
 8004656:	f000 f987 	bl	8004968 <_kill>
 800465a:	1c43      	adds	r3, r0, #1
 800465c:	d102      	bne.n	8004664 <_kill_r+0x1c>
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	b103      	cbz	r3, 8004664 <_kill_r+0x1c>
 8004662:	6023      	str	r3, [r4, #0]
 8004664:	bd38      	pop	{r3, r4, r5, pc}
 8004666:	bf00      	nop
 8004668:	20000d14 	.word	0x20000d14

0800466c <_getpid_r>:
 800466c:	f000 b96c 	b.w	8004948 <_getpid>

08004670 <_strtol_l.constprop.0>:
 8004670:	2b01      	cmp	r3, #1
 8004672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004676:	d001      	beq.n	800467c <_strtol_l.constprop.0+0xc>
 8004678:	2b24      	cmp	r3, #36	; 0x24
 800467a:	d906      	bls.n	800468a <_strtol_l.constprop.0+0x1a>
 800467c:	f7fe f8c2 	bl	8002804 <__errno>
 8004680:	2316      	movs	r3, #22
 8004682:	6003      	str	r3, [r0, #0]
 8004684:	2000      	movs	r0, #0
 8004686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004770 <_strtol_l.constprop.0+0x100>
 800468e:	460d      	mov	r5, r1
 8004690:	462e      	mov	r6, r5
 8004692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004696:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800469a:	f017 0708 	ands.w	r7, r7, #8
 800469e:	d1f7      	bne.n	8004690 <_strtol_l.constprop.0+0x20>
 80046a0:	2c2d      	cmp	r4, #45	; 0x2d
 80046a2:	d132      	bne.n	800470a <_strtol_l.constprop.0+0x9a>
 80046a4:	782c      	ldrb	r4, [r5, #0]
 80046a6:	2701      	movs	r7, #1
 80046a8:	1cb5      	adds	r5, r6, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d05b      	beq.n	8004766 <_strtol_l.constprop.0+0xf6>
 80046ae:	2b10      	cmp	r3, #16
 80046b0:	d109      	bne.n	80046c6 <_strtol_l.constprop.0+0x56>
 80046b2:	2c30      	cmp	r4, #48	; 0x30
 80046b4:	d107      	bne.n	80046c6 <_strtol_l.constprop.0+0x56>
 80046b6:	782c      	ldrb	r4, [r5, #0]
 80046b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80046bc:	2c58      	cmp	r4, #88	; 0x58
 80046be:	d14d      	bne.n	800475c <_strtol_l.constprop.0+0xec>
 80046c0:	786c      	ldrb	r4, [r5, #1]
 80046c2:	2310      	movs	r3, #16
 80046c4:	3502      	adds	r5, #2
 80046c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80046ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80046ce:	f04f 0e00 	mov.w	lr, #0
 80046d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80046d6:	4676      	mov	r6, lr
 80046d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80046dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80046e0:	f1bc 0f09 	cmp.w	ip, #9
 80046e4:	d816      	bhi.n	8004714 <_strtol_l.constprop.0+0xa4>
 80046e6:	4664      	mov	r4, ip
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	dd24      	ble.n	8004736 <_strtol_l.constprop.0+0xc6>
 80046ec:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80046f0:	d008      	beq.n	8004704 <_strtol_l.constprop.0+0x94>
 80046f2:	45b1      	cmp	r9, r6
 80046f4:	d31c      	bcc.n	8004730 <_strtol_l.constprop.0+0xc0>
 80046f6:	d101      	bne.n	80046fc <_strtol_l.constprop.0+0x8c>
 80046f8:	45a2      	cmp	sl, r4
 80046fa:	db19      	blt.n	8004730 <_strtol_l.constprop.0+0xc0>
 80046fc:	fb06 4603 	mla	r6, r6, r3, r4
 8004700:	f04f 0e01 	mov.w	lr, #1
 8004704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004708:	e7e8      	b.n	80046dc <_strtol_l.constprop.0+0x6c>
 800470a:	2c2b      	cmp	r4, #43	; 0x2b
 800470c:	bf04      	itt	eq
 800470e:	782c      	ldrbeq	r4, [r5, #0]
 8004710:	1cb5      	addeq	r5, r6, #2
 8004712:	e7ca      	b.n	80046aa <_strtol_l.constprop.0+0x3a>
 8004714:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004718:	f1bc 0f19 	cmp.w	ip, #25
 800471c:	d801      	bhi.n	8004722 <_strtol_l.constprop.0+0xb2>
 800471e:	3c37      	subs	r4, #55	; 0x37
 8004720:	e7e2      	b.n	80046e8 <_strtol_l.constprop.0+0x78>
 8004722:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004726:	f1bc 0f19 	cmp.w	ip, #25
 800472a:	d804      	bhi.n	8004736 <_strtol_l.constprop.0+0xc6>
 800472c:	3c57      	subs	r4, #87	; 0x57
 800472e:	e7db      	b.n	80046e8 <_strtol_l.constprop.0+0x78>
 8004730:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004734:	e7e6      	b.n	8004704 <_strtol_l.constprop.0+0x94>
 8004736:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800473a:	d105      	bne.n	8004748 <_strtol_l.constprop.0+0xd8>
 800473c:	2322      	movs	r3, #34	; 0x22
 800473e:	6003      	str	r3, [r0, #0]
 8004740:	4646      	mov	r6, r8
 8004742:	b942      	cbnz	r2, 8004756 <_strtol_l.constprop.0+0xe6>
 8004744:	4630      	mov	r0, r6
 8004746:	e79e      	b.n	8004686 <_strtol_l.constprop.0+0x16>
 8004748:	b107      	cbz	r7, 800474c <_strtol_l.constprop.0+0xdc>
 800474a:	4276      	negs	r6, r6
 800474c:	2a00      	cmp	r2, #0
 800474e:	d0f9      	beq.n	8004744 <_strtol_l.constprop.0+0xd4>
 8004750:	f1be 0f00 	cmp.w	lr, #0
 8004754:	d000      	beq.n	8004758 <_strtol_l.constprop.0+0xe8>
 8004756:	1e69      	subs	r1, r5, #1
 8004758:	6011      	str	r1, [r2, #0]
 800475a:	e7f3      	b.n	8004744 <_strtol_l.constprop.0+0xd4>
 800475c:	2430      	movs	r4, #48	; 0x30
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1b1      	bne.n	80046c6 <_strtol_l.constprop.0+0x56>
 8004762:	2308      	movs	r3, #8
 8004764:	e7af      	b.n	80046c6 <_strtol_l.constprop.0+0x56>
 8004766:	2c30      	cmp	r4, #48	; 0x30
 8004768:	d0a5      	beq.n	80046b6 <_strtol_l.constprop.0+0x46>
 800476a:	230a      	movs	r3, #10
 800476c:	e7ab      	b.n	80046c6 <_strtol_l.constprop.0+0x56>
 800476e:	bf00      	nop
 8004770:	080056ba 	.word	0x080056ba

08004774 <_strtol_r>:
 8004774:	f7ff bf7c 	b.w	8004670 <_strtol_l.constprop.0>

08004778 <_strtoul_l.constprop.0>:
 8004778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800477c:	4f36      	ldr	r7, [pc, #216]	; (8004858 <_strtoul_l.constprop.0+0xe0>)
 800477e:	4686      	mov	lr, r0
 8004780:	460d      	mov	r5, r1
 8004782:	4628      	mov	r0, r5
 8004784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004788:	5d3e      	ldrb	r6, [r7, r4]
 800478a:	f016 0608 	ands.w	r6, r6, #8
 800478e:	d1f8      	bne.n	8004782 <_strtoul_l.constprop.0+0xa>
 8004790:	2c2d      	cmp	r4, #45	; 0x2d
 8004792:	d130      	bne.n	80047f6 <_strtoul_l.constprop.0+0x7e>
 8004794:	782c      	ldrb	r4, [r5, #0]
 8004796:	2601      	movs	r6, #1
 8004798:	1c85      	adds	r5, r0, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d057      	beq.n	800484e <_strtoul_l.constprop.0+0xd6>
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d109      	bne.n	80047b6 <_strtoul_l.constprop.0+0x3e>
 80047a2:	2c30      	cmp	r4, #48	; 0x30
 80047a4:	d107      	bne.n	80047b6 <_strtoul_l.constprop.0+0x3e>
 80047a6:	7828      	ldrb	r0, [r5, #0]
 80047a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80047ac:	2858      	cmp	r0, #88	; 0x58
 80047ae:	d149      	bne.n	8004844 <_strtoul_l.constprop.0+0xcc>
 80047b0:	786c      	ldrb	r4, [r5, #1]
 80047b2:	2310      	movs	r3, #16
 80047b4:	3502      	adds	r5, #2
 80047b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80047ba:	2700      	movs	r7, #0
 80047bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80047c0:	fb03 f908 	mul.w	r9, r3, r8
 80047c4:	ea6f 0909 	mvn.w	r9, r9
 80047c8:	4638      	mov	r0, r7
 80047ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80047ce:	f1bc 0f09 	cmp.w	ip, #9
 80047d2:	d815      	bhi.n	8004800 <_strtoul_l.constprop.0+0x88>
 80047d4:	4664      	mov	r4, ip
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	dd23      	ble.n	8004822 <_strtoul_l.constprop.0+0xaa>
 80047da:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80047de:	d007      	beq.n	80047f0 <_strtoul_l.constprop.0+0x78>
 80047e0:	4580      	cmp	r8, r0
 80047e2:	d31b      	bcc.n	800481c <_strtoul_l.constprop.0+0xa4>
 80047e4:	d101      	bne.n	80047ea <_strtoul_l.constprop.0+0x72>
 80047e6:	45a1      	cmp	r9, r4
 80047e8:	db18      	blt.n	800481c <_strtoul_l.constprop.0+0xa4>
 80047ea:	fb00 4003 	mla	r0, r0, r3, r4
 80047ee:	2701      	movs	r7, #1
 80047f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047f4:	e7e9      	b.n	80047ca <_strtoul_l.constprop.0+0x52>
 80047f6:	2c2b      	cmp	r4, #43	; 0x2b
 80047f8:	bf04      	itt	eq
 80047fa:	782c      	ldrbeq	r4, [r5, #0]
 80047fc:	1c85      	addeq	r5, r0, #2
 80047fe:	e7cc      	b.n	800479a <_strtoul_l.constprop.0+0x22>
 8004800:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004804:	f1bc 0f19 	cmp.w	ip, #25
 8004808:	d801      	bhi.n	800480e <_strtoul_l.constprop.0+0x96>
 800480a:	3c37      	subs	r4, #55	; 0x37
 800480c:	e7e3      	b.n	80047d6 <_strtoul_l.constprop.0+0x5e>
 800480e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004812:	f1bc 0f19 	cmp.w	ip, #25
 8004816:	d804      	bhi.n	8004822 <_strtoul_l.constprop.0+0xaa>
 8004818:	3c57      	subs	r4, #87	; 0x57
 800481a:	e7dc      	b.n	80047d6 <_strtoul_l.constprop.0+0x5e>
 800481c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004820:	e7e6      	b.n	80047f0 <_strtoul_l.constprop.0+0x78>
 8004822:	1c7b      	adds	r3, r7, #1
 8004824:	d106      	bne.n	8004834 <_strtoul_l.constprop.0+0xbc>
 8004826:	2322      	movs	r3, #34	; 0x22
 8004828:	f8ce 3000 	str.w	r3, [lr]
 800482c:	4638      	mov	r0, r7
 800482e:	b932      	cbnz	r2, 800483e <_strtoul_l.constprop.0+0xc6>
 8004830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004834:	b106      	cbz	r6, 8004838 <_strtoul_l.constprop.0+0xc0>
 8004836:	4240      	negs	r0, r0
 8004838:	2a00      	cmp	r2, #0
 800483a:	d0f9      	beq.n	8004830 <_strtoul_l.constprop.0+0xb8>
 800483c:	b107      	cbz	r7, 8004840 <_strtoul_l.constprop.0+0xc8>
 800483e:	1e69      	subs	r1, r5, #1
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	e7f5      	b.n	8004830 <_strtoul_l.constprop.0+0xb8>
 8004844:	2430      	movs	r4, #48	; 0x30
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1b5      	bne.n	80047b6 <_strtoul_l.constprop.0+0x3e>
 800484a:	2308      	movs	r3, #8
 800484c:	e7b3      	b.n	80047b6 <_strtoul_l.constprop.0+0x3e>
 800484e:	2c30      	cmp	r4, #48	; 0x30
 8004850:	d0a9      	beq.n	80047a6 <_strtoul_l.constprop.0+0x2e>
 8004852:	230a      	movs	r3, #10
 8004854:	e7af      	b.n	80047b6 <_strtoul_l.constprop.0+0x3e>
 8004856:	bf00      	nop
 8004858:	080056ba 	.word	0x080056ba

0800485c <_strtoul_r>:
 800485c:	f7ff bf8c 	b.w	8004778 <_strtoul_l.constprop.0>

08004860 <__submore>:
 8004860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004864:	460c      	mov	r4, r1
 8004866:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800486c:	4299      	cmp	r1, r3
 800486e:	d11d      	bne.n	80048ac <__submore+0x4c>
 8004870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004874:	f7fe f838 	bl	80028e8 <_malloc_r>
 8004878:	b918      	cbnz	r0, 8004882 <__submore+0x22>
 800487a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800487e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004886:	63a3      	str	r3, [r4, #56]	; 0x38
 8004888:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800488c:	6360      	str	r0, [r4, #52]	; 0x34
 800488e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004892:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004896:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800489a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800489e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80048a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80048a6:	6020      	str	r0, [r4, #0]
 80048a8:	2000      	movs	r0, #0
 80048aa:	e7e8      	b.n	800487e <__submore+0x1e>
 80048ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80048ae:	0077      	lsls	r7, r6, #1
 80048b0:	463a      	mov	r2, r7
 80048b2:	f7ff f815 	bl	80038e0 <_realloc_r>
 80048b6:	4605      	mov	r5, r0
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d0de      	beq.n	800487a <__submore+0x1a>
 80048bc:	eb00 0806 	add.w	r8, r0, r6
 80048c0:	4601      	mov	r1, r0
 80048c2:	4632      	mov	r2, r6
 80048c4:	4640      	mov	r0, r8
 80048c6:	f7fd ffd9 	bl	800287c <memcpy>
 80048ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80048ce:	f8c4 8000 	str.w	r8, [r4]
 80048d2:	e7e9      	b.n	80048a8 <__submore+0x48>

080048d4 <_fstat_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4d07      	ldr	r5, [pc, #28]	; (80048f4 <_fstat_r+0x20>)
 80048d8:	2300      	movs	r3, #0
 80048da:	4604      	mov	r4, r0
 80048dc:	4608      	mov	r0, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	602b      	str	r3, [r5, #0]
 80048e2:	f000 f829 	bl	8004938 <_fstat>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	d102      	bne.n	80048f0 <_fstat_r+0x1c>
 80048ea:	682b      	ldr	r3, [r5, #0]
 80048ec:	b103      	cbz	r3, 80048f0 <_fstat_r+0x1c>
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	bd38      	pop	{r3, r4, r5, pc}
 80048f2:	bf00      	nop
 80048f4:	20000d14 	.word	0x20000d14

080048f8 <_isatty_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4d06      	ldr	r5, [pc, #24]	; (8004914 <_isatty_r+0x1c>)
 80048fc:	2300      	movs	r3, #0
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	602b      	str	r3, [r5, #0]
 8004904:	f000 f828 	bl	8004958 <_isatty>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_isatty_r+0x1a>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_isatty_r+0x1a>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20000d14 	.word	0x20000d14

08004918 <_malloc_usable_size_r>:
 8004918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491c:	1f18      	subs	r0, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfbc      	itt	lt
 8004922:	580b      	ldrlt	r3, [r1, r0]
 8004924:	18c0      	addlt	r0, r0, r3
 8004926:	4770      	bx	lr

08004928 <_close>:
 8004928:	4b02      	ldr	r3, [pc, #8]	; (8004934 <_close+0xc>)
 800492a:	2258      	movs	r2, #88	; 0x58
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004932:	4770      	bx	lr
 8004934:	20000d14 	.word	0x20000d14

08004938 <_fstat>:
 8004938:	4b02      	ldr	r3, [pc, #8]	; (8004944 <_fstat+0xc>)
 800493a:	2258      	movs	r2, #88	; 0x58
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004942:	4770      	bx	lr
 8004944:	20000d14 	.word	0x20000d14

08004948 <_getpid>:
 8004948:	4b02      	ldr	r3, [pc, #8]	; (8004954 <_getpid+0xc>)
 800494a:	2258      	movs	r2, #88	; 0x58
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004952:	4770      	bx	lr
 8004954:	20000d14 	.word	0x20000d14

08004958 <_isatty>:
 8004958:	4b02      	ldr	r3, [pc, #8]	; (8004964 <_isatty+0xc>)
 800495a:	2258      	movs	r2, #88	; 0x58
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	2000      	movs	r0, #0
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000d14 	.word	0x20000d14

08004968 <_kill>:
 8004968:	4b02      	ldr	r3, [pc, #8]	; (8004974 <_kill+0xc>)
 800496a:	2258      	movs	r2, #88	; 0x58
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004972:	4770      	bx	lr
 8004974:	20000d14 	.word	0x20000d14

08004978 <_lseek>:
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <_lseek+0xc>)
 800497a:	2258      	movs	r2, #88	; 0x58
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004982:	4770      	bx	lr
 8004984:	20000d14 	.word	0x20000d14

08004988 <_read>:
 8004988:	4b02      	ldr	r3, [pc, #8]	; (8004994 <_read+0xc>)
 800498a:	2258      	movs	r2, #88	; 0x58
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004992:	4770      	bx	lr
 8004994:	20000d14 	.word	0x20000d14

08004998 <_sbrk>:
 8004998:	4a04      	ldr	r2, [pc, #16]	; (80049ac <_sbrk+0x14>)
 800499a:	4905      	ldr	r1, [pc, #20]	; (80049b0 <_sbrk+0x18>)
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bf08      	it	eq
 80049a2:	460b      	moveq	r3, r1
 80049a4:	4418      	add	r0, r3
 80049a6:	6010      	str	r0, [r2, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	4770      	bx	lr
 80049ac:	20000d18 	.word	0x20000d18
 80049b0:	20000d20 	.word	0x20000d20

080049b4 <_write>:
 80049b4:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <_write+0xc>)
 80049b6:	2258      	movs	r2, #88	; 0x58
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049be:	4770      	bx	lr
 80049c0:	20000d14 	.word	0x20000d14

080049c4 <_exit>:
 80049c4:	e7fe      	b.n	80049c4 <_exit>
 80049c6:	bf00      	nop

080049c8 <_init>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr

080049d4 <_fini>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr
